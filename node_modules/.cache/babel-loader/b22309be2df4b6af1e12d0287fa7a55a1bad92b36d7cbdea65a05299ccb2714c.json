{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar dns = require('dns');\nvar Netmask = require('netmask').Netmask;\n\n/**\n * Module exports.\n */\n\nmodule.exports = isInNet;\nisInNet.async = true;\n\n/**\n * True iff the IP address of the host matches the specified IP address pattern.\n *\n * Pattern and mask specification is done the same way as for SOCKS configuration.\n *\n * Examples:\n *\n * ``` js\n * isInNet(host, \"198.95.249.79\", \"255.255.255.255\")\n *   // is true iff the IP address of host matches exactly 198.95.249.79.\n *\n * isInNet(host, \"198.95.0.0\", \"255.255.0.0\")\n *   // is true iff the IP address of the host matches 198.95.*.*.\n * ```\n *\n * @param {String} host a DNS hostname, or IP address. If a hostname is passed,\n *   it will be resoved into an IP address by this function.\n * @param {String} pattern an IP address pattern in the dot-separated format mask.\n * @param {String} mask for the IP address pattern informing which parts of the\n *   IP address should be matched against. 0 means ignore, 255 means match.\n * @return {Boolean}\n */\n\nfunction isInNet(host, pattern, mask, fn) {\n  var family = 4;\n  dns.lookup(host, family, function (err, ip) {\n    if (err) return fn(err);\n    if (!ip) ip = '127.0.0.1';\n    var netmask = new Netmask(pattern, mask);\n    fn(null, netmask.contains(ip));\n  });\n}","map":{"version":3,"names":["dns","require","Netmask","module","exports","isInNet","async","host","pattern","mask","fn","family","lookup","err","ip","netmask","contains"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pac-resolver/isInNet.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar dns = require('dns');\nvar Netmask = require('netmask').Netmask;\n\n/**\n * Module exports.\n */\n\nmodule.exports = isInNet;\n\nisInNet.async = true;\n\n/**\n * True iff the IP address of the host matches the specified IP address pattern.\n *\n * Pattern and mask specification is done the same way as for SOCKS configuration.\n *\n * Examples:\n *\n * ``` js\n * isInNet(host, \"198.95.249.79\", \"255.255.255.255\")\n *   // is true iff the IP address of host matches exactly 198.95.249.79.\n *\n * isInNet(host, \"198.95.0.0\", \"255.255.0.0\")\n *   // is true iff the IP address of the host matches 198.95.*.*.\n * ```\n *\n * @param {String} host a DNS hostname, or IP address. If a hostname is passed,\n *   it will be resoved into an IP address by this function.\n * @param {String} pattern an IP address pattern in the dot-separated format mask.\n * @param {String} mask for the IP address pattern informing which parts of the\n *   IP address should be matched against. 0 means ignore, 255 means match.\n * @return {Boolean}\n */\n\nfunction isInNet (host, pattern, mask, fn) {\n  var family = 4;\n  dns.lookup(host, family, function (err, ip) {\n    if (err) return fn(err);\n    if (!ip) ip = '127.0.0.1';\n    var netmask = new Netmask(pattern, mask);\n    fn(null, netmask.contains(ip));\n  });\n}\n"],"mappings":"AACA;AACA;AACA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AACxB,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACC,OAAO;;AAExC;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGC,OAAO;AAExBA,OAAO,CAACC,KAAK,GAAG,IAAI;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,OAAOA,CAAEE,IAAI,EAAEC,OAAO,EAAEC,IAAI,EAAEC,EAAE,EAAE;EACzC,IAAIC,MAAM,GAAG,CAAC;EACdX,GAAG,CAACY,MAAM,CAACL,IAAI,EAAEI,MAAM,EAAE,UAAUE,GAAG,EAAEC,EAAE,EAAE;IAC1C,IAAID,GAAG,EAAE,OAAOH,EAAE,CAACG,GAAG,CAAC;IACvB,IAAI,CAACC,EAAE,EAAEA,EAAE,GAAG,WAAW;IACzB,IAAIC,OAAO,GAAG,IAAIb,OAAO,CAACM,OAAO,EAAEC,IAAI,CAAC;IACxCC,EAAE,CAAC,IAAI,EAAEK,OAAO,CAACC,QAAQ,CAACF,EAAE,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}