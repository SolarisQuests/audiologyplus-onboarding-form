{"ast":null,"code":"module.exports = {\n  'definitions': {\n    'message': {\n      'description': 'This API allows you to send, access, and delete mesages programmatically.',\n      'links': [{\n        'description': 'Returns a single message in JSON format. To get full MIME message set MIME to true',\n        'href': '/messages/{message}',\n        'method': 'GET',\n        'title': 'info',\n        'properties': {\n          'MIME': {\n            'type': 'boolean'\n          }\n        }\n      }, {\n        'description': 'Sends a message by assembling it from the components.',\n        'href': '/messages',\n        'method': 'POST',\n        'title': 'send',\n        'properties': {\n          'from': {\n            'type': 'string'\n          }\n        },\n        'required': ['from']\n      }, {\n        'description': 'Sends a message in MIME format.',\n        'href': '/messages.mime',\n        'method': 'POST',\n        'title': 'send-mime',\n        'properties': {\n          'message': {\n            'type': ['string', 'object']\n          }\n        }\n      }, {\n        'description': 'To delete an inbound message that has been stored via the store() action.',\n        'href': '/messages/{message}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'domain': {\n      'description': 'This API allows you to create, access, and validate domains programmatically.',\n      'links': [{\n        'description': 'Returns a list of domains under your account in JSON.',\n        'href': '/domains',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Returns a single domain, including credentials and DNS records.',\n        'href': '/domains/{domain}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Create a new domain.',\n        'href': '/domains',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'name': {\n            'type': 'string'\n          },\n          'wildcard': {\n            'type': 'boolean'\n          }\n        },\n        'required': ['name']\n      }, {\n        'description': 'Delete a domain from your account.',\n        'href': '/domains/{domain}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }, {\n        'description': 'Verifies and returns a single domain, including credentials and DNS records.',\n        'href': '/domains/{domain}/verify',\n        'method': 'PUT',\n        'title': 'verify'\n      }]\n    },\n    'credentials': {\n      'description': 'Programmatically get and modify domain credentials.',\n      'links': [{\n        'description': 'Returns a list of SMTP credentials for the defined domain.',\n        'href': '/domains/{domain}/credentials',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Creates a new set of SMTP credentials for the defined domain.',\n        'href': '/domains/{domain}/credentials',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'login': {\n            'type': 'string'\n          },\n          'password': {\n            'type': 'string'\n          }\n        },\n        'required': ['login', 'password']\n      }, {\n        'description': 'Updates the specified SMTP credentials. Currently only the password can be changed.',\n        'href': '/domains/{domain}/credentials/{login}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'password': {\n            'type': 'string'\n          }\n        },\n        'required': ['password']\n      }, {\n        'description': 'Deletes the defined SMTP credentials.',\n        'href': '/domains/{domain}/credentials/{login}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'complaints': {\n      'description': 'This API allows you to programmatically download the list of users who have complained, add a complaint, or delete a complaint.',\n      'links': [{\n        'description': 'Fetches the list of complaints.',\n        'href': '/complaints',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Adds an address to the complaints table.',\n        'href': '/complaints',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }, {\n        'description': 'Fetches a single spam complaint by a given email address.',\n        'href': '/complaints/{address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Removes a given spam complaint.',\n        'href': '/complaints/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'unsubscribes': {\n      'description': 'This API allows you to programmatically download the list of recipients who have unsubscribed from your emails. You can also programmatically “clear” the unsubscribe event.',\n      'links': [{\n        'description': 'Fetches the list of unsubscribes.',\n        'href': '/unsubscribes',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Retreives a single unsubscribe record.',\n        'href': '/unsubscribes/{address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Removes an address from the unsubscribes table.',\n        'href': '/unsubscribes/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }, {\n        'description': 'Adds address to unsubscribed table.',\n        'href': '/unsubscribes',\n        'method': 'POST',\n        'title': 'create'\n      }]\n    },\n    'bounces': {\n      'description': 'Mailgun automatically handles bounced emails. The list of bounced addresses can be accessed programmatically.',\n      'links': [{\n        'description': 'Fetches the list of bounces.',\n        'href': '/bounces',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Fetches a single bounce event by a given email address.',\n        'href': '/bounces/{address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Clears a given bounce event.',\n        'href': '/bounces/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }, {\n        'description': 'Adds a permanent bounce to the bounces table. Updates the existing record if already here.',\n        'href': '/bounces',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'code': {\n            'type': 'number'\n          },\n          'error': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }]\n    },\n    'routes': {\n      'description': 'Mailgun Routes are a powerful way to handle the incoming traffic. This API allows you to work with routes programmatically.',\n      'links': [{\n        'description': 'Fetches the list of routes.',\n        'href': '/routes',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Returns a single route object based on its ID.',\n        'href': '/routes/{id}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Creates a new route.',\n        'href': '/routes',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'limit': {\n            'priority': 'number'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'expression': {\n            'type': 'string'\n          }\n        },\n        'required': ['expression']\n      }, {\n        'description': 'Updates a given route by ID.',\n        'href': '/routes/{id}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'limit': {\n            'priority': 'number'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'expression': {\n            'type': 'string'\n          }\n        }\n      }, {\n        'description': 'Deletes a route based on the id.',\n        'href': '/routes/{id}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'list': {\n      'description': 'You can programmatically work with mailing lists and mailing list members using Mailgun Mailing List API.',\n      'links': [{\n        'description': 'Returns a list of mailing lists under your account.',\n        'href': '/lists',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Returns a single mailing list by a given address.',\n        'href': '/lists/{address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Creates a new mailing list.',\n        'href': '/lists',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'access_level': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }, {\n        'description': 'Update mailing list properties, such as address, description or name.',\n        'href': '/lists/{address}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'access_level': {\n            'type': 'string'\n          }\n        }\n      }, {\n        'description': 'Deletes a mailing list.',\n        'href': '/lists/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'members': {\n      'description': 'Programatically work with mailing lists members.',\n      'links': [{\n        'description': 'Fetches the list of mailing list members.',\n        'href': '/lists/{address}/members',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      }, {\n        'description': 'Paginate over list members in the given mailing list',\n        'href': '/lists/{address}/members/pages',\n        'method': 'GET',\n        'title': 'page',\n        'properties': {\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'page': {\n            'type': 'string'\n          },\n          'address': {\n            'type': 'string'\n          }\n        }\n      }, {\n        'description': 'Retrieves a mailing list member.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Adds a member to the mailing list.',\n        'href': '/lists/{address}/members',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'vars': {\n            'type': 'object'\n          },\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'upsert': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }, {\n        'description': 'Adds multiple members, up to 1,000 per call, to a Mailing List.',\n        'href': '/lists/{address}/members.json',\n        'method': 'POST',\n        'title': 'add',\n        'properties': {\n          'members': {\n            'type': 'array'\n          },\n          'upsert': {\n            'type': 'boolean'\n          }\n        },\n        'required': ['members']\n      }, {\n        'description': 'Updates a mailing list member with given properties.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'vars': {\n            'type': 'object'\n          },\n          'subscribed': {\n            'type': 'boolean'\n          }\n        }\n      }, {\n        'description': 'Delete a mailing list member.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'stats': {\n      'description': 'Various data and event statistics for you mailgun account. See http://documentation.mailgun.com/api-stats.html',\n      'links': [{\n        'description': 'Returns a list of event stat items. Each record represents counts for one event per one day.',\n        'href': '/stats',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          },\n          'start-date': {\n            'type': 'string'\n          }\n        }\n      }]\n    },\n    'tags': {\n      'description': 'Deletes all counters for particular tag and the tag itself. See http://documentation.mailgun.com/api-stats.html',\n      'links': [{\n        'description': 'List all tags.',\n        'href': '/tags',\n        'method': 'GET',\n        'title': 'list'\n      }, {\n        'description': 'Gets a specific tag.',\n        'href': '/tags/{tag}',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Returns statistics for a given tag.',\n        'href': '/tags/{tag}/stats',\n        'method': 'GET',\n        'title': 'info',\n        'properties': {\n          'event': {\n            'type': 'array'\n          },\n          'start': {\n            'type': 'string'\n          },\n          'end': {\n            'type': 'string'\n          },\n          'resolution': {\n            'type': 'string'\n          },\n          'duration': {\n            'type': 'string'\n          }\n        },\n        'required': ['event']\n      }, {\n        'description': 'Returns a list of countries of origin for a given domain for different event types.',\n        'href': '/tags/{tag}/stats/aggregates/countries',\n        'method': 'GET',\n        'title': 'list'\n      }, {\n        'description': 'Returns a list of email providers for a given domain for different event types.',\n        'href': '/tags/{tag}/stats/aggregates/providers',\n        'method': 'GET',\n        'title': 'list'\n      }, {\n        'description': 'Returns a list of devices for a given domain that have triggered event types.',\n        'href': '/tags/{tag}/stats/aggregates/devices',\n        'method': 'GET',\n        'title': 'list'\n      }, {\n        'description': 'Deletes all counters for particular tag and the tag itself.',\n        'href': '/tags/{tag}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }]\n    },\n    'events': {\n      'description': 'Query events that happen to your emails. See http://documentation.mailgun.com/api-events.html',\n      'links': [{\n        'description': 'Queries event records.',\n        'href': '/events',\n        'method': 'GET',\n        'title': 'get',\n        'properties': {\n          'begin': {\n            'type': 'string'\n          },\n          'end': {\n            'type': 'string'\n          },\n          'ascending': {\n            'type': 'string'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'pretty': {\n            'type': 'string'\n          }\n        }\n      }]\n    },\n    'tracking': {\n      'description': 'Programmatically get and modify domain tracking settings.',\n      'links': [{\n        'description': 'Returns tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking',\n        'method': 'GET',\n        'title': 'info'\n      }, {\n        'description': 'Updates the open tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/open',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': ['string', 'boolean']\n          }\n        },\n        'required': ['active']\n      }, {\n        'description': 'Updates the click tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/click',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': ['string', 'boolean']\n          }\n        },\n        'required': ['active']\n      }, {\n        'description': 'Updates the unsubscribe tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/unsubscribe',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': 'boolean'\n          },\n          'html_footer': {\n            'type': 'string'\n          },\n          'text_footer': {\n            'type': 'string'\n          }\n        },\n        'required': ['active']\n      }]\n    }\n  }\n};","map":{"version":3,"names":["module","exports"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/mailgun-js/lib/schema.js"],"sourcesContent":["module.exports = {\n  'definitions': {\n    'message': {\n      'description': 'This API allows you to send, access, and delete mesages programmatically.',\n      'links': [{\n        'description': 'Returns a single message in JSON format. To get full MIME message set MIME to true',\n        'href': '/messages/{message}',\n        'method': 'GET',\n        'title': 'info',\n        'properties': {\n          'MIME': {\n            'type': 'boolean'\n          }\n        }\n      },\n      {\n        'description': 'Sends a message by assembling it from the components.',\n        'href': '/messages',\n        'method': 'POST',\n        'title': 'send',\n        'properties': {\n          'from': {\n            'type': 'string'\n          }\n        },\n        'required': ['from']\n      },\n      {\n        'description': 'Sends a message in MIME format.',\n        'href': '/messages.mime',\n        'method': 'POST',\n        'title': 'send-mime',\n        'properties': {\n          'message': {\n            'type': ['string', 'object']\n          }\n        }\n      },\n      {\n        'description': 'To delete an inbound message that has been stored via the store() action.',\n        'href': '/messages/{message}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'domain': {\n      'description': 'This API allows you to create, access, and validate domains programmatically.',\n      'links': [{\n        'description': 'Returns a list of domains under your account in JSON.',\n        'href': '/domains',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Returns a single domain, including credentials and DNS records.',\n        'href': '/domains/{domain}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Create a new domain.',\n        'href': '/domains',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'name': {\n            'type': 'string'\n          },\n          'wildcard': {\n            'type': 'boolean'\n          }\n        },\n        'required': ['name']\n      },\n      {\n        'description': 'Delete a domain from your account.',\n        'href': '/domains/{domain}',\n        'method': 'DELETE',\n        'title': 'delete'\n      },\n      {\n        'description': 'Verifies and returns a single domain, including credentials and DNS records.',\n        'href': '/domains/{domain}/verify',\n        'method': 'PUT',\n        'title': 'verify'\n      }\n      ]\n    },\n    'credentials': {\n      'description': 'Programmatically get and modify domain credentials.',\n      'links': [{\n        'description': 'Returns a list of SMTP credentials for the defined domain.',\n        'href': '/domains/{domain}/credentials',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Creates a new set of SMTP credentials for the defined domain.',\n        'href': '/domains/{domain}/credentials',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'login': {\n            'type': 'string'\n          },\n          'password': {\n            'type': 'string'\n          }\n        },\n        'required': ['login', 'password']\n      },\n      {\n        'description': 'Updates the specified SMTP credentials. Currently only the password can be changed.',\n        'href': '/domains/{domain}/credentials/{login}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'password': {\n            'type': 'string'\n          }\n        },\n        'required': ['password']\n      },\n      {\n        'description': 'Deletes the defined SMTP credentials.',\n        'href': '/domains/{domain}/credentials/{login}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'complaints': {\n      'description': 'This API allows you to programmatically download the list of users who have complained, add a complaint, or delete a complaint.',\n      'links': [{\n        'description': 'Fetches the list of complaints.',\n        'href': '/complaints',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Adds an address to the complaints table.',\n        'href': '/complaints',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      },\n      {\n        'description': 'Fetches a single spam complaint by a given email address.',\n        'href': '/complaints/{address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Removes a given spam complaint.',\n        'href': '/complaints/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'unsubscribes': {\n      'description': 'This API allows you to programmatically download the list of recipients who have unsubscribed from your emails. You can also programmatically “clear” the unsubscribe event.',\n      'links': [{\n        'description': 'Fetches the list of unsubscribes.',\n        'href': '/unsubscribes',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Retreives a single unsubscribe record.',\n        'href': '/unsubscribes/{address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Removes an address from the unsubscribes table.',\n        'href': '/unsubscribes/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      },\n      {\n        'description': 'Adds address to unsubscribed table.',\n        'href': '/unsubscribes',\n        'method': 'POST',\n        'title': 'create'\n      }\n      ]\n    },\n    'bounces': {\n      'description': 'Mailgun automatically handles bounced emails. The list of bounced addresses can be accessed programmatically.',\n      'links': [{\n        'description': 'Fetches the list of bounces.',\n        'href': '/bounces',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Fetches a single bounce event by a given email address.',\n        'href': '/bounces/{address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Clears a given bounce event.',\n        'href': '/bounces/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      },\n      {\n        'description': 'Adds a permanent bounce to the bounces table. Updates the existing record if already here.',\n        'href': '/bounces',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'code': {\n            'type': 'number'\n          },\n          'error': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      }\n      ]\n    },\n    'routes': {\n      'description': 'Mailgun Routes are a powerful way to handle the incoming traffic. This API allows you to work with routes programmatically.',\n      'links': [{\n        'description': 'Fetches the list of routes.',\n        'href': '/routes',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Returns a single route object based on its ID.',\n        'href': '/routes/{id}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Creates a new route.',\n        'href': '/routes',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'limit': {\n            'priority': 'number'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'expression': {\n            'type': 'string'\n          }\n        },\n        'required': ['expression']\n      },\n      {\n        'description': 'Updates a given route by ID.',\n        'href': '/routes/{id}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'limit': {\n            'priority': 'number'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'expression': {\n            'type': 'string'\n          }\n        }\n      },\n      {\n        'description': 'Deletes a route based on the id.',\n        'href': '/routes/{id}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'list': {\n      'description': 'You can programmatically work with mailing lists and mailing list members using Mailgun Mailing List API.',\n      'links': [{\n        'description': 'Returns a list of mailing lists under your account.',\n        'href': '/lists',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Returns a single mailing list by a given address.',\n        'href': '/lists/{address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Creates a new mailing list.',\n        'href': '/lists',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'access_level': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      },\n      {\n        'description': 'Update mailing list properties, such as address, description or name.',\n        'href': '/lists/{address}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'description': {\n            'type': 'string'\n          },\n          'access_level': {\n            'type': 'string'\n          }\n        }\n      },\n      {\n        'description': 'Deletes a mailing list.',\n        'href': '/lists/{address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'members': {\n      'description': 'Programatically work with mailing lists members.',\n      'links': [{\n        'description': 'Fetches the list of mailing list members.',\n        'href': '/lists/{address}/members',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          }\n        }\n      },\n      {\n        'description': 'Paginate over list members in the given mailing list',\n        'href': '/lists/{address}/members/pages',\n        'method': 'GET',\n        'title': 'page',\n        'properties': {\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'page': {\n            'type': 'string'\n          },\n          'address': {\n            'type': 'string'\n          }\n        }\n      },\n      {\n        'description': 'Retrieves a mailing list member.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Adds a member to the mailing list.',\n        'href': '/lists/{address}/members',\n        'method': 'POST',\n        'title': 'create',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'vars': {\n            'type': 'object'\n          },\n          'subscribed': {\n            'type': 'boolean'\n          },\n          'upsert': {\n            'type': 'string'\n          }\n        },\n        'required': ['address']\n      },\n      {\n        'description': 'Adds multiple members, up to 1,000 per call, to a Mailing List.',\n        'href': '/lists/{address}/members.json',\n        'method': 'POST',\n        'title': 'add',\n        'properties': {\n          'members': {\n            'type': 'array'\n          },\n          'upsert': {\n            'type': 'boolean'\n          }\n        },\n        'required': ['members']\n      },\n      {\n        'description': 'Updates a mailing list member with given properties.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'address': {\n            'type': 'string'\n          },\n          'name': {\n            'type': 'string'\n          },\n          'vars': {\n            'type': 'object'\n          },\n          'subscribed': {\n            'type': 'boolean'\n          }\n        }\n      },\n      {\n        'description': 'Delete a mailing list member.',\n        'href': '/lists/{address}/members/{member_address}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'stats': {\n      'description': 'Various data and event statistics for you mailgun account. See http://documentation.mailgun.com/api-stats.html',\n      'links': [{\n        'description': 'Returns a list of event stat items. Each record represents counts for one event per one day.',\n        'href': '/stats',\n        'method': 'GET',\n        'title': 'list',\n        'properties': {\n          'limit': {\n            'type': 'number'\n          },\n          'skip': {\n            'type': 'number'\n          },\n          'start-date': {\n            'type': 'string'\n          }\n        }\n      }]\n    },\n    'tags': {\n      'description': 'Deletes all counters for particular tag and the tag itself. See http://documentation.mailgun.com/api-stats.html',\n      'links': [{\n        'description': 'List all tags.',\n        'href': '/tags',\n        'method': 'GET',\n        'title': 'list'\n      },\n      {\n        'description': 'Gets a specific tag.',\n        'href': '/tags/{tag}',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Returns statistics for a given tag.',\n        'href': '/tags/{tag}/stats',\n        'method': 'GET',\n        'title': 'info',\n        'properties': {\n          'event': {\n            'type': 'array'\n          },\n          'start': {\n            'type': 'string'\n          },\n          'end': {\n            'type': 'string'\n          },\n          'resolution': {\n            'type': 'string'\n          },\n          'duration': {\n            'type': 'string'\n          }\n        },\n        'required': ['event']\n      },\n      {\n        'description': 'Returns a list of countries of origin for a given domain for different event types.',\n        'href': '/tags/{tag}/stats/aggregates/countries',\n        'method': 'GET',\n        'title': 'list'\n      },\n      {\n        'description': 'Returns a list of email providers for a given domain for different event types.',\n        'href': '/tags/{tag}/stats/aggregates/providers',\n        'method': 'GET',\n        'title': 'list'\n      },\n      {\n        'description': 'Returns a list of devices for a given domain that have triggered event types.',\n        'href': '/tags/{tag}/stats/aggregates/devices',\n        'method': 'GET',\n        'title': 'list'\n      },\n      {\n        'description': 'Deletes all counters for particular tag and the tag itself.',\n        'href': '/tags/{tag}',\n        'method': 'DELETE',\n        'title': 'delete'\n      }\n      ]\n    },\n    'events': {\n      'description': 'Query events that happen to your emails. See http://documentation.mailgun.com/api-events.html',\n      'links': [{\n        'description': 'Queries event records.',\n        'href': '/events',\n        'method': 'GET',\n        'title': 'get',\n        'properties': {\n          'begin': {\n            'type': 'string'\n          },\n          'end': {\n            'type': 'string'\n          },\n          'ascending': {\n            'type': 'string'\n          },\n          'limit': {\n            'type': 'number'\n          },\n          'pretty': {\n            'type': 'string'\n          }\n        }\n      }]\n    },\n    'tracking': {\n      'description': 'Programmatically get and modify domain tracking settings.',\n      'links': [{\n        'description': 'Returns tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking',\n        'method': 'GET',\n        'title': 'info'\n      },\n      {\n        'description': 'Updates the open tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/open',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': ['string', 'boolean']\n          }\n        },\n        'required': ['active']\n      },\n      {\n        'description': 'Updates the click tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/click',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': ['string', 'boolean']\n          }\n        },\n        'required': ['active']\n      },\n      {\n        'description': 'Updates the unsubscribe tracking settings for a domain.',\n        'href': '/domains/{domain}/tracking/unsubscribe',\n        'method': 'PUT',\n        'title': 'update',\n        'properties': {\n          'active': {\n            'type': 'boolean'\n          },\n          'html_footer': {\n            'type': 'string'\n          },\n          'text_footer': {\n            'type': 'string'\n          }\n        },\n        'required': ['active']\n      }\n      ]\n    }\n  }\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAG;EACf,aAAa,EAAE;IACb,SAAS,EAAE;MACT,aAAa,EAAE,2EAA2E;MAC1F,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,oFAAoF;QACnG,MAAM,EAAE,qBAAqB;QAC7B,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,uDAAuD;QACtE,MAAM,EAAE,WAAW;QACnB,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,MAAM;MACrB,CAAC,EACD;QACE,aAAa,EAAE,iCAAiC;QAChD,MAAM,EAAE,gBAAgB;QACxB,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,WAAW;QACpB,YAAY,EAAE;UACZ,SAAS,EAAE;YACT,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ;UAC7B;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,2EAA2E;QAC1F,MAAM,EAAE,qBAAqB;QAC7B,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC;IAEH,CAAC;IACD,QAAQ,EAAE;MACR,aAAa,EAAE,+EAA+E;MAC9F,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,uDAAuD;QACtE,MAAM,EAAE,UAAU;QAClB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,iEAAiE;QAChF,MAAM,EAAE,mBAAmB;QAC3B,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,sBAAsB;QACrC,MAAM,EAAE,UAAU;QAClB,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,UAAU,EAAE;YACV,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,MAAM;MACrB,CAAC,EACD;QACE,aAAa,EAAE,oCAAoC;QACnD,MAAM,EAAE,mBAAmB;QAC3B,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,8EAA8E;QAC7F,MAAM,EAAE,0BAA0B;QAClC,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC;IAEH,CAAC;IACD,aAAa,EAAE;MACb,aAAa,EAAE,qDAAqD;MACpE,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,4DAA4D;QAC3E,MAAM,EAAE,+BAA+B;QACvC,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,+DAA+D;QAC9E,MAAM,EAAE,+BAA+B;QACvC,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,UAAU,EAAE;YACV,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,OAAO,EAAE,UAAU;MAClC,CAAC,EACD;QACE,aAAa,EAAE,qFAAqF;QACpG,MAAM,EAAE,uCAAuC;QAC/C,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,UAAU,EAAE;YACV,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,UAAU;MACzB,CAAC,EACD;QACE,aAAa,EAAE,uCAAuC;QACtD,MAAM,EAAE,uCAAuC;QAC/C,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC;IAEH,CAAC;IACD,YAAY,EAAE;MACZ,aAAa,EAAE,iIAAiI;MAChJ,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,iCAAiC;QAChD,MAAM,EAAE,aAAa;QACrB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,0CAA0C;QACzD,MAAM,EAAE,aAAa;QACrB,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,SAAS,EAAE;YACT,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,SAAS;MACxB,CAAC,EACD;QACE,aAAa,EAAE,2DAA2D;QAC1E,MAAM,EAAE,uBAAuB;QAC/B,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,iCAAiC;QAChD,MAAM,EAAE,uBAAuB;QAC/B,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC;IAEH,CAAC;IACD,cAAc,EAAE;MACd,aAAa,EAAE,8KAA8K;MAC7L,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,mCAAmC;QAClD,MAAM,EAAE,eAAe;QACvB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,wCAAwC;QACvD,MAAM,EAAE,yBAAyB;QACjC,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,iDAAiD;QAChE,MAAM,EAAE,yBAAyB;QACjC,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,qCAAqC;QACpD,MAAM,EAAE,eAAe;QACvB,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE;MACX,CAAC;IAEH,CAAC;IACD,SAAS,EAAE;MACT,aAAa,EAAE,+GAA+G;MAC9H,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,8BAA8B;QAC7C,MAAM,EAAE,UAAU;QAClB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,yDAAyD;QACxE,MAAM,EAAE,oBAAoB;QAC5B,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,8BAA8B;QAC7C,MAAM,EAAE,oBAAoB;QAC5B,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,4FAA4F;QAC3G,MAAM,EAAE,UAAU;QAClB,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,SAAS,EAAE;YACT,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,OAAO,EAAE;YACP,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,SAAS;MACxB,CAAC;IAEH,CAAC;IACD,QAAQ,EAAE;MACR,aAAa,EAAE,6HAA6H;MAC5I,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,6BAA6B;QAC5C,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,gDAAgD;QAC/D,MAAM,EAAE,cAAc;QACtB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,sBAAsB;QACrC,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,UAAU,EAAE;UACd,CAAC;UACD,aAAa,EAAE;YACb,MAAM,EAAE;UACV,CAAC;UACD,YAAY,EAAE;YACZ,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,YAAY;MAC3B,CAAC,EACD;QACE,aAAa,EAAE,8BAA8B;QAC7C,MAAM,EAAE,cAAc;QACtB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,UAAU,EAAE;UACd,CAAC;UACD,aAAa,EAAE;YACb,MAAM,EAAE;UACV,CAAC;UACD,YAAY,EAAE;YACZ,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,kCAAkC;QACjD,MAAM,EAAE,cAAc;QACtB,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC;IAEH,CAAC;IACD,MAAM,EAAE;MACN,aAAa,EAAE,2GAA2G;MAC1H,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,qDAAqD;QACpE,MAAM,EAAE,QAAQ;QAChB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,SAAS,EAAE;YACT,MAAM,EAAE;UACV,CAAC;UACD,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,mDAAmD;QAClE,MAAM,EAAE,kBAAkB;QAC1B,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,6BAA6B;QAC5C,MAAM,EAAE,QAAQ;QAChB,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,SAAS,EAAE;YACT,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,aAAa,EAAE;YACb,MAAM,EAAE;UACV,CAAC;UACD,cAAc,EAAE;YACd,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,SAAS;MACxB,CAAC,EACD;QACE,aAAa,EAAE,uEAAuE;QACtF,MAAM,EAAE,kBAAkB;QAC1B,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,SAAS,EAAE;YACT,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,aAAa,EAAE;YACb,MAAM,EAAE;UACV,CAAC;UACD,cAAc,EAAE;YACd,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,yBAAyB;QACxC,MAAM,EAAE,kBAAkB;QAC1B,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC;IAEH,CAAC;IACD,SAAS,EAAE;MACT,aAAa,EAAE,kDAAkD;MACjE,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,2CAA2C;QAC1D,MAAM,EAAE,0BAA0B;QAClC,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,YAAY,EAAE;YACZ,MAAM,EAAE;UACV,CAAC;UACD,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,sDAAsD;QACrE,MAAM,EAAE,gCAAgC;QACxC,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,YAAY,EAAE;YACZ,MAAM,EAAE;UACV,CAAC;UACD,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,SAAS,EAAE;YACT,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,kCAAkC;QACjD,MAAM,EAAE,2CAA2C;QACnD,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,oCAAoC;QACnD,MAAM,EAAE,0BAA0B;QAClC,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,SAAS,EAAE;YACT,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,YAAY,EAAE;YACZ,MAAM,EAAE;UACV,CAAC;UACD,QAAQ,EAAE;YACR,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,SAAS;MACxB,CAAC,EACD;QACE,aAAa,EAAE,iEAAiE;QAChF,MAAM,EAAE,+BAA+B;QACvC,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,KAAK;QACd,YAAY,EAAE;UACZ,SAAS,EAAE;YACT,MAAM,EAAE;UACV,CAAC;UACD,QAAQ,EAAE;YACR,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,SAAS;MACxB,CAAC,EACD;QACE,aAAa,EAAE,sDAAsD;QACrE,MAAM,EAAE,2CAA2C;QACnD,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,SAAS,EAAE;YACT,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,YAAY,EAAE;YACZ,MAAM,EAAE;UACV;QACF;MACF,CAAC,EACD;QACE,aAAa,EAAE,+BAA+B;QAC9C,MAAM,EAAE,2CAA2C;QACnD,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC;IAEH,CAAC;IACD,OAAO,EAAE;MACP,aAAa,EAAE,gHAAgH;MAC/H,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,8FAA8F;QAC7G,MAAM,EAAE,QAAQ;QAChB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,MAAM,EAAE;YACN,MAAM,EAAE;UACV,CAAC;UACD,YAAY,EAAE;YACZ,MAAM,EAAE;UACV;QACF;MACF,CAAC;IACH,CAAC;IACD,MAAM,EAAE;MACN,aAAa,EAAE,iHAAiH;MAChI,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,gBAAgB;QAC/B,MAAM,EAAE,OAAO;QACf,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,sBAAsB;QACrC,MAAM,EAAE,aAAa;QACrB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,qCAAqC;QACpD,MAAM,EAAE,mBAAmB;QAC3B,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,MAAM;QACf,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,KAAK,EAAE;YACL,MAAM,EAAE;UACV,CAAC;UACD,YAAY,EAAE;YACZ,MAAM,EAAE;UACV,CAAC;UACD,UAAU,EAAE;YACV,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,OAAO;MACtB,CAAC,EACD;QACE,aAAa,EAAE,qFAAqF;QACpG,MAAM,EAAE,wCAAwC;QAChD,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,iFAAiF;QAChG,MAAM,EAAE,wCAAwC;QAChD,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,+EAA+E;QAC9F,MAAM,EAAE,sCAAsC;QAC9C,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,6DAA6D;QAC5E,MAAM,EAAE,aAAa;QACrB,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE;MACX,CAAC;IAEH,CAAC;IACD,QAAQ,EAAE;MACR,aAAa,EAAE,+FAA+F;MAC9G,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,wBAAwB;QACvC,MAAM,EAAE,SAAS;QACjB,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,KAAK;QACd,YAAY,EAAE;UACZ,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,KAAK,EAAE;YACL,MAAM,EAAE;UACV,CAAC;UACD,WAAW,EAAE;YACX,MAAM,EAAE;UACV,CAAC;UACD,OAAO,EAAE;YACP,MAAM,EAAE;UACV,CAAC;UACD,QAAQ,EAAE;YACR,MAAM,EAAE;UACV;QACF;MACF,CAAC;IACH,CAAC;IACD,UAAU,EAAE;MACV,aAAa,EAAE,2DAA2D;MAC1E,OAAO,EAAE,CAAC;QACR,aAAa,EAAE,yCAAyC;QACxD,MAAM,EAAE,4BAA4B;QACpC,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE;MACX,CAAC,EACD;QACE,aAAa,EAAE,kDAAkD;QACjE,MAAM,EAAE,iCAAiC;QACzC,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,QAAQ,EAAE;YACR,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS;UAC9B;QACF,CAAC;QACD,UAAU,EAAE,CAAC,QAAQ;MACvB,CAAC,EACD;QACE,aAAa,EAAE,mDAAmD;QAClE,MAAM,EAAE,kCAAkC;QAC1C,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,QAAQ,EAAE;YACR,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS;UAC9B;QACF,CAAC;QACD,UAAU,EAAE,CAAC,QAAQ;MACvB,CAAC,EACD;QACE,aAAa,EAAE,yDAAyD;QACxE,MAAM,EAAE,wCAAwC;QAChD,QAAQ,EAAE,KAAK;QACf,OAAO,EAAE,QAAQ;QACjB,YAAY,EAAE;UACZ,QAAQ,EAAE;YACR,MAAM,EAAE;UACV,CAAC;UACD,aAAa,EAAE;YACb,MAAM,EAAE;UACV,CAAC;UACD,aAAa,EAAE;YACb,MAAM,EAAE;UACV;QACF,CAAC;QACD,UAAU,EAAE,CAAC,QAAQ;MACvB,CAAC;IAEH;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}