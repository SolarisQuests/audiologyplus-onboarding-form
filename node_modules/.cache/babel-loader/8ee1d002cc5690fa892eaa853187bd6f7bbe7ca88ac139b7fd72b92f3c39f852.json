{"ast":null,"code":"var inflection = require('inflection');\n\n/* Construct a system of proxy objects based off\n * of an array of paths.\n *\n * @example:\n *   pathProxy.proxy(Client, [\n *     \"/foo\",\n *     \"/foo/{id}/bar\"\n *   ]);\n *\n * @param {Function} base A constructor to build the proxies on top of.\n * @param {Array} paths An array of paths to build a system of proxies from.\n *\n * @return {Function} The original constructor passed in as the first argument.\n */\nexports.proxy = function proxy(base, paths) {\n  var i;\n  for (i = 0; i < paths.length; i++) {\n    this.pathProxy(base, paths[i]);\n  }\n  return base;\n};\n\n/* Return a proxy object constructor for the the given path from the given\n * base.\n *\n * @example\n *   pathProxy.pathProxy(Client, \"/apps/{id}/bar\");\n *\n * @param {Function} base A constructor to build the proxy on top of.\n * @param {String} path The path to build the proxy object constructor for.\n *\n * @return {Function} A proxy object constructor for the given path. Not meant\n *  to be called immediately, but useful for attaching functions to its\n *  `prototype`.\n */\nexports.pathProxy = function pathProxy(base, path) {\n  var proxy = base,\n    segments;\n  path = path.split(/\\//);\n  segments = path.slice(1, path.length);\n  segments.forEach(function (segment) {\n    var constructor;\n    segment = normalizeName(segment);\n    if (proxy.prototype && proxy.prototype[segment]) {\n      return proxy = proxy.prototype[segment]._constructor;\n    }\n    if (!segment.match(/{.*}/)) {\n      constructor = function (base, params, pathSegments) {\n        this.base = base;\n        this.params = params;\n        this.pathSegments = pathSegments;\n        this.path = \"/\" + pathSegments.join(\"/\");\n      };\n      proxy.prototype[segment] = function (param) {\n        var _base, params, pathSegments;\n        if (this instanceof base) {\n          _base = this;\n        } else {\n          _base = this.base;\n        }\n        params = this.params || [];\n        if (param) params = params.concat(param);\n        pathSegments = this.pathSegments || [];\n        pathSegments = pathSegments.concat([segment, param]);\n        pathSegments = pathSegments.filter(function (segment) {\n          return segment;\n        });\n        return new constructor(_base, params, pathSegments);\n      };\n      proxy.prototype[segment]._constructor = constructor;\n      return proxy = constructor;\n    }\n  });\n  return proxy;\n};\nfunction normalizeName(name) {\n  name = name.toLowerCase();\n  name = inflection.dasherize(name).replace(/-/g, '_');\n  name = inflection.camelize(name, true);\n  return name;\n}","map":{"version":3,"names":["inflection","require","exports","proxy","base","paths","i","length","pathProxy","path","segments","split","slice","forEach","segment","constructor","normalizeName","prototype","_constructor","match","params","pathSegments","join","param","_base","concat","filter","name","toLowerCase","dasherize","replace","camelize"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/path-proxy/index.js"],"sourcesContent":["var inflection = require('inflection');\n\n\n/* Construct a system of proxy objects based off\n * of an array of paths.\n *\n * @example:\n *   pathProxy.proxy(Client, [\n *     \"/foo\",\n *     \"/foo/{id}/bar\"\n *   ]);\n *\n * @param {Function} base A constructor to build the proxies on top of.\n * @param {Array} paths An array of paths to build a system of proxies from.\n *\n * @return {Function} The original constructor passed in as the first argument.\n */\nexports.proxy = function proxy (base, paths) {\n  var i;\n\n  for (i = 0; i < paths.length; i++) {\n    this.pathProxy(base, paths[i]);\n  }\n\n  return base;\n}\n\n\n/* Return a proxy object constructor for the the given path from the given\n * base.\n *\n * @example\n *   pathProxy.pathProxy(Client, \"/apps/{id}/bar\");\n *\n * @param {Function} base A constructor to build the proxy on top of.\n * @param {String} path The path to build the proxy object constructor for.\n *\n * @return {Function} A proxy object constructor for the given path. Not meant\n *  to be called immediately, but useful for attaching functions to its\n *  `prototype`.\n */\nexports.pathProxy = function pathProxy (base, path) {\n  var proxy = base,\n      segments;\n\n  path = path.split(/\\//);\n  segments = path.slice(1, path.length);\n\n  segments.forEach(function (segment) {\n    var constructor;\n\n    segment = normalizeName(segment);\n\n    if (proxy.prototype && proxy.prototype[segment]) {\n      return proxy = proxy.prototype[segment]._constructor;\n    }\n\n    if (!segment.match(/{.*}/)) {\n      constructor = function (base, params, pathSegments) {\n        this.base         = base;\n        this.params       = params;\n        this.pathSegments = pathSegments;\n        this.path         = \"/\" + pathSegments.join(\"/\");\n      };\n\n      proxy.prototype[segment] = function (param) {\n        var _base, params, pathSegments;\n\n        if (this instanceof base) {\n          _base = this;\n        } else {\n          _base = this.base;\n        }\n\n        params = this.params || [];\n        if (param) params = params.concat(param)\n\n        pathSegments = this.pathSegments || [];\n        pathSegments = pathSegments.concat([segment, param]);\n        pathSegments = pathSegments.filter(function (segment) { return segment });\n\n        return new constructor(_base, params, pathSegments);\n      };\n\n      proxy.prototype[segment]._constructor = constructor;\n\n      return proxy = constructor;\n    }\n  });\n\n  return proxy;\n}\n\n\nfunction normalizeName (name) {\n  name = name.toLowerCase();\n  name = inflection.dasherize(name).replace(/-/g, '_');\n  name = inflection.camelize(name, true);\n\n  return name;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}