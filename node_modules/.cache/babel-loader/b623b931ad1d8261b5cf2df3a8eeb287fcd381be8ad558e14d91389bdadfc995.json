{"ast":null,"code":"/**\n * Module exports.\n */\n\nmodule.exports = shExpMatch;\n\n/**\n * Returns true if the string matches the specified shell\n * expression.\n *\n * Actually, currently the patterns are shell expressions,\n * not regular expressions.\n *\n * Examples:\n *\n * ``` js\n * shExpMatch(\"http://home.netscape.com/people/ari/index.html\", \"*\\/ari/*\")\n *   // is true.\n *\n * shExpMatch(\"http://home.netscape.com/people/montulli/index.html\", \"*\\/ari/*\")\n *   // is false.\n * ```\n *\n * @param {String} str is any string to compare (e.g. the URL, or the hostname).\n * @param {String} shexp is a shell expression to compare against.\n * @return {Boolean} true if the string matches the shell expression.\n */\n\nfunction shExpMatch(str, shexp) {\n  var re = toRegExp(shexp);\n  return re.test(str);\n}\n\n/**\n * Converts a \"shell expression\" to a JavaScript RegExp.\n *\n * @api private\n */\n\nfunction toRegExp(str) {\n  str = String(str).replace(/\\?/g, '.').replace(/\\*/g, '(.*)');\n  return new RegExp('^' + str + '$');\n}","map":{"version":3,"names":["module","exports","shExpMatch","str","shexp","re","toRegExp","test","String","replace","RegExp"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pac-resolver/shExpMatch.js"],"sourcesContent":["\n/**\n * Module exports.\n */\n\nmodule.exports = shExpMatch;\n\n/**\n * Returns true if the string matches the specified shell\n * expression.\n *\n * Actually, currently the patterns are shell expressions,\n * not regular expressions.\n *\n * Examples:\n *\n * ``` js\n * shExpMatch(\"http://home.netscape.com/people/ari/index.html\", \"*\\/ari/*\")\n *   // is true.\n *\n * shExpMatch(\"http://home.netscape.com/people/montulli/index.html\", \"*\\/ari/*\")\n *   // is false.\n * ```\n *\n * @param {String} str is any string to compare (e.g. the URL, or the hostname).\n * @param {String} shexp is a shell expression to compare against.\n * @return {Boolean} true if the string matches the shell expression.\n */\n\nfunction shExpMatch (str, shexp) {\n  var re = toRegExp(shexp);\n  return re.test(str);\n}\n\n/**\n * Converts a \"shell expression\" to a JavaScript RegExp.\n *\n * @api private\n */\n\nfunction toRegExp (str) {\n  str = String(str)\n    .replace(/\\?/g, '.')\n    .replace(/\\*/g, '(.*)');\n  return new RegExp('^' + str + '$');\n}\n"],"mappings":"AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAGC,UAAU;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,UAAUA,CAAEC,GAAG,EAAEC,KAAK,EAAE;EAC/B,IAAIC,EAAE,GAAGC,QAAQ,CAACF,KAAK,CAAC;EACxB,OAAOC,EAAE,CAACE,IAAI,CAACJ,GAAG,CAAC;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAASG,QAAQA,CAAEH,GAAG,EAAE;EACtBA,GAAG,GAAGK,MAAM,CAACL,GAAG,CAAC,CACdM,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;EACzB,OAAO,IAAIC,MAAM,CAAC,GAAG,GAAGP,GAAG,GAAG,GAAG,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}