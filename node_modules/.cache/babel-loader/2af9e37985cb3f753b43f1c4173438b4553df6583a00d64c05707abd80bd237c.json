{"ast":null,"code":"import $5OpyM$restructure from \"restructure\";\nimport { readFileSync as $5OpyM$readFileSync, readFile as $5OpyM$readFile } from \"fs\";\nimport { applyDecoratedDescriptor as $5OpyM$applyDecoratedDescriptor } from \"@swc/helpers\";\nimport { Buffer as $5OpyM$Buffer } from \"buffer\";\nimport { resolveLength as $5OpyM$resolveLength, PropertyDescriptor as $5OpyM$PropertyDescriptor } from \"restructure/src/utils.js\";\nimport $5OpyM$deepequal from \"deep-equal\";\nimport $5OpyM$iconvlitecjs from \"../iconv-lite.cjs\";\nimport $5OpyM$unicodeproperties from \"unicode-properties\";\nimport $5OpyM$unicodetrie from \"unicode-trie\";\nimport $5OpyM$dfa from \"dfa\";\nimport $5OpyM$clone from \"clone\";\nimport $5OpyM$tinyinflate from \"tiny-inflate\";\nimport $5OpyM$brotlidecompressjs from \"brotli/decompress.js\";\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $8857867ee3ddfad5$exports = {};\n$parcel$export($8857867ee3ddfad5$exports, \"logErrors\", () => $8857867ee3ddfad5$export$bd5c5d8b8dcafd78);\n$parcel$export($8857867ee3ddfad5$exports, \"registerFormat\", () => $8857867ee3ddfad5$export$36b2f24e97d43be);\n$parcel$export($8857867ee3ddfad5$exports, \"openSync\", () => $8857867ee3ddfad5$export$fa5499edb1ab414a);\n$parcel$export($8857867ee3ddfad5$exports, \"create\", () => $8857867ee3ddfad5$export$185802fd694ee1f5);\n$parcel$export($8857867ee3ddfad5$exports, \"open\", () => $8857867ee3ddfad5$export$3ce6949f20cea765);\n$parcel$export($8857867ee3ddfad5$exports, \"defaultLanguage\", () => $8857867ee3ddfad5$export$42940898df819940);\n$parcel$export($8857867ee3ddfad5$exports, \"setDefaultLanguage\", () => $8857867ee3ddfad5$export$5157e7780d44cc36);\nlet $8857867ee3ddfad5$export$bd5c5d8b8dcafd78 = false;\nlet $8857867ee3ddfad5$var$formats = [];\nfunction $8857867ee3ddfad5$export$36b2f24e97d43be(format) {\n  $8857867ee3ddfad5$var$formats.push(format);\n}\nfunction $8857867ee3ddfad5$export$fa5499edb1ab414a(filename, postscriptName) {\n  let buffer = $5OpyM$readFileSync(filename);\n  return $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);\n}\nfunction $8857867ee3ddfad5$export$3ce6949f20cea765(filename, postscriptName, callback) {\n  if (typeof postscriptName === 'function') {\n    callback = postscriptName;\n    postscriptName = null;\n  }\n  $5OpyM$readFile(filename, function (err, buffer) {\n    if (err) return callback(err);\n    try {\n      var font = $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName);\n    } catch (e) {\n      return callback(e);\n    }\n    return callback(null, font);\n  });\n  return;\n}\nfunction $8857867ee3ddfad5$export$185802fd694ee1f5(buffer, postscriptName) {\n  for (let i = 0; i < $8857867ee3ddfad5$var$formats.length; i++) {\n    let format = $8857867ee3ddfad5$var$formats[i];\n    if (format.probe(buffer)) {\n      let font = new format(new $5OpyM$restructure.DecodeStream(buffer));\n      if (postscriptName) return font.getFont(postscriptName);\n      return font;\n    }\n  }\n  throw new Error('Unknown font format');\n}\nlet $8857867ee3ddfad5$export$42940898df819940 = 'en';\nfunction $8857867ee3ddfad5$export$5157e7780d44cc36(lang = 'en') {\n  $8857867ee3ddfad5$export$42940898df819940 = lang;\n}\nfunction $df9bc573962369ff$export$69a3209f1a06c04d(target, key1, descriptor) {\n  if (descriptor.get) {\n    let get = descriptor.get;\n    descriptor.get = function () {\n      let value = get.call(this);\n      Object.defineProperty(this, key1, {\n        value: value\n      });\n      return value;\n    };\n  } else if (typeof descriptor.value === 'function') {\n    let fn = descriptor.value;\n    return {\n      get() {\n        let $df9bc573962369ff$export$69a3209f1a06c04d = new Map();\n        function memoized(...args) {\n          let key = args.length > 0 ? args[0] : 'value';\n          if ($df9bc573962369ff$export$69a3209f1a06c04d.has(key)) return $df9bc573962369ff$export$69a3209f1a06c04d.get(key);\n          let result = fn.apply(this, args);\n          $df9bc573962369ff$export$69a3209f1a06c04d.set(key, result);\n          return result;\n        }\n        Object.defineProperty(this, key1, {\n          value: memoized\n        });\n        return memoized;\n      }\n    };\n  }\n}\nlet $9aad45a64cf8e4b5$var$SubHeader = new $5OpyM$restructure.Struct({\n  firstCode: $5OpyM$restructure.uint16,\n  entryCount: $5OpyM$restructure.uint16,\n  idDelta: $5OpyM$restructure.int16,\n  idRangeOffset: $5OpyM$restructure.uint16\n});\nlet $9aad45a64cf8e4b5$var$CmapGroup = new $5OpyM$restructure.Struct({\n  startCharCode: $5OpyM$restructure.uint32,\n  endCharCode: $5OpyM$restructure.uint32,\n  glyphID: $5OpyM$restructure.uint32\n});\nlet $9aad45a64cf8e4b5$var$UnicodeValueRange = new $5OpyM$restructure.Struct({\n  startUnicodeValue: $5OpyM$restructure.uint24,\n  additionalCount: $5OpyM$restructure.uint8\n});\nlet $9aad45a64cf8e4b5$var$UVSMapping = new $5OpyM$restructure.Struct({\n  unicodeValue: $5OpyM$restructure.uint24,\n  glyphID: $5OpyM$restructure.uint16\n});\nlet $9aad45a64cf8e4b5$var$DefaultUVS = new $5OpyM$restructure.Array($9aad45a64cf8e4b5$var$UnicodeValueRange, $5OpyM$restructure.uint32);\nlet $9aad45a64cf8e4b5$var$NonDefaultUVS = new $5OpyM$restructure.Array($9aad45a64cf8e4b5$var$UVSMapping, $5OpyM$restructure.uint32);\nlet $9aad45a64cf8e4b5$var$VarSelectorRecord = new $5OpyM$restructure.Struct({\n  varSelector: $5OpyM$restructure.uint24,\n  defaultUVS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $9aad45a64cf8e4b5$var$DefaultUVS, {\n    type: 'parent'\n  }),\n  nonDefaultUVS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $9aad45a64cf8e4b5$var$NonDefaultUVS, {\n    type: 'parent'\n  })\n});\nlet $9aad45a64cf8e4b5$var$CmapSubtable = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  0: {\n    length: $5OpyM$restructure.uint16,\n    language: $5OpyM$restructure.uint16,\n    codeMap: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint8, 256)\n  },\n  2: {\n    length: $5OpyM$restructure.uint16,\n    language: $5OpyM$restructure.uint16,\n    subHeaderKeys: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 256),\n    subHeaderCount: t => Math.max.apply(Math, t.subHeaderKeys),\n    subHeaders: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$SubHeader, 'subHeaderCount'),\n    glyphIndexArray: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'subHeaderCount')\n  },\n  4: {\n    length: $5OpyM$restructure.uint16,\n    language: $5OpyM$restructure.uint16,\n    segCountX2: $5OpyM$restructure.uint16,\n    segCount: t => t.segCountX2 >> 1,\n    searchRange: $5OpyM$restructure.uint16,\n    entrySelector: $5OpyM$restructure.uint16,\n    rangeShift: $5OpyM$restructure.uint16,\n    endCode: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'segCount'),\n    reservedPad: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n    startCode: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'segCount'),\n    idDelta: new $5OpyM$restructure.LazyArray($5OpyM$restructure.int16, 'segCount'),\n    idRangeOffset: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'segCount'),\n    glyphIndexArray: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, t => (t.length - t._currentOffset) / 2)\n  },\n  6: {\n    length: $5OpyM$restructure.uint16,\n    language: $5OpyM$restructure.uint16,\n    firstCode: $5OpyM$restructure.uint16,\n    entryCount: $5OpyM$restructure.uint16,\n    glyphIndices: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'entryCount')\n  },\n  8: {\n    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n    length: $5OpyM$restructure.uint32,\n    language: $5OpyM$restructure.uint16,\n    is32: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint8, 8192),\n    nGroups: $5OpyM$restructure.uint32,\n    groups: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, 'nGroups')\n  },\n  10: {\n    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n    length: $5OpyM$restructure.uint32,\n    language: $5OpyM$restructure.uint32,\n    firstCode: $5OpyM$restructure.uint32,\n    entryCount: $5OpyM$restructure.uint32,\n    glyphIndices: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'numChars')\n  },\n  12: {\n    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n    length: $5OpyM$restructure.uint32,\n    language: $5OpyM$restructure.uint32,\n    nGroups: $5OpyM$restructure.uint32,\n    groups: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, 'nGroups')\n  },\n  13: {\n    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n    length: $5OpyM$restructure.uint32,\n    language: $5OpyM$restructure.uint32,\n    nGroups: $5OpyM$restructure.uint32,\n    groups: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$CmapGroup, 'nGroups')\n  },\n  14: {\n    length: $5OpyM$restructure.uint32,\n    numRecords: $5OpyM$restructure.uint32,\n    varSelectors: new $5OpyM$restructure.LazyArray($9aad45a64cf8e4b5$var$VarSelectorRecord, 'numRecords')\n  }\n});\nlet $9aad45a64cf8e4b5$var$CmapEntry = new $5OpyM$restructure.Struct({\n  platformID: $5OpyM$restructure.uint16,\n  encodingID: $5OpyM$restructure.uint16,\n  table: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $9aad45a64cf8e4b5$var$CmapSubtable, {\n    type: 'parent',\n    lazy: true\n  })\n});\nvar\n// character to glyph mapping\n$9aad45a64cf8e4b5$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  numSubtables: $5OpyM$restructure.uint16,\n  tables: new $5OpyM$restructure.Array($9aad45a64cf8e4b5$var$CmapEntry, 'numSubtables')\n});\nvar\n// font header\n$b41847595480ce3a$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.int32,\n  revision: $5OpyM$restructure.int32,\n  checkSumAdjustment: $5OpyM$restructure.uint32,\n  magicNumber: $5OpyM$restructure.uint32,\n  flags: $5OpyM$restructure.uint16,\n  unitsPerEm: $5OpyM$restructure.uint16,\n  created: new $5OpyM$restructure.Array($5OpyM$restructure.int32, 2),\n  modified: new $5OpyM$restructure.Array($5OpyM$restructure.int32, 2),\n  xMin: $5OpyM$restructure.int16,\n  yMin: $5OpyM$restructure.int16,\n  xMax: $5OpyM$restructure.int16,\n  yMax: $5OpyM$restructure.int16,\n  macStyle: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, ['bold', 'italic', 'underline', 'outline', 'shadow', 'condensed', 'extended']),\n  lowestRecPPEM: $5OpyM$restructure.uint16,\n  fontDirectionHint: $5OpyM$restructure.int16,\n  indexToLocFormat: $5OpyM$restructure.int16,\n  glyphDataFormat: $5OpyM$restructure.int16 // 0 for current format\n});\nvar\n// horizontal header\n$5fda302e2516d0c7$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.int32,\n  ascent: $5OpyM$restructure.int16,\n  descent: $5OpyM$restructure.int16,\n  lineGap: $5OpyM$restructure.int16,\n  advanceWidthMax: $5OpyM$restructure.uint16,\n  minLeftSideBearing: $5OpyM$restructure.int16,\n  minRightSideBearing: $5OpyM$restructure.int16,\n  xMaxExtent: $5OpyM$restructure.int16,\n  caretSlopeRise: $5OpyM$restructure.int16,\n  caretSlopeRun: $5OpyM$restructure.int16,\n  caretOffset: $5OpyM$restructure.int16,\n  reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.int16, 4),\n  metricDataFormat: $5OpyM$restructure.int16,\n  numberOfMetrics: $5OpyM$restructure.uint16 // Number of advance widths in 'hmtx' table\n});\nlet $28788c978325a3e1$var$HmtxEntry = new $5OpyM$restructure.Struct({\n  advance: $5OpyM$restructure.uint16,\n  bearing: $5OpyM$restructure.int16\n});\nvar $28788c978325a3e1$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  metrics: new $5OpyM$restructure.LazyArray($28788c978325a3e1$var$HmtxEntry, t => t.parent.hhea.numberOfMetrics),\n  bearings: new $5OpyM$restructure.LazyArray($5OpyM$restructure.int16, t => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\nvar\n// maxiumum profile\n$9e68d972c1fae2a9$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.int32,\n  numGlyphs: $5OpyM$restructure.uint16,\n  maxPoints: $5OpyM$restructure.uint16,\n  maxContours: $5OpyM$restructure.uint16,\n  maxComponentPoints: $5OpyM$restructure.uint16,\n  maxComponentContours: $5OpyM$restructure.uint16,\n  maxZones: $5OpyM$restructure.uint16,\n  maxTwilightPoints: $5OpyM$restructure.uint16,\n  maxStorage: $5OpyM$restructure.uint16,\n  maxFunctionDefs: $5OpyM$restructure.uint16,\n  maxInstructionDefs: $5OpyM$restructure.uint16,\n  maxStackElements: $5OpyM$restructure.uint16,\n  maxSizeOfInstructions: $5OpyM$restructure.uint16,\n  maxComponentElements: $5OpyM$restructure.uint16,\n  maxComponentDepth: $5OpyM$restructure.uint16 // Maximum levels of recursion; 1 for simple components\n});\nfunction $111d7d948974b54a$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {\n  if (platformID === 1 && $111d7d948974b54a$export$479e671907f486d1[languageID]) return $111d7d948974b54a$export$479e671907f486d1[languageID];\n  return $111d7d948974b54a$export$6fef87b7618bdf0b[platformID][encodingID];\n}\nconst $111d7d948974b54a$export$6fef87b7618bdf0b = [\n// unicode\n['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'],\n// macintosh\n// Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n// 0\tRoman                 17\tMalayalam\n// 1\tJapanese\t            18\tSinhalese\n// 2\tTraditional Chinese\t  19\tBurmese\n// 3\tKorean\t              20\tKhmer\n// 4\tArabic\t              21\tThai\n// 5\tHebrew\t              22\tLaotian\n// 6\tGreek\t                23\tGeorgian\n// 7\tRussian\t              24\tArmenian\n// 8\tRSymbol\t              25\tSimplified Chinese\n// 9\tDevanagari\t          26\tTibetan\n// 10\tGurmukhi\t            27\tMongolian\n// 11\tGujarati\t            28\tGeez\n// 12\tOriya\t                29\tSlavic\n// 13\tBengali\t              30\tVietnamese\n// 14\tTamil\t                31\tSindhi\n// 15\tTelugu\t              32\t(Uninterpreted)\n// 16\tKannada\n['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8', 'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati', 'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese', 'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', 'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'],\n// ISO (deprecated)\n['ascii'],\n// windows\n// Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']];\nconst $111d7d948974b54a$export$479e671907f486d1 = {\n  15: 'maciceland',\n  17: 'macturkish',\n  18: 'maccroatian',\n  24: 'maccenteuro',\n  25: 'maccenteuro',\n  26: 'maccenteuro',\n  27: 'maccenteuro',\n  28: 'maccenteuro',\n  30: 'maciceland',\n  37: 'macromania',\n  38: 'maccenteuro',\n  39: 'maccenteuro',\n  40: 'maccenteuro',\n  143: 'macinuit',\n  146: 'macgaelic' // Unsupported by iconv-lite\n};\nconst $111d7d948974b54a$export$2092376fd002e13 = [\n// unicode\n[], {\n  0: 'en',\n  30: 'fo',\n  60: 'ks',\n  90: 'rw',\n  1: 'fr',\n  31: 'fa',\n  61: 'ku',\n  91: 'rn',\n  2: 'de',\n  32: 'ru',\n  62: 'sd',\n  92: 'ny',\n  3: 'it',\n  33: 'zh',\n  63: 'bo',\n  93: 'mg',\n  4: 'nl',\n  34: 'nl-BE',\n  64: 'ne',\n  94: 'eo',\n  5: 'sv',\n  35: 'ga',\n  65: 'sa',\n  128: 'cy',\n  6: 'es',\n  36: 'sq',\n  66: 'mr',\n  129: 'eu',\n  7: 'da',\n  37: 'ro',\n  67: 'bn',\n  130: 'ca',\n  8: 'pt',\n  38: 'cz',\n  68: 'as',\n  131: 'la',\n  9: 'no',\n  39: 'sk',\n  69: 'gu',\n  132: 'qu',\n  10: 'he',\n  40: 'si',\n  70: 'pa',\n  133: 'gn',\n  11: 'ja',\n  41: 'yi',\n  71: 'or',\n  134: 'ay',\n  12: 'ar',\n  42: 'sr',\n  72: 'ml',\n  135: 'tt',\n  13: 'fi',\n  43: 'mk',\n  73: 'kn',\n  136: 'ug',\n  14: 'el',\n  44: 'bg',\n  74: 'ta',\n  137: 'dz',\n  15: 'is',\n  45: 'uk',\n  75: 'te',\n  138: 'jv',\n  16: 'mt',\n  46: 'be',\n  76: 'si',\n  139: 'su',\n  17: 'tr',\n  47: 'uz',\n  77: 'my',\n  140: 'gl',\n  18: 'hr',\n  48: 'kk',\n  78: 'km',\n  141: 'af',\n  19: 'zh-Hant',\n  49: 'az-Cyrl',\n  79: 'lo',\n  142: 'br',\n  20: 'ur',\n  50: 'az-Arab',\n  80: 'vi',\n  143: 'iu',\n  21: 'hi',\n  51: 'hy',\n  81: 'id',\n  144: 'gd',\n  22: 'th',\n  52: 'ka',\n  82: 'tl',\n  145: 'gv',\n  23: 'ko',\n  53: 'mo',\n  83: 'ms',\n  146: 'ga',\n  24: 'lt',\n  54: 'ky',\n  84: 'ms-Arab',\n  147: 'to',\n  25: 'pl',\n  55: 'tg',\n  85: 'am',\n  148: 'el-polyton',\n  26: 'hu',\n  56: 'tk',\n  86: 'ti',\n  149: 'kl',\n  27: 'es',\n  57: 'mn-CN',\n  87: 'om',\n  150: 'az',\n  28: 'lv',\n  58: 'mn',\n  88: 'so',\n  151: 'nn',\n  29: 'se',\n  59: 'ps',\n  89: 'sw'\n},\n// ISO (deprecated)\n[], {\n  0x0436: 'af',\n  0x4009: 'en-IN',\n  0x0487: 'rw',\n  0x0432: 'tn',\n  0x041C: 'sq',\n  0x1809: 'en-IE',\n  0x0441: 'sw',\n  0x045B: 'si',\n  0x0484: 'gsw',\n  0x2009: 'en-JM',\n  0x0457: 'kok',\n  0x041B: 'sk',\n  0x045E: 'am',\n  0x4409: 'en-MY',\n  0x0412: 'ko',\n  0x0424: 'sl',\n  0x1401: 'ar-DZ',\n  0x1409: 'en-NZ',\n  0x0440: 'ky',\n  0x2C0A: 'es-AR',\n  0x3C01: 'ar-BH',\n  0x3409: 'en-PH',\n  0x0454: 'lo',\n  0x400A: 'es-BO',\n  0x0C01: 'ar',\n  0x4809: 'en-SG',\n  0x0426: 'lv',\n  0x340A: 'es-CL',\n  0x0801: 'ar-IQ',\n  0x1C09: 'en-ZA',\n  0x0427: 'lt',\n  0x240A: 'es-CO',\n  0x2C01: 'ar-JO',\n  0x2C09: 'en-TT',\n  0x082E: 'dsb',\n  0x140A: 'es-CR',\n  0x3401: 'ar-KW',\n  0x0809: 'en-GB',\n  0x046E: 'lb',\n  0x1C0A: 'es-DO',\n  0x3001: 'ar-LB',\n  0x0409: 'en',\n  0x042F: 'mk',\n  0x300A: 'es-EC',\n  0x1001: 'ar-LY',\n  0x3009: 'en-ZW',\n  0x083E: 'ms-BN',\n  0x440A: 'es-SV',\n  0x1801: 'ary',\n  0x0425: 'et',\n  0x043E: 'ms',\n  0x100A: 'es-GT',\n  0x2001: 'ar-OM',\n  0x0438: 'fo',\n  0x044C: 'ml',\n  0x480A: 'es-HN',\n  0x4001: 'ar-QA',\n  0x0464: 'fil',\n  0x043A: 'mt',\n  0x080A: 'es-MX',\n  0x0401: 'ar-SA',\n  0x040B: 'fi',\n  0x0481: 'mi',\n  0x4C0A: 'es-NI',\n  0x2801: 'ar-SY',\n  0x080C: 'fr-BE',\n  0x047A: 'arn',\n  0x180A: 'es-PA',\n  0x1C01: 'aeb',\n  0x0C0C: 'fr-CA',\n  0x044E: 'mr',\n  0x3C0A: 'es-PY',\n  0x3801: 'ar-AE',\n  0x040C: 'fr',\n  0x047C: 'moh',\n  0x280A: 'es-PE',\n  0x2401: 'ar-YE',\n  0x140C: 'fr-LU',\n  0x0450: 'mn',\n  0x500A: 'es-PR',\n  0x042B: 'hy',\n  0x180C: 'fr-MC',\n  0x0850: 'mn-CN',\n  0x0C0A: 'es',\n  0x044D: 'as',\n  0x100C: 'fr-CH',\n  0x0461: 'ne',\n  0x040A: 'es',\n  0x082C: 'az-Cyrl',\n  0x0462: 'fy',\n  0x0414: 'nb',\n  0x540A: 'es-US',\n  0x042C: 'az',\n  0x0456: 'gl',\n  0x0814: 'nn',\n  0x380A: 'es-UY',\n  0x046D: 'ba',\n  0x0437: 'ka',\n  0x0482: 'oc',\n  0x200A: 'es-VE',\n  0x042D: 'eu',\n  0x0C07: 'de-AT',\n  0x0448: 'or',\n  0x081D: 'sv-FI',\n  0x0423: 'be',\n  0x0407: 'de',\n  0x0463: 'ps',\n  0x041D: 'sv',\n  0x0845: 'bn',\n  0x1407: 'de-LI',\n  0x0415: 'pl',\n  0x045A: 'syr',\n  0x0445: 'bn-IN',\n  0x1007: 'de-LU',\n  0x0416: 'pt',\n  0x0428: 'tg',\n  0x201A: 'bs-Cyrl',\n  0x0807: 'de-CH',\n  0x0816: 'pt-PT',\n  0x085F: 'tzm',\n  0x141A: 'bs',\n  0x0408: 'el',\n  0x0446: 'pa',\n  0x0449: 'ta',\n  0x047E: 'br',\n  0x046F: 'kl',\n  0x046B: 'qu-BO',\n  0x0444: 'tt',\n  0x0402: 'bg',\n  0x0447: 'gu',\n  0x086B: 'qu-EC',\n  0x044A: 'te',\n  0x0403: 'ca',\n  0x0468: 'ha',\n  0x0C6B: 'qu',\n  0x041E: 'th',\n  0x0C04: 'zh-HK',\n  0x040D: 'he',\n  0x0418: 'ro',\n  0x0451: 'bo',\n  0x1404: 'zh-MO',\n  0x0439: 'hi',\n  0x0417: 'rm',\n  0x041F: 'tr',\n  0x0804: 'zh',\n  0x040E: 'hu',\n  0x0419: 'ru',\n  0x0442: 'tk',\n  0x1004: 'zh-SG',\n  0x040F: 'is',\n  0x243B: 'smn',\n  0x0480: 'ug',\n  0x0404: 'zh-TW',\n  0x0470: 'ig',\n  0x103B: 'smj-NO',\n  0x0422: 'uk',\n  0x0483: 'co',\n  0x0421: 'id',\n  0x143B: 'smj',\n  0x042E: 'hsb',\n  0x041A: 'hr',\n  0x045D: 'iu',\n  0x0C3B: 'se-FI',\n  0x0420: 'ur',\n  0x101A: 'hr-BA',\n  0x085D: 'iu-Latn',\n  0x043B: 'se',\n  0x0843: 'uz-Cyrl',\n  0x0405: 'cs',\n  0x083C: 'ga',\n  0x083B: 'se-SE',\n  0x0443: 'uz',\n  0x0406: 'da',\n  0x0434: 'xh',\n  0x203B: 'sms',\n  0x042A: 'vi',\n  0x048C: 'prs',\n  0x0435: 'zu',\n  0x183B: 'sma-NO',\n  0x0452: 'cy',\n  0x0465: 'dv',\n  0x0410: 'it',\n  0x1C3B: 'sms',\n  0x0488: 'wo',\n  0x0813: 'nl-BE',\n  0x0810: 'it-CH',\n  0x044F: 'sa',\n  0x0485: 'sah',\n  0x0413: 'nl',\n  0x0411: 'ja',\n  0x1C1A: 'sr-Cyrl-BA',\n  0x0478: 'ii',\n  0x0C09: 'en-AU',\n  0x044B: 'kn',\n  0x0C1A: 'sr',\n  0x046A: 'yo',\n  0x2809: 'en-BZ',\n  0x043F: 'kk',\n  0x181A: 'sr-Latn-BA',\n  0x1009: 'en-CA',\n  0x0453: 'km',\n  0x081A: 'sr-Latn',\n  0x2409: 'en-029',\n  0x0486: 'quc',\n  0x046C: 'nso'\n}];\nvar $866b9b7dd32d7242$require$Buffer = $5OpyM$Buffer;\nlet $866b9b7dd32d7242$var$NameRecord = new $5OpyM$restructure.Struct({\n  platformID: $5OpyM$restructure.uint16,\n  encodingID: $5OpyM$restructure.uint16,\n  languageID: $5OpyM$restructure.uint16,\n  nameID: $5OpyM$restructure.uint16,\n  length: $5OpyM$restructure.uint16,\n  string: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.String('length', t => $111d7d948974b54a$export$badc544e0651b6b1(t.platformID, t.encodingID, t.languageID)), {\n    type: 'parent',\n    relativeTo: ctx => ctx.parent.stringOffset,\n    allowNull: false\n  })\n});\nlet $866b9b7dd32d7242$var$LangTagRecord = new $5OpyM$restructure.Struct({\n  length: $5OpyM$restructure.uint16,\n  tag: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.String('length', 'utf16be'), {\n    type: 'parent',\n    relativeTo: ctx => ctx.stringOffset\n  })\n});\nvar $866b9b7dd32d7242$var$NameTable = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  0: {\n    count: $5OpyM$restructure.uint16,\n    stringOffset: $5OpyM$restructure.uint16,\n    records: new $5OpyM$restructure.Array($866b9b7dd32d7242$var$NameRecord, 'count')\n  },\n  1: {\n    count: $5OpyM$restructure.uint16,\n    stringOffset: $5OpyM$restructure.uint16,\n    records: new $5OpyM$restructure.Array($866b9b7dd32d7242$var$NameRecord, 'count'),\n    langTagCount: $5OpyM$restructure.uint16,\n    langTags: new $5OpyM$restructure.Array($866b9b7dd32d7242$var$LangTagRecord, 'langTagCount')\n  }\n});\nvar $866b9b7dd32d7242$export$2e2bcd8739ae039 = $866b9b7dd32d7242$var$NameTable;\nconst $866b9b7dd32d7242$var$NAMES = ['copyright', 'fontFamily', 'fontSubfamily', 'uniqueSubfamily', 'fullName', 'version', 'postscriptName', 'trademark', 'manufacturer', 'designer', 'description', 'vendorURL', 'designerURL', 'license', 'licenseURL', null, 'preferredFamily', 'preferredSubfamily', 'compatibleFull', 'sampleText', 'postscriptCIDFontName', 'wwsFamilyName', 'wwsSubfamilyName'];\n$866b9b7dd32d7242$var$NameTable.process = function (stream) {\n  var records = {};\n  for (let record of this.records) {\n    // find out what language this is for\n    let language = $111d7d948974b54a$export$2092376fd002e13[record.platformID][record.languageID];\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) language = this.langTags[record.languageID - 0x8000].tag;\n    if (language == null) language = record.platformID + '-' + record.languageID;\n    // if the nameID is >= 256, it is a font feature record (AAT)\n    let key = record.nameID >= 256 ? 'fontFeatures' : $866b9b7dd32d7242$var$NAMES[record.nameID] || record.nameID;\n    if (records[key] == null) records[key] = {};\n    let obj = records[key];\n    if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});\n    if (typeof record.string === 'string' || typeof obj[language] !== 'string') obj[language] = record.string;\n  }\n  this.records = records;\n};\n$866b9b7dd32d7242$var$NameTable.preEncode = function () {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n  let records = [];\n  for (let key in this.records) {\n    let val = this.records[key];\n    if (key === 'fontFeatures') continue;\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),\n      length: $866b9b7dd32d7242$require$Buffer.byteLength(val.en, 'utf16le'),\n      string: val.en\n    });\n    if (key === 'postscriptName') records.push({\n      platformID: 1,\n      encodingID: 0,\n      languageID: 0,\n      nameID: $866b9b7dd32d7242$var$NAMES.indexOf(key),\n      length: val.en.length,\n      string: val.en\n    });\n  }\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = $866b9b7dd32d7242$var$NameTable.size(this, null, false);\n};\nvar $268023eac606db57$var$OS2 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  header: {\n    xAvgCharWidth: $5OpyM$restructure.int16,\n    usWeightClass: $5OpyM$restructure.uint16,\n    usWidthClass: $5OpyM$restructure.uint16,\n    fsType: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, [null, 'noEmbedding', 'viewOnly', 'editable', null, null, null, null, 'noSubsetting', 'bitmapOnly']),\n    ySubscriptXSize: $5OpyM$restructure.int16,\n    ySubscriptYSize: $5OpyM$restructure.int16,\n    ySubscriptXOffset: $5OpyM$restructure.int16,\n    ySubscriptYOffset: $5OpyM$restructure.int16,\n    ySuperscriptXSize: $5OpyM$restructure.int16,\n    ySuperscriptYSize: $5OpyM$restructure.int16,\n    ySuperscriptXOffset: $5OpyM$restructure.int16,\n    ySuperscriptYOffset: $5OpyM$restructure.int16,\n    yStrikeoutSize: $5OpyM$restructure.int16,\n    yStrikeoutPosition: $5OpyM$restructure.int16,\n    sFamilyClass: $5OpyM$restructure.int16,\n    panose: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 10),\n    ulCharRange: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 4),\n    vendorID: new $5OpyM$restructure.String(4),\n    fsSelection: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, ['italic', 'underscore', 'negative', 'outlined', 'strikeout', 'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique']),\n    usFirstCharIndex: $5OpyM$restructure.uint16,\n    usLastCharIndex: $5OpyM$restructure.uint16 // The maximum Unicode index in this font\n  },\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n  1: {\n    typoAscender: $5OpyM$restructure.int16,\n    typoDescender: $5OpyM$restructure.int16,\n    typoLineGap: $5OpyM$restructure.int16,\n    winAscent: $5OpyM$restructure.uint16,\n    winDescent: $5OpyM$restructure.uint16,\n    codePageRange: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 2)\n  },\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender: $5OpyM$restructure.int16,\n    typoDescender: $5OpyM$restructure.int16,\n    typoLineGap: $5OpyM$restructure.int16,\n    winAscent: $5OpyM$restructure.uint16,\n    winDescent: $5OpyM$restructure.uint16,\n    codePageRange: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 2),\n    xHeight: $5OpyM$restructure.int16,\n    capHeight: $5OpyM$restructure.int16,\n    defaultChar: $5OpyM$restructure.uint16,\n    breakChar: $5OpyM$restructure.uint16,\n    maxContent: $5OpyM$restructure.uint16\n  },\n  5: {\n    typoAscender: $5OpyM$restructure.int16,\n    typoDescender: $5OpyM$restructure.int16,\n    typoLineGap: $5OpyM$restructure.int16,\n    winAscent: $5OpyM$restructure.uint16,\n    winDescent: $5OpyM$restructure.uint16,\n    codePageRange: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 2),\n    xHeight: $5OpyM$restructure.int16,\n    capHeight: $5OpyM$restructure.int16,\n    defaultChar: $5OpyM$restructure.uint16,\n    breakChar: $5OpyM$restructure.uint16,\n    maxContent: $5OpyM$restructure.uint16,\n    usLowerOpticalPointSize: $5OpyM$restructure.uint16,\n    usUpperOpticalPointSize: $5OpyM$restructure.uint16\n  }\n});\nlet $268023eac606db57$var$versions = $268023eac606db57$var$OS2.versions;\n$268023eac606db57$var$versions[3] = $268023eac606db57$var$versions[4] = $268023eac606db57$var$versions[2];\nvar $268023eac606db57$export$2e2bcd8739ae039 = $268023eac606db57$var$OS2;\nvar\n// PostScript information\n$5287343c85bea17e$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.fixed32, {\n  header: {\n    italicAngle: $5OpyM$restructure.fixed32,\n    underlinePosition: $5OpyM$restructure.int16,\n    underlineThickness: $5OpyM$restructure.int16,\n    isFixedPitch: $5OpyM$restructure.uint32,\n    minMemType42: $5OpyM$restructure.uint32,\n    maxMemType42: $5OpyM$restructure.uint32,\n    minMemType1: $5OpyM$restructure.uint32,\n    maxMemType1: $5OpyM$restructure.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n  },\n  1: {},\n  2: {\n    numberOfGlyphs: $5OpyM$restructure.uint16,\n    glyphNameIndex: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numberOfGlyphs'),\n    names: new $5OpyM$restructure.Array(new $5OpyM$restructure.String($5OpyM$restructure.uint8))\n  },\n  2.5: {\n    numberOfGlyphs: $5OpyM$restructure.uint16,\n    offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'numberOfGlyphs')\n  },\n  3: {},\n  4: {\n    map: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, t => t.parent.maxp.numGlyphs)\n  }\n});\nvar\n// An array of predefined values accessible by instructions\n$5768e6ef8b1a512a$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  controlValues: new $5OpyM$restructure.Array($5OpyM$restructure.int16)\n});\nvar\n// A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\n$6f2fae1f8d2b4b41$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  instructions: new $5OpyM$restructure.Array($5OpyM$restructure.uint8)\n});\nlet $cae48a5e791773ec$var$loca = new $5OpyM$restructure.VersionedStruct('head.indexToLocFormat', {\n  0: {\n    offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint16)\n  },\n  1: {\n    offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint32)\n  }\n});\n$cae48a5e791773ec$var$loca.process = function () {\n  if (this.version === 0) for (let i = 0; i < this.offsets.length; i++) this.offsets[i] <<= 1;\n};\n$cae48a5e791773ec$var$loca.preEncode = function () {\n  if (this.version === 0) for (let i = 0; i < this.offsets.length; i++) this.offsets[i] >>>= 1;\n};\nvar $cae48a5e791773ec$export$2e2bcd8739ae039 = $cae48a5e791773ec$var$loca;\nvar\n// Set of instructions executed whenever the point size or font transformation change\n$7b12cfca10f7f884$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  controlValueProgram: new $5OpyM$restructure.Array($5OpyM$restructure.uint8)\n});\nvar\n// only used for encoding\n$06e9f2dae5795013$export$2e2bcd8739ae039 = new $5OpyM$restructure.Array(new $5OpyM$restructure.Buffer());\nclass $6333f51d822e64a1$export$2e2bcd8739ae039 {\n  constructor(type) {\n    this.type = type;\n  }\n  getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) ctx = ctx.parent;\n    return ctx ? ctx.version : -1;\n  }\n  decode(stream, parent) {\n    let version = this.getCFFVersion(parent);\n    let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();\n    if (count === 0) return [];\n    let offSize = stream.readUInt8();\n    let offsetType;\n    if (offSize === 1) offsetType = $5OpyM$restructure.uint8;else if (offSize === 2) offsetType = $5OpyM$restructure.uint16;else if (offSize === 3) offsetType = $5OpyM$restructure.uint24;else if (offSize === 4) offsetType = $5OpyM$restructure.uint32;else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);\n    let ret = [];\n    let startPos = stream.pos + (count + 1) * offSize - 1;\n    let start = offsetType.decode(stream);\n    for (let i = 0; i < count; i++) {\n      let end = offsetType.decode(stream);\n      if (this.type != null) {\n        let pos = stream.pos;\n        stream.pos = startPos + start;\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else ret.push({\n        offset: startPos + start,\n        length: end - start\n      });\n      start = end;\n    }\n    stream.pos = startPos + start;\n    return ret;\n  }\n  size(arr, parent) {\n    let size = 2;\n    if (arr.length === 0) return size;\n    let type = this.type || new $5OpyM$restructure.Buffer();\n    // find maximum offset to detminine offset type\n    let offset = 1;\n    for (let i = 0; i < arr.length; i++) {\n      let item = arr[i];\n      offset += type.size(item, parent);\n    }\n    let offsetType;\n    if (offset <= 0xff) offsetType = $5OpyM$restructure.uint8;else if (offset <= 0xffff) offsetType = $5OpyM$restructure.uint16;else if (offset <= 0xffffff) offsetType = $5OpyM$restructure.uint24;else if (offset <= 0xffffffff) offsetType = $5OpyM$restructure.uint32;else throw new Error(\"Bad offset in CFFIndex\");\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n    return size;\n  }\n  encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n    if (arr.length === 0) return;\n    let type = this.type || new $5OpyM$restructure.Buffer();\n    // find maximum offset to detminine offset type\n    let sizes = [];\n    let offset = 1;\n    for (let item of arr) {\n      let s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n    let offsetType;\n    if (offset <= 0xff) offsetType = $5OpyM$restructure.uint8;else if (offset <= 0xffff) offsetType = $5OpyM$restructure.uint16;else if (offset <= 0xffffff) offsetType = $5OpyM$restructure.uint24;else if (offset <= 0xffffffff) offsetType = $5OpyM$restructure.uint32;else throw new Error(\"Bad offset in CFFIndex\");\n    // write offset size\n    stream.writeUInt8(offsetType.size());\n    // write elements\n    offset = 1;\n    offsetType.encode(stream, offset);\n    for (let size of sizes) {\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n    for (let item1 of arr) type.encode(stream, item1, parent);\n    return;\n  }\n}\nconst $2e2b3208cd32b1af$var$FLOAT_EOF = 0xf;\nconst $2e2b3208cd32b1af$var$FLOAT_LOOKUP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];\nconst $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP = {\n  '.': 10,\n  'E': 11,\n  'E-': 12,\n  '-': 14\n};\nclass $2e2b3208cd32b1af$export$2e2bcd8739ae039 {\n  static decode(stream, value) {\n    if (32 <= value && value <= 246) return value - 139;\n    if (247 <= value && value <= 250) return (value - 247) * 256 + stream.readUInt8() + 108;\n    if (251 <= value && value <= 254) return -(value - 251) * 256 - stream.readUInt8() - 108;\n    if (value === 28) return stream.readInt16BE();\n    if (value === 29) return stream.readInt32BE();\n    if (value === 30) {\n      let str = '';\n      while (true) {\n        let b = stream.readUInt8();\n        let n1 = b >> 4;\n        if (n1 === $2e2b3208cd32b1af$var$FLOAT_EOF) break;\n        str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n1];\n        let n2 = b & 15;\n        if (n2 === $2e2b3208cd32b1af$var$FLOAT_EOF) break;\n        str += $2e2b3208cd32b1af$var$FLOAT_LOOKUP[n2];\n      }\n      return parseFloat(str);\n    }\n    return null;\n  }\n  static size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) value = 32768;\n    if ((value | 0) !== value) {\n      let str = '' + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n    } else if (-107 <= value && value <= 107) return 1;else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;else if (-32768 <= value && value <= 32767) return 3;else return 5;\n  }\n  static encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    let val = Number(value);\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    } else if ((val | 0) !== val) {\n      stream.writeUInt8(30);\n      let str = '' + val;\n      for (let i = 0; i < str.length; i += 2) {\n        let c1 = str[i];\n        let n1 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;\n        if (i === str.length - 1) var n2 = $2e2b3208cd32b1af$var$FLOAT_EOF;else {\n          let c2 = str[i + 1];\n          var n2 = $2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n        stream.writeUInt8(n1 << 4 | n2 & 15);\n      }\n      if (n2 !== $2e2b3208cd32b1af$var$FLOAT_EOF) return stream.writeUInt8($2e2b3208cd32b1af$var$FLOAT_EOF << 4);\n    } else if (-107 <= val && val <= 107) return stream.writeUInt8(val + 139);else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  }\n}\nclass $1694c4b242cd1a66$export$2e2bcd8739ae039 {\n  constructor(ops = []) {\n    this.ops = ops;\n    this.fields = {};\n    for (let field of ops) {\n      let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n  decodeOperands(type, stream, ret, operands) {\n    if (Array.isArray(type)) return operands.map((op, i) => this.decodeOperands(type[i], stream, ret, [op]));else if (type.decode != null) return type.decode(stream, ret, operands);else switch (type) {\n      case 'number':\n      case 'offset':\n      case 'sid':\n        return operands[0];\n      case 'boolean':\n        return !!operands[0];\n      default:\n        return operands;\n    }\n  }\n  encodeOperands(type, stream, ctx, operands) {\n    if (Array.isArray(type)) return operands.map((op, i) => this.encodeOperands(type[i], stream, ctx, op)[0]);else if (type.encode != null) return type.encode(stream, operands, ctx);else if (typeof operands === 'number') return [operands];else if (typeof operands === 'boolean') return [+operands];else if (Array.isArray(operands)) return operands;else return [operands];\n  }\n  decode(stream, parent) {\n    let end = stream.pos + parent.length;\n    let ret = {};\n    let operands = [];\n    // define hidden properties\n    Object.defineProperties(ret, {\n      parent: {\n        value: parent\n      },\n      _startOffset: {\n        value: stream.pos\n      }\n    });\n    // fill in defaults\n    for (let key in this.fields) {\n      let field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n    while (stream.pos < end) {\n      let b = stream.readUInt8();\n      if (b < 28) {\n        if (b === 12) b = b << 8 | stream.readUInt8();\n        let field = this.fields[b];\n        if (!field) throw new Error(`Unknown operator ${b}`);\n        let val = this.decodeOperands(field[2], stream, ret, operands);\n        if (val != null) {\n          if (val instanceof $5OpyM$PropertyDescriptor) Object.defineProperty(ret, field[1], val);else ret[field[1]] = val;\n        }\n        operands = [];\n      } else operands.push($2e2b3208cd32b1af$export$2e2bcd8739ae039.decode(stream, b));\n    }\n    return ret;\n  }\n  size(dict, parent, includePointers = true) {\n    let ctx = {\n      parent: parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n    let len = 0;\n    for (let k in this.fields) {\n      let field = this.fields[k];\n      let val = dict[field[1]];\n      if (val == null || $5OpyM$deepequal(val, field[3])) continue;\n      let operands = this.encodeOperands(field[2], null, ctx, val);\n      for (let op of operands) len += $2e2b3208cd32b1af$export$2e2bcd8739ae039.size(op);\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n    if (includePointers) len += ctx.pointerSize;\n    return len;\n  }\n  encode(stream, dict, parent) {\n    let ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent: parent,\n      val: dict,\n      pointerSize: 0\n    };\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n    for (let field of this.ops) {\n      let val = dict[field[1]];\n      if (val == null || $5OpyM$deepequal(val, field[3])) continue;\n      let operands = this.encodeOperands(field[2], stream, ctx, val);\n      for (let op of operands) $2e2b3208cd32b1af$export$2e2bcd8739ae039.encode(stream, op);\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      for (let op1 of key) stream.writeUInt8(op1);\n    }\n    let i = 0;\n    while (i < ctx.pointers.length) {\n      let ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n    return;\n  }\n}\nclass $6631a7581d654814$export$2e2bcd8739ae039 extends $5OpyM$restructure.Pointer {\n  constructor(type, options = {}) {\n    if (options.type == null) options.type = 'global';\n    super(null, type, options);\n  }\n  decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: () => operands[0]\n    };\n    return super.decode(stream, parent, operands);\n  }\n  encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: () => 0\n      };\n      this.size(value, ctx);\n      return [new $6631a7581d654814$var$Ptr(0)];\n    }\n    let ptr = null;\n    this.offsetType = {\n      encode: (stream, val) => ptr = val\n    };\n    super.encode(stream, value, ctx);\n    return [new $6631a7581d654814$var$Ptr(ptr)];\n  }\n}\nclass $6631a7581d654814$var$Ptr {\n  constructor(val) {\n    this.val = val;\n    this.forceLarge = true;\n  }\n  valueOf() {\n    return this.val;\n  }\n}\nclass $94c2c7ed7c236891$var$CFFBlendOp {\n  static decode(stream, parent, operands) {\n    let numBlends = operands.pop();\n    // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n    while (operands.length > numBlends) operands.pop();\n  }\n}\nvar $94c2c7ed7c236891$export$2e2bcd8739ae039 = new $1694c4b242cd1a66$export$2e2bcd8739ae039([\n// key       name                    type                                          default\n[6, 'BlueValues', 'delta', null], [7, 'OtherBlues', 'delta', null], [8, 'FamilyBlues', 'delta', null], [9, 'FamilyOtherBlues', 'delta', null], [[12, 9], 'BlueScale', 'number', 0.039625], [[12, 10], 'BlueShift', 'number', 7], [[12, 11], 'BlueFuzz', 'number', 1], [10, 'StdHW', 'number', null], [11, 'StdVW', 'number', null], [[12, 12], 'StemSnapH', 'delta', null], [[12, 13], 'StemSnapV', 'delta', null], [[12, 14], 'ForceBold', 'boolean', false], [[12, 17], 'LanguageGroup', 'number', 0], [[12, 18], 'ExpansionFactor', 'number', 0.06], [[12, 19], 'initialRandomSeed', 'number', 0], [20, 'defaultWidthX', 'number', 0], [21, 'nominalWidthX', 'number', 0], [22, 'vsindex', 'number', 0], [23, 'blend', $94c2c7ed7c236891$var$CFFBlendOp, null], [19, 'Subrs', new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039(), {\n  type: 'local'\n}), null]]);\nvar\n// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\n$276d3ff37a4362c9$export$2e2bcd8739ae039 = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"];\nlet $50148a3b88f16e26$export$dee0027060fa13bd = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger', 'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron', 'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '', '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '', 'lslash', 'oslash', 'oe', 'germandbls'];\nlet $50148a3b88f16e26$export$4f58f497e14a53c3 = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior', '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '', '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\nlet $a5fab60a6eadb8ed$export$c33b50336c234f16 = ['.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu', 'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright', 'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex', 'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave', 'yacute', 'ydieresis', 'zcaron'];\nlet $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489 = ['.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', 'onequarter', 'onehalf', 'threequarters', 'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];\nlet $a5fab60a6eadb8ed$export$dc28be11139d4120 = ['.notdef', 'space', 'dollaroldstyle', 'dollarsuperior', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior', 'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior', 'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted', 'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter', 'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior'];\n\n//########################\n// Scripts and Languages #\n//########################\nlet $401800e36a580e62$var$LangSysTable = new $5OpyM$restructure.Struct({\n  reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n  reqFeatureIndex: $5OpyM$restructure.uint16,\n  featureCount: $5OpyM$restructure.uint16,\n  featureIndexes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'featureCount')\n});\nlet $401800e36a580e62$var$LangSysRecord = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  langSys: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$LangSysTable, {\n    type: 'parent'\n  })\n});\nlet $401800e36a580e62$var$Script = new $5OpyM$restructure.Struct({\n  defaultLangSys: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$LangSysTable),\n  count: $5OpyM$restructure.uint16,\n  langSysRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LangSysRecord, 'count')\n});\nlet $401800e36a580e62$var$ScriptRecord = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  script: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$Script, {\n    type: 'parent'\n  })\n});\nlet $401800e36a580e62$export$3e15fc05ce864229 = new $5OpyM$restructure.Array($401800e36a580e62$var$ScriptRecord, $5OpyM$restructure.uint16);\n//#######################\n// Features and Lookups #\n//#######################\nlet $401800e36a580e62$var$FeatureParams = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  nameID: $5OpyM$restructure.uint16\n});\nlet $401800e36a580e62$export$6e91cf7616333d5 = new $5OpyM$restructure.Struct({\n  featureParams: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$FeatureParams),\n  lookupCount: $5OpyM$restructure.uint16,\n  lookupListIndexes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'lookupCount')\n});\nlet $401800e36a580e62$var$FeatureRecord = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  feature: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$6e91cf7616333d5, {\n    type: 'parent'\n  })\n});\nlet $401800e36a580e62$export$aa18130def4b6cb4 = new $5OpyM$restructure.Array($401800e36a580e62$var$FeatureRecord, $5OpyM$restructure.uint16);\nlet $401800e36a580e62$var$LookupFlags = new $5OpyM$restructure.Struct({\n  markAttachmentType: $5OpyM$restructure.uint8,\n  flags: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet'])\n});\nfunction $401800e36a580e62$export$df0008c6ff2da22a(SubTable) {\n  let Lookup = new $5OpyM$restructure.Struct({\n    lookupType: $5OpyM$restructure.uint16,\n    flags: $401800e36a580e62$var$LookupFlags,\n    subTableCount: $5OpyM$restructure.uint16,\n    subTables: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, SubTable), 'subTableCount'),\n    markFilteringSet: new $5OpyM$restructure.Optional($5OpyM$restructure.uint16, t => t.flags.flags.useMarkFilteringSet)\n  });\n  return new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, Lookup), $5OpyM$restructure.uint16);\n}\n//#################\n// Coverage Table #\n//#################\nlet $401800e36a580e62$var$RangeRecord = new $5OpyM$restructure.Struct({\n  start: $5OpyM$restructure.uint16,\n  end: $5OpyM$restructure.uint16,\n  startCoverageIndex: $5OpyM$restructure.uint16\n});\nlet $401800e36a580e62$export$17608c3f81a6111 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  1: {\n    glyphCount: $5OpyM$restructure.uint16,\n    glyphs: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'glyphCount')\n  },\n  2: {\n    rangeCount: $5OpyM$restructure.uint16,\n    rangeRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$RangeRecord, 'rangeCount')\n  }\n});\n//#########################\n// Class Definition Table #\n//#########################\nlet $401800e36a580e62$var$ClassRangeRecord = new $5OpyM$restructure.Struct({\n  start: $5OpyM$restructure.uint16,\n  end: $5OpyM$restructure.uint16,\n  class: $5OpyM$restructure.uint16\n});\nlet $401800e36a580e62$export$843d551fbbafef71 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  1: {\n    startGlyph: $5OpyM$restructure.uint16,\n    glyphCount: $5OpyM$restructure.uint16,\n    classValueArray: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'glyphCount')\n  },\n  2: {\n    classRangeCount: $5OpyM$restructure.uint16,\n    classRangeRecord: new $5OpyM$restructure.Array($401800e36a580e62$var$ClassRangeRecord, 'classRangeCount')\n  }\n});\nlet $401800e36a580e62$export$8215d14a63d9fb10 = new $5OpyM$restructure.Struct({\n  a: $5OpyM$restructure.uint16,\n  b: $5OpyM$restructure.uint16,\n  deltaFormat: $5OpyM$restructure.uint16\n});\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\nlet $401800e36a580e62$var$LookupRecord = new $5OpyM$restructure.Struct({\n  sequenceIndex: $5OpyM$restructure.uint16,\n  lookupListIndex: $5OpyM$restructure.uint16\n});\nlet $401800e36a580e62$var$Rule = new $5OpyM$restructure.Struct({\n  glyphCount: $5OpyM$restructure.uint16,\n  lookupCount: $5OpyM$restructure.uint16,\n  input: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, t => t.glyphCount - 1),\n  lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')\n});\nlet $401800e36a580e62$var$RuleSet = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$Rule), $5OpyM$restructure.uint16);\nlet $401800e36a580e62$var$ClassRule = new $5OpyM$restructure.Struct({\n  glyphCount: $5OpyM$restructure.uint16,\n  lookupCount: $5OpyM$restructure.uint16,\n  classes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, t => t.glyphCount - 1),\n  lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')\n});\nlet $401800e36a580e62$var$ClassSet = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ClassRule), $5OpyM$restructure.uint16);\nlet $401800e36a580e62$export$841858b892ce1f4c = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  1: {\n    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    ruleSetCount: $5OpyM$restructure.uint16,\n    ruleSets: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$RuleSet), 'ruleSetCount')\n  },\n  2: {\n    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    classDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),\n    classSetCnt: $5OpyM$restructure.uint16,\n    classSet: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ClassSet), 'classSetCnt')\n  },\n  3: {\n    glyphCount: $5OpyM$restructure.uint16,\n    lookupCount: $5OpyM$restructure.uint16,\n    coverages: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'glyphCount'),\n    lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')\n  }\n});\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\nlet $401800e36a580e62$var$ChainRule = new $5OpyM$restructure.Struct({\n  backtrackGlyphCount: $5OpyM$restructure.uint16,\n  backtrack: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'backtrackGlyphCount'),\n  inputGlyphCount: $5OpyM$restructure.uint16,\n  input: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, t => t.inputGlyphCount - 1),\n  lookaheadGlyphCount: $5OpyM$restructure.uint16,\n  lookahead: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'lookaheadGlyphCount'),\n  lookupCount: $5OpyM$restructure.uint16,\n  lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')\n});\nlet $401800e36a580e62$var$ChainRuleSet = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ChainRule), $5OpyM$restructure.uint16);\nlet $401800e36a580e62$export$5e6d09e6861162f6 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  1: {\n    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    chainCount: $5OpyM$restructure.uint16,\n    chainRuleSets: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ChainRuleSet), 'chainCount')\n  },\n  2: {\n    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    backtrackClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),\n    inputClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),\n    lookaheadClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),\n    chainCount: $5OpyM$restructure.uint16,\n    chainClassSet: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$var$ChainRuleSet), 'chainCount')\n  },\n  3: {\n    backtrackGlyphCount: $5OpyM$restructure.uint16,\n    backtrackCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'backtrackGlyphCount'),\n    inputGlyphCount: $5OpyM$restructure.uint16,\n    inputCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'inputGlyphCount'),\n    lookaheadGlyphCount: $5OpyM$restructure.uint16,\n    lookaheadCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'lookaheadGlyphCount'),\n    lookupCount: $5OpyM$restructure.uint16,\n    lookupRecords: new $5OpyM$restructure.Array($401800e36a580e62$var$LookupRecord, 'lookupCount')\n  }\n});\n\n/*******************\n * Variation Store *\n *******************/\nlet $421a2456cdbaa0d8$var$F2DOT14 = new $5OpyM$restructure.Fixed(16, 'BE', 14);\nlet $421a2456cdbaa0d8$var$RegionAxisCoordinates = new $5OpyM$restructure.Struct({\n  startCoord: $421a2456cdbaa0d8$var$F2DOT14,\n  peakCoord: $421a2456cdbaa0d8$var$F2DOT14,\n  endCoord: $421a2456cdbaa0d8$var$F2DOT14\n});\nlet $421a2456cdbaa0d8$var$VariationRegionList = new $5OpyM$restructure.Struct({\n  axisCount: $5OpyM$restructure.uint16,\n  regionCount: $5OpyM$restructure.uint16,\n  variationRegions: new $5OpyM$restructure.Array(new $5OpyM$restructure.Array($421a2456cdbaa0d8$var$RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\nlet $421a2456cdbaa0d8$var$DeltaSet = new $5OpyM$restructure.Struct({\n  shortDeltas: new $5OpyM$restructure.Array($5OpyM$restructure.int16, t => t.parent.shortDeltaCount),\n  regionDeltas: new $5OpyM$restructure.Array($5OpyM$restructure.int8, t => t.parent.regionIndexCount - t.parent.shortDeltaCount),\n  deltas: t => t.shortDeltas.concat(t.regionDeltas)\n});\nlet $421a2456cdbaa0d8$var$ItemVariationData = new $5OpyM$restructure.Struct({\n  itemCount: $5OpyM$restructure.uint16,\n  shortDeltaCount: $5OpyM$restructure.uint16,\n  regionIndexCount: $5OpyM$restructure.uint16,\n  regionIndexes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'regionIndexCount'),\n  deltaSets: new $5OpyM$restructure.Array($421a2456cdbaa0d8$var$DeltaSet, 'itemCount')\n});\nlet $421a2456cdbaa0d8$export$fe1b122a2710f241 = new $5OpyM$restructure.Struct({\n  format: $5OpyM$restructure.uint16,\n  variationRegionList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$VariationRegionList),\n  variationDataCount: $5OpyM$restructure.uint16,\n  itemVariationData: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$ItemVariationData), 'variationDataCount')\n});\n/**********************\n * Feature Variations *\n **********************/\nlet $421a2456cdbaa0d8$var$ConditionTable = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  1: {\n    axisIndex: $5OpyM$restructure.uint16,\n    axisIndex: $5OpyM$restructure.uint16,\n    filterRangeMinValue: $421a2456cdbaa0d8$var$F2DOT14,\n    filterRangeMaxValue: $421a2456cdbaa0d8$var$F2DOT14\n  }\n});\nlet $421a2456cdbaa0d8$var$ConditionSet = new $5OpyM$restructure.Struct({\n  conditionCount: $5OpyM$restructure.uint16,\n  conditionTable: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$ConditionTable), 'conditionCount')\n});\nlet $421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord = new $5OpyM$restructure.Struct({\n  featureIndex: $5OpyM$restructure.uint16,\n  alternateFeatureTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $401800e36a580e62$export$6e91cf7616333d5, {\n    type: 'parent'\n  })\n});\nlet $421a2456cdbaa0d8$var$FeatureTableSubstitution = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.fixed32,\n  substitutionCount: $5OpyM$restructure.uint16,\n  substitutions: new $5OpyM$restructure.Array($421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord, 'substitutionCount')\n});\nlet $421a2456cdbaa0d8$var$FeatureVariationRecord = new $5OpyM$restructure.Struct({\n  conditionSet: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$ConditionSet, {\n    type: 'parent'\n  }),\n  featureTableSubstitution: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$var$FeatureTableSubstitution, {\n    type: 'parent'\n  })\n});\nlet $421a2456cdbaa0d8$export$441b70b7971dd419 = new $5OpyM$restructure.Struct({\n  majorVersion: $5OpyM$restructure.uint16,\n  minorVersion: $5OpyM$restructure.uint16,\n  featureVariationRecordCount: $5OpyM$restructure.uint32,\n  featureVariationRecords: new $5OpyM$restructure.Array($421a2456cdbaa0d8$var$FeatureVariationRecord, 'featureVariationRecordCount')\n});\n\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\nclass $3e41cd50e8921098$var$PredefinedOp {\n  constructor(predefinedOps, type) {\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n  decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];\n    return this.type.decode(stream, parent, operands);\n  }\n  size(value, ctx) {\n    return this.type.size(value, ctx);\n  }\n  encode(stream, value, ctx) {\n    let index = this.predefinedOps.indexOf(value);\n    if (index !== -1) return index;\n    return this.type.encode(stream, value, ctx);\n  }\n}\nclass $3e41cd50e8921098$var$CFFEncodingVersion extends $5OpyM$restructure.Number {\n  constructor() {\n    super('UInt8');\n  }\n  decode(stream) {\n    return $5OpyM$restructure.uint8.decode(stream) & 0x7f;\n  }\n}\nlet $3e41cd50e8921098$var$Range1 = new $5OpyM$restructure.Struct({\n  first: $5OpyM$restructure.uint16,\n  nLeft: $5OpyM$restructure.uint8\n});\nlet $3e41cd50e8921098$var$Range2 = new $5OpyM$restructure.Struct({\n  first: $5OpyM$restructure.uint16,\n  nLeft: $5OpyM$restructure.uint16\n});\nlet $3e41cd50e8921098$var$CFFCustomEncoding = new $5OpyM$restructure.VersionedStruct(new $3e41cd50e8921098$var$CFFEncodingVersion(), {\n  0: {\n    nCodes: $5OpyM$restructure.uint8,\n    codes: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'nCodes')\n  },\n  1: {\n    nRanges: $5OpyM$restructure.uint8,\n    ranges: new $5OpyM$restructure.Array($3e41cd50e8921098$var$Range1, 'nRanges')\n  }\n});\nlet $3e41cd50e8921098$var$CFFEncoding = new $3e41cd50e8921098$var$PredefinedOp([$50148a3b88f16e26$export$dee0027060fa13bd, $50148a3b88f16e26$export$4f58f497e14a53c3], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomEncoding, {\n  lazy: true\n}));\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\nclass $3e41cd50e8921098$var$RangeArray extends $5OpyM$restructure.Array {\n  decode(stream, parent) {\n    let length = $5OpyM$resolveLength(this.length, stream, parent);\n    let count = 0;\n    let res = [];\n    while (count < length) {\n      let range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n    return res;\n  }\n}\nlet $3e41cd50e8921098$var$CFFCustomCharset = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint8, {\n  0: {\n    glyphs: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, t => t.parent.CharStrings.length - 1)\n  },\n  1: {\n    ranges: new $3e41cd50e8921098$var$RangeArray($3e41cd50e8921098$var$Range1, t => t.parent.CharStrings.length - 1)\n  },\n  2: {\n    ranges: new $3e41cd50e8921098$var$RangeArray($3e41cd50e8921098$var$Range2, t => t.parent.CharStrings.length - 1)\n  }\n});\nlet $3e41cd50e8921098$var$CFFCharset = new $3e41cd50e8921098$var$PredefinedOp([$a5fab60a6eadb8ed$export$c33b50336c234f16, $a5fab60a6eadb8ed$export$3ed0f9e1fee8d489, $a5fab60a6eadb8ed$export$dc28be11139d4120], new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFCustomCharset, {\n  lazy: true\n}));\nlet $3e41cd50e8921098$var$FDRange3 = new $5OpyM$restructure.Struct({\n  first: $5OpyM$restructure.uint16,\n  fd: $5OpyM$restructure.uint8\n});\nlet $3e41cd50e8921098$var$FDRange4 = new $5OpyM$restructure.Struct({\n  first: $5OpyM$restructure.uint32,\n  fd: $5OpyM$restructure.uint16\n});\nlet $3e41cd50e8921098$var$FDSelect = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint8, {\n  0: {\n    fds: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, t => t.parent.CharStrings.length)\n  },\n  3: {\n    nRanges: $5OpyM$restructure.uint16,\n    ranges: new $5OpyM$restructure.Array($3e41cd50e8921098$var$FDRange3, 'nRanges'),\n    sentinel: $5OpyM$restructure.uint16\n  },\n  4: {\n    nRanges: $5OpyM$restructure.uint32,\n    ranges: new $5OpyM$restructure.Array($3e41cd50e8921098$var$FDRange4, 'nRanges'),\n    sentinel: $5OpyM$restructure.uint32\n  }\n});\nlet $3e41cd50e8921098$var$ptr = new $6631a7581d654814$export$2e2bcd8739ae039($94c2c7ed7c236891$export$2e2bcd8739ae039);\nclass $3e41cd50e8921098$var$CFFPrivateOp {\n  decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return $3e41cd50e8921098$var$ptr.decode(stream, parent, [operands[1]]);\n  }\n  size(dict, ctx) {\n    return [$94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false), $3e41cd50e8921098$var$ptr.size(dict, ctx)[0]];\n  }\n  encode(stream, dict, ctx) {\n    return [$94c2c7ed7c236891$export$2e2bcd8739ae039.size(dict, ctx, false), $3e41cd50e8921098$var$ptr.encode(stream, dict, ctx)[0]];\n  }\n}\nlet $3e41cd50e8921098$var$FontDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([\n// key       name                   type(s)                                 default\n[18, 'Private', new $3e41cd50e8921098$var$CFFPrivateOp(), null], [[12, 38], 'FontName', 'sid', null], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [[12, 5], 'PaintType', 'number', 0]]);\nlet $3e41cd50e8921098$var$CFFTopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([\n// key       name                   type(s)                                 default\n[[12, 30], 'ROS', ['sid', 'sid', 'number'], null], [0, 'version', 'sid', null], [1, 'Notice', 'sid', null], [[12, 0], 'Copyright', 'sid', null], [2, 'FullName', 'sid', null], [3, 'FamilyName', 'sid', null], [4, 'Weight', 'sid', null], [[12, 1], 'isFixedPitch', 'boolean', false], [[12, 2], 'ItalicAngle', 'number', 0], [[12, 3], 'UnderlinePosition', 'number', -100], [[12, 4], 'UnderlineThickness', 'number', 50], [[12, 5], 'PaintType', 'number', 0], [[12, 6], 'CharstringType', 'number', 2], [[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [13, 'UniqueID', 'number', null], [5, 'FontBBox', 'array', [0, 0, 0, 0]], [[12, 8], 'StrokeWidth', 'number', 0], [14, 'XUID', 'array', null], [15, 'charset', $3e41cd50e8921098$var$CFFCharset, $a5fab60a6eadb8ed$export$c33b50336c234f16], [16, 'Encoding', $3e41cd50e8921098$var$CFFEncoding, $50148a3b88f16e26$export$dee0027060fa13bd], [17, 'CharStrings', new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039()), null], [18, 'Private', new $3e41cd50e8921098$var$CFFPrivateOp(), null], [[12, 20], 'SyntheticBase', 'number', null], [[12, 21], 'PostScript', 'sid', null], [[12, 22], 'BaseFontName', 'sid', null], [[12, 23], 'BaseFontBlend', 'delta', null],\n// CID font specific\n[[12, 31], 'CIDFontVersion', 'number', 0], [[12, 32], 'CIDFontRevision', 'number', 0], [[12, 33], 'CIDFontType', 'number', 0], [[12, 34], 'CIDCount', 'number', 8720], [[12, 35], 'UIDBase', 'number', null], [[12, 37], 'FDSelect', new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect), null], [[12, 36], 'FDArray', new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)), null], [[12, 38], 'FontName', 'sid', null]]);\nlet $3e41cd50e8921098$var$VariationStore = new $5OpyM$restructure.Struct({\n  length: $5OpyM$restructure.uint16,\n  itemVariationStore: $421a2456cdbaa0d8$export$fe1b122a2710f241\n});\nlet $3e41cd50e8921098$var$CFF2TopDict = new $1694c4b242cd1a66$export$2e2bcd8739ae039([[[12, 7], 'FontMatrix', 'array', [0.001, 0, 0, 0.001, 0, 0]], [17, 'CharStrings', new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039()), null], [[12, 37], 'FDSelect', new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$FDSelect), null], [[12, 36], 'FDArray', new $6631a7581d654814$export$2e2bcd8739ae039(new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$FontDict)), null], [24, 'vstore', new $6631a7581d654814$export$2e2bcd8739ae039($3e41cd50e8921098$var$VariationStore), null], [25, 'maxstack', 'number', 193]]);\nlet $3e41cd50e8921098$var$CFFTop = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.fixed16, {\n  1: {\n    hdrSize: $5OpyM$restructure.uint8,\n    offSize: $5OpyM$restructure.uint8,\n    nameIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new $5OpyM$restructure.String('length')),\n    topDictIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039($3e41cd50e8921098$var$CFFTopDict),\n    stringIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039(new $5OpyM$restructure.String('length')),\n    globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039()\n  },\n  2: {\n    hdrSize: $5OpyM$restructure.uint8,\n    length: $5OpyM$restructure.uint16,\n    topDict: $3e41cd50e8921098$var$CFF2TopDict,\n    globalSubrIndex: new $6333f51d822e64a1$export$2e2bcd8739ae039()\n  }\n});\nvar $3e41cd50e8921098$export$2e2bcd8739ae039 = $3e41cd50e8921098$var$CFFTop;\nclass $8770fc79268fa3c2$var$CFFFont {\n  constructor(stream) {\n    this.stream = stream;\n    this.decode();\n  }\n  static decode(stream) {\n    return new $8770fc79268fa3c2$var$CFFFont(stream);\n  }\n  decode() {\n    let start = this.stream.pos;\n    let top = $3e41cd50e8921098$export$2e2bcd8739ae039.decode(this.stream);\n    for (let key in top) {\n      let val = top[key];\n      this[key] = val;\n    }\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) throw new Error(\"Only a single font is allowed in CFF\");\n      this.topDict = this.topDictIndex[0];\n    }\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  }\n  string(sid) {\n    if (this.version >= 2) return null;\n    if (sid < $276d3ff37a4362c9$export$2e2bcd8739ae039.length) return $276d3ff37a4362c9$export$2e2bcd8739ae039[sid];\n    return this.stringIndex[sid - $276d3ff37a4362c9$export$2e2bcd8739ae039.length];\n  }\n  get postscriptName() {\n    if (this.version < 2) return this.nameIndex[0];\n    return null;\n  }\n  get fullName() {\n    return this.string(this.topDict.FullName);\n  }\n  get familyName() {\n    return this.string(this.topDict.FamilyName);\n  }\n  getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  }\n  getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) return null;\n    // CID-keyed fonts don't have glyph names\n    if (this.isCIDFont) return null;\n    let {\n      charset: charset\n    } = this.topDict;\n    if (Array.isArray(charset)) return charset[gid];\n    if (gid === 0) return '.notdef';\n    gid -= 1;\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n      case 1:\n      case 2:\n        for (let i = 0; i < charset.ranges.length; i++) {\n          let range = charset.ranges[i];\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));\n        }\n        break;\n    }\n    return null;\n  }\n  fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) return null;\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n      case 3:\n      case 4:\n        let {\n          ranges: ranges\n        } = this.topDict.FDSelect;\n        let low = 0;\n        let high = ranges.length - 1;\n        while (low <= high) {\n          let mid = low + high >> 1;\n          if (gid < ranges[mid].first) high = mid - 1;else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;else return ranges[mid].fd;\n        }\n      default:\n        throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);\n    }\n  }\n  privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      let fd = this.fdForGlyph(gid);\n      if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;\n      return null;\n    }\n    if (this.version < 2) return this.topDict.Private;\n    return this.topDict.FDArray[0].Private;\n  }\n}\nvar $8770fc79268fa3c2$export$2e2bcd8739ae039 = $8770fc79268fa3c2$var$CFFFont;\nlet $79f2eb50e4490e51$var$VerticalOrigin = new $5OpyM$restructure.Struct({\n  glyphIndex: $5OpyM$restructure.uint16,\n  vertOriginY: $5OpyM$restructure.int16\n});\nvar $79f2eb50e4490e51$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  majorVersion: $5OpyM$restructure.uint16,\n  minorVersion: $5OpyM$restructure.uint16,\n  defaultVertOriginY: $5OpyM$restructure.int16,\n  numVertOriginYMetrics: $5OpyM$restructure.uint16,\n  metrics: new $5OpyM$restructure.Array($79f2eb50e4490e51$var$VerticalOrigin, 'numVertOriginYMetrics')\n});\nlet $9dd3c2ae0a322c53$export$16b227cb15d716a0 = new $5OpyM$restructure.Struct({\n  height: $5OpyM$restructure.uint8,\n  width: $5OpyM$restructure.uint8,\n  horiBearingX: $5OpyM$restructure.int8,\n  horiBearingY: $5OpyM$restructure.int8,\n  horiAdvance: $5OpyM$restructure.uint8,\n  vertBearingX: $5OpyM$restructure.int8,\n  vertBearingY: $5OpyM$restructure.int8,\n  vertAdvance: $5OpyM$restructure.uint8\n});\nlet $9dd3c2ae0a322c53$export$62c53e75f69bfe12 = new $5OpyM$restructure.Struct({\n  height: $5OpyM$restructure.uint8,\n  width: $5OpyM$restructure.uint8,\n  bearingX: $5OpyM$restructure.int8,\n  bearingY: $5OpyM$restructure.int8,\n  advance: $5OpyM$restructure.uint8\n});\nlet $9dd3c2ae0a322c53$var$EBDTComponent = new $5OpyM$restructure.Struct({\n  glyph: $5OpyM$restructure.uint16,\n  xOffset: $5OpyM$restructure.int8,\n  yOffset: $5OpyM$restructure.int8\n});\nclass $9dd3c2ae0a322c53$var$ByteAligned {}\nclass $9dd3c2ae0a322c53$var$BitAligned {}\nlet $9dd3c2ae0a322c53$export$f1f5ddeb20d14f = new $5OpyM$restructure.VersionedStruct('version', {\n  1: {\n    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,\n    data: $9dd3c2ae0a322c53$var$ByteAligned\n  },\n  2: {\n    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,\n    data: $9dd3c2ae0a322c53$var$BitAligned\n  },\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n  5: {\n    data: $9dd3c2ae0a322c53$var$BitAligned\n  },\n  6: {\n    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n    data: $9dd3c2ae0a322c53$var$ByteAligned\n  },\n  7: {\n    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n    data: $9dd3c2ae0a322c53$var$BitAligned\n  },\n  8: {\n    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,\n    pad: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8),\n    numComponents: $5OpyM$restructure.uint16,\n    components: new $5OpyM$restructure.Array($9dd3c2ae0a322c53$var$EBDTComponent, 'numComponents')\n  },\n  9: {\n    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n    pad: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8),\n    numComponents: $5OpyM$restructure.uint16,\n    components: new $5OpyM$restructure.Array($9dd3c2ae0a322c53$var$EBDTComponent, 'numComponents')\n  },\n  17: {\n    metrics: $9dd3c2ae0a322c53$export$62c53e75f69bfe12,\n    dataLen: $5OpyM$restructure.uint32,\n    data: new $5OpyM$restructure.Buffer('dataLen')\n  },\n  18: {\n    metrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n    dataLen: $5OpyM$restructure.uint32,\n    data: new $5OpyM$restructure.Buffer('dataLen')\n  },\n  19: {\n    dataLen: $5OpyM$restructure.uint32,\n    data: new $5OpyM$restructure.Buffer('dataLen')\n  }\n});\nlet $234c291eab07e474$var$SBitLineMetrics = new $5OpyM$restructure.Struct({\n  ascender: $5OpyM$restructure.int8,\n  descender: $5OpyM$restructure.int8,\n  widthMax: $5OpyM$restructure.uint8,\n  caretSlopeNumerator: $5OpyM$restructure.int8,\n  caretSlopeDenominator: $5OpyM$restructure.int8,\n  caretOffset: $5OpyM$restructure.int8,\n  minOriginSB: $5OpyM$restructure.int8,\n  minAdvanceSB: $5OpyM$restructure.int8,\n  maxBeforeBL: $5OpyM$restructure.int8,\n  minAfterBL: $5OpyM$restructure.int8,\n  pad: new $5OpyM$restructure.Reserved($5OpyM$restructure.int8, 2)\n});\nlet $234c291eab07e474$var$CodeOffsetPair = new $5OpyM$restructure.Struct({\n  glyphCode: $5OpyM$restructure.uint16,\n  offset: $5OpyM$restructure.uint16\n});\nlet $234c291eab07e474$var$IndexSubtable = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  header: {\n    imageFormat: $5OpyM$restructure.uint16,\n    imageDataOffset: $5OpyM$restructure.uint32\n  },\n  1: {\n    offsetArray: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n  2: {\n    imageSize: $5OpyM$restructure.uint32,\n    bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0\n  },\n  3: {\n    offsetArray: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n  4: {\n    numGlyphs: $5OpyM$restructure.uint32,\n    glyphArray: new $5OpyM$restructure.Array($234c291eab07e474$var$CodeOffsetPair, t => t.numGlyphs + 1)\n  },\n  5: {\n    imageSize: $5OpyM$restructure.uint32,\n    bigMetrics: $9dd3c2ae0a322c53$export$16b227cb15d716a0,\n    numGlyphs: $5OpyM$restructure.uint32,\n    glyphCodeArray: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numGlyphs')\n  }\n});\nlet $234c291eab07e474$var$IndexSubtableArray = new $5OpyM$restructure.Struct({\n  firstGlyphIndex: $5OpyM$restructure.uint16,\n  lastGlyphIndex: $5OpyM$restructure.uint16,\n  subtable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $234c291eab07e474$var$IndexSubtable)\n});\nlet $234c291eab07e474$var$BitmapSizeTable = new $5OpyM$restructure.Struct({\n  indexSubTableArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($234c291eab07e474$var$IndexSubtableArray, 1), {\n    type: 'parent'\n  }),\n  indexTablesSize: $5OpyM$restructure.uint32,\n  numberOfIndexSubTables: $5OpyM$restructure.uint32,\n  colorRef: $5OpyM$restructure.uint32,\n  hori: $234c291eab07e474$var$SBitLineMetrics,\n  vert: $234c291eab07e474$var$SBitLineMetrics,\n  startGlyphIndex: $5OpyM$restructure.uint16,\n  endGlyphIndex: $5OpyM$restructure.uint16,\n  ppemX: $5OpyM$restructure.uint8,\n  ppemY: $5OpyM$restructure.uint8,\n  bitDepth: $5OpyM$restructure.uint8,\n  flags: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, ['horizontal', 'vertical'])\n});\nvar $234c291eab07e474$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint32,\n  numSizes: $5OpyM$restructure.uint32,\n  sizes: new $5OpyM$restructure.Array($234c291eab07e474$var$BitmapSizeTable, 'numSizes')\n});\nlet $55d04373f0cac44e$var$ImageTable = new $5OpyM$restructure.Struct({\n  ppem: $5OpyM$restructure.uint16,\n  resolution: $5OpyM$restructure.uint16,\n  imageOffsets: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, 'void'), t => t.parent.parent.maxp.numGlyphs + 1)\n});\nvar\n// This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\n$55d04373f0cac44e$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  flags: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, ['renderOutlines']),\n  numImgTables: $5OpyM$restructure.uint32,\n  imageTables: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $55d04373f0cac44e$var$ImageTable), 'numImgTables')\n});\nlet $0e59eccfa3005d9d$var$LayerRecord = new $5OpyM$restructure.Struct({\n  gid: $5OpyM$restructure.uint16,\n  paletteIndex: $5OpyM$restructure.uint16 // Index value to use in the appropriate palette. This value must\n}); // be less than numPaletteEntries in the CPAL table, except for\n// the special case noted below. Each palette entry is 16 bits.\n// A palette index of 0xFFFF is a special case indicating that\n// the text foreground color should be used.\nlet $0e59eccfa3005d9d$var$BaseGlyphRecord = new $5OpyM$restructure.Struct({\n  gid: $5OpyM$restructure.uint16,\n  // and is not rendered for color.\n  firstLayerIndex: $5OpyM$restructure.uint16,\n  // There will be numLayers consecutive entries for this base glyph.\n  numLayers: $5OpyM$restructure.uint16\n});\nvar $0e59eccfa3005d9d$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  numBaseGlyphRecords: $5OpyM$restructure.uint16,\n  baseGlyphRecord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($0e59eccfa3005d9d$var$BaseGlyphRecord, 'numBaseGlyphRecords')),\n  layerRecords: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($0e59eccfa3005d9d$var$LayerRecord, 'numLayerRecords'), {\n    lazy: true\n  }),\n  numLayerRecords: $5OpyM$restructure.uint16\n});\nlet $23affa36a12f7915$var$ColorRecord = new $5OpyM$restructure.Struct({\n  blue: $5OpyM$restructure.uint8,\n  green: $5OpyM$restructure.uint8,\n  red: $5OpyM$restructure.uint8,\n  alpha: $5OpyM$restructure.uint8\n});\nvar $23affa36a12f7915$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  header: {\n    numPaletteEntries: $5OpyM$restructure.uint16,\n    numPalettes: $5OpyM$restructure.uint16,\n    numColorRecords: $5OpyM$restructure.uint16,\n    colorRecords: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($23affa36a12f7915$var$ColorRecord, 'numColorRecords')),\n    colorRecordIndices: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numPalettes')\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 'numPalettes')),\n    offsetPaletteLabelArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numPalettes')),\n    offsetPaletteEntryLabelArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numPaletteEntries'))\n  }\n});\nlet $9fffe61eb0785f74$var$BaseCoord = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  1: {\n    coordinate: $5OpyM$restructure.int16 // X or Y value, in design units\n  },\n  2: {\n    coordinate: $5OpyM$restructure.int16,\n    referenceGlyph: $5OpyM$restructure.uint16,\n    baseCoordPoint: $5OpyM$restructure.uint16 // Index of contour point on the referenceGlyph\n  },\n  3: {\n    coordinate: $5OpyM$restructure.int16,\n    deviceTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10) // Device table for X or Y value\n  }\n});\nlet $9fffe61eb0785f74$var$BaseValues = new $5OpyM$restructure.Struct({\n  defaultIndex: $5OpyM$restructure.uint16,\n  baseCoordCount: $5OpyM$restructure.uint16,\n  baseCoords: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord), 'baseCoordCount')\n});\nlet $9fffe61eb0785f74$var$FeatMinMaxRecord = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  minCoord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord, {\n    type: 'parent'\n  }),\n  maxCoord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord, {\n    type: 'parent'\n  }) // May be NULL\n});\nlet $9fffe61eb0785f74$var$MinMax = new $5OpyM$restructure.Struct({\n  minCoord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord),\n  maxCoord: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseCoord),\n  featMinMaxCount: $5OpyM$restructure.uint16,\n  featMinMaxRecords: new $5OpyM$restructure.Array($9fffe61eb0785f74$var$FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n});\nlet $9fffe61eb0785f74$var$BaseLangSysRecord = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  minMax: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$MinMax, {\n    type: 'parent'\n  })\n});\nlet $9fffe61eb0785f74$var$BaseScript = new $5OpyM$restructure.Struct({\n  baseValues: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseValues),\n  defaultMinMax: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$MinMax),\n  baseLangSysCount: $5OpyM$restructure.uint16,\n  baseLangSysRecords: new $5OpyM$restructure.Array($9fffe61eb0785f74$var$BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n});\nlet $9fffe61eb0785f74$var$BaseScriptRecord = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  script: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseScript, {\n    type: 'parent'\n  })\n});\nlet $9fffe61eb0785f74$var$BaseScriptList = new $5OpyM$restructure.Array($9fffe61eb0785f74$var$BaseScriptRecord, $5OpyM$restructure.uint16);\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nlet $9fffe61eb0785f74$var$BaseTagList = new $5OpyM$restructure.Array(new $5OpyM$restructure.String(4), $5OpyM$restructure.uint16);\nlet $9fffe61eb0785f74$var$Axis = new $5OpyM$restructure.Struct({\n  baseTagList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseTagList),\n  baseScriptList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$BaseScriptList)\n});\nvar $9fffe61eb0785f74$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {\n  header: {\n    horizAxis: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$Axis),\n    vertAxis: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $9fffe61eb0785f74$var$Axis) // May be NULL\n  },\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)\n  }\n});\nlet $418face38567ee6e$var$AttachPoint = new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16);\nlet $418face38567ee6e$var$AttachList = new $5OpyM$restructure.Struct({\n  coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n  glyphCount: $5OpyM$restructure.uint16,\n  attachPoints: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$AttachPoint), 'glyphCount')\n});\nlet $418face38567ee6e$var$CaretValue = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  1: {\n    coordinate: $5OpyM$restructure.int16\n  },\n  2: {\n    caretValuePoint: $5OpyM$restructure.uint16\n  },\n  3: {\n    coordinate: $5OpyM$restructure.int16,\n    deviceTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10)\n  }\n});\nlet $418face38567ee6e$var$LigGlyph = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$CaretValue), $5OpyM$restructure.uint16);\nlet $418face38567ee6e$var$LigCaretList = new $5OpyM$restructure.Struct({\n  coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n  ligGlyphCount: $5OpyM$restructure.uint16,\n  ligGlyphs: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$LigGlyph), 'ligGlyphCount')\n});\nlet $418face38567ee6e$var$MarkGlyphSetsDef = new $5OpyM$restructure.Struct({\n  markSetTableFormat: $5OpyM$restructure.uint16,\n  markSetCount: $5OpyM$restructure.uint16,\n  coverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $401800e36a580e62$export$17608c3f81a6111), 'markSetCount')\n});\nvar $418face38567ee6e$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {\n  header: {\n    glyphClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),\n    attachList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$AttachList),\n    ligCaretList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$LigCaretList),\n    markAttachClassDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71)\n  },\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $418face38567ee6e$var$MarkGlyphSetsDef),\n    itemVariationStore: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241)\n  }\n});\nlet $010e157f6d8a40e9$var$ValueFormat = new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);\nlet $010e157f6d8a40e9$var$types = {\n  xPlacement: $5OpyM$restructure.int16,\n  yPlacement: $5OpyM$restructure.int16,\n  xAdvance: $5OpyM$restructure.int16,\n  yAdvance: $5OpyM$restructure.int16,\n  xPlaDevice: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  }),\n  yPlaDevice: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  }),\n  xAdvDevice: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  }),\n  yAdvDevice: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10, {\n    type: 'global',\n    relativeTo: ctx => ctx.rel\n  })\n};\nclass $010e157f6d8a40e9$var$ValueRecord {\n  constructor(key = 'valueFormat') {\n    this.key = key;\n  }\n  buildStruct(parent) {\n    let struct = parent;\n    while (!struct[this.key] && struct.parent) struct = struct.parent;\n    if (!struct[this.key]) return;\n    let fields = {};\n    fields.rel = () => struct._startOffset;\n    let format = struct[this.key];\n    for (let key in format) if (format[key]) fields[key] = $010e157f6d8a40e9$var$types[key];\n    return new $5OpyM$restructure.Struct(fields);\n  }\n  size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  }\n  decode(stream, parent) {\n    let res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  }\n}\nlet $010e157f6d8a40e9$var$PairValueRecord = new $5OpyM$restructure.Struct({\n  secondGlyph: $5OpyM$restructure.uint16,\n  value1: new $010e157f6d8a40e9$var$ValueRecord('valueFormat1'),\n  value2: new $010e157f6d8a40e9$var$ValueRecord('valueFormat2')\n});\nlet $010e157f6d8a40e9$var$PairSet = new $5OpyM$restructure.Array($010e157f6d8a40e9$var$PairValueRecord, $5OpyM$restructure.uint16);\nlet $010e157f6d8a40e9$var$Class2Record = new $5OpyM$restructure.Struct({\n  value1: new $010e157f6d8a40e9$var$ValueRecord('valueFormat1'),\n  value2: new $010e157f6d8a40e9$var$ValueRecord('valueFormat2')\n});\nlet $010e157f6d8a40e9$var$Anchor = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  1: {\n    xCoordinate: $5OpyM$restructure.int16,\n    yCoordinate: $5OpyM$restructure.int16\n  },\n  2: {\n    xCoordinate: $5OpyM$restructure.int16,\n    yCoordinate: $5OpyM$restructure.int16,\n    anchorPoint: $5OpyM$restructure.uint16\n  },\n  3: {\n    xCoordinate: $5OpyM$restructure.int16,\n    yCoordinate: $5OpyM$restructure.int16,\n    xDeviceTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10),\n    yDeviceTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$8215d14a63d9fb10)\n  }\n});\nlet $010e157f6d8a40e9$var$EntryExitRecord = new $5OpyM$restructure.Struct({\n  entryAnchor: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor, {\n    type: 'parent'\n  }),\n  exitAnchor: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor, {\n    type: 'parent'\n  })\n});\nlet $010e157f6d8a40e9$var$MarkRecord = new $5OpyM$restructure.Struct({\n  class: $5OpyM$restructure.uint16,\n  markAnchor: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor, {\n    type: 'parent'\n  })\n});\nlet $010e157f6d8a40e9$var$MarkArray = new $5OpyM$restructure.Array($010e157f6d8a40e9$var$MarkRecord, $5OpyM$restructure.uint16);\nlet $010e157f6d8a40e9$var$BaseRecord = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor), t => t.parent.classCount);\nlet $010e157f6d8a40e9$var$BaseArray = new $5OpyM$restructure.Array($010e157f6d8a40e9$var$BaseRecord, $5OpyM$restructure.uint16);\nlet $010e157f6d8a40e9$var$ComponentRecord = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$Anchor), t => t.parent.parent.classCount);\nlet $010e157f6d8a40e9$var$LigatureAttach = new $5OpyM$restructure.Array($010e157f6d8a40e9$var$ComponentRecord, $5OpyM$restructure.uint16);\nlet $010e157f6d8a40e9$var$LigatureArray = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$LigatureAttach), $5OpyM$restructure.uint16);\nlet $010e157f6d8a40e9$export$73a8cfb19cd43a0f = new $5OpyM$restructure.VersionedStruct('lookupType', {\n  1: new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n    1: {\n      coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n      valueFormat: $010e157f6d8a40e9$var$ValueFormat,\n      value: new $010e157f6d8a40e9$var$ValueRecord()\n    },\n    2: {\n      coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n      valueFormat: $010e157f6d8a40e9$var$ValueFormat,\n      valueCount: $5OpyM$restructure.uint16,\n      values: new $5OpyM$restructure.LazyArray(new $010e157f6d8a40e9$var$ValueRecord(), 'valueCount')\n    }\n  }),\n  2: new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n    1: {\n      coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n      valueFormat1: $010e157f6d8a40e9$var$ValueFormat,\n      valueFormat2: $010e157f6d8a40e9$var$ValueFormat,\n      pairSetCount: $5OpyM$restructure.uint16,\n      pairSets: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$PairSet), 'pairSetCount')\n    },\n    2: {\n      coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n      valueFormat1: $010e157f6d8a40e9$var$ValueFormat,\n      valueFormat2: $010e157f6d8a40e9$var$ValueFormat,\n      classDef1: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),\n      classDef2: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$843d551fbbafef71),\n      class1Count: $5OpyM$restructure.uint16,\n      class2Count: $5OpyM$restructure.uint16,\n      classRecords: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.LazyArray($010e157f6d8a40e9$var$Class2Record, 'class2Count'), 'class1Count')\n    }\n  }),\n  3: {\n    format: $5OpyM$restructure.uint16,\n    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    entryExitCount: $5OpyM$restructure.uint16,\n    entryExitRecords: new $5OpyM$restructure.Array($010e157f6d8a40e9$var$EntryExitRecord, 'entryExitCount')\n  },\n  4: {\n    format: $5OpyM$restructure.uint16,\n    markCoverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    baseCoverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    classCount: $5OpyM$restructure.uint16,\n    markArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$MarkArray),\n    baseArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$BaseArray)\n  },\n  5: {\n    format: $5OpyM$restructure.uint16,\n    markCoverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    ligatureCoverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    classCount: $5OpyM$restructure.uint16,\n    markArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$MarkArray),\n    ligatureArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$LigatureArray)\n  },\n  6: {\n    format: $5OpyM$restructure.uint16,\n    mark1Coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    mark2Coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    classCount: $5OpyM$restructure.uint16,\n    mark1Array: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$MarkArray),\n    mark2Array: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $010e157f6d8a40e9$var$BaseArray)\n  },\n  7: $401800e36a580e62$export$841858b892ce1f4c,\n  8: $401800e36a580e62$export$5e6d09e6861162f6,\n  9: {\n    posFormat: $5OpyM$restructure.uint16,\n    lookupType: $5OpyM$restructure.uint16,\n    extension: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, null)\n  }\n});\n// Fix circular reference\n$010e157f6d8a40e9$export$73a8cfb19cd43a0f.versions[9].extension.type = $010e157f6d8a40e9$export$73a8cfb19cd43a0f;\nvar $010e157f6d8a40e9$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {\n  header: {\n    scriptList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$3e15fc05ce864229),\n    featureList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$aa18130def4b6cb4),\n    lookupList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)\n  }\n});\nlet $7176ea6bb7dcf1c6$var$Sequence = new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16);\nlet $7176ea6bb7dcf1c6$var$AlternateSet = $7176ea6bb7dcf1c6$var$Sequence;\nlet $7176ea6bb7dcf1c6$var$Ligature = new $5OpyM$restructure.Struct({\n  glyph: $5OpyM$restructure.uint16,\n  compCount: $5OpyM$restructure.uint16,\n  components: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, t => t.compCount - 1)\n});\nlet $7176ea6bb7dcf1c6$var$LigatureSet = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7176ea6bb7dcf1c6$var$Ligature), $5OpyM$restructure.uint16);\nlet $7176ea6bb7dcf1c6$var$GSUBLookup = new $5OpyM$restructure.VersionedStruct('lookupType', {\n  1: new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n    1: {\n      coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n      deltaGlyphID: $5OpyM$restructure.int16\n    },\n    2: {\n      coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n      glyphCount: $5OpyM$restructure.uint16,\n      substitute: new $5OpyM$restructure.LazyArray($5OpyM$restructure.uint16, 'glyphCount')\n    }\n  }),\n  2: {\n    substFormat: $5OpyM$restructure.uint16,\n    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    count: $5OpyM$restructure.uint16,\n    sequences: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7176ea6bb7dcf1c6$var$Sequence), 'count')\n  },\n  3: {\n    substFormat: $5OpyM$restructure.uint16,\n    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    count: $5OpyM$restructure.uint16,\n    alternateSet: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7176ea6bb7dcf1c6$var$AlternateSet), 'count')\n  },\n  4: {\n    substFormat: $5OpyM$restructure.uint16,\n    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    count: $5OpyM$restructure.uint16,\n    ligatureSets: new $5OpyM$restructure.LazyArray(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7176ea6bb7dcf1c6$var$LigatureSet), 'count')\n  },\n  5: $401800e36a580e62$export$841858b892ce1f4c,\n  6: $401800e36a580e62$export$5e6d09e6861162f6,\n  7: {\n    substFormat: $5OpyM$restructure.uint16,\n    lookupType: $5OpyM$restructure.uint16,\n    extension: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, null)\n  },\n  8: {\n    substFormat: $5OpyM$restructure.uint16,\n    coverage: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111),\n    backtrackCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'backtrackGlyphCount'),\n    lookaheadGlyphCount: $5OpyM$restructure.uint16,\n    lookaheadCoverage: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$17608c3f81a6111), 'lookaheadGlyphCount'),\n    glyphCount: $5OpyM$restructure.uint16,\n    substitutes: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'glyphCount')\n  }\n});\n// Fix circular reference\n$7176ea6bb7dcf1c6$var$GSUBLookup.versions[7].extension.type = $7176ea6bb7dcf1c6$var$GSUBLookup;\nvar $7176ea6bb7dcf1c6$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {\n  header: {\n    scriptList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$3e15fc05ce864229),\n    featureList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $401800e36a580e62$export$aa18130def4b6cb4),\n    lookupList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($7176ea6bb7dcf1c6$var$GSUBLookup))\n  },\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$441b70b7971dd419)\n  }\n});\nlet $71e9e74bb6366bce$var$JstfGSUBModList = new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16);\nlet $71e9e74bb6366bce$var$JstfPriority = new $5OpyM$restructure.Struct({\n  shrinkageEnableGSUB: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n  shrinkageDisableGSUB: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n  shrinkageEnableGPOS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n  shrinkageDisableGPOS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n  shrinkageJstfMax: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f)),\n  extensionEnableGSUB: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n  extensionDisableGSUB: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n  extensionEnableGPOS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n  extensionDisableGPOS: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfGSUBModList),\n  extensionJstfMax: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $401800e36a580e62$export$df0008c6ff2da22a($010e157f6d8a40e9$export$73a8cfb19cd43a0f))\n});\nlet $71e9e74bb6366bce$var$JstfLangSys = new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfPriority), $5OpyM$restructure.uint16);\nlet $71e9e74bb6366bce$var$JstfLangSysRecord = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  jstfLangSys: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfLangSys)\n});\nlet $71e9e74bb6366bce$var$JstfScript = new $5OpyM$restructure.Struct({\n  extenderGlyphs: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16)),\n  defaultLangSys: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfLangSys),\n  langSysCount: $5OpyM$restructure.uint16,\n  langSysRecords: new $5OpyM$restructure.Array($71e9e74bb6366bce$var$JstfLangSysRecord, 'langSysCount')\n});\nlet $71e9e74bb6366bce$var$JstfScriptRecord = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  script: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $71e9e74bb6366bce$var$JstfScript, {\n    type: 'parent'\n  })\n});\nvar $71e9e74bb6366bce$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint32,\n  scriptCount: $5OpyM$restructure.uint16,\n  scriptList: new $5OpyM$restructure.Array($71e9e74bb6366bce$var$JstfScriptRecord, 'scriptCount')\n});\n\n// TODO: add this to restructure\nclass $706225b6909f9418$var$VariableSizeNumber {\n  constructor(size) {\n    this._size = size;\n  }\n  decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1:\n        return stream.readUInt8();\n      case 2:\n        return stream.readUInt16BE();\n      case 3:\n        return stream.readUInt24BE();\n      case 4:\n        return stream.readUInt32BE();\n    }\n  }\n  size(val, parent) {\n    return $5OpyM$resolveLength(this._size, null, parent);\n  }\n}\nlet $706225b6909f9418$var$MapDataEntry = new $5OpyM$restructure.Struct({\n  entry: new $706225b6909f9418$var$VariableSizeNumber(t => ((t.parent.entryFormat & 0x0030) >> 4) + 1),\n  outerIndex: t => t.entry >> (t.parent.entryFormat & 0x000F) + 1,\n  innerIndex: t => t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1\n});\nlet $706225b6909f9418$var$DeltaSetIndexMap = new $5OpyM$restructure.Struct({\n  entryFormat: $5OpyM$restructure.uint16,\n  mapCount: $5OpyM$restructure.uint16,\n  mapData: new $5OpyM$restructure.Array($706225b6909f9418$var$MapDataEntry, 'mapCount')\n});\nvar $706225b6909f9418$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  majorVersion: $5OpyM$restructure.uint16,\n  minorVersion: $5OpyM$restructure.uint16,\n  itemVariationStore: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $421a2456cdbaa0d8$export$fe1b122a2710f241),\n  advanceWidthMapping: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $706225b6909f9418$var$DeltaSetIndexMap),\n  LSBMapping: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $706225b6909f9418$var$DeltaSetIndexMap),\n  RSBMapping: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $706225b6909f9418$var$DeltaSetIndexMap)\n});\nlet $4a144b8ae6f53b7c$var$Signature = new $5OpyM$restructure.Struct({\n  format: $5OpyM$restructure.uint32,\n  length: $5OpyM$restructure.uint32,\n  offset: $5OpyM$restructure.uint32\n});\nlet $4a144b8ae6f53b7c$var$SignatureBlock = new $5OpyM$restructure.Struct({\n  reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16, 2),\n  cbSignature: $5OpyM$restructure.uint32,\n  signature: new $5OpyM$restructure.Buffer('cbSignature')\n});\nvar $4a144b8ae6f53b7c$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  ulVersion: $5OpyM$restructure.uint32,\n  usNumSigs: $5OpyM$restructure.uint16,\n  usFlag: $5OpyM$restructure.uint16,\n  signatures: new $5OpyM$restructure.Array($4a144b8ae6f53b7c$var$Signature, 'usNumSigs'),\n  signatureBlocks: new $5OpyM$restructure.Array($4a144b8ae6f53b7c$var$SignatureBlock, 'usNumSigs')\n});\nlet $a2086c3965d7b105$var$GaspRange = new $5OpyM$restructure.Struct({\n  rangeMaxPPEM: $5OpyM$restructure.uint16,\n  rangeGaspBehavior: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint16, ['grayscale', 'gridfit', 'symmetricSmoothing', 'symmetricGridfit' // only in version 1, for ClearType\n  ])\n});\nvar $a2086c3965d7b105$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  numRanges: $5OpyM$restructure.uint16,\n  gaspRanges: new $5OpyM$restructure.Array($a2086c3965d7b105$var$GaspRange, 'numRanges') // Sorted by ppem\n});\nlet $de83746c6c1c8559$var$DeviceRecord = new $5OpyM$restructure.Struct({\n  pixelSize: $5OpyM$restructure.uint8,\n  maximumWidth: $5OpyM$restructure.uint8,\n  widths: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, t => t.parent.parent.maxp.numGlyphs)\n});\nvar\n// The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\n$de83746c6c1c8559$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  numRecords: $5OpyM$restructure.int16,\n  sizeDeviceRecord: $5OpyM$restructure.int32,\n  records: new $5OpyM$restructure.Array($de83746c6c1c8559$var$DeviceRecord, 'numRecords')\n});\nlet $5a2237650c44652a$var$KernPair = new $5OpyM$restructure.Struct({\n  left: $5OpyM$restructure.uint16,\n  right: $5OpyM$restructure.uint16,\n  value: $5OpyM$restructure.int16\n});\nlet $5a2237650c44652a$var$ClassTable = new $5OpyM$restructure.Struct({\n  firstGlyph: $5OpyM$restructure.uint16,\n  nGlyphs: $5OpyM$restructure.uint16,\n  offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'nGlyphs'),\n  max: t => t.offsets.length && Math.max.apply(Math, t.offsets)\n});\nlet $5a2237650c44652a$var$Kern2Array = new $5OpyM$restructure.Struct({\n  off: t => t._startOffset - t.parent.parent._startOffset,\n  len: t => ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),\n  values: new $5OpyM$restructure.LazyArray($5OpyM$restructure.int16, 'len')\n});\nlet $5a2237650c44652a$var$KernSubtable = new $5OpyM$restructure.VersionedStruct('format', {\n  0: {\n    nPairs: $5OpyM$restructure.uint16,\n    searchRange: $5OpyM$restructure.uint16,\n    entrySelector: $5OpyM$restructure.uint16,\n    rangeShift: $5OpyM$restructure.uint16,\n    pairs: new $5OpyM$restructure.Array($5a2237650c44652a$var$KernPair, 'nPairs')\n  },\n  2: {\n    rowWidth: $5OpyM$restructure.uint16,\n    leftTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $5a2237650c44652a$var$ClassTable, {\n      type: 'parent'\n    }),\n    rightTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $5a2237650c44652a$var$ClassTable, {\n      type: 'parent'\n    }),\n    array: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $5a2237650c44652a$var$Kern2Array, {\n      type: 'parent'\n    })\n  },\n  3: {\n    glyphCount: $5OpyM$restructure.uint16,\n    kernValueCount: $5OpyM$restructure.uint8,\n    leftClassCount: $5OpyM$restructure.uint8,\n    rightClassCount: $5OpyM$restructure.uint8,\n    flags: $5OpyM$restructure.uint8,\n    kernValue: new $5OpyM$restructure.Array($5OpyM$restructure.int16, 'kernValueCount'),\n    leftClass: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'glyphCount'),\n    rightClass: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'glyphCount'),\n    kernIndex: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, t => t.leftClassCount * t.rightClassCount)\n  }\n});\nlet $5a2237650c44652a$var$KernTable = new $5OpyM$restructure.VersionedStruct('version', {\n  0: {\n    subVersion: $5OpyM$restructure.uint16,\n    length: $5OpyM$restructure.uint16,\n    format: $5OpyM$restructure.uint8,\n    coverage: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, ['horizontal', 'minimum', 'crossStream', 'override' // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable: $5a2237650c44652a$var$KernSubtable,\n    padding: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, t => t.length - t._currentOffset)\n  },\n  1: {\n    length: $5OpyM$restructure.uint32,\n    coverage: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, [null, null, null, null, null, 'variation', 'crossStream', 'vertical' // Set if table has vertical kerning values\n    ]),\n    format: $5OpyM$restructure.uint8,\n    tupleIndex: $5OpyM$restructure.uint16,\n    subtable: $5a2237650c44652a$var$KernSubtable,\n    padding: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, t => t.length - t._currentOffset)\n  }\n});\nvar $5a2237650c44652a$export$2e2bcd8739ae039 = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n  0: {\n    nTables: $5OpyM$restructure.uint16,\n    tables: new $5OpyM$restructure.Array($5a2237650c44652a$var$KernTable, 'nTables')\n  },\n  1: {\n    reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n    nTables: $5OpyM$restructure.uint32,\n    tables: new $5OpyM$restructure.Array($5a2237650c44652a$var$KernTable, 'nTables')\n  }\n});\nvar\n// Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\n$1eadf070c8b34e48$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  numGlyphs: $5OpyM$restructure.uint16,\n  yPels: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 'numGlyphs')\n});\nvar\n// PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\n$8eb2f7302ef75084$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  fontNumber: $5OpyM$restructure.uint32,\n  pitch: $5OpyM$restructure.uint16,\n  xHeight: $5OpyM$restructure.uint16,\n  style: $5OpyM$restructure.uint16,\n  typeFamily: $5OpyM$restructure.uint16,\n  capHeight: $5OpyM$restructure.uint16,\n  symbolSet: $5OpyM$restructure.uint16,\n  typeface: new $5OpyM$restructure.String(16),\n  characterComplement: new $5OpyM$restructure.String(8),\n  fileName: new $5OpyM$restructure.String(6),\n  strokeWeight: new $5OpyM$restructure.String(1),\n  widthType: new $5OpyM$restructure.String(1),\n  serifStyle: $5OpyM$restructure.uint8,\n  reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8)\n});\n\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\nlet $8223b0d67f5fd7c9$var$Ratio = new $5OpyM$restructure.Struct({\n  bCharSet: $5OpyM$restructure.uint8,\n  xRatio: $5OpyM$restructure.uint8,\n  yStartRatio: $5OpyM$restructure.uint8,\n  yEndRatio: $5OpyM$restructure.uint8 // Ending y-Ratio value\n});\nlet $8223b0d67f5fd7c9$var$vTable = new $5OpyM$restructure.Struct({\n  yPelHeight: $5OpyM$restructure.uint16,\n  yMax: $5OpyM$restructure.int16,\n  yMin: $5OpyM$restructure.int16 // Minimum value (in pels) for this yPelHeight\n});\nlet $8223b0d67f5fd7c9$var$VdmxGroup = new $5OpyM$restructure.Struct({\n  recs: $5OpyM$restructure.uint16,\n  startsz: $5OpyM$restructure.uint8,\n  endsz: $5OpyM$restructure.uint8,\n  entries: new $5OpyM$restructure.Array($8223b0d67f5fd7c9$var$vTable, 'recs') // The VDMX records\n});\nvar $8223b0d67f5fd7c9$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  numRecs: $5OpyM$restructure.uint16,\n  numRatios: $5OpyM$restructure.uint16,\n  ratioRanges: new $5OpyM$restructure.Array($8223b0d67f5fd7c9$var$Ratio, 'numRatios'),\n  offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numRatios'),\n  groups: new $5OpyM$restructure.Array($8223b0d67f5fd7c9$var$VdmxGroup, 'numRecs') // The actual VDMX groupings\n});\nvar\n// Vertical Header Table\n$4b17ac6a75c85897$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  ascent: $5OpyM$restructure.int16,\n  descent: $5OpyM$restructure.int16,\n  lineGap: $5OpyM$restructure.int16,\n  advanceHeightMax: $5OpyM$restructure.int16,\n  minTopSideBearing: $5OpyM$restructure.int16,\n  minBottomSideBearing: $5OpyM$restructure.int16,\n  yMaxExtent: $5OpyM$restructure.int16,\n  caretSlopeRise: $5OpyM$restructure.int16,\n  caretSlopeRun: $5OpyM$restructure.int16,\n  caretOffset: $5OpyM$restructure.int16,\n  reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.int16, 4),\n  metricDataFormat: $5OpyM$restructure.int16,\n  numberOfMetrics: $5OpyM$restructure.uint16 // Number of advance heights in the Vertical Metrics table\n});\nlet $a9f9c5185d84186d$var$VmtxEntry = new $5OpyM$restructure.Struct({\n  advance: $5OpyM$restructure.uint16,\n  bearing: $5OpyM$restructure.int16 // The top sidebearing of the glyph\n});\nvar\n// Vertical Metrics Table\n$a9f9c5185d84186d$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  metrics: new $5OpyM$restructure.LazyArray($a9f9c5185d84186d$var$VmtxEntry, t => t.parent.vhea.numberOfMetrics),\n  bearings: new $5OpyM$restructure.LazyArray($5OpyM$restructure.int16, t => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\nlet $d9cf6d6467871d68$var$shortFrac = new $5OpyM$restructure.Fixed(16, 'BE', 14);\nlet $d9cf6d6467871d68$var$Correspondence = new $5OpyM$restructure.Struct({\n  fromCoord: $d9cf6d6467871d68$var$shortFrac,\n  toCoord: $d9cf6d6467871d68$var$shortFrac\n});\nlet $d9cf6d6467871d68$var$Segment = new $5OpyM$restructure.Struct({\n  pairCount: $5OpyM$restructure.uint16,\n  correspondence: new $5OpyM$restructure.Array($d9cf6d6467871d68$var$Correspondence, 'pairCount')\n});\nvar $d9cf6d6467871d68$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.fixed32,\n  axisCount: $5OpyM$restructure.uint32,\n  segment: new $5OpyM$restructure.Array($d9cf6d6467871d68$var$Segment, 'axisCount')\n});\nclass $c35aa0a165e05d15$var$UnboundedArrayAccessor {\n  constructor(type, stream, parent) {\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n  getItem(index) {\n    if (this._items[index] == null) {\n      let pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n    return this._items[index];\n  }\n  inspect() {\n    return `[UnboundedArray ${this.type.constructor.name}]`;\n  }\n}\nclass $c35aa0a165e05d15$export$c5af1eebc882e39a extends $5OpyM$restructure.Array {\n  constructor(type) {\n    super(type, 0);\n  }\n  decode(stream, parent) {\n    return new $c35aa0a165e05d15$var$UnboundedArrayAccessor(this.type, stream, parent);\n  }\n}\nlet $c35aa0a165e05d15$export$8351f8c2ae2f103c = function (ValueType = $5OpyM$restructure.uint16) {\n  // Helper class that makes internal structures invisible to pointers\n  class Shadow {\n    constructor(type) {\n      this.type = type;\n    }\n    decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    }\n    size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    }\n    encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    }\n  }\n  ValueType = new Shadow(ValueType);\n  let BinarySearchHeader = new $5OpyM$restructure.Struct({\n    unitSize: $5OpyM$restructure.uint16,\n    nUnits: $5OpyM$restructure.uint16,\n    searchRange: $5OpyM$restructure.uint16,\n    entrySelector: $5OpyM$restructure.uint16,\n    rangeShift: $5OpyM$restructure.uint16\n  });\n  let LookupSegmentSingle = new $5OpyM$restructure.Struct({\n    lastGlyph: $5OpyM$restructure.uint16,\n    firstGlyph: $5OpyM$restructure.uint16,\n    value: ValueType\n  });\n  let LookupSegmentArray = new $5OpyM$restructure.Struct({\n    lastGlyph: $5OpyM$restructure.uint16,\n    firstGlyph: $5OpyM$restructure.uint16,\n    values: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.Array(ValueType, t => t.lastGlyph - t.firstGlyph + 1), {\n      type: 'parent'\n    })\n  });\n  let LookupSingle = new $5OpyM$restructure.Struct({\n    glyph: $5OpyM$restructure.uint16,\n    value: ValueType\n  });\n  return new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint16, {\n    0: {\n      values: new $c35aa0a165e05d15$export$c5af1eebc882e39a(ValueType) // length == number of glyphs maybe?\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new $5OpyM$restructure.Array(LookupSegmentSingle, t => t.binarySearchHeader.nUnits)\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new $5OpyM$restructure.Array(LookupSegmentArray, t => t.binarySearchHeader.nUnits)\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new $5OpyM$restructure.Array(LookupSingle, t => t.binarySearchHeader.nUnits)\n    },\n    8: {\n      firstGlyph: $5OpyM$restructure.uint16,\n      count: $5OpyM$restructure.uint16,\n      values: new $5OpyM$restructure.Array(ValueType, 'count')\n    }\n  });\n};\nfunction $c35aa0a165e05d15$export$79f7d93d790934ba(entryData = {}, lookupType = $5OpyM$restructure.uint16) {\n  let entry = Object.assign({\n    newState: $5OpyM$restructure.uint16,\n    flags: $5OpyM$restructure.uint16\n  }, entryData);\n  let Entry = new $5OpyM$restructure.Struct(entry);\n  let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new $5OpyM$restructure.Array($5OpyM$restructure.uint16, t => t.nClasses));\n  let StateHeader = new $5OpyM$restructure.Struct({\n    nClasses: $5OpyM$restructure.uint32,\n    classTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c(lookupType)),\n    stateArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, StateArray),\n    entryTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))\n  });\n  return StateHeader;\n}\nfunction $c35aa0a165e05d15$export$105027425199cc51(entryData = {}, lookupType = $5OpyM$restructure.uint16) {\n  let ClassLookupTable = new $5OpyM$restructure.Struct({\n    version() {\n      return 8;\n    },\n    firstGlyph: $5OpyM$restructure.uint16,\n    values: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, $5OpyM$restructure.uint16)\n  });\n  let entry = Object.assign({\n    newStateOffset: $5OpyM$restructure.uint16,\n    // convert offset to stateArray index\n    newState: t => (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n    flags: $5OpyM$restructure.uint16\n  }, entryData);\n  let Entry = new $5OpyM$restructure.Struct(entry);\n  let StateArray = new $c35aa0a165e05d15$export$c5af1eebc882e39a(new $5OpyM$restructure.Array($5OpyM$restructure.uint8, t => t.nClasses));\n  let StateHeader1 = new $5OpyM$restructure.Struct({\n    nClasses: $5OpyM$restructure.uint16,\n    classTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, ClassLookupTable),\n    stateArray: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, StateArray),\n    entryTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $c35aa0a165e05d15$export$c5af1eebc882e39a(Entry))\n  });\n  return StateHeader1;\n}\nlet $53e6946cfb72ad0c$var$BslnSubtable = new $5OpyM$restructure.VersionedStruct('format', {\n  0: {\n    deltas: new $5OpyM$restructure.Array($5OpyM$restructure.int16, 32)\n  },\n  1: {\n    deltas: new $5OpyM$restructure.Array($5OpyM$restructure.int16, 32),\n    mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c($5OpyM$restructure.uint16)\n  },\n  2: {\n    standardGlyph: $5OpyM$restructure.uint16,\n    controlPoints: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 32)\n  },\n  3: {\n    standardGlyph: $5OpyM$restructure.uint16,\n    controlPoints: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 32),\n    mappingData: new $c35aa0a165e05d15$export$8351f8c2ae2f103c($5OpyM$restructure.uint16)\n  }\n});\nvar $53e6946cfb72ad0c$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.fixed32,\n  format: $5OpyM$restructure.uint16,\n  defaultBaseline: $5OpyM$restructure.uint16,\n  subtable: $53e6946cfb72ad0c$var$BslnSubtable\n});\nlet $117550c71e13cb3d$var$Setting = new $5OpyM$restructure.Struct({\n  setting: $5OpyM$restructure.uint16,\n  nameIndex: $5OpyM$restructure.int16,\n  name: t => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nlet $117550c71e13cb3d$var$FeatureName = new $5OpyM$restructure.Struct({\n  feature: $5OpyM$restructure.uint16,\n  nSettings: $5OpyM$restructure.uint16,\n  settingTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array($117550c71e13cb3d$var$Setting, 'nSettings'), {\n    type: 'parent'\n  }),\n  featureFlags: new $5OpyM$restructure.Bitfield($5OpyM$restructure.uint8, [null, null, null, null, null, null, 'hasDefault', 'exclusive']),\n  defaultSetting: $5OpyM$restructure.uint8,\n  nameIndex: $5OpyM$restructure.int16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\nvar $117550c71e13cb3d$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.fixed32,\n  featureNameCount: $5OpyM$restructure.uint16,\n  reserved1: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n  reserved2: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint32),\n  featureNames: new $5OpyM$restructure.Array($117550c71e13cb3d$var$FeatureName, 'featureNameCount')\n});\nlet $551f92fdd501454e$var$Axis = new $5OpyM$restructure.Struct({\n  axisTag: new $5OpyM$restructure.String(4),\n  minValue: $5OpyM$restructure.fixed32,\n  defaultValue: $5OpyM$restructure.fixed32,\n  maxValue: $5OpyM$restructure.fixed32,\n  flags: $5OpyM$restructure.uint16,\n  nameID: $5OpyM$restructure.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID]\n});\nlet $551f92fdd501454e$var$Instance = new $5OpyM$restructure.Struct({\n  nameID: $5OpyM$restructure.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID],\n  flags: $5OpyM$restructure.uint16,\n  coord: new $5OpyM$restructure.Array($5OpyM$restructure.fixed32, t => t.parent.axisCount),\n  postscriptNameID: new $5OpyM$restructure.Optional($5OpyM$restructure.uint16, t => t.parent.instanceSize - t._currentOffset > 0)\n});\nvar $551f92fdd501454e$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.fixed32,\n  offsetToData: $5OpyM$restructure.uint16,\n  countSizePairs: $5OpyM$restructure.uint16,\n  axisCount: $5OpyM$restructure.uint16,\n  axisSize: $5OpyM$restructure.uint16,\n  instanceCount: $5OpyM$restructure.uint16,\n  instanceSize: $5OpyM$restructure.uint16,\n  axis: new $5OpyM$restructure.Array($551f92fdd501454e$var$Axis, 'axisCount'),\n  instance: new $5OpyM$restructure.Array($551f92fdd501454e$var$Instance, 'instanceCount')\n});\nlet $d03801ee7a5f4d7c$var$shortFrac = new $5OpyM$restructure.Fixed(16, 'BE', 14);\nclass $d03801ee7a5f4d7c$var$Offset {\n  static decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;\n  }\n}\nlet $d03801ee7a5f4d7c$var$gvar = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n  axisCount: $5OpyM$restructure.uint16,\n  globalCoordCount: $5OpyM$restructure.uint16,\n  globalCoords: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $5OpyM$restructure.Array(new $5OpyM$restructure.Array($d03801ee7a5f4d7c$var$shortFrac, 'axisCount'), 'globalCoordCount')),\n  glyphCount: $5OpyM$restructure.uint16,\n  flags: $5OpyM$restructure.uint16,\n  offsetToData: $5OpyM$restructure.uint32,\n  offsets: new $5OpyM$restructure.Array(new $5OpyM$restructure.Pointer($d03801ee7a5f4d7c$var$Offset, 'void', {\n    relativeTo: ctx => ctx.offsetToData,\n    allowNull: false\n  }), t => t.glyphCount + 1)\n});\nvar $d03801ee7a5f4d7c$export$2e2bcd8739ae039 = $d03801ee7a5f4d7c$var$gvar;\nlet $70ffc7fec5b89b5e$var$ClassTable = new $5OpyM$restructure.Struct({\n  length: $5OpyM$restructure.uint16,\n  coverage: $5OpyM$restructure.uint16,\n  subFeatureFlags: $5OpyM$restructure.uint32,\n  stateTable: new $c35aa0a165e05d15$export$105027425199cc51()\n});\nlet $70ffc7fec5b89b5e$var$WidthDeltaRecord = new $5OpyM$restructure.Struct({\n  justClass: $5OpyM$restructure.uint32,\n  beforeGrowLimit: $5OpyM$restructure.fixed32,\n  beforeShrinkLimit: $5OpyM$restructure.fixed32,\n  afterGrowLimit: $5OpyM$restructure.fixed32,\n  afterShrinkLimit: $5OpyM$restructure.fixed32,\n  growFlags: $5OpyM$restructure.uint16,\n  shrinkFlags: $5OpyM$restructure.uint16\n});\nlet $70ffc7fec5b89b5e$var$WidthDeltaCluster = new $5OpyM$restructure.Array($70ffc7fec5b89b5e$var$WidthDeltaRecord, $5OpyM$restructure.uint32);\nlet $70ffc7fec5b89b5e$var$ActionData = new $5OpyM$restructure.VersionedStruct('actionType', {\n  0: {\n    lowerLimit: $5OpyM$restructure.fixed32,\n    upperLimit: $5OpyM$restructure.fixed32,\n    order: $5OpyM$restructure.uint16,\n    glyphs: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, $5OpyM$restructure.uint16)\n  },\n  1: {\n    addGlyph: $5OpyM$restructure.uint16\n  },\n  2: {\n    substThreshold: $5OpyM$restructure.fixed32,\n    addGlyph: $5OpyM$restructure.uint16,\n    substGlyph: $5OpyM$restructure.uint16\n  },\n  3: {},\n  4: {\n    variationAxis: $5OpyM$restructure.uint32,\n    minimumLimit: $5OpyM$restructure.fixed32,\n    noStretchValue: $5OpyM$restructure.fixed32,\n    maximumLimit: $5OpyM$restructure.fixed32\n  },\n  5: {\n    flags: $5OpyM$restructure.uint16,\n    glyph: $5OpyM$restructure.uint16\n  }\n});\nlet $70ffc7fec5b89b5e$var$Action = new $5OpyM$restructure.Struct({\n  actionClass: $5OpyM$restructure.uint16,\n  actionType: $5OpyM$restructure.uint16,\n  actionLength: $5OpyM$restructure.uint32,\n  actionData: $70ffc7fec5b89b5e$var$ActionData,\n  padding: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, t => t.actionLength - t._currentOffset)\n});\nlet $70ffc7fec5b89b5e$var$PostcompensationAction = new $5OpyM$restructure.Array($70ffc7fec5b89b5e$var$Action, $5OpyM$restructure.uint32);\nlet $70ffc7fec5b89b5e$var$PostCompensationTable = new $5OpyM$restructure.Struct({\n  lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$PostcompensationAction))\n});\nlet $70ffc7fec5b89b5e$var$JustificationTable = new $5OpyM$restructure.Struct({\n  classTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$ClassTable, {\n    type: 'parent'\n  }),\n  wdcOffset: $5OpyM$restructure.uint16,\n  postCompensationTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$PostCompensationTable, {\n    type: 'parent'\n  }),\n  widthDeltaClusters: new $c35aa0a165e05d15$export$8351f8c2ae2f103c(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$WidthDeltaCluster, {\n    type: 'parent',\n    relativeTo: ctx => ctx.wdcOffset\n  }))\n});\nvar $70ffc7fec5b89b5e$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint32,\n  format: $5OpyM$restructure.uint16,\n  horizontal: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$JustificationTable),\n  vertical: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $70ffc7fec5b89b5e$var$JustificationTable)\n});\nlet $dd743f90b6270daa$var$LigatureData = {\n  action: $5OpyM$restructure.uint16\n};\nlet $dd743f90b6270daa$var$ContextualData = {\n  markIndex: $5OpyM$restructure.uint16,\n  currentIndex: $5OpyM$restructure.uint16\n};\nlet $dd743f90b6270daa$var$InsertionData = {\n  currentInsertIndex: $5OpyM$restructure.uint16,\n  markedInsertIndex: $5OpyM$restructure.uint16\n};\nlet $dd743f90b6270daa$var$SubstitutionTable = new $5OpyM$restructure.Struct({\n  items: new $c35aa0a165e05d15$export$c5af1eebc882e39a(new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$8351f8c2ae2f103c()))\n});\nlet $dd743f90b6270daa$var$SubtableData = new $5OpyM$restructure.VersionedStruct('type', {\n  0: {\n    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba()\n  },\n  1: {\n    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$ContextualData),\n    substitutionTable: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $dd743f90b6270daa$var$SubstitutionTable)\n  },\n  2: {\n    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$LigatureData),\n    ligatureActions: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a($5OpyM$restructure.uint32)),\n    components: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a($5OpyM$restructure.uint16)),\n    ligatureList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a($5OpyM$restructure.uint16))\n  },\n  4: {\n    lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c()\n  },\n  5: {\n    stateTable: new $c35aa0a165e05d15$export$79f7d93d790934ba($dd743f90b6270daa$var$InsertionData),\n    insertionActions: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, new $c35aa0a165e05d15$export$c5af1eebc882e39a($5OpyM$restructure.uint16))\n  }\n});\nlet $dd743f90b6270daa$var$Subtable = new $5OpyM$restructure.Struct({\n  length: $5OpyM$restructure.uint32,\n  coverage: $5OpyM$restructure.uint24,\n  type: $5OpyM$restructure.uint8,\n  subFeatureFlags: $5OpyM$restructure.uint32,\n  table: $dd743f90b6270daa$var$SubtableData,\n  padding: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, t => t.length - t._currentOffset)\n});\nlet $dd743f90b6270daa$var$FeatureEntry = new $5OpyM$restructure.Struct({\n  featureType: $5OpyM$restructure.uint16,\n  featureSetting: $5OpyM$restructure.uint16,\n  enableFlags: $5OpyM$restructure.uint32,\n  disableFlags: $5OpyM$restructure.uint32\n});\nlet $dd743f90b6270daa$var$MorxChain = new $5OpyM$restructure.Struct({\n  defaultFlags: $5OpyM$restructure.uint32,\n  chainLength: $5OpyM$restructure.uint32,\n  nFeatureEntries: $5OpyM$restructure.uint32,\n  nSubtables: $5OpyM$restructure.uint32,\n  features: new $5OpyM$restructure.Array($dd743f90b6270daa$var$FeatureEntry, 'nFeatureEntries'),\n  subtables: new $5OpyM$restructure.Array($dd743f90b6270daa$var$Subtable, 'nSubtables')\n});\nvar $dd743f90b6270daa$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint16,\n  unused: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n  nChains: $5OpyM$restructure.uint32,\n  chains: new $5OpyM$restructure.Array($dd743f90b6270daa$var$MorxChain, 'nChains')\n});\nlet $40e500cc5163d19f$var$OpticalBounds = new $5OpyM$restructure.Struct({\n  left: $5OpyM$restructure.int16,\n  top: $5OpyM$restructure.int16,\n  right: $5OpyM$restructure.int16,\n  bottom: $5OpyM$restructure.int16\n});\nvar $40e500cc5163d19f$export$2e2bcd8739ae039 = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.fixed32,\n  format: $5OpyM$restructure.uint16,\n  lookupTable: new $c35aa0a165e05d15$export$8351f8c2ae2f103c($40e500cc5163d19f$var$OpticalBounds)\n});\nlet $60d88718e7e1fa97$var$tables = {};\nvar $60d88718e7e1fa97$export$2e2bcd8739ae039 = $60d88718e7e1fa97$var$tables;\n$60d88718e7e1fa97$var$tables.cmap = $9aad45a64cf8e4b5$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.head = $b41847595480ce3a$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.hhea = $5fda302e2516d0c7$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.hmtx = $28788c978325a3e1$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.maxp = $9e68d972c1fae2a9$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.name = $866b9b7dd32d7242$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables['OS/2'] = $268023eac606db57$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.post = $5287343c85bea17e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.fpgm = $6f2fae1f8d2b4b41$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.loca = $cae48a5e791773ec$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.prep = $7b12cfca10f7f884$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables['cvt '] = $5768e6ef8b1a512a$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.glyf = $06e9f2dae5795013$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables['CFF '] = $8770fc79268fa3c2$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables['CFF2'] = $8770fc79268fa3c2$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.VORG = $79f2eb50e4490e51$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.EBLC = $234c291eab07e474$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.CBLC = $60d88718e7e1fa97$var$tables.EBLC;\n$60d88718e7e1fa97$var$tables.sbix = $55d04373f0cac44e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.COLR = $0e59eccfa3005d9d$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.CPAL = $23affa36a12f7915$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.BASE = $9fffe61eb0785f74$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.GDEF = $418face38567ee6e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.GPOS = $010e157f6d8a40e9$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.GSUB = $7176ea6bb7dcf1c6$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.JSTF = $71e9e74bb6366bce$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.HVAR = $706225b6909f9418$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.DSIG = $4a144b8ae6f53b7c$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.gasp = $a2086c3965d7b105$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.hdmx = $de83746c6c1c8559$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.kern = $5a2237650c44652a$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.LTSH = $1eadf070c8b34e48$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.PCLT = $8eb2f7302ef75084$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.VDMX = $8223b0d67f5fd7c9$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.vhea = $4b17ac6a75c85897$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.vmtx = $a9f9c5185d84186d$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.avar = $d9cf6d6467871d68$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.bsln = $53e6946cfb72ad0c$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.feat = $117550c71e13cb3d$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.fvar = $551f92fdd501454e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.gvar = $d03801ee7a5f4d7c$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.just = $70ffc7fec5b89b5e$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.morx = $dd743f90b6270daa$export$2e2bcd8739ae039;\n$60d88718e7e1fa97$var$tables.opbd = $40e500cc5163d19f$export$2e2bcd8739ae039;\nlet $d5e01a2298150c9a$var$TableEntry = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  checkSum: $5OpyM$restructure.uint32,\n  offset: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, 'void', {\n    type: 'global'\n  }),\n  length: $5OpyM$restructure.uint32\n});\nlet $d5e01a2298150c9a$var$Directory = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  numTables: $5OpyM$restructure.uint16,\n  searchRange: $5OpyM$restructure.uint16,\n  entrySelector: $5OpyM$restructure.uint16,\n  rangeShift: $5OpyM$restructure.uint16,\n  tables: new $5OpyM$restructure.Array($d5e01a2298150c9a$var$TableEntry, 'numTables')\n});\n$d5e01a2298150c9a$var$Directory.process = function () {\n  let tables = {};\n  for (let table of this.tables) tables[table.tag] = table;\n  this.tables = tables;\n};\n$d5e01a2298150c9a$var$Directory.preEncode = function (stream) {\n  let tables = [];\n  for (let tag in this.tables) {\n    let table = this.tables[tag];\n    if (table) tables.push({\n      tag: tag,\n      checkSum: 0,\n      offset: new $5OpyM$restructure.VoidPointer($60d88718e7e1fa97$export$2e2bcd8739ae039[tag], table),\n      length: $60d88718e7e1fa97$export$2e2bcd8739ae039[tag].size(table)\n    });\n  }\n  this.tag = 'true';\n  this.numTables = tables.length;\n  this.tables = tables;\n  let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);\n  let maxPowerOf2 = Math.pow(2, maxExponentFor2);\n  this.searchRange = maxPowerOf2 * 16;\n  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\nvar $d5e01a2298150c9a$export$2e2bcd8739ae039 = $d5e01a2298150c9a$var$Directory;\nfunction $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(arr, cmp) {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min <= max) {\n    let mid = min + max >> 1;\n    let res = cmp(arr[mid]);\n    if (res < 0) max = mid - 1;else if (res > 0) min = mid + 1;else return mid;\n  }\n  return -1;\n}\nfunction $f3ad94c9f84f4d57$export$d02631cccf789723(index, end) {\n  let $f3ad94c9f84f4d57$export$d02631cccf789723 = [];\n  while (index < end) $f3ad94c9f84f4d57$export$d02631cccf789723.push(index++);\n  return $f3ad94c9f84f4d57$export$d02631cccf789723;\n}\nvar _class;\nlet $5d24cfe1a4cd83bb$export$2e2bcd8739ae039 = (_class = class $5d24cfe1a4cd83bb$export$2e2bcd8739ae039 {\n  constructor(cmapTable) {\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [\n    // 32-bit subtables\n    [3, 10], [0, 6], [0, 4],\n    // 16-bit subtables\n    [3, 1], [0, 3], [0, 2], [0, 1], [0, 0]]);\n    // If not unicode cmap was found, and iconv-lite is installed,\n    // take the first table with a supported encoding.\n    if (!this.cmap && $5OpyM$iconvlitecjs) for (let cmap of cmapTable.tables) {\n      let encoding = $111d7d948974b54a$export$badc544e0651b6b1(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n      if ($5OpyM$iconvlitecjs.encodingExists(encoding)) {\n        this.cmap = cmap.table;\n        this.encoding = encoding;\n      }\n    }\n    if (!this.cmap) throw new Error(\"Could not find a supported cmap table\");\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n    if (this.uvs && this.uvs.version !== 14) this.uvs = null;\n  }\n  findSubtable(cmapTable, pairs) {\n    for (let [platformID, encodingID] of pairs) for (let cmap of cmapTable.tables) {\n      if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;\n    }\n    return null;\n  }\n  lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) {\n      let buf = $5OpyM$iconvlitecjs.encode(String.fromCodePoint(codepoint), this.encoding);\n      codepoint = 0;\n      for (let i = 0; i < buf.length; i++) codepoint = codepoint << 8 | buf[i];\n      // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.\n    } else if (variationSelector) {\n      let gid = this.getVariationSelector(codepoint, variationSelector);\n      if (gid) return gid;\n    }\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n      case 4:\n        {\n          let min = 0;\n          let max = cmap.segCount - 1;\n          while (min <= max) {\n            let mid = min + max >> 1;\n            if (codepoint < cmap.startCode.get(mid)) max = mid - 1;else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;else {\n              let rangeOffset = cmap.idRangeOffset.get(mid);\n              let gid;\n              if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);else {\n                let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n                gid = cmap.glyphIndexArray.get(index) || 0;\n                if (gid !== 0) gid += cmap.idDelta.get(mid);\n              }\n              return gid & 0xffff;\n            }\n          }\n          return 0;\n        }\n      case 8:\n        throw new Error('TODO: cmap format 8');\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n      case 12:\n      case 13:\n        {\n          let min = 0;\n          let max = cmap.nGroups - 1;\n          while (min <= max) {\n            let mid = min + max >> 1;\n            let group = cmap.groups.get(mid);\n            if (codepoint < group.startCharCode) max = mid - 1;else if (codepoint > group.endCharCode) min = mid + 1;else {\n              if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);else return group.glyphID;\n            }\n          }\n          return 0;\n        }\n      case 14:\n        throw new Error('TODO: cmap format 14');\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n  getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) return 0;\n    let selectors = this.uvs.varSelectors.toArray();\n    let i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(selectors, x => variationSelector - x.varSelector);\n    let sel = selectors[i];\n    if (i !== -1 && sel.defaultUVS) i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(sel.defaultUVS, x => codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0);\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(sel.nonDefaultUVS, x => codepoint - x.unicodeValue);\n      if (i !== -1) return sel.nonDefaultUVS[i].glyphID;\n    }\n    return 0;\n  }\n  getCharacterSet() {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return $f3ad94c9f84f4d57$export$d02631cccf789723(0, cmap.codeMap.length);\n      case 4:\n        {\n          let res = [];\n          let endCodes = cmap.endCode.toArray();\n          for (let i = 0; i < endCodes.length; i++) {\n            let tail = endCodes[i] + 1;\n            let start = cmap.startCode.get(i);\n            res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(start, tail));\n          }\n          return res;\n        }\n      case 8:\n        throw new Error('TODO: cmap format 8');\n      case 6:\n      case 10:\n        return $f3ad94c9f84f4d57$export$d02631cccf789723(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n      case 12:\n      case 13:\n        {\n          let res = [];\n          for (let group of cmap.groups.toArray()) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));\n          return res;\n        }\n      case 14:\n        throw new Error('TODO: cmap format 14');\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n  codePointsForGlyph(gid) {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        {\n          let res = [];\n          for (let i = 0; i < 256; i++) if (cmap.codeMap.get(i) === gid) res.push(i);\n          return res;\n        }\n      case 4:\n        {\n          let res = [];\n          for (let i = 0; i < cmap.segCount; i++) {\n            let end = cmap.endCode.get(i);\n            let start = cmap.startCode.get(i);\n            let rangeOffset = cmap.idRangeOffset.get(i);\n            let delta = cmap.idDelta.get(i);\n            for (var c = start; c <= end; c++) {\n              let g = 0;\n              if (rangeOffset === 0) g = c + delta;else {\n                let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);\n                g = cmap.glyphIndexArray.get(index) || 0;\n                if (g !== 0) g += delta;\n              }\n              if (g === gid) res.push(c);\n            }\n          }\n          return res;\n        }\n      case 12:\n        {\n          let res = [];\n          for (let group of cmap.groups.toArray()) if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));\n          return res;\n        }\n      case 13:\n        {\n          let res = [];\n          for (let group of cmap.groups.toArray()) if (gid === group.glyphID) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(group.startCharCode, group.endCharCode + 1));\n          return res;\n        }\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n}, $5OpyM$applyDecoratedDescriptor(_class.prototype, \"getCharacterSet\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"getCharacterSet\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"codePointsForGlyph\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"codePointsForGlyph\"), _class.prototype), _class);\nclass $8526e21034212dc1$export$2e2bcd8739ae039 {\n  constructor(font) {\n    this.kern = font.kern;\n  }\n  process(glyphs, positions) {\n    for (let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      let left = glyphs[glyphIndex].id;\n      let right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  }\n  getKerning(left, right) {\n    let res = 0;\n    for (let table of this.kern.tables) {\n      if (table.coverage.crossStream) continue;\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) continue;\n          break;\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) continue;\n          break;\n        default:\n          throw new Error(`Unsupported kerning table version ${table.version}`);\n      }\n      let val = 0;\n      let s = table.subtable;\n      switch (table.format) {\n        case 0:\n          let pairIdx = $f3ad94c9f84f4d57$export$2e0ae67339d5f1ac(s.pairs, function (pair) {\n            return left - pair.left || right - pair.right;\n          });\n          if (pairIdx >= 0) val = s.pairs[pairIdx].value;\n          break;\n        case 2:\n          let leftOffset = 0,\n            rightOffset = 0;\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];else leftOffset = s.array.off;\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          let index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) return 0;\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n        default:\n          throw new Error(`Unsupported kerning sub-table format ${table.format}`);\n      }\n      // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n      if (table.coverage.override) res = val;else res += val;\n    }\n    return res;\n  }\n}\nclass $e4967fef9afc586a$export$2e2bcd8739ae039 {\n  constructor(font) {\n    this.font = font;\n  }\n  positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    let clusterStart = 0;\n    let clusterEnd = 0;\n    for (let index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.isMark) clusterEnd = index;else {\n        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        clusterStart = clusterEnd = index;\n      }\n    }\n    if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    return positions;\n  }\n  positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    let base = glyphs[clusterStart];\n    let baseBox = base.cbox.copy();\n    // adjust bounding box for ligature glyphs\n    if (base.codePoints.length > 1)\n      // LTR. TODO: RTL support.\n      baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;\n    let xOffset = -positions[clusterStart].xAdvance;\n    let yOffset = 0;\n    let yGap = this.font.unitsPerEm / 16;\n    // position each of the mark glyphs relative to the base glyph\n    for (let index = clusterStart + 1; index <= clusterEnd; index++) {\n      let mark = glyphs[index];\n      let markBox = mark.cbox;\n      let position = positions[index];\n      let combiningClass = this.getCombiningClass(mark.codePoints[0]);\n      if (combiningClass !== 'Not_Reordered') {\n        position.xOffset = position.yOffset = 0;\n        // x positioning\n        switch (combiningClass) {\n          case 'Double_Above':\n          case 'Double_Below':\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n          case 'Attached_Below_Left':\n          case 'Below_Left':\n          case 'Above_Left':\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n          case 'Attached_Above_Right':\n          case 'Below_Right':\n          case 'Above_Right':\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n          default:\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        }\n        // y positioning\n        switch (combiningClass) {\n          case 'Double_Below':\n          case 'Below_Left':\n          case 'Below':\n          case 'Below_Right':\n          case 'Attached_Below_Left':\n          case 'Attached_Below':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') baseBox.minY += yGap;\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n          case 'Double_Above':\n          case 'Above_Left':\n          case 'Above':\n          case 'Above_Right':\n          case 'Attached_Above':\n          case 'Attached_Above_Right':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') baseBox.maxY += yGap;\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n    return;\n  }\n  getCombiningClass(codePoint) {\n    let combiningClass = $5OpyM$unicodeproperties.getCombiningClass(codePoint);\n    // Thai / Lao need some per-character work\n    if ((codePoint & -256) === 0x0e00) {\n      if (combiningClass === 'Not_Reordered') switch (codePoint) {\n        case 0x0e31:\n        case 0x0e34:\n        case 0x0e35:\n        case 0x0e36:\n        case 0x0e37:\n        case 0x0e47:\n        case 0x0e4c:\n        case 0x0e3d:\n        case 0x0e4e:\n          return 'Above_Right';\n        case 0x0eb1:\n        case 0x0eb4:\n        case 0x0eb5:\n        case 0x0eb6:\n        case 0x0eb7:\n        case 0x0ebb:\n        case 0x0ecc:\n        case 0x0ecd:\n          return 'Above';\n        case 0x0ebc:\n          return 'Below';\n      } else if (codePoint === 0x0e3a) return 'Below_Right';\n    }\n    switch (combiningClass) {\n      // Hebrew\n      case 'CCC10':\n      case 'CCC11':\n      case 'CCC12':\n      case 'CCC13':\n      case 'CCC14':\n      case 'CCC15':\n      case 'CCC16':\n      case 'CCC17':\n      case 'CCC18':\n      case 'CCC20':\n      case 'CCC22':\n        return 'Below';\n      case 'CCC23':\n        return 'Attached_Above';\n      case 'CCC24':\n        return 'Above_Right';\n      case 'CCC25':\n      case 'CCC19':\n        return 'Above_Left';\n      case 'CCC26':\n        return 'Above';\n      case 'CCC21':\n        break;\n      // Arabic and Syriac\n      case 'CCC27':\n      case 'CCC28':\n      case 'CCC30':\n      case 'CCC31':\n      case 'CCC33':\n      case 'CCC34':\n      case 'CCC35':\n      case 'CCC36':\n        return 'Above';\n      case 'CCC29':\n      case 'CCC32':\n        return 'Below';\n      // Thai\n      case 'CCC103':\n        return 'Below_Right';\n      case 'CCC107':\n        return 'Above_Right';\n      // Lao\n      case 'CCC118':\n        return 'Below';\n      case 'CCC122':\n        return 'Above';\n      // Tibetan\n      case 'CCC129':\n      case 'CCC132':\n        return 'Below';\n      case 'CCC130':\n        return 'Above';\n    }\n    return combiningClass;\n  }\n}\nclass $fcb46e14b01ea01f$export$2e2bcd8739ae039 {\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /**\n    * The minimum X position in the bounding box\n    * @type {number}\n    */\n    this.minX = minX;\n    /**\n    * The minimum Y position in the bounding box\n    * @type {number}\n    */\n    this.minY = minY;\n    /**\n    * The maxmimum X position in the bounding box\n    * @type {number}\n    */\n    this.maxX = maxX;\n    /**\n    * The maxmimum Y position in the bounding box\n    * @type {number}\n    */\n    this.maxY = maxY;\n  }\n  /**\n  * The width of the bounding box\n  * @type {number}\n  */\n  get width() {\n    return this.maxX - this.minX;\n  }\n  /**\n  * The height of the bounding box\n  * @type {number}\n  */\n  get height() {\n    return this.maxY - this.minY;\n  }\n  addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) this.minX = x;\n      if (x > this.maxX) this.maxX = x;\n    }\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) this.minY = y;\n      if (y > this.maxY) this.maxY = y;\n    }\n  }\n  copy() {\n    return new $fcb46e14b01ea01f$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);\n  }\n}\n\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nconst $a5878e4f4663c9e2$var$UNICODE_SCRIPTS = {\n  Caucasian_Albanian: 'aghb',\n  Arabic: 'arab',\n  Imperial_Aramaic: 'armi',\n  Armenian: 'armn',\n  Avestan: 'avst',\n  Balinese: 'bali',\n  Bamum: 'bamu',\n  Bassa_Vah: 'bass',\n  Batak: 'batk',\n  Bengali: ['bng2', 'beng'],\n  Bopomofo: 'bopo',\n  Brahmi: 'brah',\n  Braille: 'brai',\n  Buginese: 'bugi',\n  Buhid: 'buhd',\n  Chakma: 'cakm',\n  Canadian_Aboriginal: 'cans',\n  Carian: 'cari',\n  Cham: 'cham',\n  Cherokee: 'cher',\n  Coptic: 'copt',\n  Cypriot: 'cprt',\n  Cyrillic: 'cyrl',\n  Devanagari: ['dev2', 'deva'],\n  Deseret: 'dsrt',\n  Duployan: 'dupl',\n  Egyptian_Hieroglyphs: 'egyp',\n  Elbasan: 'elba',\n  Ethiopic: 'ethi',\n  Georgian: 'geor',\n  Glagolitic: 'glag',\n  Gothic: 'goth',\n  Grantha: 'gran',\n  Greek: 'grek',\n  Gujarati: ['gjr2', 'gujr'],\n  Gurmukhi: ['gur2', 'guru'],\n  Hangul: 'hang',\n  Han: 'hani',\n  Hanunoo: 'hano',\n  Hebrew: 'hebr',\n  Hiragana: 'hira',\n  Pahawh_Hmong: 'hmng',\n  Katakana_Or_Hiragana: 'hrkt',\n  Old_Italic: 'ital',\n  Javanese: 'java',\n  Kayah_Li: 'kali',\n  Katakana: 'kana',\n  Kharoshthi: 'khar',\n  Khmer: 'khmr',\n  Khojki: 'khoj',\n  Kannada: ['knd2', 'knda'],\n  Kaithi: 'kthi',\n  Tai_Tham: 'lana',\n  Lao: 'lao ',\n  Latin: 'latn',\n  Lepcha: 'lepc',\n  Limbu: 'limb',\n  Linear_A: 'lina',\n  Linear_B: 'linb',\n  Lisu: 'lisu',\n  Lycian: 'lyci',\n  Lydian: 'lydi',\n  Mahajani: 'mahj',\n  Mandaic: 'mand',\n  Manichaean: 'mani',\n  Mende_Kikakui: 'mend',\n  Meroitic_Cursive: 'merc',\n  Meroitic_Hieroglyphs: 'mero',\n  Malayalam: ['mlm2', 'mlym'],\n  Modi: 'modi',\n  Mongolian: 'mong',\n  Mro: 'mroo',\n  Meetei_Mayek: 'mtei',\n  Myanmar: ['mym2', 'mymr'],\n  Old_North_Arabian: 'narb',\n  Nabataean: 'nbat',\n  Nko: 'nko ',\n  Ogham: 'ogam',\n  Ol_Chiki: 'olck',\n  Old_Turkic: 'orkh',\n  Oriya: ['ory2', 'orya'],\n  Osmanya: 'osma',\n  Palmyrene: 'palm',\n  Pau_Cin_Hau: 'pauc',\n  Old_Permic: 'perm',\n  Phags_Pa: 'phag',\n  Inscriptional_Pahlavi: 'phli',\n  Psalter_Pahlavi: 'phlp',\n  Phoenician: 'phnx',\n  Miao: 'plrd',\n  Inscriptional_Parthian: 'prti',\n  Rejang: 'rjng',\n  Runic: 'runr',\n  Samaritan: 'samr',\n  Old_South_Arabian: 'sarb',\n  Saurashtra: 'saur',\n  Shavian: 'shaw',\n  Sharada: 'shrd',\n  Siddham: 'sidd',\n  Khudawadi: 'sind',\n  Sinhala: 'sinh',\n  Sora_Sompeng: 'sora',\n  Sundanese: 'sund',\n  Syloti_Nagri: 'sylo',\n  Syriac: 'syrc',\n  Tagbanwa: 'tagb',\n  Takri: 'takr',\n  Tai_Le: 'tale',\n  New_Tai_Lue: 'talu',\n  Tamil: ['tml2', 'taml'],\n  Tai_Viet: 'tavt',\n  Telugu: ['tel2', 'telu'],\n  Tifinagh: 'tfng',\n  Tagalog: 'tglg',\n  Thaana: 'thaa',\n  Thai: 'thai',\n  Tibetan: 'tibt',\n  Tirhuta: 'tirh',\n  Ugaritic: 'ugar',\n  Vai: 'vai ',\n  Warang_Citi: 'wara',\n  Old_Persian: 'xpeo',\n  Cuneiform: 'xsux',\n  Yi: 'yi  ',\n  Inherited: 'zinh',\n  Common: 'zyyy',\n  Unknown: 'zzzz'\n};\nconst $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS = {};\nfor (let script in $a5878e4f4663c9e2$var$UNICODE_SCRIPTS) {\n  let tag = $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script];\n  if (Array.isArray(tag)) for (let t of tag) $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[t] = script;else $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag] = script;\n}\nfunction $a5878e4f4663c9e2$export$b32f0b5f69d65e51(script1) {\n  return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script1];\n}\nfunction $a5878e4f4663c9e2$export$ce50e82f12a827a4(tag) {\n  return $a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS[tag];\n}\nfunction $a5878e4f4663c9e2$export$e5cb25e204fb8450(string) {\n  let len = string.length;\n  let idx = 0;\n  while (idx < len) {\n    let code = string.charCodeAt(idx++);\n    // Check if this is a high surrogate\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      let next = string.charCodeAt(idx);\n      // Check if this is a low surrogate\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n    let script2 = $5OpyM$unicodeproperties.getScript(code);\n    if (script2 !== 'Common' && script2 !== 'Inherited' && script2 !== 'Unknown') return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script2];\n  }\n  return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;\n}\nfunction $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints) {\n  for (let i = 0; i < codePoints.length; i++) {\n    let codePoint = codePoints[i];\n    let script3 = $5OpyM$unicodeproperties.getScript(codePoint);\n    if (script3 !== 'Common' && script3 !== 'Inherited' && script3 !== 'Unknown') return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS[script3];\n  }\n  return $a5878e4f4663c9e2$var$UNICODE_SCRIPTS.Unknown;\n}\n// The scripts in this map are written from right to left\nconst $a5878e4f4663c9e2$var$RTL = {\n  arab: true,\n  hebr: true,\n  syrc: true,\n  thaa: true,\n  cprt: true,\n  khar: true,\n  phnx: true,\n  'nko ': true,\n  lydi: true,\n  avst: true,\n  armi: true,\n  phli: true,\n  prti: true,\n  sarb: true,\n  orkh: true,\n  samr: true,\n  mand: true,\n  merc: true,\n  mero: true,\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true,\n  mend: true,\n  nbat: true,\n  narb: true,\n  palm: true,\n  phlp: true // Psalter Pahlavi\n};\nfunction $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script4) {\n  if ($a5878e4f4663c9e2$var$RTL[script4]) return 'rtl';\n  return 'ltr';\n}\nclass $5a6ae00fa7e614b0$export$2e2bcd8739ae039 {\n  constructor(glyphs, features, script, language, direction) {\n    /**\n    * An array of Glyph objects in the run\n    * @type {Glyph[]}\n    */\n    this.glyphs = glyphs;\n    /**\n    * An array of GlyphPosition objects for each glyph in the run\n    * @type {GlyphPosition[]}\n    */\n    this.positions = null;\n    /**\n    * The script that was requested for shaping. This was either passed in or detected automatically.\n    * @type {string}\n    */\n    this.script = script;\n    /**\n    * The language requested for shaping, as passed in. If `null`, the default language for the\n    * script was used.\n    * @type {string}\n    */\n    this.language = language || null;\n    /**\n    * The direction requested for shaping, as passed in (either ltr or rtl).\n    * If `null`, the default direction of the script is used.\n    * @type {string}\n    */\n    this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);\n    /**\n    * The features requested during shaping. This is a combination of user\n    * specified features and features chosen by the shaper.\n    * @type {object}\n    */\n    this.features = {};\n    // Convert features to an object\n    if (Array.isArray(features)) for (let tag of features) this.features[tag] = true;else if (typeof features === 'object') this.features = features;\n  }\n  /**\n  * The total advance width of the run.\n  * @type {number}\n  */\n  get advanceWidth() {\n    let width = 0;\n    for (let position of this.positions) width += position.xAdvance;\n    return width;\n  }\n  /**\n  * The total advance height of the run.\n  * @type {number}\n  */\n  get advanceHeight() {\n    let height = 0;\n    for (let position of this.positions) height += position.yAdvance;\n    return height;\n  }\n  /**\n  * The bounding box containing all glyphs in the run.\n  * @type {BBox}\n  */\n  get bbox() {\n    let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039();\n    let x = 0;\n    let y = 0;\n    for (let index = 0; index < this.glyphs.length; index++) {\n      let glyph = this.glyphs[index];\n      let p = this.positions[index];\n      let b = glyph.bbox;\n      bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n      bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n      x += p.xAdvance;\n      y += p.yAdvance;\n    }\n    return bbox;\n  }\n}\nclass $4bff5f854806c785$export$2e2bcd8739ae039 {\n  constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {\n    /**\n    * The amount to move the virtual pen in the X direction after rendering this glyph.\n    * @type {number}\n    */\n    this.xAdvance = xAdvance;\n    /**\n    * The amount to move the virtual pen in the Y direction after rendering this glyph.\n    * @type {number}\n    */\n    this.yAdvance = yAdvance;\n    /**\n    * The offset from the pen position in the X direction at which to render this glyph.\n    * @type {number}\n    */\n    this.xOffset = xOffset;\n    /**\n    * The offset from the pen position in the Y direction at which to render this glyph.\n    * @type {number}\n    */\n    this.yOffset = yOffset;\n  }\n}\n\n// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nconst $b603e0ade09ad01e$var$features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n  // upperAndLowerCase: 0          # deprecated\n  // allCaps: 1                    # deprecated\n  // allLowerCase: 2               # deprecated\n  // smallCaps: 3                  # deprecated\n  // initialCaps: 4                # deprecated\n  // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n  // formInterrobang: 6\n  // smartQuotes: 8\n  // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n  // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n  // hanjaToHangul: 1\n  // hiraganaToKatakana: 2\n  // katakanaToHiragana: 3\n  // kanaToRomanization: 4\n  // romanizationToHiragana: 5\n  // romanizationToKatakana: 6\n  // hanjaToHangulAltOne: 7\n  // hanjaToHangulAltTwo: 8\n  // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: {\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\nconst $b603e0ade09ad01e$var$feature = (name, selector) => [$b603e0ade09ad01e$var$features[name].code, $b603e0ade09ad01e$var$features[name][selector]];\nconst $b603e0ade09ad01e$var$OTMapping = {\n  rlig: $b603e0ade09ad01e$var$feature('ligatures', 'requiredLigatures'),\n  clig: $b603e0ade09ad01e$var$feature('ligatures', 'contextualLigatures'),\n  dlig: $b603e0ade09ad01e$var$feature('ligatures', 'rareLigatures'),\n  hlig: $b603e0ade09ad01e$var$feature('ligatures', 'historicalLigatures'),\n  liga: $b603e0ade09ad01e$var$feature('ligatures', 'commonLigatures'),\n  hist: $b603e0ade09ad01e$var$feature('ligatures', 'historicalLigatures'),\n  smcp: $b603e0ade09ad01e$var$feature('lowerCase', 'lowerCaseSmallCaps'),\n  pcap: $b603e0ade09ad01e$var$feature('lowerCase', 'lowerCasePetiteCaps'),\n  frac: $b603e0ade09ad01e$var$feature('fractions', 'diagonalFractions'),\n  dnom: $b603e0ade09ad01e$var$feature('fractions', 'diagonalFractions'),\n  numr: $b603e0ade09ad01e$var$feature('fractions', 'diagonalFractions'),\n  afrc: $b603e0ade09ad01e$var$feature('fractions', 'verticalFractions'),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n  case: $b603e0ade09ad01e$var$feature('caseSensitiveLayout', 'caseSensitiveLayout'),\n  ccmp: $b603e0ade09ad01e$var$feature('unicodeDecomposition', 'canonicalComposition'),\n  cpct: $b603e0ade09ad01e$var$feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  valt: $b603e0ade09ad01e$var$feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  swsh: $b603e0ade09ad01e$var$feature('contextualAlternates', 'swashAlternates'),\n  cswh: $b603e0ade09ad01e$var$feature('contextualAlternates', 'contextualSwashAlternates'),\n  curs: $b603e0ade09ad01e$var$feature('cursiveConnection', 'cursive'),\n  c2pc: $b603e0ade09ad01e$var$feature('upperCase', 'upperCasePetiteCaps'),\n  c2sc: $b603e0ade09ad01e$var$feature('upperCase', 'upperCaseSmallCaps'),\n  init: $b603e0ade09ad01e$var$feature('smartSwash', 'wordInitialSwashes'),\n  fin2: $b603e0ade09ad01e$var$feature('smartSwash', 'wordFinalSwashes'),\n  medi: $b603e0ade09ad01e$var$feature('smartSwash', 'nonFinalSwashes'),\n  med2: $b603e0ade09ad01e$var$feature('smartSwash', 'nonFinalSwashes'),\n  fin3: $b603e0ade09ad01e$var$feature('smartSwash', 'wordFinalSwashes'),\n  fina: $b603e0ade09ad01e$var$feature('smartSwash', 'wordFinalSwashes'),\n  pkna: $b603e0ade09ad01e$var$feature('kanaSpacing', 'proportionalKana'),\n  half: $b603e0ade09ad01e$var$feature('textSpacing', 'halfWidthText'),\n  halt: $b603e0ade09ad01e$var$feature('textSpacing', 'altHalfWidthText'),\n  hkna: $b603e0ade09ad01e$var$feature('alternateKana', 'alternateHorizKana'),\n  vkna: $b603e0ade09ad01e$var$feature('alternateKana', 'alternateVertKana'),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n  ital: $b603e0ade09ad01e$var$feature('italicCJKRoman', 'CJKItalicRoman'),\n  lnum: $b603e0ade09ad01e$var$feature('numberCase', 'upperCaseNumbers'),\n  onum: $b603e0ade09ad01e$var$feature('numberCase', 'lowerCaseNumbers'),\n  mgrk: $b603e0ade09ad01e$var$feature('mathematicalExtras', 'mathematicalGreek'),\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n  calt: $b603e0ade09ad01e$var$feature('contextualAlternates', 'contextualAlternates'),\n  vrt2: $b603e0ade09ad01e$var$feature('verticalSubstitution', 'substituteVerticalForms'),\n  vert: $b603e0ade09ad01e$var$feature('verticalSubstitution', 'substituteVerticalForms'),\n  tnum: $b603e0ade09ad01e$var$feature('numberSpacing', 'monospacedNumbers'),\n  pnum: $b603e0ade09ad01e$var$feature('numberSpacing', 'proportionalNumbers'),\n  sups: $b603e0ade09ad01e$var$feature('verticalPosition', 'superiors'),\n  subs: $b603e0ade09ad01e$var$feature('verticalPosition', 'inferiors'),\n  ordn: $b603e0ade09ad01e$var$feature('verticalPosition', 'ordinals'),\n  pwid: $b603e0ade09ad01e$var$feature('textSpacing', 'proportionalText'),\n  hwid: $b603e0ade09ad01e$var$feature('textSpacing', 'halfWidthText'),\n  qwid: $b603e0ade09ad01e$var$feature('textSpacing', 'quarterWidthText'),\n  twid: $b603e0ade09ad01e$var$feature('textSpacing', 'thirdWidthText'),\n  fwid: $b603e0ade09ad01e$var$feature('textSpacing', 'proportionalText'),\n  palt: $b603e0ade09ad01e$var$feature('textSpacing', 'altProportionalText'),\n  trad: $b603e0ade09ad01e$var$feature('characterShape', 'traditionalCharacters'),\n  smpl: $b603e0ade09ad01e$var$feature('characterShape', 'simplifiedCharacters'),\n  jp78: $b603e0ade09ad01e$var$feature('characterShape', 'JIS1978Characters'),\n  jp83: $b603e0ade09ad01e$var$feature('characterShape', 'JIS1983Characters'),\n  jp90: $b603e0ade09ad01e$var$feature('characterShape', 'JIS1990Characters'),\n  jp04: $b603e0ade09ad01e$var$feature('characterShape', 'JIS2004Characters'),\n  expt: $b603e0ade09ad01e$var$feature('characterShape', 'expertCharacters'),\n  hojo: $b603e0ade09ad01e$var$feature('characterShape', 'hojoCharacters'),\n  nlck: $b603e0ade09ad01e$var$feature('characterShape', 'NLCCharacters'),\n  tnam: $b603e0ade09ad01e$var$feature('characterShape', 'traditionalNamesCharacters'),\n  ruby: $b603e0ade09ad01e$var$feature('rubyKana', 'rubyKana'),\n  titl: $b603e0ade09ad01e$var$feature('styleOptions', 'titlingCaps'),\n  zero: $b603e0ade09ad01e$var$feature('typographicExtras', 'slashedZero'),\n  ss01: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltOne'),\n  ss02: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltTwo'),\n  ss03: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltThree'),\n  ss04: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltFour'),\n  ss05: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltFive'),\n  ss06: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltSix'),\n  ss07: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltSeven'),\n  ss08: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltEight'),\n  ss09: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltNine'),\n  ss10: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltTen'),\n  ss11: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltEleven'),\n  ss12: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltTwelve'),\n  ss13: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltThirteen'),\n  ss14: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltFourteen'),\n  ss15: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltFifteen'),\n  ss16: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltSixteen'),\n  ss17: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n  ss18: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltEighteen'),\n  ss19: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltNineteen'),\n  ss20: $b603e0ade09ad01e$var$feature('stylisticAlternatives', 'stylisticAltTwenty')\n};\n// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n// Add cv01-cv99 features\nfor (let i = 1; i <= 99; i++) $b603e0ade09ad01e$var$OTMapping[`cv${`00${i}`.slice(-2)}`] = [$b603e0ade09ad01e$var$features.characterAlternatives.code, i];\n// create inverse mapping\nlet $b603e0ade09ad01e$var$AATMapping = {};\nfor (let ot in $b603e0ade09ad01e$var$OTMapping) {\n  let aat = $b603e0ade09ad01e$var$OTMapping[ot];\n  if ($b603e0ade09ad01e$var$AATMapping[aat[0]] == null) $b603e0ade09ad01e$var$AATMapping[aat[0]] = {};\n  $b603e0ade09ad01e$var$AATMapping[aat[0]][aat[1]] = ot;\n}\nfunction $b603e0ade09ad01e$export$b813f7d2a1677c16(features) {\n  let res = {};\n  for (let k in features) {\n    let r;\n    if (r = $b603e0ade09ad01e$var$OTMapping[k]) {\n      if (res[r[0]] == null) res[r[0]] = {};\n      res[r[0]][r[1]] = features[k];\n    }\n  }\n  return res;\n}\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction $b603e0ade09ad01e$var$mapFeatureStrings(f) {\n  let [type, setting] = f;\n  if (isNaN(type)) var typeCode = $b603e0ade09ad01e$var$features[type] && $b603e0ade09ad01e$var$features[type].code;else var typeCode = type;\n  if (isNaN(setting)) var settingCode = $b603e0ade09ad01e$var$features[type] && $b603e0ade09ad01e$var$features[type][setting];else var settingCode = setting;\n  return [typeCode, settingCode];\n}\nfunction $b603e0ade09ad01e$export$bd6df347a4f391c4(features) {\n  let res = {};\n  if (Array.isArray(features)) for (let k = 0; k < features.length; k++) {\n    let r;\n    let f = $b603e0ade09ad01e$var$mapFeatureStrings(features[k]);\n    if (r = $b603e0ade09ad01e$var$AATMapping[f[0]] && $b603e0ade09ad01e$var$AATMapping[f[0]][f[1]]) res[r] = true;\n  } else if (typeof features === 'object') for (let type in features) {\n    let feature = features[type];\n    for (let setting in feature) {\n      let r;\n      let f = $b603e0ade09ad01e$var$mapFeatureStrings([type, setting]);\n      if (feature[setting] && (r = $b603e0ade09ad01e$var$AATMapping[f[0]] && $b603e0ade09ad01e$var$AATMapping[f[0]][f[1]])) res[r] = true;\n    }\n  }\n  return Object.keys(res);\n}\nvar _class;\nlet $16667a2c0f0b1be5$export$2e2bcd8739ae039 = (_class = class $16667a2c0f0b1be5$export$2e2bcd8739ae039 {\n  constructor(table) {\n    this.table = table;\n  }\n  lookup(glyph) {\n    switch (this.table.version) {\n      case 0:\n        return this.table.values.getItem(glyph);\n      case 2:\n      case 4:\n        {\n          let min = 0;\n          let max = this.table.binarySearchHeader.nUnits - 1;\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid];\n            // special end of search value\n            if (seg.firstGlyph === 0xffff) return null;\n            if (glyph < seg.firstGlyph) max = mid - 1;else if (glyph > seg.lastGlyph) min = mid + 1;else {\n              if (this.table.version === 2) return seg.value;else return seg.values[glyph - seg.firstGlyph];\n            }\n          }\n          return null;\n        }\n      case 6:\n        {\n          let min = 0;\n          let max = this.table.binarySearchHeader.nUnits - 1;\n          while (min <= max) {\n            var mid = min + max >> 1;\n            var seg = this.table.segments[mid];\n            // special end of search value\n            if (seg.glyph === 0xffff) return null;\n            if (glyph < seg.glyph) max = mid - 1;else if (glyph > seg.glyph) min = mid + 1;else return seg.value;\n          }\n          return null;\n        }\n      case 8:\n        return this.table.values[glyph - this.table.firstGlyph];\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n  }\n  glyphsForValue(classValue) {\n    let res = [];\n    switch (this.table.version) {\n      case 2:\n      case 4:\n        for (let segment of this.table.segments) if (this.table.version === 2 && segment.value === classValue) res.push(...$f3ad94c9f84f4d57$export$d02631cccf789723(segment.firstGlyph, segment.lastGlyph + 1));else {\n          for (let index = 0; index < segment.values.length; index++) if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);\n        }\n        break;\n      case 6:\n        for (let segment1 of this.table.segments) if (segment1.value === classValue) res.push(segment1.glyph);\n        break;\n      case 8:\n        for (let i = 0; i < this.table.values.length; i++) if (this.table.values[i] === classValue) res.push(this.table.firstGlyph + i);\n        break;\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n    return res;\n  }\n}, $5OpyM$applyDecoratedDescriptor(_class.prototype, \"glyphsForValue\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"glyphsForValue\"), _class.prototype), _class);\nconst $de324b614d9ee26c$var$START_OF_TEXT_STATE = 0;\nconst $de324b614d9ee26c$var$START_OF_LINE_STATE = 1;\nconst $de324b614d9ee26c$var$END_OF_TEXT_CLASS = 0;\nconst $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS = 1;\nconst $de324b614d9ee26c$var$DELETED_GLYPH_CLASS = 2;\nconst $de324b614d9ee26c$var$END_OF_LINE_CLASS = 3;\nconst $de324b614d9ee26c$var$DONT_ADVANCE = 0x4000;\nclass $de324b614d9ee26c$export$2e2bcd8739ae039 {\n  constructor(stateTable) {\n    this.stateTable = stateTable;\n    this.lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(stateTable.classTable);\n  }\n  process(glyphs, reverse, processEntry) {\n    let currentState = $de324b614d9ee26c$var$START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n    let index = reverse ? glyphs.length - 1 : 0;\n    let dir = reverse ? -1 : 1;\n    while (dir === 1 && index <= glyphs.length || dir === -1 && index >= -1) {\n      let glyph = null;\n      let classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;\n      let shouldAdvance = true;\n      if (index === glyphs.length || index === -1) classCode = $de324b614d9ee26c$var$END_OF_TEXT_CLASS;else {\n        glyph = glyphs[index];\n        if (glyph.id === 0xffff) classCode = $de324b614d9ee26c$var$DELETED_GLYPH_CLASS;else {\n          classCode = this.lookupTable.lookup(glyph.id);\n          if (classCode == null) classCode = $de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS;\n        }\n      }\n      let row = this.stateTable.stateArray.getItem(currentState);\n      let entryIndex = row[classCode];\n      let entry = this.stateTable.entryTable.getItem(entryIndex);\n      if (classCode !== $de324b614d9ee26c$var$END_OF_TEXT_CLASS && classCode !== $de324b614d9ee26c$var$DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & $de324b614d9ee26c$var$DONT_ADVANCE);\n      }\n      currentState = entry.newState;\n      if (shouldAdvance) index += dir;\n    }\n    return glyphs;\n  }\n  /**\n  * Performs a depth-first traversal of the glyph strings\n  * represented by the state machine.\n  */\n  traverse(opts, state = 0, visited = new Set()) {\n    if (visited.has(state)) return;\n    visited.add(state);\n    let {\n      nClasses: nClasses,\n      stateArray: stateArray,\n      entryTable: entryTable\n    } = this.stateTable;\n    let row = stateArray.getItem(state);\n    // Skip predefined classes\n    for (let classCode = 4; classCode < nClasses; classCode++) {\n      let entryIndex = row[classCode];\n      let entry = entryTable.getItem(entryIndex);\n      // Try all glyphs in the class\n      for (let glyph of this.lookupTable.glyphsForValue(classCode)) {\n        if (opts.enter) opts.enter(glyph, entry);\n        if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);\n        if (opts.exit) opts.exit(glyph, entry);\n      }\n    }\n  }\n}\nvar _class;\n// indic replacement flags\nconst $696c050512749a50$var$MARK_FIRST = 0x8000;\nconst $696c050512749a50$var$MARK_LAST = 0x2000;\nconst $696c050512749a50$var$VERB = 0x000F;\n// contextual substitution and glyph insertion flag\nconst $696c050512749a50$var$SET_MARK = 0x8000;\n// ligature entry flags\nconst $696c050512749a50$var$SET_COMPONENT = 0x8000;\nconst $696c050512749a50$var$PERFORM_ACTION = 0x2000;\n// ligature action masks\nconst $696c050512749a50$var$LAST_MASK = 0x80000000;\nconst $696c050512749a50$var$STORE_MASK = 0x40000000;\nconst $696c050512749a50$var$OFFSET_MASK = 0x3FFFFFFF;\nconst $696c050512749a50$var$VERTICAL_ONLY = 0x800000;\nconst $696c050512749a50$var$REVERSE_DIRECTION = 0x400000;\nconst $696c050512749a50$var$HORIZONTAL_AND_VERTICAL = 0x200000;\n// glyph insertion flags\nconst $696c050512749a50$var$CURRENT_IS_KASHIDA_LIKE = 0x2000;\nconst $696c050512749a50$var$MARKED_IS_KASHIDA_LIKE = 0x1000;\nconst $696c050512749a50$var$CURRENT_INSERT_BEFORE = 0x0800;\nconst $696c050512749a50$var$MARKED_INSERT_BEFORE = 0x0400;\nconst $696c050512749a50$var$CURRENT_INSERT_COUNT = 0x03E0;\nconst $696c050512749a50$var$MARKED_INSERT_COUNT = 0x001F;\nlet $696c050512749a50$export$2e2bcd8739ae039 = (_class = class $696c050512749a50$export$2e2bcd8739ae039 {\n  constructor(font) {\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  }\n  // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:boolean}}\n  process(glyphs, features = {}) {\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n      // enable/disable the requested features\n      for (let feature of chain.features) {\n        let f;\n        if (f = features[feature.featureType]) {\n          if (f[feature.featureSetting]) {\n            flags &= feature.disableFlags;\n            flags |= feature.enableFlags;\n          } else if (f[feature.featureSetting] === false) {\n            flags |= ~feature.disableFlags;\n            flags &= ~feature.enableFlags;\n          }\n        }\n      }\n      for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);\n    }\n    // remove deleted glyphs\n    let index = glyphs.length - 1;\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) glyphs.splice(index, 1);\n      index--;\n    }\n    return glyphs;\n  }\n  processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n    let reverse = !!(this.subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  }\n  getStateMachine(subtable) {\n    return new $de324b614d9ee26c$export$2e2bcd8739ae039(subtable.table.stateTable);\n  }\n  getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n      case 1:\n        return this.processContextualSubstitution;\n      case 2:\n        return this.processLigature;\n      case 4:\n        return this.processNoncontextualSubstitutions;\n      case 5:\n        return this.processGlyphInsertion;\n      default:\n        throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);\n    }\n  }\n  processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & $696c050512749a50$var$MARK_FIRST) this.firstGlyph = index;\n    if (entry.flags & $696c050512749a50$var$MARK_LAST) this.lastGlyph = index;\n    $696c050512749a50$var$reorderGlyphs(this.glyphs, entry.flags & $696c050512749a50$var$VERB, this.firstGlyph, this.lastGlyph);\n  }\n  processContextualSubstitution(glyph, entry, index) {\n    let subsitutions = this.subtable.table.substitutionTable.items;\n    if (entry.markIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.markIndex);\n      let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n    }\n    if (entry.currentIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.currentIndex);\n      let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(lookup);\n      glyph = this.glyphs[index];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n    }\n    if (entry.flags & $696c050512749a50$var$SET_MARK) this.markedGlyph = index;\n  }\n  processLigature(glyph, entry, index) {\n    if (entry.flags & $696c050512749a50$var$SET_COMPONENT) this.ligatureStack.push(index);\n    if (entry.flags & $696c050512749a50$var$PERFORM_ACTION) {\n      let actions = this.subtable.table.ligatureActions;\n      let components = this.subtable.table.components;\n      let ligatureList = this.subtable.table.ligatureList;\n      let actionIndex = entry.action;\n      let last = false;\n      let ligatureIndex = 0;\n      let codePoints = [];\n      let ligatureGlyphs = [];\n      while (!last) {\n        let componentGlyph = this.ligatureStack.pop();\n        codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n        let action = actions.getItem(actionIndex++);\n        last = !!(action & $696c050512749a50$var$LAST_MASK);\n        let store = !!(action & $696c050512749a50$var$STORE_MASK);\n        let offset = (action & $696c050512749a50$var$OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n        offset += this.glyphs[componentGlyph].id;\n        let component = components.getItem(offset);\n        ligatureIndex += component;\n        if (last || store) {\n          let ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n      }\n      // Put ligature glyph indexes back on the stack\n      this.ligatureStack.push(...ligatureGlyphs);\n    }\n  }\n  processNoncontextualSubstitutions(subtable, glyphs, index) {\n    let lookupTable = new $16667a2c0f0b1be5$export$2e2bcd8739ae039(subtable.table.lookupTable);\n    for (index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.id !== 0xffff) {\n        let gid = lookupTable.lookup(glyph.id);\n        if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n  }\n  _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    let insertions = [];\n    while (count--) {\n      let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n    if (!isBefore) glyphIndex++;\n    this.glyphs.splice(glyphIndex, 0, ...insertions);\n  }\n  processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & $696c050512749a50$var$SET_MARK) this.markedIndex = index;\n    if (entry.markedInsertIndex !== 0xffff) {\n      let count = (entry.flags & $696c050512749a50$var$MARKED_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & $696c050512749a50$var$MARKED_INSERT_BEFORE);\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n    if (entry.currentInsertIndex !== 0xffff) {\n      let count = (entry.flags & $696c050512749a50$var$CURRENT_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & $696c050512749a50$var$CURRENT_INSERT_BEFORE);\n      this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);\n    }\n  }\n  getSupportedFeatures() {\n    let features = [];\n    for (let chain of this.morx.chains) for (let feature of chain.features) features.push([feature.featureType, feature.featureSetting]);\n    return features;\n  }\n  generateInputs(gid) {\n    if (!this.inputCache) this.generateInputCache();\n    return this.inputCache[gid] || [];\n  }\n  generateInputCache() {\n    this.inputCache = {};\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n      for (let subtable of chain.subtables) if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);\n    }\n  }\n  generateInputsForSubtable(subtable) {\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) return;\n    let reverse = !!(subtable.coverage & $696c050512749a50$var$REVERSE_DIRECTION);\n    if (reverse) throw new Error('Reverse subtable, not supported.');\n    this.subtable = subtable;\n    this.ligatureStack = [];\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n    let input = [];\n    let stack = [];\n    this.glyphs = [];\n    stateMachine.traverse({\n      enter: (glyph, entry) => {\n        let glyphs = this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: this.ligatureStack.slice()\n        });\n        // Add glyph to input and glyphs to process.\n        let g1 = this.font.getGlyph(glyph);\n        input.push(g1);\n        glyphs.push(input[input.length - 1]);\n        // Process ligature substitution\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n        // Add input to result if only one matching (non-deleted) glyph remains.\n        let count = 0;\n        let found = 0;\n        for (let i = 0; i < glyphs.length && count <= 1; i++) if (glyphs[i].id !== 0xffff) {\n          count++;\n          found = glyphs[i].id;\n        }\n        if (count === 1) {\n          let result = input.map(g => g.id);\n          let cache = this.inputCache[found];\n          if (cache) cache.push(result);else this.inputCache[found] = [result];\n        }\n      },\n      exit: () => {\n        ({\n          glyphs: this.glyphs,\n          ligatureStack: this.ligatureStack\n        } = stack.pop());\n        input.pop();\n      }\n    });\n  }\n}, $5OpyM$applyDecoratedDescriptor(_class.prototype, \"getStateMachine\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"getStateMachine\"), _class.prototype), _class);\n// swaps the glyphs in rangeA with those in rangeB\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\nfunction $696c050512749a50$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {\n  let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n  if (reverseB) end.reverse();\n  let start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n  if (reverseA) start.reverse();\n  glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n  return glyphs;\n}\nfunction $696c050512749a50$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n  let length = lastGlyph - firstGlyph + 1;\n  switch (verb) {\n    case 0:\n      return glyphs;\n    case 1:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n    case 2:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n    case 3:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n    case 4:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n    case 5:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n    case 6:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n    case 7:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n    case 8:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n    case 9:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n    case 10:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n    case 11:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n    case 12:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n    case 13:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n    case 14:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n    case 15:\n      return $696c050512749a50$var$swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n    default:\n      throw new Error(`Unknown verb: ${verb}`);\n  }\n}\nclass $9273c77bc46b13e0$export$2e2bcd8739ae039 {\n  constructor(font) {\n    this.font = font;\n    this.morxProcessor = new $696c050512749a50$export$2e2bcd8739ae039(font);\n    this.fallbackPosition = false;\n  }\n  substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === 'rtl') glyphRun.glyphs.reverse();\n    this.morxProcessor.process(glyphRun.glyphs, $b603e0ade09ad01e$export$b813f7d2a1677c16(glyphRun.features));\n  }\n  getAvailableFeatures(script, language) {\n    return $b603e0ade09ad01e$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());\n  }\n  stringsForGlyph(gid) {\n    let glyphStrings = this.morxProcessor.generateInputs(gid);\n    let result = new Set();\n    for (let glyphs of glyphStrings) this._addStrings(glyphs, 0, result, '');\n    return result;\n  }\n  _addStrings(glyphs, index, strings, string) {\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n    for (let codePoint of codePoints) {\n      let s = string + String.fromCodePoint(codePoint);\n      if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s);else strings.add(s);\n    }\n  }\n}\nclass $d208953d14e55e3c$export$2e2bcd8739ae039 {\n  constructor(font, script, direction) {\n    this.font = font;\n    this.script = script;\n    this.direction = direction;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n  /**\n  * Adds the given features to the last stage.\n  * Ignores features that have already been applied.\n  */\n  _addFeatures(features, global) {\n    let stageIndex = this.stages.length - 1;\n    let stage = this.stages[stageIndex];\n    for (let feature of features) if (this.allFeatures[feature] == null) {\n      stage.push(feature);\n      this.allFeatures[feature] = stageIndex;\n      if (global) this.globalFeatures[feature] = true;\n    }\n  }\n  /**\n  * Add features to the last stage\n  */\n  add(arg, global = true) {\n    if (this.stages.length === 0) this.stages.push([]);\n    if (typeof arg === 'string') arg = [arg];\n    if (Array.isArray(arg)) this._addFeatures(arg, global);else if (typeof arg === 'object') {\n      this._addFeatures(arg.global || [], true);\n      this._addFeatures(arg.local || [], false);\n    } else throw new Error(\"Unsupported argument to ShapingPlan#add\");\n  }\n  /**\n  * Add a new stage\n  */\n  addStage(arg, global) {\n    if (typeof arg === 'function') this.stages.push(arg, []);else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  }\n  setFeatureOverrides(features) {\n    if (Array.isArray(features)) this.add(features);else if (typeof features === 'object') for (let tag in features) {\n      if (features[tag]) this.add(tag);else if (this.allFeatures[tag] != null) {\n        let stage = this.stages[this.allFeatures[tag]];\n        stage.splice(stage.indexOf(tag), 1);\n        delete this.allFeatures[tag];\n        delete this.globalFeatures[tag];\n      }\n    }\n  }\n  /**\n  * Assigns the global features to the given glyphs\n  */\n  assignGlobalFeatures(glyphs) {\n    for (let glyph of glyphs) for (let feature in this.globalFeatures) glyph.features[feature] = true;\n  }\n  /**\n  * Executes the planned stages using the given OTProcessor\n  */\n  process(processor, glyphs, positions) {\n    for (let stage of this.stages) {\n      if (typeof stage === 'function') {\n        if (!positions) stage(this.font, glyphs, this);\n      } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);\n    }\n  }\n}\nconst $5340de7a86f3ae85$var$VARIATION_FEATURES = ['rvrn'];\nconst $5340de7a86f3ae85$var$COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];\nconst $5340de7a86f3ae85$var$FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];\nconst $5340de7a86f3ae85$var$HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];\nconst $5340de7a86f3ae85$var$VERTICAL_FEATURES = ['vert'];\nconst $5340de7a86f3ae85$var$DIRECTIONAL_FEATURES = {\n  ltr: ['ltra', 'ltrm'],\n  rtl: ['rtla', 'rtlm']\n};\nclass $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n  static zeroMarkWidths = 'AFTER_GPOS';\n  static plan(plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(plan);\n    this.planFeatures(plan);\n    this.planPostprocessing(plan, features);\n    // Assign the global features to all the glyphs\n    plan.assignGlobalFeatures(glyphs);\n    // Assign local features to glyphs\n    this.assignFeatures(plan, glyphs);\n  }\n  static planPreprocessing(plan) {\n    plan.add({\n      global: [...$5340de7a86f3ae85$var$VARIATION_FEATURES, ...$5340de7a86f3ae85$var$DIRECTIONAL_FEATURES[plan.direction]],\n      local: $5340de7a86f3ae85$var$FRACTIONAL_FEATURES\n    });\n  }\n  static planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n  }\n  static planPostprocessing(plan, userFeatures) {\n    plan.add([...$5340de7a86f3ae85$var$COMMON_FEATURES, ...$5340de7a86f3ae85$var$HORIZONTAL_FEATURES]);\n    plan.setFeatureOverrides(userFeatures);\n  }\n  static assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (let i = 0; i < glyphs.length; i++) {\n      let glyph = glyphs[i];\n      if (glyph.codePoints[0] === 0x2044) {\n        let start = i;\n        let end = i + 1;\n        // Apply numerator\n        while (start > 0 && $5OpyM$unicodeproperties.isDigit(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        }\n        // Apply denominator\n        while (end < glyphs.length && $5OpyM$unicodeproperties.isDigit(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        }\n        // Apply fraction slash\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  }\n}\nvar $5cab828b3273a17c$require$Buffer = $5OpyM$Buffer;\nconst $5cab828b3273a17c$var$trie = new $5OpyM$unicodetrie($5cab828b3273a17c$require$Buffer.from(\"ABABAAAAAACgMQAAAZUBav7t2CtPA0EUBeDZB00pin9AJZIEgyUEj0QhweDAgQOJxCBRBElQSBwSicLgkOAwnNKZ5GaY2c7uzj4o5yZfZrrbefbuIx2nSq3CGmzAWH/+K+UO7MIe7MMhHMMpnMMFXMIVXIt2t3CnP088iPqjqNN8e4Ij7Rle4LUH82rLm6i/92A+RERERERERERNmfz/89GDeRARERERzbN8ceps2Iwt9H0C9/AJ6yOlDkbTczcot5VSm8Pm1vcFWfb7+BKOLTuOd2UlTX4wGP85Eg953lWPFbnuN7PkjtLmalOWbNenkHOSa7T3KmR9MVTZ2zZkVj1kHa68MueVKH0R4zqQ44WEXLM8VjcWHP0PtKLfPzQnMtGn3W4QYf6qxFxceVI394r2xnV+1rih0fV1Vzf3fO1n3evL5J78ruvZ5ptX2Rwy92Tfb1wlEqut3U+sZ3HXOeJ7/zDrbyuP6+Zz0fqa6Nv3vhY7Yu1xWnGevmsvsUpTT/RYIe8waUH/rvHMWKFzLfN8L+rTfp645mfX7ftlnfDtYxN59w0=\", \"base64\"));\nconst $5cab828b3273a17c$var$FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];\nconst $5cab828b3273a17c$var$ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  'DALATH RISH': 5,\n  Transparent: 6\n};\nconst $5cab828b3273a17c$var$ISOL = 'isol';\nconst $5cab828b3273a17c$var$FINA = 'fina';\nconst $5cab828b3273a17c$var$FIN2 = 'fin2';\nconst $5cab828b3273a17c$var$FIN3 = 'fin3';\nconst $5cab828b3273a17c$var$MEDI = 'medi';\nconst $5cab828b3273a17c$var$MED2 = 'med2';\nconst $5cab828b3273a17c$var$INIT = 'init';\nconst $5cab828b3273a17c$var$NONE = null;\n// Each entry is [prevAction, curAction, nextState]\nconst $5cab828b3273a17c$var$STATE_TABLE = [\n//   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n// State 0: prev was U,  not willing to join.\n[[$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$NONE, 0], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 1], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 1], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 6]],\n// State 1: prev was R or ISOL/ALAPH,  not willing to join.\n[[$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$NONE, 0], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 1], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$FIN2, 5], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 6]],\n// State 2: prev was D/L in ISOL form,  willing to join.\n[[$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$NONE, 0], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$INIT, $5cab828b3273a17c$var$FINA, 1], [$5cab828b3273a17c$var$INIT, $5cab828b3273a17c$var$FINA, 3], [$5cab828b3273a17c$var$INIT, $5cab828b3273a17c$var$FINA, 4], [$5cab828b3273a17c$var$INIT, $5cab828b3273a17c$var$FINA, 6]],\n// State 3: prev was D in FINA form,  willing to join.\n[[$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$NONE, 0], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$MEDI, $5cab828b3273a17c$var$FINA, 1], [$5cab828b3273a17c$var$MEDI, $5cab828b3273a17c$var$FINA, 3], [$5cab828b3273a17c$var$MEDI, $5cab828b3273a17c$var$FINA, 4], [$5cab828b3273a17c$var$MEDI, $5cab828b3273a17c$var$FINA, 6]],\n// State 4: prev was FINA ALAPH,  not willing to join.\n[[$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$NONE, 0], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$MED2, $5cab828b3273a17c$var$ISOL, 1], [$5cab828b3273a17c$var$MED2, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$MED2, $5cab828b3273a17c$var$FIN2, 5], [$5cab828b3273a17c$var$MED2, $5cab828b3273a17c$var$ISOL, 6]],\n// State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n[[$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$NONE, 0], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$ISOL, $5cab828b3273a17c$var$ISOL, 1], [$5cab828b3273a17c$var$ISOL, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$ISOL, $5cab828b3273a17c$var$FIN2, 5], [$5cab828b3273a17c$var$ISOL, $5cab828b3273a17c$var$ISOL, 6]],\n// State 6: prev was DALATH/RISH,  not willing to join.\n[[$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$NONE, 0], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 1], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 2], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$FIN3, 5], [$5cab828b3273a17c$var$NONE, $5cab828b3273a17c$var$ISOL, 6]]];\nclass $5cab828b3273a17c$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n  static planFeatures(plan) {\n    plan.add(['ccmp', 'locl']);\n    for (let i = 0; i < $5cab828b3273a17c$var$FEATURES.length; i++) {\n      let feature = $5cab828b3273a17c$var$FEATURES[i];\n      plan.addStage(feature, false);\n    }\n    plan.addStage('mset');\n  }\n  static assignFeatures(plan, glyphs) {\n    super.assignFeatures(plan, glyphs);\n    let prev = -1;\n    let state = 0;\n    let actions = [];\n    // Apply the state machine to map glyphs to features\n    for (let i = 0; i < glyphs.length; i++) {\n      let curAction, prevAction;\n      var glyph = glyphs[i];\n      let type = $5cab828b3273a17c$var$getShapingClass(glyph.codePoints[0]);\n      if (type === $5cab828b3273a17c$var$ShapingClasses.Transparent) {\n        actions[i] = $5cab828b3273a17c$var$NONE;\n        continue;\n      }\n      [prevAction, curAction, state] = $5cab828b3273a17c$var$STATE_TABLE[state][type];\n      if (prevAction !== $5cab828b3273a17c$var$NONE && prev !== -1) actions[prev] = prevAction;\n      actions[i] = curAction;\n      prev = i;\n    }\n    // Apply the chosen features to their respective glyphs\n    for (let index = 0; index < glyphs.length; index++) {\n      let feature;\n      var glyph = glyphs[index];\n      if (feature = actions[index]) glyph.features[feature] = true;\n    }\n  }\n}\nfunction $5cab828b3273a17c$var$getShapingClass(codePoint) {\n  let res = $5cab828b3273a17c$var$trie.get(codePoint);\n  if (res) return res - 1;\n  let category = $5OpyM$unicodeproperties.getCategory(codePoint);\n  if (category === 'Mn' || category === 'Me' || category === 'Cf') return $5cab828b3273a17c$var$ShapingClasses.Transparent;\n  return $5cab828b3273a17c$var$ShapingClasses.Non_Joining;\n}\nclass $ab0ec2aaf85421fe$export$2e2bcd8739ae039 {\n  constructor(glyphs, options) {\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n  reset(options = {}, index = 0) {\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  }\n  get cur() {\n    return this.glyphs[this.index] || null;\n  }\n  shouldIgnore(glyph) {\n    return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;\n  }\n  move(dir) {\n    this.index += dir;\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) this.index += dir;\n    if (0 > this.index || this.index >= this.glyphs.length) return null;\n    return this.glyphs[this.index];\n  }\n  next() {\n    return this.move(1);\n  }\n  prev() {\n    return this.move(-1);\n  }\n  peek(count = 1) {\n    let idx = this.index;\n    let res = this.increment(count);\n    this.index = idx;\n    return res;\n  }\n  peekIndex(count = 1) {\n    let idx = this.index;\n    this.increment(count);\n    let res = this.index;\n    this.index = idx;\n    return res;\n  }\n  increment(count = 1) {\n    let dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n    while (count--) this.move(dir);\n    return this.glyphs[this.index];\n  }\n}\nconst $cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];\nclass $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {\n  constructor(font, table) {\n    this.font = font;\n    this.table = table;\n    this.script = null;\n    this.scriptTag = null;\n    this.language = null;\n    this.languageTag = null;\n    this.features = {};\n    this.lookups = {};\n    // Setup variation substitutions\n    this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;\n    // initialize to default script + language\n    this.selectScript();\n    // current context (set by applyFeatures)\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n  findScript(script) {\n    if (this.table.scriptList == null) return null;\n    if (!Array.isArray(script)) script = [script];\n    for (let s of script) for (let entry of this.table.scriptList) {\n      if (entry.tag === s) return entry;\n    }\n    return null;\n  }\n  selectScript(script, language, direction) {\n    let changed = false;\n    let entry;\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n      if (!entry) entry = this.findScript($cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS);\n      if (!entry) return this.scriptTag;\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n    if (!direction || direction !== this.direction) this.direction = direction || $a5878e4f4663c9e2$export$9fddb9d0dd7d8a54(script);\n    if (language && language.length < 4) language += ' '.repeat(4 - language.length);\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n      for (let lang of this.script.langSysRecords) if (lang.tag === language) {\n        this.language = lang.langSys;\n        this.languageTag = lang.tag;\n        break;\n      }\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n      changed = true;\n    }\n    // Build a feature lookup table\n    if (changed) {\n      this.features = {};\n      if (this.language) for (let featureIndex of this.language.featureIndexes) {\n        let record = this.table.featureList[featureIndex];\n        let substituteFeature = this.substituteFeatureForVariations(featureIndex);\n        this.features[record.tag] = substituteFeature || record.feature;\n      }\n    }\n    return this.scriptTag;\n  }\n  lookupsForFeatures(userFeatures = [], exclude) {\n    let lookups = [];\n    for (let tag of userFeatures) {\n      let feature = this.features[tag];\n      if (!feature) continue;\n      for (let lookupIndex of feature.lookupListIndexes) {\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n    lookups.sort((a, b) => a.index - b.index);\n    return lookups;\n  }\n  substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) return null;\n    let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    let substitutions = record.featureTableSubstitution.substitutions;\n    for (let substitution of substitutions) {\n      if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;\n    }\n    return null;\n  }\n  findVariationsIndex(coords) {\n    let variations = this.table.featureVariations;\n    if (!variations) return -1;\n    let records = variations.featureVariationRecords;\n    for (let i = 0; i < records.length; i++) {\n      let conditions = records[i].conditionSet.conditionTable;\n      if (this.variationConditionsMatch(conditions, coords)) return i;\n    }\n    return -1;\n  }\n  variationConditionsMatch(conditions, coords) {\n    return conditions.every(condition => {\n      let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  }\n  applyFeatures(userFeatures, glyphs, advances) {\n    let lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  }\n  applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new $ab0ec2aaf85421fe$export$2e2bcd8739ae039(glyphs);\n    for (let {\n      feature: feature,\n      lookup: lookup\n    } of lookups) {\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n        for (let table of lookup.subTables) {\n          let res = this.applyLookup(lookup.lookupType, table);\n          if (res) break;\n        }\n        this.glyphIterator.next();\n      }\n    }\n  }\n  applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  }\n  applyLookupList(lookupRecords) {\n    let options = this.glyphIterator.options;\n    let glyphIndex = this.glyphIterator.index;\n    for (let lookupRecord of lookupRecords) {\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex);\n      // Get the lookup and setup flags for subtables\n      let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n      // Apply lookup subtables until one matches\n      for (let table of lookup.subTables) {\n        if (this.applyLookup(lookup.lookupType, table)) break;\n      }\n    }\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  }\n  coverageIndex(coverage, glyph) {\n    if (glyph == null) glyph = this.glyphIterator.cur.id;\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n      case 2:\n        for (let range of coverage.rangeRecords) {\n          if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;\n        }\n        break;\n    }\n    return -1;\n  }\n  match(sequenceIndex, sequence, fn, matched) {\n    let pos = this.glyphIterator.index;\n    let glyph = this.glyphIterator.increment(sequenceIndex);\n    let idx = 0;\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) matched.push(this.glyphIterator.index);\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n    this.glyphIterator.index = pos;\n    if (idx < sequence.length) return false;\n    return matched || true;\n  }\n  sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => component === glyph.id);\n  }\n  sequenceMatchIndices(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => {\n      // If the current feature doesn't apply to this glyph,\n      if (!(this.currentFeature in glyph.features)) return false;\n      return component === glyph.id;\n    }, []);\n  }\n  coverageSequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (coverage, glyph) => this.coverageIndex(coverage, glyph.id) >= 0);\n  }\n  getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1:\n        let i = glyph - classDef.startGlyph;\n        if (i >= 0 && i < classDef.classValueArray.length) return classDef.classValueArray[i];\n        break;\n      case 2:\n        for (let range of classDef.classRangeRecord) {\n          if (range.start <= glyph && glyph <= range.end) return range.class;\n        }\n        break;\n    }\n    return 0;\n  }\n  classSequenceMatches(sequenceIndex, sequence, classDef) {\n    return this.match(sequenceIndex, sequence, (classID, glyph) => classID === this.getClassID(glyph.id, classDef));\n  }\n  applyContext(table) {\n    let index, set;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) return false;\n        set = table.ruleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);\n        }\n        break;\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) return false;\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n        if (index === -1) return false;\n        set = table.classSet[index];\n        for (let rule1 of set) {\n          if (this.classSequenceMatches(1, rule1.classes, table.classDef)) return this.applyLookupList(rule1.lookupRecords);\n        }\n        break;\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);\n        break;\n    }\n    return false;\n  }\n  applyChainingContext(table) {\n    let index;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) return false;\n        let set = table.chainRuleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);\n        }\n        break;\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) return false;\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        let rules = table.chainClassSet[index];\n        if (!rules) return false;\n        for (let rule2 of rules) {\n          if (this.classSequenceMatches(-rule2.backtrack.length, rule2.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule2.input, table.inputClassDef) && this.classSequenceMatches(1 + rule2.input.length, rule2.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule2.lookupRecords);\n        }\n        break;\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);\n        break;\n    }\n    return false;\n  }\n}\nclass $8cba766f534deddd$export$2e2bcd8739ae039 {\n  constructor(font, id, codePoints = [], features) {\n    this._font = font;\n    this.codePoints = codePoints;\n    this.id = id;\n    this.features = {};\n    if (Array.isArray(features)) for (let i = 0; i < features.length; i++) {\n      let feature = features[i];\n      this.features[feature] = true;\n    } else if (typeof features === 'object') Object.assign(this.features, features);\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n  get id() {\n    return this._id;\n  }\n  set id(id) {\n    this._id = id;\n    this.substituted = true;\n    let GDEF = this._font.GDEF;\n    if (GDEF && GDEF.glyphClassDef) {\n      // TODO: clean this up\n      let classID = $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.glyphClassDef);\n      this.isBase = classID === 1;\n      this.isLigature = classID === 2;\n      this.isMark = classID === 3;\n      this.markAttachmentType = GDEF.markAttachClassDef ? $cffd0e0e7e88a6c6$export$2e2bcd8739ae039.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n    } else {\n      this.isMark = this.codePoints.length > 0 && this.codePoints.every($5OpyM$unicodeproperties.isMark);\n      this.isBase = !this.isMark;\n      this.isLigature = this.codePoints.length > 1;\n      this.markAttachmentType = 0;\n    }\n  }\n  copy() {\n    return new $8cba766f534deddd$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);\n  }\n}\nclass $ce39c5154631fd0c$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n  static zeroMarkWidths = 'NONE';\n  static planFeatures(plan) {\n    plan.add(['ljmo', 'vjmo', 'tjmo'], false);\n  }\n  static assignFeatures(plan, glyphs) {\n    let state = 0;\n    let i = 0;\n    while (i < glyphs.length) {\n      let action;\n      let glyph = glyphs[i];\n      let code = glyph.codePoints[0];\n      let type = $ce39c5154631fd0c$var$getType(code);\n      [action, state] = $ce39c5154631fd0c$var$STATE_TABLE[state][type];\n      switch (action) {\n        case $ce39c5154631fd0c$var$DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) i = $ce39c5154631fd0c$var$decompose(glyphs, i, plan.font);\n          break;\n        case $ce39c5154631fd0c$var$COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = $ce39c5154631fd0c$var$compose(glyphs, i, plan.font);\n          break;\n        case $ce39c5154631fd0c$var$TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          $ce39c5154631fd0c$var$reorderToneMark(glyphs, i, plan.font);\n          break;\n        case $ce39c5154631fd0c$var$INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n      i++;\n    }\n  }\n}\nconst $ce39c5154631fd0c$var$HANGUL_BASE = 0xac00;\nconst $ce39c5154631fd0c$var$HANGUL_END = 0xd7a4;\nconst $ce39c5154631fd0c$var$HANGUL_COUNT = $ce39c5154631fd0c$var$HANGUL_END - $ce39c5154631fd0c$var$HANGUL_BASE + 1;\nconst $ce39c5154631fd0c$var$L_BASE = 0x1100; // lead\nconst $ce39c5154631fd0c$var$V_BASE = 0x1161; // vowel\nconst $ce39c5154631fd0c$var$T_BASE = 0x11a7; // trail\nconst $ce39c5154631fd0c$var$L_COUNT = 19;\nconst $ce39c5154631fd0c$var$V_COUNT = 21;\nconst $ce39c5154631fd0c$var$T_COUNT = 28;\nconst $ce39c5154631fd0c$var$L_END = $ce39c5154631fd0c$var$L_BASE + $ce39c5154631fd0c$var$L_COUNT - 1;\nconst $ce39c5154631fd0c$var$V_END = $ce39c5154631fd0c$var$V_BASE + $ce39c5154631fd0c$var$V_COUNT - 1;\nconst $ce39c5154631fd0c$var$T_END = $ce39c5154631fd0c$var$T_BASE + $ce39c5154631fd0c$var$T_COUNT - 1;\nconst $ce39c5154631fd0c$var$DOTTED_CIRCLE = 0x25cc;\nconst $ce39c5154631fd0c$var$isL = code => 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\nconst $ce39c5154631fd0c$var$isV = code => 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\nconst $ce39c5154631fd0c$var$isT = code => 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\nconst $ce39c5154631fd0c$var$isTone = code => 0x302e <= code && code <= 0x302f;\nconst $ce39c5154631fd0c$var$isLVT = code => $ce39c5154631fd0c$var$HANGUL_BASE <= code && code <= $ce39c5154631fd0c$var$HANGUL_END;\nconst $ce39c5154631fd0c$var$isLV = code => code - $ce39c5154631fd0c$var$HANGUL_BASE < $ce39c5154631fd0c$var$HANGUL_COUNT && (code - $ce39c5154631fd0c$var$HANGUL_BASE) % $ce39c5154631fd0c$var$T_COUNT === 0;\nconst $ce39c5154631fd0c$var$isCombiningL = code => $ce39c5154631fd0c$var$L_BASE <= code && code <= $ce39c5154631fd0c$var$L_END;\nconst $ce39c5154631fd0c$var$isCombiningV = code => $ce39c5154631fd0c$var$V_BASE <= code && code <= $ce39c5154631fd0c$var$V_END;\nconst $ce39c5154631fd0c$var$isCombiningT = code => $ce39c5154631fd0c$var$T_BASE + 1 && 1 <= code && code <= $ce39c5154631fd0c$var$T_END;\n// Character categories\nconst $ce39c5154631fd0c$var$X = 0; // Other character\nconst $ce39c5154631fd0c$var$L = 1; // Leading consonant\nconst $ce39c5154631fd0c$var$V = 2; // Medial vowel\nconst $ce39c5154631fd0c$var$T = 3; // Trailing consonant\nconst $ce39c5154631fd0c$var$LV = 4; // Composed <LV> syllable\nconst $ce39c5154631fd0c$var$LVT = 5; // Composed <LVT> syllable\nconst $ce39c5154631fd0c$var$M = 6; // Tone mark\n// This function classifies a character using the above categories.\nfunction $ce39c5154631fd0c$var$getType(code) {\n  if ($ce39c5154631fd0c$var$isL(code)) return $ce39c5154631fd0c$var$L;\n  if ($ce39c5154631fd0c$var$isV(code)) return $ce39c5154631fd0c$var$V;\n  if ($ce39c5154631fd0c$var$isT(code)) return $ce39c5154631fd0c$var$T;\n  if ($ce39c5154631fd0c$var$isLV(code)) return $ce39c5154631fd0c$var$LV;\n  if ($ce39c5154631fd0c$var$isLVT(code)) return $ce39c5154631fd0c$var$LVT;\n  if ($ce39c5154631fd0c$var$isTone(code)) return $ce39c5154631fd0c$var$M;\n  return $ce39c5154631fd0c$var$X;\n}\n// State machine actions\nconst $ce39c5154631fd0c$var$NO_ACTION = 0;\nconst $ce39c5154631fd0c$var$DECOMPOSE = 1;\nconst $ce39c5154631fd0c$var$COMPOSE = 2;\nconst $ce39c5154631fd0c$var$TONE_MARK = 4;\nconst $ce39c5154631fd0c$var$INVALID = 5;\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nconst $ce39c5154631fd0c$var$STATE_TABLE = [\n//       X                 L                 V                T                  LV                LVT               M\n// State 0: start state\n[[$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$NO_ACTION, 1], [$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$DECOMPOSE, 2], [$ce39c5154631fd0c$var$DECOMPOSE, 3], [$ce39c5154631fd0c$var$INVALID, 0]],\n// State 1: <L>\n[[$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$NO_ACTION, 1], [$ce39c5154631fd0c$var$COMPOSE, 2], [$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$DECOMPOSE, 2], [$ce39c5154631fd0c$var$DECOMPOSE, 3], [$ce39c5154631fd0c$var$INVALID, 0]],\n// State 2: <L,V> or <LV>\n[[$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$NO_ACTION, 1], [$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$COMPOSE, 3], [$ce39c5154631fd0c$var$DECOMPOSE, 2], [$ce39c5154631fd0c$var$DECOMPOSE, 3], [$ce39c5154631fd0c$var$TONE_MARK, 0]],\n// State 3: <L,V,T> or <LVT>\n[[$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$NO_ACTION, 1], [$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$NO_ACTION, 0], [$ce39c5154631fd0c$var$DECOMPOSE, 2], [$ce39c5154631fd0c$var$DECOMPOSE, 3], [$ce39c5154631fd0c$var$TONE_MARK, 0]]];\nfunction $ce39c5154631fd0c$var$getGlyph(font, code, features) {\n  return new $8cba766f534deddd$export$2e2bcd8739ae039(font, font.glyphForCodePoint(code).id, [code], features);\n}\nfunction $ce39c5154631fd0c$var$decompose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyph.codePoints[0];\n  let s = code - $ce39c5154631fd0c$var$HANGUL_BASE;\n  let t = $ce39c5154631fd0c$var$T_BASE + s % $ce39c5154631fd0c$var$T_COUNT;\n  s = s / $ce39c5154631fd0c$var$T_COUNT | 0;\n  let l = $ce39c5154631fd0c$var$L_BASE + s / $ce39c5154631fd0c$var$V_COUNT | 0;\n  let v = $ce39c5154631fd0c$var$V_BASE + s % $ce39c5154631fd0c$var$V_COUNT;\n  // Don't decompose if all of the components are not available\n  if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $ce39c5154631fd0c$var$T_BASE && !font.hasGlyphForCodePoint(t)) return i;\n  // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n  let ljmo = $ce39c5154631fd0c$var$getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n  let vjmo = $ce39c5154631fd0c$var$getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n  let insert = [ljmo, vjmo];\n  if (t > $ce39c5154631fd0c$var$T_BASE) {\n    let tjmo = $ce39c5154631fd0c$var$getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n  glyphs.splice(i, 1, ...insert);\n  return i + insert.length - 1;\n}\nfunction $ce39c5154631fd0c$var$compose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  let type = $ce39c5154631fd0c$var$getType(code);\n  let prev = glyphs[i - 1].codePoints[0];\n  let prevType = $ce39c5154631fd0c$var$getType(prev);\n  // Figure out what type of syllable we're dealing with\n  let lv, ljmo, vjmo, tjmo;\n  if (prevType === $ce39c5154631fd0c$var$LV && type === $ce39c5154631fd0c$var$T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === $ce39c5154631fd0c$var$V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n    let l = ljmo.codePoints[0];\n    let v = vjmo.codePoints[0];\n    // Make sure L and V are combining characters\n    if ($ce39c5154631fd0c$var$isCombiningL(l) && $ce39c5154631fd0c$var$isCombiningV(v)) lv = $ce39c5154631fd0c$var$HANGUL_BASE + ((l - $ce39c5154631fd0c$var$L_BASE) * $ce39c5154631fd0c$var$V_COUNT + (v - $ce39c5154631fd0c$var$V_BASE)) * $ce39c5154631fd0c$var$T_COUNT;\n  }\n  let t = tjmo && tjmo.codePoints[0] || $ce39c5154631fd0c$var$T_BASE;\n  if (lv != null && (t === $ce39c5154631fd0c$var$T_BASE || $ce39c5154631fd0c$var$isCombiningT(t))) {\n    let s = lv + (t - $ce39c5154631fd0c$var$T_BASE);\n    // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n    if (font.hasGlyphForCodePoint(s)) {\n      let del = prevType === $ce39c5154631fd0c$var$V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, $ce39c5154631fd0c$var$getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  }\n  // Didn't compose (either a non-combining component or unsupported by font).\n  if (ljmo) ljmo.features.ljmo = true;\n  if (vjmo) vjmo.features.vjmo = true;\n  if (tjmo) tjmo.features.tjmo = true;\n  if (prevType === $ce39c5154631fd0c$var$LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    $ce39c5154631fd0c$var$decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n  return i;\n}\nfunction $ce39c5154631fd0c$var$getLength(code) {\n  switch ($ce39c5154631fd0c$var$getType(code)) {\n    case $ce39c5154631fd0c$var$LV:\n    case $ce39c5154631fd0c$var$LVT:\n      return 1;\n    case $ce39c5154631fd0c$var$V:\n      return 2;\n    case $ce39c5154631fd0c$var$T:\n      return 3;\n  }\n}\nfunction $ce39c5154631fd0c$var$reorderToneMark(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  // Move tone mark to the beginning of the previous syllable, unless it is zero width\n  if (font.glyphForCodePoint(code).advanceWidth === 0) return;\n  let prev = glyphs[i - 1].codePoints[0];\n  let len = $ce39c5154631fd0c$var$getLength(prev);\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\nfunction $ce39c5154631fd0c$var$insertDottedCircle(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  if (font.hasGlyphForCodePoint($ce39c5154631fd0c$var$DOTTED_CIRCLE)) {\n    let dottedCircle = $ce39c5154631fd0c$var$getGlyph(font, $ce39c5154631fd0c$var$DOTTED_CIRCLE, glyph.features);\n    // If the tone mark is zero width, insert the dotted circle before, otherwise after\n    let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n  return i;\n}\nvar $a550b6039b7700b3$exports = {};\n$a550b6039b7700b3$exports = JSON.parse(\"{\\\"stateTable\\\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\\\"accepting\\\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\\\"tags\\\":[[],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[],[\\\"broken_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[],[\\\"consonant_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[],[\\\"vowel_syllable\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[\\\"standalone_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[],[],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[],[],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[\\\"consonant_syllable\\\",\\\"broken_cluster\\\"],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[],[],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[],[\\\"consonant_syllable\\\"],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[],[\\\"vowel_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"broken_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"standalone_cluster\\\"],[\\\"standalone_cluster\\\"],[],[\\\"consonant_syllable\\\"],[\\\"vowel_syllable\\\"],[\\\"standalone_cluster\\\"]]}\");\nvar $f3bd27a8c88f3f53$exports = {};\n$f3bd27a8c88f3f53$exports = JSON.parse(\"{\\\"categories\\\":[\\\"O\\\",\\\"IND\\\",\\\"S\\\",\\\"GB\\\",\\\"B\\\",\\\"FM\\\",\\\"CGJ\\\",\\\"VMAbv\\\",\\\"VMPst\\\",\\\"VAbv\\\",\\\"VPst\\\",\\\"CMBlw\\\",\\\"VPre\\\",\\\"VBlw\\\",\\\"H\\\",\\\"VMBlw\\\",\\\"CMAbv\\\",\\\"MBlw\\\",\\\"CS\\\",\\\"R\\\",\\\"SUB\\\",\\\"MPst\\\",\\\"MPre\\\",\\\"FAbv\\\",\\\"FPst\\\",\\\"FBlw\\\",\\\"SMAbv\\\",\\\"SMBlw\\\",\\\"VMPre\\\",\\\"ZWNJ\\\",\\\"ZWJ\\\",\\\"WJ\\\",\\\"VS\\\",\\\"N\\\",\\\"HN\\\",\\\"MAbv\\\"],\\\"decompositions\\\":{\\\"2507\\\":[2503,2494],\\\"2508\\\":[2503,2519],\\\"2888\\\":[2887,2902],\\\"2891\\\":[2887,2878],\\\"2892\\\":[2887,2903],\\\"3018\\\":[3014,3006],\\\"3019\\\":[3015,3006],\\\"3020\\\":[3014,3031],\\\"3144\\\":[3142,3158],\\\"3264\\\":[3263,3285],\\\"3271\\\":[3270,3285],\\\"3272\\\":[3270,3286],\\\"3274\\\":[3270,3266],\\\"3275\\\":[3270,3266,3285],\\\"3402\\\":[3398,3390],\\\"3403\\\":[3399,3390],\\\"3404\\\":[3398,3415],\\\"3546\\\":[3545,3530],\\\"3548\\\":[3545,3535],\\\"3549\\\":[3545,3535,3530],\\\"3550\\\":[3545,3551],\\\"3635\\\":[3661,3634],\\\"3763\\\":[3789,3762],\\\"3955\\\":[3953,3954],\\\"3957\\\":[3953,3956],\\\"3958\\\":[4018,3968],\\\"3959\\\":[4018,3953,3968],\\\"3960\\\":[4019,3968],\\\"3961\\\":[4019,3953,3968],\\\"3969\\\":[3953,3968],\\\"6971\\\":[6970,6965],\\\"6973\\\":[6972,6965],\\\"6976\\\":[6974,6965],\\\"6977\\\":[6975,6965],\\\"6979\\\":[6978,6965],\\\"69934\\\":[69937,69927],\\\"69935\\\":[69938,69927],\\\"70475\\\":[70471,70462],\\\"70476\\\":[70471,70487],\\\"70843\\\":[70841,70842],\\\"70844\\\":[70841,70832],\\\"70846\\\":[70841,70845],\\\"71098\\\":[71096,71087],\\\"71099\\\":[71097,71087]},\\\"stateTable\\\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\\\"accepting\\\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\\\"tags\\\":[[],[\\\"broken_cluster\\\"],[\\\"independent_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"numeral_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"independent_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"symbol_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"virama_terminated_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"broken_cluster\\\"],[\\\"numeral_cluster\\\"],[\\\"number_joiner_terminated_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"standard_cluster\\\"],[\\\"numeral_cluster\\\"]]}\");\nconst $b9778c6b60232cf0$export$a513ea61a7bee91c = {\n  X: 1,\n  C: 2,\n  V: 4,\n  N: 8,\n  H: 16,\n  ZWNJ: 32,\n  ZWJ: 64,\n  M: 128,\n  SM: 256,\n  VD: 512,\n  A: 1024,\n  Placeholder: 2048,\n  Dotted_Circle: 4096,\n  RS: 8192,\n  Coeng: 16384,\n  Repha: 32768,\n  Ra: 65536,\n  CM: 131072,\n  Symbol: 262144 // Avagraha, etc that take marks (SM,A,VD).\n};\nconst $b9778c6b60232cf0$export$1a1f61c9c4dd9df0 = {\n  Start: 1,\n  Ra_To_Become_Reph: 2,\n  Pre_M: 4,\n  Pre_C: 8,\n  Base_C: 16,\n  After_Main: 32,\n  Above_C: 64,\n  Before_Sub: 128,\n  Below_C: 256,\n  After_Sub: 512,\n  Before_Post: 1024,\n  Post_C: 2048,\n  After_Post: 4096,\n  Final_C: 8192,\n  SMVD: 16384,\n  End: 32768\n};\nconst $b9778c6b60232cf0$export$8519deaa7de2b07 = $b9778c6b60232cf0$export$a513ea61a7bee91c.C | $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$a513ea61a7bee91c.V | $b9778c6b60232cf0$export$a513ea61a7bee91c.Placeholder | $b9778c6b60232cf0$export$a513ea61a7bee91c.Dotted_Circle;\nconst $b9778c6b60232cf0$export$bbcd928767338e0d = $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ | $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;\nconst $b9778c6b60232cf0$export$ca9599b2a300afc = $b9778c6b60232cf0$export$a513ea61a7bee91c.H | $b9778c6b60232cf0$export$a513ea61a7bee91c.Coeng;\nconst $b9778c6b60232cf0$export$e99d119da76a0fc5 = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,\n    rephMode: 'Explicit',\n    blwfMode: 'Post_Only'\n  },\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Post_Only'\n  },\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: 'Last',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main,\n    rephMode: 'Log_Repha',\n    blwfMode: 'Pre_And_Post'\n  },\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: 'First',\n    rephPos: $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,\n    rephMode: 'Vis_Repha',\n    blwfMode: 'Pre_And_Post'\n  }\n};\nconst $b9778c6b60232cf0$export$f647c9cfdd77d95a = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\nvar $c6b883ac45fa55f1$require$Buffer = $5OpyM$Buffer;\nconst {\n  decompositions: $c6b883ac45fa55f1$var$decompositions\n} = /*@__PURE__*/$parcel$interopDefault($f3bd27a8c88f3f53$exports);\nconst $c6b883ac45fa55f1$var$trie = new $5OpyM$unicodetrie($c6b883ac45fa55f1$require$Buffer.from(\"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\", \"base64\"));\nconst $c6b883ac45fa55f1$var$stateMachine = new $5OpyM$dfa(/*@__PURE__*/$parcel$interopDefault($a550b6039b7700b3$exports));\nclass $c6b883ac45fa55f1$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n  static zeroMarkWidths = 'NONE';\n  static planFeatures(plan) {\n    plan.addStage($c6b883ac45fa55f1$var$setupSyllables);\n    plan.addStage(['locl', 'ccmp']);\n    plan.addStage($c6b883ac45fa55f1$var$initialReordering);\n    plan.addStage('nukt');\n    plan.addStage('akhn');\n    plan.addStage('rphf', false);\n    plan.addStage('rkrf');\n    plan.addStage('pref', false);\n    plan.addStage('blwf', false);\n    plan.addStage('abvf', false);\n    plan.addStage('half', false);\n    plan.addStage('pstf', false);\n    plan.addStage('vatu');\n    plan.addStage('cjct');\n    plan.addStage('cfar', false);\n    plan.addStage($c6b883ac45fa55f1$var$finalReordering);\n    plan.addStage({\n      local: ['init'],\n      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']\n    });\n    // Setup the indic config for the selected script\n    plan.unicodeScript = $a5878e4f4663c9e2$export$ce50e82f12a827a4(plan.script);\n    plan.indicConfig = $b9778c6b60232cf0$export$e99d119da76a0fc5[plan.unicodeScript] || $b9778c6b60232cf0$export$e99d119da76a0fc5.Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';\n    // TODO: turn off kern (Khmer) and liga features.\n  }\n  static assignFeatures(plan, glyphs) {\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      let d = $b9778c6b60232cf0$export$f647c9cfdd77d95a[codepoint] || $c6b883ac45fa55f1$var$decompositions[codepoint];\n      if (d) {\n        let decomposed = d.map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\nfunction $c6b883ac45fa55f1$var$indicCategory(glyph) {\n  return $c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) >> 8;\n}\nfunction $c6b883ac45fa55f1$var$indicPosition(glyph) {\n  return 1 << ($c6b883ac45fa55f1$var$trie.get(glyph.codePoints[0]) & 0xff);\n}\nclass $c6b883ac45fa55f1$var$IndicInfo {\n  constructor(category, position, syllableType, syllable) {\n    this.category = category;\n    this.position = position;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\nfunction $c6b883ac45fa55f1$var$setupSyllables(font, glyphs) {\n  let syllable = 0;\n  let last = 0;\n  for (let [start, end, tags] of $c6b883ac45fa55f1$var$stateMachine.match(glyphs.map($c6b883ac45fa55f1$var$indicCategory))) {\n    if (start > last) {\n      ++syllable;\n      for (let i = last; i < start; i++) glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, 'non_indic_cluster', syllable);\n    }\n    ++syllable;\n    // Create shaper info\n    for (let i = start; i <= end; i++) glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(glyphs[i]), $c6b883ac45fa55f1$var$indicPosition(glyphs[i]), tags[0], syllable);\n    last = end + 1;\n  }\n  if (last < glyphs.length) {\n    ++syllable;\n    for (let i = last; i < glyphs.length; i++) glyphs[i].shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo($b9778c6b60232cf0$export$a513ea61a7bee91c.X, $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.End, 'non_indic_cluster', syllable);\n  }\n}\nfunction $c6b883ac45fa55f1$var$isConsonant(glyph) {\n  return glyph.shaperInfo.category & $b9778c6b60232cf0$export$8519deaa7de2b07;\n}\nfunction $c6b883ac45fa55f1$var$isJoiner(glyph) {\n  return glyph.shaperInfo.category & $b9778c6b60232cf0$export$bbcd928767338e0d;\n}\nfunction $c6b883ac45fa55f1$var$isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & $b9778c6b60232cf0$export$ca9599b2a300afc;\n}\nfunction $c6b883ac45fa55f1$var$wouldSubstitute(glyphs, feature) {\n  for (let glyph of glyphs) glyph.features = {\n    [feature]: true\n  };\n  let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n  return glyphs.length === 1;\n}\nfunction $c6b883ac45fa55f1$var$consonantPosition(font, consonant, virama) {\n  let glyphs = [virama, consonant, virama];\n  if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), 'blwf') || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), 'blwf')) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), 'pstf') || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), 'pstf')) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;else if ($c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(0, 2), 'pref') || $c6b883ac45fa55f1$var$wouldSubstitute(glyphs.slice(1, 3), 'pref')) return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C;\n  return $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;\n}\nfunction $c6b883ac45fa55f1$var$initialReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  let virama = font.glyphForCodePoint(indicConfig.virama).id;\n  if (virama) {\n    let info = new $8cba766f534deddd$export$2e2bcd8739ae039(font, virama, [indicConfig.virama]);\n    for (let i = 0; i < glyphs.length; i++) if (glyphs[i].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) glyphs[i].shaperInfo.position = $c6b883ac45fa55f1$var$consonantPosition(font, glyphs[i].copy(), info);\n  }\n  for (let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)) {\n    let {\n      category: category,\n      syllableType: syllableType\n    } = glyphs[start].shaperInfo;\n    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') continue;\n    if (syllableType === 'broken_cluster' && dottedCircle) {\n      let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new $c6b883ac45fa55f1$var$IndicInfo(1 << $c6b883ac45fa55f1$var$indicCategory(g), $c6b883ac45fa55f1$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);\n      // Insert after possible Repha.\n      let i = start;\n      while (i < end && glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha) i++;\n      glyphs.splice(i++, 0, g);\n      end++;\n    }\n    // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n    let base = end;\n    let limit = start;\n    let hasReph = false;\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    if (indicConfig.rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === 'Implicit' && !$c6b883ac45fa55f1$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {\n      // See if it matches the 'rphf' feature.\n      let g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n      if ($c6b883ac45fa55f1$var$wouldSubstitute(g.slice(0, 2), 'rphf') || indicConfig.rephMode === 'Explicit' && $c6b883ac45fa55f1$var$wouldSubstitute(g, 'rphf')) {\n        limit += 2;\n        while (limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit])) limit++;\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha) {\n      limit++;\n      while (limit < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[limit])) limit++;\n      base = start;\n      hasReph = true;\n    }\n    switch (indicConfig.basePos) {\n      case 'Last':\n        {\n          // starting from the end of the syllable, move backwards\n          let i = end;\n          let seenBelow = false;\n          do {\n            let info = glyphs[--i].shaperInfo;\n            // until a consonant is found\n            if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i])) {\n              // that does not have a below-base or post-base form\n              // (post-base forms have to follow below-base forms),\n              if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C && (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C || seenBelow)) {\n                base = i;\n                break;\n              }\n              // or that is not a pre-base reordering Ra,\n              //\n              // IMPLEMENTATION NOTES:\n              //\n              // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n              // by the logic above already.\n              //\n              // or arrive at the first consonant. The consonant stopped at will\n              // be the base.\n              if (info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C) seenBelow = true;\n              base = i;\n            } else if (start < i && info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ && glyphs[i - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) break;\n          } while (i > limit);\n          break;\n        }\n      case 'First':\n        // The first consonant is always the base.\n        base = start;\n        // Mark all subsequent consonants as below.\n        for (let i = base + 1; i < end; i++) if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i])) glyphs[i].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C;\n    }\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n    if (hasReph && base === start && limit - base <= 2) hasReph = false;\n    // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n    // Reorder characters\n    for (let i1 = start; i1 < base; i1++) {\n      let info = glyphs[i1].shaperInfo;\n      info.position = Math.min($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_C, info.position);\n    }\n    if (base < end) glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;\n    // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n    for (let i2 = base + 1; i2 < end; i2++) if (glyphs[i2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {\n      for (let j = i2 + 1; j < end; j++) if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j])) {\n        glyphs[j].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Final_C;\n        break;\n      }\n      break;\n    }\n    // Handle beginning Ra\n    if (hasReph) glyphs[start].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph;\n    // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n    if (plan.isOldSpec) {\n      let disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n      for (let i = base + 1; i < end; i++) if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) {\n        let j;\n        for (j = end - 1; j > i; j--) {\n          if ($c6b883ac45fa55f1$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H) break;\n        }\n        if (glyphs[j].shaperInfo.category !== $b9778c6b60232cf0$export$a513ea61a7bee91c.H && j > i) {\n          // Move Halant to after last consonant.\n          let t = glyphs[i];\n          glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));\n          glyphs[j] = t;\n        }\n        break;\n      }\n    }\n    // Attach misc marks to previous char to move with them.\n    let lastPos = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Start;\n    for (let i3 = start; i3 < end; i3++) {\n      let info = glyphs[i3].shaperInfo;\n      if (info.category & ($b9778c6b60232cf0$export$bbcd928767338e0d | $b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$a513ea61a7bee91c.RS | $b9778c6b60232cf0$export$a513ea61a7bee91c.CM | $b9778c6b60232cf0$export$ca9599b2a300afc & info.category)) {\n        info.position = lastPos;\n        if (info.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && info.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (let j = i3; j > start; j--) if (glyphs[j - 1].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {\n            info.position = glyphs[j - 1].shaperInfo.position;\n            break;\n          }\n        }\n      } else if (info.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) lastPos = info.position;\n    }\n    // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n    let last = base;\n    for (let i4 = base + 1; i4 < end; i4++) {\n      if ($c6b883ac45fa55f1$var$isConsonant(glyphs[i4])) {\n        for (let j = last + 1; j < i4; j++) if (glyphs[j].shaperInfo.position < $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) glyphs[j].shaperInfo.position = glyphs[i4].shaperInfo.position;\n        last = i4;\n      } else if (glyphs[i4].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) last = i4;\n    }\n    let arr = glyphs.slice(start, end);\n    arr.sort((a, b) => a.shaperInfo.position - b.shaperInfo.position);\n    glyphs.splice(start, arr.length, ...arr);\n    // Find base again\n    for (let i5 = start; i5 < end; i5++) if (glyphs[i5].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {\n      base = i5;\n      break;\n    }\n    // Setup features now\n    // Reph\n    for (let i6 = start; i6 < end && glyphs[i6].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph; i6++) glyphs[i6].features.rphf = true;\n    // Pre-base\n    let blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n    for (let i7 = start; i7 < base; i7++) {\n      glyphs[i7].features.half = true;\n      if (blwf) glyphs[i7].features.blwf = true;\n    }\n    // Post-base\n    for (let i8 = base + 1; i8 < end; i8++) {\n      glyphs[i8].features.abvf = true;\n      glyphs[i8].features.pstf = true;\n      glyphs[i8].features.blwf = true;\n    }\n    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (let i = start; i + 1 < base; i++) if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Ra && glyphs[i + 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.H && (i + 1 === base || glyphs[i + 2].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ)) {\n        glyphs[i].features.blwf = true;\n        glyphs[i + 1].features.blwf = true;\n      }\n    }\n    let prefLen = 2;\n    if (features.pref && base + prefLen < end)\n      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (let i9 = base + 1; i9 + prefLen - 1 < end; i9++) {\n        let g = [glyphs[i9].copy(), glyphs[i9 + 1].copy()];\n        if ($c6b883ac45fa55f1$var$wouldSubstitute(g, 'pref')) {\n          for (let j = 0; j < prefLen; j++) glyphs[i9++].features.pref = true;\n          // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n          if (features.cfar) for (; i9 < end; i9++) glyphs[i9].features.cfar = true;\n          break;\n        }\n      }\n    // Apply ZWJ/ZWNJ effects\n    for (let i10 = start + 1; i10 < end; i10++) if ($c6b883ac45fa55f1$var$isJoiner(glyphs[i10])) {\n      let nonJoiner = glyphs[i10].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWNJ;\n      let j = i10;\n      do {\n        j--;\n        // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n        // being there, since we don't skip them for the CJCT\n        // feature (ie. F_MANUAL_ZWJ)\n        // A ZWNJ disables HALF.\n        if (nonJoiner) delete glyphs[j].features.half;\n      } while (j > start && !$c6b883ac45fa55f1$var$isConsonant(glyphs[j]));\n    }\n  }\n}\nfunction $c6b883ac45fa55f1$var$finalReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n  for (let start = 0, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $c6b883ac45fa55f1$var$nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n    let tryPref = !!features.pref;\n    // Find base again\n    let base = start;\n    for (; base < end; base++) if (glyphs[base].shaperInfo.position >= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) {\n      if (tryPref && base + 1 < end) {\n        for (let i = base + 1; i < end; i++) if (glyphs[i].features.pref) {\n          if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n            // Ok, this was a 'pref' candidate but didn't form any.\n            // Base is around here...\n            base = i;\n            while (base < end && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[base])) base++;\n            glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.BASE_C;\n            tryPref = false;\n          }\n          break;\n        }\n      }\n      // For Malayalam, skip over unformed below- (but NOT post-) forms.\n      if (plan.unicodeScript === 'Malayalam') for (let i = base + 1; i < end; i++) {\n        while (i < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i])) i++;\n        if (i === end || !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[i])) break;\n        i++; // Skip halant.\n        while (i < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[i])) i++;\n        if (i < end && $c6b883ac45fa55f1$var$isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Below_C) {\n          base = i;\n          glyphs[base].shaperInfo.position = $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C;\n        }\n      }\n      if (start < base && glyphs[base].shaperInfo.position > $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Base_C) base--;\n      break;\n    }\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.ZWJ) base--;\n    if (base < end) while (start < base && glyphs[base].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.N | $b9778c6b60232cf0$export$ca9599b2a300afc)) base--;\n    // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n    if (start + 1 < end && start < base) {\n      // If we lost track of base, alas, position before last thingy.\n      let newPos = base === end ? base - 2 : base - 1;\n      // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc))) newPos--;\n        // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n        if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M)\n          // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          {\n            if (newPos + 1 < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos + 1])) newPos++;\n          } else newPos = start; // No move.\n      }\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {\n        // Now go see if there's actually any matras...\n        for (let i = newPos; i > start; i--) if (glyphs[i - 1].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M) {\n          let oldPos = i - 1;\n          if (oldPos < base && base <= newPos) base--;\n          let tmp = glyphs[oldPos];\n          glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n          glyphs[newPos] = tmp;\n          newPos--;\n        }\n      }\n    }\n    // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n    if (start + 1 < end && glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph && glyphs[start].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {\n      let newRephPos;\n      let rephPos = indicConfig.rephPos;\n      let found = false;\n      // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n      if (rephPos !== $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n        while (newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;\n        if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n          found = true;\n        }\n        // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n        if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Main) newRephPos++;\n          found = newRephPos < end;\n        }\n        // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n        if (!found && rephPos === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Sub) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ($b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Post_C | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.After_Post | $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD))) newRephPos++;\n          found = newRephPos < end;\n        }\n      }\n      //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n        while (newRephPos < base && !$c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) newRephPos++;\n        if (newRephPos < base && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && $c6b883ac45fa55f1$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;\n          found = true;\n        }\n      }\n      // 6. Otherwise, reorder reph to the end of the syllable.\n      if (!found) {\n        newRephPos = end - 1;\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.SMVD) newRephPos--;\n        // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n        if ($c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newRephPos])) {\n          for (let i = base + 1; i < newRephPos; i++) if (glyphs[i].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) newRephPos--;\n        }\n      }\n      let reph = glyphs[start];\n      glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n      glyphs[newRephPos] = reph;\n      if (start < base && base <= newRephPos) base--;\n    }\n    // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n    if (tryPref && base + 1 < end) {\n      for (let i = base + 1; i < end; i++) if (glyphs[i].features.pref) {\n        // 1. Only reorder a glyph produced by substitution during application\n        //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n        //    the feature generally but block it in certain contexts.)\n        // Note: We just check that something got substituted.  We don't check that\n        // the <pref> feature actually did it...\n        //\n        // Reorder pref only if it ligated.\n        if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {\n          // 2. Try to find a target position the same way as for pre-base matra.\n          //    If it is found, reorder pre-base consonant glyph.\n          //\n          // 3. If position is not found, reorder immediately before main\n          //    consonant.\n          let newPos = base;\n          // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n          // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n          // We want to position matra after them.\n          if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n            while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ($b9778c6b60232cf0$export$a513ea61a7bee91c.M | $b9778c6b60232cf0$export$ca9599b2a300afc))) newPos--;\n            // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n            // split matra, it should be reordered to *before* the left part of such matra.\n            if (newPos > start && glyphs[newPos - 1].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {\n              let oldPos = i;\n              for (let j = base + 1; j < oldPos; j++) if (glyphs[j].shaperInfo.category === $b9778c6b60232cf0$export$a513ea61a7bee91c.M) {\n                newPos--;\n                break;\n              }\n            }\n          }\n          if (newPos > start && $c6b883ac45fa55f1$var$isHalantOrCoeng(glyphs[newPos - 1]))\n            // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n            {\n              if (newPos < end && $c6b883ac45fa55f1$var$isJoiner(glyphs[newPos])) newPos++;\n            }\n          let oldPos = i;\n          let tmp = glyphs[oldPos];\n          glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));\n          glyphs[newPos] = tmp;\n          if (newPos <= base && base < oldPos) base++;\n        }\n        break;\n      }\n    }\n    // Apply 'init' to the Left Matra if it's a word start.\n    if (glyphs[start].shaperInfo.position === $b9778c6b60232cf0$export$1a1f61c9c4dd9df0.Pre_M && (!start || !/Cf|Mn/.test($5OpyM$unicodeproperties.getCategory(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;\n  }\n}\nfunction $c6b883ac45fa55f1$var$nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\nvar $7eb6a55cb7a2526f$require$Buffer = $5OpyM$Buffer;\nconst {\n  categories: $7eb6a55cb7a2526f$var$categories,\n  decompositions: $7eb6a55cb7a2526f$var$decompositions\n} = /*@__PURE__*/$parcel$interopDefault($f3bd27a8c88f3f53$exports);\nconst $7eb6a55cb7a2526f$var$trie = new $5OpyM$unicodetrie($7eb6a55cb7a2526f$require$Buffer.from(\"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\", \"base64\"));\nconst $7eb6a55cb7a2526f$var$stateMachine = new $5OpyM$dfa(/*@__PURE__*/$parcel$interopDefault($f3bd27a8c88f3f53$exports));\nclass $7eb6a55cb7a2526f$export$2e2bcd8739ae039 extends $5340de7a86f3ae85$export$2e2bcd8739ae039 {\n  static zeroMarkWidths = 'BEFORE_GPOS';\n  static planFeatures(plan) {\n    plan.addStage($7eb6a55cb7a2526f$var$setupSyllables);\n    // Default glyph pre-processing group\n    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']);\n    // Reordering group\n    plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);\n    plan.addStage(['rphf'], false);\n    plan.addStage($7eb6a55cb7a2526f$var$recordRphf);\n    plan.addStage($7eb6a55cb7a2526f$var$clearSubstitutionFlags);\n    plan.addStage(['pref']);\n    plan.addStage($7eb6a55cb7a2526f$var$recordPref);\n    // Orthographic unit shaping group\n    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);\n    plan.addStage($7eb6a55cb7a2526f$var$reorder);\n    // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n    // Standard topographic presentation and positional feature application\n    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);\n  }\n  static assignFeatures(plan, glyphs) {\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      if ($7eb6a55cb7a2526f$var$decompositions[codepoint]) {\n        let decomposed = $7eb6a55cb7a2526f$var$decompositions[codepoint].map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new $8cba766f534deddd$export$2e2bcd8739ae039(plan.font, g.id, [c], glyphs[i].features);\n        });\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\nfunction $7eb6a55cb7a2526f$var$useCategory(glyph) {\n  return $7eb6a55cb7a2526f$var$trie.get(glyph.codePoints[0]);\n}\nclass $7eb6a55cb7a2526f$var$USEInfo {\n  constructor(category, syllableType, syllable) {\n    this.category = category;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\nfunction $7eb6a55cb7a2526f$var$setupSyllables(font, glyphs) {\n  let syllable = 0;\n  for (let [start, end, tags] of $7eb6a55cb7a2526f$var$stateMachine.match(glyphs.map($7eb6a55cb7a2526f$var$useCategory))) {\n    ++syllable;\n    // Create shaper info\n    for (let i = start; i <= end; i++) glyphs[i].shaperInfo = new $7eb6a55cb7a2526f$var$USEInfo($7eb6a55cb7a2526f$var$categories[$7eb6a55cb7a2526f$var$useCategory(glyphs[i])], tags[0], syllable);\n    // Assign rphf feature\n    let limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n    for (let i1 = start; i1 < start + limit; i1++) glyphs[i1].features.rphf = true;\n  }\n}\nfunction $7eb6a55cb7a2526f$var$clearSubstitutionFlags(font, glyphs) {\n  for (let glyph of glyphs) glyph.substituted = false;\n}\nfunction $7eb6a55cb7a2526f$var$recordRphf(font, glyphs) {\n  for (let glyph of glyphs) if (glyph.substituted && glyph.features.rphf)\n    // Mark a substituted repha.\n    glyph.shaperInfo.category = 'R';\n}\nfunction $7eb6a55cb7a2526f$var$recordPref(font, glyphs) {\n  for (let glyph of glyphs) if (glyph.substituted)\n    // Mark a substituted pref as VPre, as they behave the same way.\n    glyph.shaperInfo.category = 'VPre';\n}\nfunction $7eb6a55cb7a2526f$var$reorder(font, glyphs) {\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  for (let start = 0, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start)) {\n    let i, j;\n    let info = glyphs[start].shaperInfo;\n    let type = info.syllableType;\n    // Only a few syllable types need reordering.\n    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') continue;\n    // Insert a dotted circle glyph in broken clusters.\n    if (type === 'broken_cluster' && dottedCircle) {\n      let g = new $8cba766f534deddd$export$2e2bcd8739ae039(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info;\n      // Insert after possible Repha.\n      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++);\n      glyphs.splice(++i, 0, g);\n      end++;\n    }\n    // Move things forward.\n    if (info.category === 'R' && end - start > 1)\n      // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n        if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if ($7eb6a55cb7a2526f$var$isHalant(glyphs[i])) i--;\n          glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n          break;\n        }\n      }\n    // Move things back.\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n      if ($7eb6a55cb7a2526f$var$isBase(info) || $7eb6a55cb7a2526f$var$isHalant(glyphs[i]))\n        // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = $7eb6a55cb7a2526f$var$isHalant(glyphs[i]) ? i + 1 : i;else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n    }\n  }\n}\nfunction $7eb6a55cb7a2526f$var$nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\nfunction $7eb6a55cb7a2526f$var$isHalant(glyph) {\n  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\nfunction $7eb6a55cb7a2526f$var$isBase(info) {\n  return info.category === 'B' || info.category === 'GB';\n}\nconst $a1d926e2c804f4db$var$SHAPERS = {\n  arab: $5cab828b3273a17c$export$2e2bcd8739ae039,\n  mong: $5cab828b3273a17c$export$2e2bcd8739ae039,\n  syrc: $5cab828b3273a17c$export$2e2bcd8739ae039,\n  'nko ': $5cab828b3273a17c$export$2e2bcd8739ae039,\n  phag: $5cab828b3273a17c$export$2e2bcd8739ae039,\n  mand: $5cab828b3273a17c$export$2e2bcd8739ae039,\n  mani: $5cab828b3273a17c$export$2e2bcd8739ae039,\n  phlp: $5cab828b3273a17c$export$2e2bcd8739ae039,\n  hang: $ce39c5154631fd0c$export$2e2bcd8739ae039,\n  bng2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  beng: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  dev2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  deva: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  gjr2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  gujr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  guru: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  gur2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  knda: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  knd2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  mlm2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  mlym: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  ory2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  orya: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  taml: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  tml2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  telu: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  tel2: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  khmr: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  bali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  batk: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  brah: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  bugi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  buhd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  cakm: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  cham: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  dupl: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  egyp: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  gran: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  hano: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  java: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  kthi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  kali: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  khar: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  khoj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  sind: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  lepc: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  limb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  mahj: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  modi: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  saur: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  shrd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  sidd: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  sinh: $c6b883ac45fa55f1$export$2e2bcd8739ae039,\n  sund: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  sylo: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  tglg: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  tagb: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  tale: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  lana: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  tavt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  takr: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  tibt: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  tfng: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  tirh: $7eb6a55cb7a2526f$export$2e2bcd8739ae039,\n  latn: $5340de7a86f3ae85$export$2e2bcd8739ae039,\n  DFLT: $5340de7a86f3ae85$export$2e2bcd8739ae039 // Default\n};\nfunction $a1d926e2c804f4db$export$7877a478dd30fd3d(script) {\n  if (!Array.isArray(script)) script = [script];\n  for (let s of script) {\n    let shaper = $a1d926e2c804f4db$var$SHAPERS[s];\n    if (shaper) return shaper;\n  }\n  return $5340de7a86f3ae85$export$2e2bcd8739ae039;\n}\nclass $ec0cc8d4808a62ff$export$2e2bcd8739ae039 extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n          let glyph = this.glyphIterator.cur;\n          switch (table.version) {\n            case 1:\n              glyph.id = glyph.id + table.deltaGlyphID & 0xffff;\n              break;\n            case 2:\n              glyph.id = table.substitute.get(index);\n              break;\n          }\n          return true;\n        }\n      case 2:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index !== -1) {\n            let sequence = table.sequences.get(index);\n            if (sequence.length === 0) {\n              // If the sequence length is zero, delete the glyph.\n              // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n              this.glyphs.splice(this.glyphIterator.index, 1);\n              return true;\n            }\n            this.glyphIterator.cur.id = sequence[0];\n            this.glyphIterator.cur.ligatureComponent = 0;\n            let features = this.glyphIterator.cur.features;\n            let curGlyph = this.glyphIterator.cur;\n            let replacement = sequence.slice(1).map((gid, i) => {\n              let glyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, gid, undefined, features);\n              glyph.shaperInfo = curGlyph.shaperInfo;\n              glyph.isLigated = curGlyph.isLigated;\n              glyph.ligatureComponent = i + 1;\n              glyph.substituted = true;\n              glyph.isMultiplied = true;\n              return glyph;\n            });\n            this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n            return true;\n          }\n          return false;\n        }\n      case 3:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index !== -1) {\n            let USER_INDEX = 0; // TODO\n            this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];\n            return true;\n          }\n          return false;\n        }\n      case 4:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n          for (let ligature of table.ligatureSets.get(index)) {\n            let matched = this.sequenceMatchIndices(1, ligature.components);\n            if (!matched) continue;\n            let curGlyph = this.glyphIterator.cur;\n            // Concatenate all of the characters the new ligature will represent\n            let characters = curGlyph.codePoints.slice();\n            for (let index of matched) characters.push(...this.glyphs[index].codePoints);\n            // Create the replacement ligature glyph\n            let ligatureGlyph = new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, ligature.glyph, characters, curGlyph.features);\n            ligatureGlyph.shaperInfo = curGlyph.shaperInfo;\n            ligatureGlyph.isLigated = true;\n            ligatureGlyph.substituted = true;\n            // From Harfbuzz:\n            // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n            //   the ligature to keep its old ligature id.  This will allow it to attach to\n            //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n            //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n            //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n            //   later, we don't want them to lose their ligature id/component, otherwise\n            //   GPOS will fail to correctly position the mark ligature on top of the\n            //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n            //\n            // - If a ligature is formed of components that some of which are also ligatures\n            //   themselves, and those ligature components had marks attached to *their*\n            //   components, we have to attach the marks to the new ligature component\n            //   positions!  Now *that*'s tricky!  And these marks may be following the\n            //   last component of the whole sequence, so we should loop forward looking\n            //   for them and update them.\n            //\n            //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n            //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n            //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n            //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n            //   the new ligature with a component value of 2.\n            //\n            //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n            let isMarkLigature = curGlyph.isMark;\n            for (let i = 0; i < matched.length && isMarkLigature; i++) isMarkLigature = this.glyphs[matched[i]].isMark;\n            ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n            let lastLigID = curGlyph.ligatureID;\n            let lastNumComps = curGlyph.codePoints.length;\n            let curComps = lastNumComps;\n            let idx = this.glyphIterator.index + 1;\n            // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n            // This allows GPOS to attach marks to the correct ligature components.\n            for (let matchIndex of matched) {\n              // Don't assign new ligature components for mark ligatures (see above)\n              if (isMarkLigature) idx = matchIndex;else while (idx < matchIndex) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                this.glyphs[idx].ligatureComponent = ligatureComponent;\n                idx++;\n              }\n              lastLigID = this.glyphs[idx].ligatureID;\n              lastNumComps = this.glyphs[idx].codePoints.length;\n              curComps += lastNumComps;\n              idx++; // skip base glyph\n            }\n            // Adjust ligature components for any marks following\n            if (lastLigID && !isMarkLigature) for (let i1 = idx; i1 < this.glyphs.length; i1++) {\n              if (this.glyphs[i1].ligatureID === lastLigID) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i1].ligatureComponent || 1, lastNumComps);\n                this.glyphs[i1].ligatureComponent = ligatureComponent;\n              } else break;\n            }\n            // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n            for (let i2 = matched.length - 1; i2 >= 0; i2--) this.glyphs.splice(matched[i2], 1);\n            this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n            return true;\n          }\n          return false;\n        }\n      case 5:\n        return this.applyContext(table);\n      case 6:\n        return this.applyChainingContext(table);\n      case 7:\n        return this.applyLookup(table.lookupType, table.extension);\n      default:\n        throw new Error(`GSUB lookupType ${lookupType} is not supported`);\n    }\n  }\n}\nclass $d1645ec9e32ddac0$export$2e2bcd8739ae039 extends $cffd0e0e7e88a6c6$export$2e2bcd8739ae039 {\n  applyPositionValue(sequenceIndex, value) {\n    let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n    if (value.xAdvance != null) position.xAdvance += value.xAdvance;\n    if (value.yAdvance != null) position.yAdvance += value.yAdvance;\n    if (value.xPlacement != null) position.xOffset += value.xPlacement;\n    if (value.yPlacement != null) position.yOffset += value.yPlacement;\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n    }\n    // TODO: device tables\n  }\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1:\n        {\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n          switch (table.version) {\n            case 1:\n              this.applyPositionValue(0, table.value);\n              break;\n            case 2:\n              this.applyPositionValue(0, table.values.get(index));\n              break;\n          }\n          return true;\n        }\n      case 2:\n        {\n          let nextGlyph = this.glyphIterator.peek();\n          if (!nextGlyph) return false;\n          let index = this.coverageIndex(table.coverage);\n          if (index === -1) return false;\n          switch (table.version) {\n            case 1:\n              let set = table.pairSets.get(index);\n              for (let pair of set) if (pair.secondGlyph === nextGlyph.id) {\n                this.applyPositionValue(0, pair.value1);\n                this.applyPositionValue(1, pair.value2);\n                return true;\n              }\n              return false;\n            case 2:\n              let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n              let class2 = this.getClassID(nextGlyph.id, table.classDef2);\n              if (class1 === -1 || class2 === -1) return false;\n              var pair1 = table.classRecords.get(class1).get(class2);\n              this.applyPositionValue(0, pair1.value1);\n              this.applyPositionValue(1, pair1.value2);\n              return true;\n          }\n        }\n      case 3:\n        {\n          let nextIndex = this.glyphIterator.peekIndex();\n          let nextGlyph = this.glyphs[nextIndex];\n          if (!nextGlyph) return false;\n          let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n          if (!curRecord || !curRecord.exitAnchor) return false;\n          let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];\n          if (!nextRecord || !nextRecord.entryAnchor) return false;\n          let entry = this.getAnchor(nextRecord.entryAnchor);\n          let exit = this.getAnchor(curRecord.exitAnchor);\n          let cur = this.positions[this.glyphIterator.index];\n          let next = this.positions[nextIndex];\n          let d;\n          switch (this.direction) {\n            case 'ltr':\n              cur.xAdvance = exit.x + cur.xOffset;\n              d = entry.x + next.xOffset;\n              next.xAdvance -= d;\n              next.xOffset -= d;\n              break;\n            case 'rtl':\n              d = exit.x + cur.xOffset;\n              cur.xAdvance -= d;\n              cur.xOffset -= d;\n              next.xAdvance = entry.x + next.xOffset;\n              break;\n          }\n          if (this.glyphIterator.flags.rightToLeft) {\n            this.glyphIterator.cur.cursiveAttachment = nextIndex;\n            cur.yOffset = entry.y - exit.y;\n          } else {\n            nextGlyph.cursiveAttachment = this.glyphIterator.index;\n            cur.yOffset = exit.y - entry.y;\n          }\n          return true;\n        }\n      case 4:\n        {\n          let markIndex = this.coverageIndex(table.markCoverage);\n          if (markIndex === -1) return false;\n          // search backward for a base glyph\n          let baseGlyphIndex = this.glyphIterator.index;\n          while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));\n          if (baseGlyphIndex < 0) return false;\n          let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n          if (baseIndex === -1) return false;\n          let markRecord = table.markArray[markIndex];\n          let baseAnchor = table.baseArray[baseIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n      case 5:\n        {\n          let markIndex = this.coverageIndex(table.markCoverage);\n          if (markIndex === -1) return false;\n          // search backward for a base glyph\n          let baseGlyphIndex = this.glyphIterator.index;\n          while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);\n          if (baseGlyphIndex < 0) return false;\n          let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);\n          if (ligIndex === -1) return false;\n          let ligAttach = table.ligatureArray[ligIndex];\n          let markGlyph = this.glyphIterator.cur;\n          let ligGlyph = this.glyphs[baseGlyphIndex];\n          let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;\n          let markRecord = table.markArray[markIndex];\n          let baseAnchor = ligAttach[compIndex][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n          return true;\n        }\n      case 6:\n        {\n          let mark1Index = this.coverageIndex(table.mark1Coverage);\n          if (mark1Index === -1) return false;\n          // get the previous mark to attach to\n          let prevIndex = this.glyphIterator.peekIndex(-1);\n          let prev = this.glyphs[prevIndex];\n          if (!prev || !prev.isMark) return false;\n          let cur = this.glyphIterator.cur;\n          // The following logic was borrowed from Harfbuzz\n          let good = false;\n          if (cur.ligatureID === prev.ligatureID) {\n            if (!cur.ligatureID) good = true;else if (cur.ligatureComponent === prev.ligatureComponent) good = true;\n          } else\n            // If ligature ids don't match, it may be the case that one of the marks\n            // itself is a ligature, in which case match.\n            if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;\n          if (!good) return false;\n          let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n          if (mark2Index === -1) return false;\n          let markRecord = table.mark1Array[mark1Index];\n          let baseAnchor = table.mark2Array[mark2Index][markRecord.class];\n          this.applyAnchor(markRecord, baseAnchor, prevIndex);\n          return true;\n        }\n      case 7:\n        return this.applyContext(table);\n      case 8:\n        return this.applyChainingContext(table);\n      case 9:\n        return this.applyLookup(table.lookupType, table.extension);\n      default:\n        throw new Error(`Unsupported GPOS table: ${lookupType}`);\n    }\n  }\n  applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    let baseCoords = this.getAnchor(baseAnchor);\n    let markCoords = this.getAnchor(markRecord.markAnchor);\n    let basePos = this.positions[baseGlyphIndex];\n    let markPos = this.positions[this.glyphIterator.index];\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  }\n  getAnchor(anchor) {\n    // TODO: contour point, device tables\n    let x = anchor.xCoordinate;\n    let y = anchor.yCoordinate;\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n    }\n    return {\n      x: x,\n      y: y\n    };\n  }\n  applyFeatures(userFeatures, glyphs, advances) {\n    super.applyFeatures(userFeatures, glyphs, advances);\n    for (var i = 0; i < this.glyphs.length; i++) this.fixCursiveAttachment(i);\n    this.fixMarkAttachment();\n  }\n  fixCursiveAttachment(i) {\n    let glyph = this.glyphs[i];\n    if (glyph.cursiveAttachment != null) {\n      let j = glyph.cursiveAttachment;\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  }\n  fixMarkAttachment() {\n    for (let i = 0; i < this.glyphs.length; i++) {\n      let glyph = this.glyphs[i];\n      if (glyph.markAttachment != null) {\n        let j = glyph.markAttachment;\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n        if (this.direction === 'ltr') for (let k = j; k < i; k++) {\n          this.positions[i].xOffset -= this.positions[k].xAdvance;\n          this.positions[i].yOffset -= this.positions[k].yAdvance;\n        } else for (let k1 = j + 1; k1 < i + 1; k1++) {\n          this.positions[i].xOffset += this.positions[k1].xAdvance;\n          this.positions[i].yOffset += this.positions[k1].yAdvance;\n        }\n      }\n    }\n  }\n}\nclass $805414ed4cd3125e$export$2e2bcd8739ae039 {\n  constructor(font) {\n    this.font = font;\n    this.glyphInfos = null;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n    if (font.GSUB) this.GSUBProcessor = new $ec0cc8d4808a62ff$export$2e2bcd8739ae039(font, font.GSUB);\n    if (font.GPOS) this.GPOSProcessor = new $d1645ec9e32ddac0$export$2e2bcd8739ae039(font, font.GPOS);\n  }\n  setup(glyphRun) {\n    // Map glyphs to GlyphInfo objects so data can be passed between\n    // GSUB and GPOS without mutating the real (shared) Glyph objects.\n    this.glyphInfos = glyphRun.glyphs.map(glyph => new $8cba766f534deddd$export$2e2bcd8739ae039(this.font, glyph.id, [...glyph.codePoints]));\n    // Select a script based on what is available in GSUB/GPOS.\n    let script = null;\n    if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n    this.shaper = $a1d926e2c804f4db$export$7877a478dd30fd3d(script);\n    this.plan = new $d208953d14e55e3c$export$2e2bcd8739ae039(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);\n    // Assign chosen features to output glyph run\n    for (let key in this.plan.allFeatures) glyphRun.features[key] = true;\n  }\n  substitute(glyphRun) {\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, this.glyphInfos);\n      // Map glyph infos back to normal Glyph objects\n      glyphRun.glyphs = this.glyphInfos.map(glyphInfo => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n    }\n  }\n  position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') this.zeroMarkAdvances(glyphRun.positions);\n    if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') this.zeroMarkAdvances(glyphRun.positions);\n    // Reverse the glyphs and positions if the script is right-to-left\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  }\n  zeroMarkAdvances(positions) {\n    for (let i = 0; i < this.glyphInfos.length; i++) if (this.glyphInfos[i].isMark) {\n      positions[i].xAdvance = 0;\n      positions[i].yAdvance = 0;\n    }\n  }\n  cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  }\n  getAvailableFeatures(script, language) {\n    let features = [];\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GSUBProcessor.features));\n    }\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GPOSProcessor.features));\n    }\n    return features;\n  }\n}\nclass $2df783177c3b5db5$export$2e2bcd8739ae039 {\n  constructor(font) {\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null;\n    // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n    if (this.font.morx) this.engine = new $9273c77bc46b13e0$export$2e2bcd8739ae039(this.font);else if (this.font.GSUB || this.font.GPOS) this.engine = new $805414ed4cd3125e$export$2e2bcd8739ae039(this.font);\n  }\n  layout(string, features, script, language, direction) {\n    // Make the features parameter optional\n    if (typeof features === 'string') {\n      direction = language;\n      language = script;\n      script = features;\n      features = [];\n    }\n    // Map string to glyphs if needed\n    if (typeof string === 'string') {\n      // Attempt to detect the script from the string if not provided.\n      if (script == null) script = $a5878e4f4663c9e2$export$e5cb25e204fb8450(string);\n      var glyphs = this.font.glyphsForString(string);\n    } else {\n      // Attempt to detect the script from the glyph code points if not provided.\n      if (script == null) {\n        let codePoints = [];\n        for (let glyph of string) codePoints.push(...glyph.codePoints);\n        script = $a5878e4f4663c9e2$export$16fab0757cfc223d(codePoints);\n      }\n      var glyphs = string;\n    }\n    let glyphRun = new $5a6ae00fa7e614b0$export$2e2bcd8739ae039(glyphs, features, script, language, direction);\n    // Return early if there are no glyphs\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    }\n    // Setup the advanced layout engine\n    if (this.engine && this.engine.setup) this.engine.setup(glyphRun);\n    // Substitute and position the glyphs\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n    // Let the layout engine clean up any state it might have\n    if (this.engine && this.engine.cleanup) this.engine.cleanup();\n    return glyphRun;\n  }\n  substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);\n  }\n  position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(glyph => new $4bff5f854806c785$export$2e2bcd8739ae039(glyph.advanceWidth));\n    let positioned = null;\n    // Call the advanced layout engine. Returns the features applied.\n    if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun);\n    // if there is no GPOS table, use unicode properties to position marks.\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new $e4967fef9afc586a$export$2e2bcd8739ae039(this.font);\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    }\n    // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) this.kernProcessor = new $8526e21034212dc1$export$2e2bcd8739ae039(this.font);\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  }\n  hideDefaultIgnorables(glyphs, positions) {\n    let space = this.font.glyphForCodePoint(0x20);\n    for (let i = 0; i < glyphs.length; i++) if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n      glyphs[i] = space;\n      positions[i].xAdvance = 0;\n      positions[i].yAdvance = 0;\n    }\n  }\n  isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    let plane = ch >> 16;\n    if (plane === 0)\n      // BMP\n      switch (ch >> 8) {\n        case 0x00:\n          return ch === 0x00AD;\n        case 0x03:\n          return ch === 0x034F;\n        case 0x06:\n          return ch === 0x061C;\n        case 0x17:\n          return 0x17B4 <= ch && ch <= 0x17B5;\n        case 0x18:\n          return 0x180B <= ch && ch <= 0x180E;\n        case 0x20:\n          return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;\n        case 0xFE:\n          return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;\n        case 0xFF:\n          return 0xFFF0 <= ch && ch <= 0xFFF8;\n        default:\n          return false;\n      } else\n      // Other planes\n      switch (plane) {\n        case 0x01:\n          return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;\n        case 0x0E:\n          return 0xE0000 <= ch && ch <= 0xE0FFF;\n        default:\n          return false;\n      }\n  }\n  getAvailableFeatures(script, language) {\n    let features = [];\n    if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));\n    if (this.font.kern && features.indexOf('kern') === -1) features.push('kern');\n    return features;\n  }\n  stringsForGlyph(gid) {\n    let result = new Set();\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n    for (let codePoint of codePoints) result.add(String.fromCodePoint(codePoint));\n    if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid)) result.add(string);\n    return Array.from(result);\n  }\n}\nconst $af5e1fcddefe17a2$var$SVG_COMMANDS = {\n  moveTo: 'M',\n  lineTo: 'L',\n  quadraticCurveTo: 'Q',\n  bezierCurveTo: 'C',\n  closePath: 'Z'\n};\nclass $af5e1fcddefe17a2$export$2e2bcd8739ae039 {\n  constructor() {\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n  /**\n  * Compiles the path to a JavaScript function that can be applied with\n  * a graphics context in order to render the path.\n  * @return {string}\n  */\n  toFunction() {\n    return ctx => {\n      this.commands.forEach(c => {\n        return ctx[c.command].apply(ctx, c.args);\n      });\n    };\n  }\n  /**\n  * Converts the path to an SVG path data string\n  * @return {string}\n  */\n  toSVG() {\n    let cmds = this.commands.map(c => {\n      let args = c.args.map(arg => Math.round(arg * 100) / 100);\n      return `${$af5e1fcddefe17a2$var$SVG_COMMANDS[c.command]}${args.join(' ')}`;\n    });\n    return cmds.join('');\n  }\n  /**\n  * Gets the \"control box\" of a path.\n  * This is like the bounding box, but it includes all points including\n  * control points of bezier segments and is much faster to compute than\n  * the real bounding box.\n  * @type {BBox}\n  */\n  get cbox() {\n    if (!this._cbox) {\n      let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039();\n      for (let command1 of this.commands) for (let i = 0; i < command1.args.length; i += 2) cbox.addPoint(command1.args[i], command1.args[i + 1]);\n      this._cbox = Object.freeze(cbox);\n    }\n    return this._cbox;\n  }\n  /**\n  * Gets the exact bounding box of the path by evaluating curve segments.\n  * Slower to compute than the control box, but more accurate.\n  * @type {BBox}\n  */\n  get bbox() {\n    if (this._bbox) return this._bbox;\n    let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039();\n    let cx = 0,\n      cy = 0;\n    let f = t => Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n    for (let c of this.commands) switch (c.command) {\n      case 'moveTo':\n      case 'lineTo':\n        let [x, y] = c.args;\n        bbox.addPoint(x, y);\n        cx = x;\n        cy = y;\n        break;\n      case 'quadraticCurveTo':\n      case 'bezierCurveTo':\n        if (c.command === 'quadraticCurveTo') {\n          // http://fontforge.org/bezier.html\n          var [qp1x, qp1y, p3x, p3y] = c.args;\n          var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)\n          var cp1y = cy + 2 / 3 * (qp1y - cy);\n          var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)\n          var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n        } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;\n        // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n        bbox.addPoint(p3x, p3y);\n        var p0 = [cx, cy];\n        var p1 = [cp1x, cp1y];\n        var p2 = [cp2x, cp2y];\n        var p3 = [p3x, p3y];\n        for (var i = 0; i <= 1; i++) {\n          let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n          let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n          c = 3 * p1[i] - 3 * p0[i];\n          if (a === 0) {\n            if (b === 0) continue;\n            let t = -c / b;\n            if (0 < t && t < 1) {\n              if (i === 0) bbox.addPoint(f(t), bbox.maxY);else if (i === 1) bbox.addPoint(bbox.maxX, f(t));\n            }\n            continue;\n          }\n          let b2ac = Math.pow(b, 2) - 4 * c * a;\n          if (b2ac < 0) continue;\n          let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n          if (0 < t1 && t1 < 1) {\n            if (i === 0) bbox.addPoint(f(t1), bbox.maxY);else if (i === 1) bbox.addPoint(bbox.maxX, f(t1));\n          }\n          let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n          if (0 < t2 && t2 < 1) {\n            if (i === 0) bbox.addPoint(f(t2), bbox.maxY);else if (i === 1) bbox.addPoint(bbox.maxX, f(t2));\n          }\n        }\n        cx = p3x;\n        cy = p3y;\n        break;\n    }\n    return this._bbox = Object.freeze(bbox);\n  }\n  /**\n  * Applies a mapping function to each point in the path.\n  * @param {function} fn\n  * @return {Path}\n  */\n  mapPoints(fn) {\n    let path = new $af5e1fcddefe17a2$export$2e2bcd8739ae039();\n    for (let c of this.commands) {\n      let args = [];\n      for (let i = 0; i < c.args.length; i += 2) {\n        let [x, y] = fn(c.args[i], c.args[i + 1]);\n        args.push(x, y);\n      }\n      path[c.command](...args);\n    }\n    return path;\n  }\n  /**\n  * Transforms the path by the given matrix.\n  */\n  transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints((x, y) => {\n      const tx = m0 * x + m2 * y + m4;\n      const ty = m1 * x + m3 * y + m5;\n      return [tx, ty];\n    });\n  }\n  /**\n  * Translates the path by the given offset.\n  */\n  translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  }\n  /**\n  * Rotates the path by the given angle (in radians).\n  */\n  rotate(angle) {\n    let cos = Math.cos(angle);\n    let sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  }\n  /**\n  * Scales the path.\n  */\n  scale(scaleX, scaleY = scaleX) {\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  }\n}\nfor (let command of ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath']) $af5e1fcddefe17a2$export$2e2bcd8739ae039.prototype[command] = function (...args) {\n  this._bbox = this._cbox = null;\n  this.commands.push({\n    command: command,\n    args: args\n  });\n  return this;\n};\nvar $c55d37cb83b3ceea$export$2e2bcd8739ae039 = ['.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave', 'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis', 'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis', 'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section', 'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal', 'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation', 'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown', 'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright', 'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft', 'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction', 'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase', 'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex', 'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth', 'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior', 'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla', 'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];\nvar _class;\nlet $e1a34a692932ba79$export$2e2bcd8739ae039 = (_class = class $e1a34a692932ba79$export$2e2bcd8739ae039 {\n  constructor(id, codePoints, font) {\n    /**\n    * The glyph id in the font\n    * @type {number}\n    */\n    this.id = id;\n    /**\n    * An array of unicode code points that are represented by this glyph.\n    * There can be multiple code points in the case of ligatures and other glyphs\n    * that represent multiple visual characters.\n    * @type {number[]}\n    */\n    this.codePoints = codePoints;\n    this._font = font;\n    // TODO: get this info from GDEF if available\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every($5OpyM$unicodeproperties.isMark);\n    this.isLigature = this.codePoints.length > 1;\n  }\n  _getPath() {\n    return new $af5e1fcddefe17a2$export$2e2bcd8739ae039();\n  }\n  _getCBox() {\n    return this.path.cbox;\n  }\n  _getBBox() {\n    return this.path.bbox;\n  }\n  _getTableMetrics(table) {\n    if (this.id < table.metrics.length) return table.metrics.get(this.id);\n    let metric = table.metrics.get(table.metrics.length - 1);\n    let res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n    return res;\n  }\n  _getMetrics(cbox) {\n    if (this._metrics) return this._metrics;\n    let {\n      advance: advanceWidth,\n      bearing: leftBearing\n    } = this._getTableMetrics(this._font.hmtx);\n    // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n    if (this._font.vmtx) var {\n      advance: advanceHeight,\n      bearing: topBearing\n    } = this._getTableMetrics(this._font.vmtx);else {\n      let os2;\n      if (typeof cbox === 'undefined' || cbox === null) ({\n        cbox: cbox\n      } = this);\n      if ((os2 = this._font['OS/2']) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n      } else {\n        let {\n          hhea: hhea\n        } = this._font;\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n    if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    return this._metrics = {\n      advanceWidth: advanceWidth,\n      advanceHeight: advanceHeight,\n      leftBearing: leftBearing,\n      topBearing: topBearing\n    };\n  }\n  /**\n  * The glyph’s control box.\n  * This is often the same as the bounding box, but is faster to compute.\n  * Because of the way bezier curves are defined, some of the control points\n  * can be outside of the bounding box. Where `bbox` takes this into account,\n  * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n  * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n  * for a more detailed description.\n  *\n  * @type {BBox}\n  */\n  get cbox() {\n    return this._getCBox();\n  }\n  /**\n  * The glyph’s bounding box, i.e. the rectangle that encloses the\n  * glyph outline as tightly as possible.\n  * @type {BBox}\n  */\n  get bbox() {\n    return this._getBBox();\n  }\n  /**\n  * A vector Path object representing the glyph outline.\n  * @type {Path}\n  */\n  get path() {\n    // Cache the path so we only decode it once\n    // Decoding is actually performed by subclasses\n    return this._getPath();\n  }\n  /**\n  * Returns a path scaled to the given font size.\n  * @param {number} size\n  * @return {Path}\n  */\n  getScaledPath(size) {\n    let scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  }\n  /**\n  * The glyph's advance width.\n  * @type {number}\n  */\n  get advanceWidth() {\n    return this._getMetrics().advanceWidth;\n  }\n  /**\n  * The glyph's advance height.\n  * @type {number}\n  */\n  get advanceHeight() {\n    return this._getMetrics().advanceHeight;\n  }\n  get ligatureCaretPositions() {}\n  _getName() {\n    let {\n      post: post\n    } = this._font;\n    if (!post) return null;\n    switch (post.version) {\n      case 1:\n        return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id];\n      case 2:\n        let id = post.glyphNameIndex[this.id];\n        if (id < $c55d37cb83b3ceea$export$2e2bcd8739ae039.length) return $c55d37cb83b3ceea$export$2e2bcd8739ae039[id];\n        return post.names[id - $c55d37cb83b3ceea$export$2e2bcd8739ae039.length];\n      case 2.5:\n        return $c55d37cb83b3ceea$export$2e2bcd8739ae039[this.id + post.offsets[this.id]];\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  }\n  /**\n  * The glyph's name\n  * @type {string}\n  */\n  get name() {\n    return this._getName();\n  }\n  /**\n  * Renders the glyph to the given graphics context, at the specified font size.\n  * @param {CanvasRenderingContext2d} ctx\n  * @param {number} size\n  */\n  render(ctx, size) {\n    ctx.save();\n    let scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n    let fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n    ctx.restore();\n  }\n}, $5OpyM$applyDecoratedDescriptor(_class.prototype, \"cbox\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"cbox\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"bbox\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"bbox\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"path\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"path\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"advanceWidth\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"advanceWidth\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"advanceHeight\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"advanceHeight\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"name\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"name\"), _class.prototype), _class);\n\n// The header for both simple and composite glyphs\nlet $e20fdd09923e4c19$var$GlyfHeader = new $5OpyM$restructure.Struct({\n  numberOfContours: $5OpyM$restructure.int16,\n  xMin: $5OpyM$restructure.int16,\n  yMin: $5OpyM$restructure.int16,\n  xMax: $5OpyM$restructure.int16,\n  yMax: $5OpyM$restructure.int16\n});\n// Flags for simple glyphs\nconst $e20fdd09923e4c19$var$ON_CURVE = 1;\nconst $e20fdd09923e4c19$var$X_SHORT_VECTOR = 2;\nconst $e20fdd09923e4c19$var$Y_SHORT_VECTOR = 4;\nconst $e20fdd09923e4c19$var$REPEAT = 8;\nconst $e20fdd09923e4c19$var$SAME_X = 16;\nconst $e20fdd09923e4c19$var$SAME_Y = 32;\n// Flags for composite glyphs\nconst $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS = 1;\nconst $e20fdd09923e4c19$var$ARGS_ARE_XY_VALUES = 2;\nconst $e20fdd09923e4c19$var$ROUND_XY_TO_GRID = 4;\nconst $e20fdd09923e4c19$var$WE_HAVE_A_SCALE = 8;\nconst $e20fdd09923e4c19$var$MORE_COMPONENTS = 32;\nconst $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;\nconst $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO = 128;\nconst $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS = 256;\nconst $e20fdd09923e4c19$var$USE_MY_METRICS = 512;\nconst $e20fdd09923e4c19$var$OVERLAP_COMPOUND = 1024;\nconst $e20fdd09923e4c19$var$SCALED_COMPONENT_OFFSET = 2048;\nconst $e20fdd09923e4c19$var$UNSCALED_COMPONENT_OFFSET = 4096;\nclass $e20fdd09923e4c19$export$baf26146a414f24a {\n  constructor(onCurve, endContour, x = 0, y = 0) {\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n  copy() {\n    return new $e20fdd09923e4c19$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);\n  }\n}\n// Represents a component in a composite glyph\nclass $e20fdd09923e4c19$var$Component {\n  constructor(glyphID, dx, dy) {\n    this.glyphID = glyphID;\n    this.dx = dx;\n    this.dy = dy;\n    this.pos = 0;\n    this.scaleX = this.scaleY = 1;\n    this.scale01 = this.scale10 = 0;\n  }\n}\nclass $e20fdd09923e4c19$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {\n  type = 'TTF';\n  // Parses just the glyph header and returns the bounding box\n  _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) return this.path.cbox;\n    let stream = this._font._getTableStream('glyf');\n    stream.pos += this._font.loca.offsets[this.id];\n    let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream);\n    let cbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return Object.freeze(cbox);\n  }\n  // Parses a single glyph coordinate\n  _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n      if (!same) val = -val;\n      val += prev;\n    } else if (same) var val = prev;else var val = prev + stream.readInt16BE();\n    return val;\n  }\n  // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n  _decode() {\n    let glyfPos = this._font.loca.offsets[this.id];\n    let nextPos = this._font.loca.offsets[this.id + 1];\n    // Nothing to do if there is no data for this glyph\n    if (glyfPos === nextPos) return null;\n    let stream = this._font._getTableStream('glyf');\n    stream.pos += glyfPos;\n    let startPos = stream.pos;\n    let glyph = $e20fdd09923e4c19$var$GlyfHeader.decode(stream);\n    if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream);else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream, startPos);\n    return glyph;\n  }\n  _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n    let endPtsOfContours = new $5OpyM$restructure.Array($5OpyM$restructure.uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new $5OpyM$restructure.Array($5OpyM$restructure.uint8, $5OpyM$restructure.uint16).decode(stream);\n    let flags = [];\n    let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag);\n      // check for repeat flag\n      if (flag & $e20fdd09923e4c19$var$REPEAT) {\n        let count = stream.readUInt8();\n        for (let j = 0; j < count; j++) flags.push(flag);\n      }\n    }\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      let point = new $e20fdd09923e4c19$export$baf26146a414f24a(!!(flag & $e20fdd09923e4c19$var$ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n    let px = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & $e20fdd09923e4c19$var$X_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_X);\n    }\n    let py = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & $e20fdd09923e4c19$var$Y_SHORT_VECTOR, flag & $e20fdd09923e4c19$var$SAME_Y);\n    }\n    if (this._font._variationProcessor) {\n      let points = glyph.points.slice();\n      points.push(...this._getPhantomPoints(glyph));\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.slice(-4);\n    }\n    return;\n  }\n  _decodeComposite(glyph, stream, offset = 0) {\n    // this is a composite glyph\n    glyph.components = [];\n    let haveInstructions = false;\n    let flags = $e20fdd09923e4c19$var$MORE_COMPONENTS;\n    while (flags & $e20fdd09923e4c19$var$MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      let gPos = stream.pos - offset;\n      let glyphID = stream.readUInt16BE();\n      if (!haveInstructions) haveInstructions = (flags & $e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS) !== 0;\n      if (flags & $e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n      var component = new $e20fdd09923e4c19$var$Component(glyphID, dx, dy);\n      component.pos = gPos;\n      if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_SCALE)\n        // fixed number with 14 bits of fraction\n        component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;else if (flags & $e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      } else if (flags & $e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n        component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;\n      }\n      glyph.components.push(component);\n    }\n    if (this._font._variationProcessor) {\n      let points = [];\n      for (let j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(true, true, component.dx, component.dy));\n      }\n      points.push(...this._getPhantomPoints(glyph));\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.splice(-4, 4);\n      for (let i = 0; i < points.length; i++) {\n        let point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n    return haveInstructions;\n  }\n  _getPhantomPoints(glyph) {\n    let cbox = this._getCBox(true);\n    if (this._metrics == null) this._metrics = $e1a34a692932ba79$export$2e2bcd8739ae039.prototype._getMetrics.call(this, cbox);\n    let {\n      advanceWidth: advanceWidth,\n      advanceHeight: advanceHeight,\n      leftBearing: leftBearing,\n      topBearing: topBearing\n    } = this._metrics;\n    return [new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0), new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0), new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing), new $e20fdd09923e4c19$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)];\n  }\n  // Decodes font data, resolves composite glyphs, and returns an array of contours\n  _getContours() {\n    let glyph = this._decode();\n    if (!glyph) return [];\n    let points = [];\n    if (glyph.numberOfContours < 0)\n      // resolve composite glyphs\n      for (let component of glyph.components) {\n        let contours = this._font.getGlyph(component.glyphID)._getContours();\n        for (let i = 0; i < contours.length; i++) {\n          let contour = contours[i];\n          for (let j = 0; j < contour.length; j++) {\n            let point = contour[j];\n            let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;\n            let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;\n            points.push(new $e20fdd09923e4c19$export$baf26146a414f24a(point.onCurve, point.endContour, x, y));\n          }\n        }\n      } else points = glyph.points || [];\n    // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n    let contours = [];\n    let cur = [];\n    for (let k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n    return contours;\n  }\n  _getMetrics() {\n    if (this._metrics) return this._metrics;\n    let cbox = this._getCBox(true);\n    super._getMetrics(cbox);\n    if (this._font._variationProcessor && !this._font.HVAR)\n      // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    return this._metrics;\n  }\n  // Converts contours to a Path object that can be rendered\n  _getPath() {\n    let contours = this._getContours();\n    let path = new $af5e1fcddefe17a2$export$2e2bcd8739ae039();\n    for (let i = 0; i < contours.length; i++) {\n      let contour = contours[i];\n      let firstPt = contour[0];\n      let lastPt = contour[contour.length - 1];\n      let start = 0;\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve)\n          // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;else\n          // Start at the middle if both the first and last points are off curve\n          firstPt = new $e20fdd09923e4c19$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        var curvePt = firstPt;\n      }\n      path.moveTo(firstPt.x, firstPt.y);\n      for (let j = start; j < contour.length; j++) {\n        let pt = contour[j];\n        let prevPt = j === 0 ? firstPt : contour[j - 1];\n        if (prevPt.onCurve && pt.onCurve) path.lineTo(pt.x, pt.y);else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;else if (!prevPt.onCurve && !pt.onCurve) {\n          let midX = (prevPt.x + pt.x) / 2;\n          let midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n        } else throw new Error(\"Unknown TTF path state\");\n      }\n      // Connect the first and last points\n      if (curvePt) path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      path.closePath();\n    }\n    return path;\n  }\n}\nclass $efcf21464e1e0f88$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {\n  type = 'CFF';\n  _getName() {\n    if (this._font.CFF2) return super._getName();\n    return this._font['CFF '].getGlyphName(this.id);\n  }\n  bias(s) {\n    if (s.length < 1240) return 107;else if (s.length < 33900) return 1131;else return 32768;\n  }\n  _getPath() {\n    let cff = this._font.CFF2 || this._font['CFF '];\n    let {\n      stream: stream\n    } = cff;\n    let str = cff.topDict.CharStrings[this.id];\n    let end = str.offset + str.length;\n    stream.pos = str.offset;\n    let path = new $af5e1fcddefe17a2$export$2e2bcd8739ae039();\n    let stack = [];\n    let trans = [];\n    let width = null;\n    let nStems = 0;\n    let x1 = 0,\n      y1 = 0;\n    let usedGsubrs;\n    let usedSubrs;\n    let open = false;\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n    let gsubrs = cff.globalSubrIndex || [];\n    let gsubrsBias = this.bias(gsubrs);\n    let privateDict = cff.privateDictForGlyph(this.id) || {};\n    let subrs = privateDict.Subrs || [];\n    let subrsBias = this.bias(subrs);\n    let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    let vsindex = privateDict.vsindex;\n    let variationProcessor = this._font._variationProcessor;\n    function checkWidth() {\n      if (width == null) width = stack.shift() + privateDict.nominalWidthX;\n    }\n    function parseStems() {\n      if (stack.length % 2 !== 0) checkWidth();\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n    function moveTo(x, y) {\n      if (open) path.closePath();\n      path.moveTo(x, y);\n      open = true;\n    }\n    let parse = function () {\n      while (stream.pos < end) {\n        let op = stream.readUInt8();\n        if (op < 32) {\n          let index, subr, phase;\n          switch (op) {\n            case 1:\n            case 3:\n            case 18:\n            case 23:\n              parseStems();\n              break;\n            case 4:\n              if (stack.length > 1) checkWidth();\n              y1 += stack.shift();\n              moveTo(x1, y1);\n              break;\n            case 5:\n              while (stack.length >= 2) {\n                x1 += stack.shift();\n                y1 += stack.shift();\n                path.lineTo(x1, y1);\n              }\n              break;\n            case 6:\n            case 7:\n              phase = op === 6;\n              while (stack.length >= 1) {\n                if (phase) x1 += stack.shift();else y1 += stack.shift();\n                path.lineTo(x1, y1);\n                phase = !phase;\n              }\n              break;\n            case 8:\n              while (stack.length > 0) {\n                var c1x = x1 + stack.shift();\n                var c1y = y1 + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x1 = c2x + stack.shift();\n                y1 = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              }\n              break;\n            case 10:\n              index = stack.pop() + subrsBias;\n              subr = subrs[index];\n              if (subr) {\n                usedSubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n            case 11:\n              if (cff.version >= 2) break;\n              return;\n            case 14:\n              if (cff.version >= 2) break;\n              if (stack.length > 0) checkWidth();\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n              break;\n            case 15:\n              if (cff.version < 2) throw new Error('vsindex operator not supported in CFF v1');\n              vsindex = stack.pop();\n              break;\n            case 16:\n              {\n                if (cff.version < 2) throw new Error('blend operator not supported in CFF v1');\n                if (!variationProcessor) throw new Error('blend operator in non-variation font');\n                let blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n                let numBlends = stack.pop();\n                let numOperands = numBlends * blendVector.length;\n                let delta = stack.length - numOperands;\n                let base = delta - numBlends;\n                for (let i = 0; i < numBlends; i++) {\n                  let sum = stack[base + i];\n                  for (let j = 0; j < blendVector.length; j++) sum += blendVector[j] * stack[delta++];\n                  stack[base + i] = sum;\n                }\n                while (numOperands--) stack.pop();\n                break;\n              }\n            case 19:\n            case 20:\n              parseStems();\n              stream.pos += nStems + 7 >> 3;\n              break;\n            case 21:\n              if (stack.length > 2) checkWidth();\n              x1 += stack.shift();\n              y1 += stack.shift();\n              moveTo(x1, y1);\n              break;\n            case 22:\n              if (stack.length > 1) checkWidth();\n              x1 += stack.shift();\n              moveTo(x1, y1);\n              break;\n            case 24:\n              while (stack.length >= 8) {\n                var c1x = x1 + stack.shift();\n                var c1y = y1 + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x1 = c2x + stack.shift();\n                y1 = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              }\n              x1 += stack.shift();\n              y1 += stack.shift();\n              path.lineTo(x1, y1);\n              break;\n            case 25:\n              while (stack.length >= 8) {\n                x1 += stack.shift();\n                y1 += stack.shift();\n                path.lineTo(x1, y1);\n              }\n              var c1x = x1 + stack.shift();\n              var c1y = y1 + stack.shift();\n              var c2x = c1x + stack.shift();\n              var c2y = c1y + stack.shift();\n              x1 = c2x + stack.shift();\n              y1 = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              break;\n            case 26:\n              if (stack.length % 2) x1 += stack.shift();\n              while (stack.length >= 4) {\n                c1x = x1;\n                c1y = y1 + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x1 = c2x;\n                y1 = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              }\n              break;\n            case 27:\n              if (stack.length % 2) y1 += stack.shift();\n              while (stack.length >= 4) {\n                c1x = x1 + stack.shift();\n                c1y = y1;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x1 = c2x + stack.shift();\n                y1 = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n              }\n              break;\n            case 28:\n              stack.push(stream.readInt16BE());\n              break;\n            case 29:\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n              if (subr) {\n                usedGsubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n            case 30:\n            case 31:\n              phase = op === 31;\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x1 + stack.shift();\n                  c1y = y1;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y1 = c2y + stack.shift();\n                  x1 = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x1;\n                  c1y = y1 + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x1 = c2x + stack.shift();\n                  y1 = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x1, y1);\n                phase = !phase;\n              }\n              break;\n            case 12:\n              op = stream.readUInt8();\n              switch (op) {\n                case 3:\n                  let a = stack.pop();\n                  let b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n                case 4:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n                case 5:\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n                case 9:\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n                case 10:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n                case 11:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n                case 12:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n                case 14:\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n                case 15:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n                case 18:\n                  stack.pop();\n                  break;\n                case 20:\n                  let val = stack.pop();\n                  let idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n                case 21:\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n                case 22:\n                  let s1 = stack.pop();\n                  let s2 = stack.pop();\n                  let v1 = stack.pop();\n                  let v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n                case 23:\n                  stack.push(Math.random());\n                  break;\n                case 24:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n                case 26:\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n                case 27:\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n                case 28:\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n                case 29:\n                  idx = stack.pop();\n                  if (idx < 0) idx = 0;else if (idx > stack.length - 1) idx = stack.length - 1;\n                  stack.push(stack[idx]);\n                  break;\n                case 30:\n                  let n = stack.pop();\n                  let j = stack.pop();\n                  if (j >= 0) while (j > 0) {\n                    var t = stack[n - 1];\n                    for (let i = n - 2; i >= 0; i--) stack[i + 1] = stack[i];\n                    stack[0] = t;\n                    j--;\n                  } else while (j < 0) {\n                    var t = stack[0];\n                    for (let i = 0; i <= n; i++) stack[i] = stack[i + 1];\n                    stack[n - 1] = t;\n                    j++;\n                  }\n                  break;\n                case 34:\n                  c1x = x1 + stack.shift();\n                  c1y = y1;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  let c3x = c2x + stack.shift();\n                  let c3y = c2y;\n                  let c4x = c3x + stack.shift();\n                  let c4y = c3y;\n                  let c5x = c4x + stack.shift();\n                  let c5y = c4y;\n                  let c6x = c5x + stack.shift();\n                  let c6y = c5y;\n                  x1 = c6x;\n                  y1 = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n                case 35:\n                  let pts = [];\n                  for (let i = 0; i <= 5; i++) {\n                    x1 += stack.shift();\n                    y1 += stack.shift();\n                    pts.push(x1, y1);\n                  }\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  stack.shift(); // fd\n                  break;\n                case 36:\n                  c1x = x1 + stack.shift();\n                  c1y = y1 + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x1 = c6x;\n                  y1 = c6y;\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n                case 37:\n                  let startx = x1;\n                  let starty = y1;\n                  pts = [];\n                  for (let i1 = 0; i1 <= 4; i1++) {\n                    x1 += stack.shift();\n                    y1 += stack.shift();\n                    pts.push(x1, y1);\n                  }\n                  if (Math.abs(x1 - startx) > Math.abs(y1 - starty)) {\n                    x1 += stack.shift();\n                    y1 = starty;\n                  } else {\n                    x1 = startx;\n                    y1 += stack.shift();\n                  }\n                  pts.push(x1, y1);\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  break;\n                default:\n                  throw new Error(`Unknown op: 12 ${op}`);\n              }\n              break;\n            default:\n              throw new Error(`Unknown op: ${op}`);\n          }\n        } else if (op < 247) stack.push(op - 139);else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else stack.push(stream.readInt32BE() / 65536);\n      }\n    };\n    parse();\n    if (open) path.closePath();\n    return path;\n  }\n}\nlet $df50792647a3d5cf$var$SBIXImage = new $5OpyM$restructure.Struct({\n  originX: $5OpyM$restructure.uint16,\n  originY: $5OpyM$restructure.uint16,\n  type: new $5OpyM$restructure.String(4),\n  data: new $5OpyM$restructure.Buffer(t => t.parent.buflen - t._currentOffset)\n});\nclass $df50792647a3d5cf$export$2e2bcd8739ae039 extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {\n  type = 'SBIX';\n  /**\n  * Returns an object representing a glyph image at the given point size.\n  * The object has a data property with a Buffer containing the actual image data,\n  * along with the image type, and origin.\n  *\n  * @param {number} size\n  * @return {object}\n  */\n  getImageForSize(size) {\n    for (let i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n      if (table.ppem >= size) break;\n    }\n    let offsets = table.imageOffsets;\n    let start = offsets[this.id];\n    let end = offsets[this.id + 1];\n    if (start === end) return null;\n    this._font.stream.pos = start;\n    return $df50792647a3d5cf$var$SBIXImage.decode(this._font.stream, {\n      buflen: end - start\n    });\n  }\n  render(ctx, size) {\n    let img = this.getImageForSize(size);\n    if (img != null) {\n      let scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, {\n        height: size,\n        x: img.originX,\n        y: (this.bbox.minY - img.originY) * scale\n      });\n    }\n    if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);\n  }\n}\nclass $729b375ce67e8a00$var$COLRLayer {\n  constructor(glyph, color) {\n    this.glyph = glyph;\n    this.color = color;\n  }\n}\nclass $729b375ce67e8a00$export$2e2bcd8739ae039 extends $e1a34a692932ba79$export$2e2bcd8739ae039 {\n  type = 'COLR';\n  _getBBox() {\n    let bbox = new $fcb46e14b01ea01f$export$2e2bcd8739ae039();\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      let b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n    return bbox;\n  }\n  /**\n  * Returns an array of objects containing the glyph and color for\n  * each layer in the composite color glyph.\n  * @type {object[]}\n  */\n  get layers() {\n    let cpal = this._font.CPAL;\n    let colr = this._font.COLR;\n    let low = 0;\n    let high = colr.baseGlyphRecord.length - 1;\n    while (low <= high) {\n      let mid = low + high >> 1;\n      var rec = colr.baseGlyphRecord[mid];\n      if (this.id < rec.gid) high = mid - 1;else if (this.id > rec.gid) low = mid + 1;else {\n        var baseLayer = rec;\n        break;\n      }\n    }\n    // if base glyph not found in COLR table,\n    // default to normal glyph from glyf or CFF\n    if (baseLayer == null) {\n      var g = this._font._getBaseGlyph(this.id);\n      var color = {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 255\n      };\n      return [new $729b375ce67e8a00$var$COLRLayer(g, color)];\n    }\n    // otherwise, return an array of all the layers\n    let layers = [];\n    for (let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n      var rec = colr.layerRecords[i];\n      var color = cpal.colorRecords[rec.paletteIndex];\n      var g = this._font._getBaseGlyph(rec.gid);\n      layers.push(new $729b375ce67e8a00$var$COLRLayer(g, color));\n    }\n    return layers;\n  }\n  render(ctx, size) {\n    for (let {\n      glyph: glyph,\n      color: color\n    } of this.layers) {\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n    return;\n  }\n}\nconst $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nconst $62b2d77b45b438f3$var$TUPLE_COUNT_MASK = 0x0fff;\nconst $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD = 0x8000;\nconst $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE = 0x4000;\nconst $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS = 0x2000;\nconst $62b2d77b45b438f3$var$TUPLE_INDEX_MASK = 0x0fff;\nconst $62b2d77b45b438f3$var$POINTS_ARE_WORDS = 0x80;\nconst $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK = 0x7f;\nconst $62b2d77b45b438f3$var$DELTAS_ARE_ZERO = 0x80;\nconst $62b2d77b45b438f3$var$DELTAS_ARE_WORDS = 0x40;\nconst $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK = 0x3f;\nclass $62b2d77b45b438f3$export$2e2bcd8739ae039 {\n  constructor(font, coords) {\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new Map();\n  }\n  normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    let normalized = [];\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      let axis = this.font.fvar.axis[i];\n      if (coords[i] < axis.defaultValue) normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));else normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n    }\n    // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n    if (this.font.avar) for (var i = 0; i < this.font.avar.segment.length; i++) {\n      let segment = this.font.avar.segment[i];\n      for (let j = 0; j < segment.correspondence.length; j++) {\n        let pair = segment.correspondence[j];\n        if (j >= 1 && normalized[i] < pair.fromCoord) {\n          let prev = segment.correspondence[j - 1];\n          normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;\n          break;\n        }\n      }\n    }\n    return normalized;\n  }\n  transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) return;\n    let {\n      gvar: gvar\n    } = this.font;\n    if (gid >= gvar.glyphCount) return;\n    let offset = gvar.offsets[gid];\n    if (offset === gvar.offsets[gid + 1]) return;\n    // Read the gvar data for this glyph\n    let {\n      stream: stream\n    } = this.font;\n    stream.pos = offset;\n    if (stream.pos >= stream.length) return;\n    let tupleCount = stream.readUInt16BE();\n    let offsetToData = offset + stream.readUInt16BE();\n    if (tupleCount & $62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n    let origPoints = glyphPoints.map(pt => pt.copy());\n    tupleCount &= $62b2d77b45b438f3$var$TUPLE_COUNT_MASK;\n    for (let i = 0; i < tupleCount; i++) {\n      let tupleDataSize = stream.readUInt16BE();\n      let tupleIndex = stream.readUInt16BE();\n      if (tupleIndex & $62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) tupleCoords.push(stream.readInt16BE() / 16384);\n      } else {\n        if ((tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error('Invalid gvar table');\n        var tupleCoords = gvar.globalCoords[tupleIndex & $62b2d77b45b438f3$var$TUPLE_INDEX_MASK];\n      }\n      if (tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) startCoords.push(stream.readInt16BE() / 16384);\n        var endCoords = [];\n        for (let a1 = 0; a1 < gvar.axisCount; a1++) endCoords.push(stream.readInt16BE() / 16384);\n      }\n      // Get the factor at which to apply this tuple\n      let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      if (tupleIndex & $62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();else var points = sharedPoints;\n      // points.length = 0 means there are deltas for all points\n      let nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      let xDeltas = this.decodeDeltas(nPoints);\n      let yDeltas = this.decodeDeltas(nPoints);\n      if (points.length === 0) for (let i = 0; i < glyphPoints.length; i++) {\n        var point = glyphPoints[i];\n        point.x += Math.round(xDeltas[i] * factor);\n        point.y += Math.round(yDeltas[i] * factor);\n      } else {\n        let outPoints = origPoints.map(pt => pt.copy());\n        let hasDelta = glyphPoints.map(() => false);\n        for (let i = 0; i < points.length; i++) {\n          let idx = points[i];\n          if (idx < glyphPoints.length) {\n            let point = outPoints[idx];\n            hasDelta[idx] = true;\n            point.x += Math.round(xDeltas[i] * factor);\n            point.y += Math.round(yDeltas[i] * factor);\n          }\n        }\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n        for (let i1 = 0; i1 < glyphPoints.length; i1++) {\n          let deltaX = outPoints[i1].x - origPoints[i1].x;\n          let deltaY = outPoints[i1].y - origPoints[i1].y;\n          glyphPoints[i1].x += deltaX;\n          glyphPoints[i1].y += deltaY;\n        }\n      }\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  }\n  decodePoints() {\n    let stream = this.font.stream;\n    let count = stream.readUInt8();\n    if (count & $62b2d77b45b438f3$var$POINTS_ARE_WORDS) count = (count & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    let points = new Uint16Array(count);\n    let i = 0;\n    let point = 0;\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & $62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK) + 1;\n      let fn = run & $62b2d77b45b438f3$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n      for (let j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n    return points;\n  }\n  decodeDeltas(count) {\n    let stream = this.font.stream;\n    let i = 0;\n    let deltas = new Int16Array(count);\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & $62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK) + 1;\n      if (run & $62b2d77b45b438f3$var$DELTAS_ARE_ZERO) i += runCount;else {\n        let fn = run & $62b2d77b45b438f3$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n        for (let j = 0; j < runCount && i < count; j++) deltas[i++] = fn.call(stream);\n      }\n    }\n    return deltas;\n  }\n  tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    let normalized = this.normalizedCoords;\n    let {\n      gvar: gvar\n    } = this.font;\n    let factor = 1;\n    for (let i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) continue;\n      if (normalized[i] === 0) return 0;\n      if ((tupleIndex & $62b2d77b45b438f3$var$INTERMEDIATE_TUPLE) === 0) {\n        if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) return 0;\n        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n      } else {\n        if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) return 0;else if (normalized[i] < tupleCoords[i]) factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);else factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n      }\n    }\n    return factor;\n  }\n  // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n  interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) return;\n    let point = 0;\n    while (point < points.length) {\n      let firstPoint = point;\n      // find the end point of the contour\n      let endPoint = point;\n      let pt = points[endPoint];\n      while (!pt.endContour) pt = points[++endPoint];\n      // find the first point that has a delta\n      while (point <= endPoint && !hasDelta[point]) point++;\n      if (point > endPoint) continue;\n      let firstDelta = point;\n      let curDelta = point;\n      point++;\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n        point++;\n      }\n      // shift contour if we only have a single delta\n      if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n        if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n      }\n      point = endPoint + 1;\n    }\n  }\n  deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) return;\n    let iterable = ['x', 'y'];\n    for (let i = 0; i < iterable.length; i++) {\n      let k = iterable[i];\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n      let in1 = inPoints[ref1][k];\n      let in2 = inPoints[ref2][k];\n      let out1 = outPoints[ref1][k];\n      let out2 = outPoints[ref2][k];\n      // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n      if (in1 !== in2 || out1 === out2) {\n        let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n        for (let p = p1; p <= p2; p++) {\n          let out = inPoints[p][k];\n          if (out <= in1) out += out1 - in1;else if (out >= in2) out += out2 - in2;else out = out1 + (out - in1) * scale;\n          outPoints[p][k] = out;\n        }\n      }\n    }\n  }\n  deltaShift(p1, p2, ref, inPoints, outPoints) {\n    let deltaX = outPoints[ref].x - inPoints[ref].x;\n    let deltaY = outPoints[ref].y - inPoints[ref].y;\n    if (deltaX === 0 && deltaY === 0) return;\n    for (let p = p1; p <= p2; p++) if (p !== ref) {\n      outPoints[p].x += deltaX;\n      outPoints[p].y += deltaY;\n    }\n  }\n  getAdvanceAdjustment(gid, table) {\n    let outerIndex, innerIndex;\n    if (table.advanceWidthMapping) {\n      let idx = gid;\n      if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;\n      let entryFormat = table.advanceWidthMapping.entryFormat;\n      ({\n        outerIndex: outerIndex,\n        innerIndex: innerIndex\n      } = table.advanceWidthMapping.mapData[idx]);\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  }\n  // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n  getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) return 0;\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (innerIndex >= varData.deltaSets.length) return 0;\n    let deltaSet = varData.deltaSets[innerIndex];\n    let blendVector = this.getBlendVector(itemStore, outerIndex);\n    let netAdjustment = 0;\n    for (let master = 0; master < varData.regionIndexCount; master++) netAdjustment += deltaSet.deltas[master] * blendVector[master];\n    return netAdjustment;\n  }\n  getBlendVector(itemStore, outerIndex) {\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);\n    let normalizedCoords = this.normalizedCoords;\n    let blendVector = [];\n    // outer loop steps through master designs to be blended\n    for (let master = 0; master < varData.regionIndexCount; master++) {\n      let scalar = 1;\n      let regionIndex = varData.regionIndexes[master];\n      let axes = itemStore.variationRegionList.variationRegions[regionIndex];\n      // inner loop steps through axes in this region\n      for (let j = 0; j < axes.length; j++) {\n        let axis = axes[j];\n        let axisScalar;\n        // compute the scalar contribution of this axis\n        // ignore invalid ranges\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;else if (axis.peakCoord === 0) axisScalar = 1;else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;else {\n          if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);\n        }\n        // take product of all the axis scalars\n        scalar *= axisScalar;\n      }\n      blendVector[master] = scalar;\n    }\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  }\n}\nconst $7768c4d2aa7d03a3$var$resolved = Promise.resolve();\nclass $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {\n  constructor(font) {\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {};\n    // always include the missing glyph\n    this.includeGlyph(0);\n  }\n  includeGlyph(glyph) {\n    if (typeof glyph === 'object') glyph = glyph.id;\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n    return this.mapping[glyph];\n  }\n  encodeStream() {\n    let s = new $5OpyM$restructure.EncodeStream();\n    $7768c4d2aa7d03a3$var$resolved.then(() => {\n      this.encode(s);\n      return s.end();\n    });\n    return s;\n  }\n}\n\n// Flags for simple glyphs\nconst $681deff774310865$var$ON_CURVE = 1;\nconst $681deff774310865$var$X_SHORT_VECTOR = 2;\nconst $681deff774310865$var$Y_SHORT_VECTOR = 4;\nconst $681deff774310865$var$REPEAT = 8;\nconst $681deff774310865$var$SAME_X = 16;\nconst $681deff774310865$var$SAME_Y = 32;\nclass $681deff774310865$var$Point {\n  static size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  }\n  static encode(stream, value) {\n    if (value >= 0 && value <= 255) stream.writeUInt8(value);else stream.writeInt16BE(value);\n  }\n}\nlet $681deff774310865$var$Glyf = new $5OpyM$restructure.Struct({\n  numberOfContours: $5OpyM$restructure.int16,\n  xMin: $5OpyM$restructure.int16,\n  yMin: $5OpyM$restructure.int16,\n  xMax: $5OpyM$restructure.int16,\n  yMax: $5OpyM$restructure.int16,\n  endPtsOfContours: new $5OpyM$restructure.Array($5OpyM$restructure.uint16, 'numberOfContours'),\n  instructions: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, $5OpyM$restructure.uint16),\n  flags: new $5OpyM$restructure.Array($5OpyM$restructure.uint8, 0),\n  xPoints: new $5OpyM$restructure.Array($681deff774310865$var$Point, 0),\n  yPoints: new $5OpyM$restructure.Array($681deff774310865$var$Point, 0)\n});\nclass $681deff774310865$export$2e2bcd8739ae039 {\n  encodeSimple(path, instructions = []) {\n    let endPtsOfContours = [];\n    let xPoints = [];\n    let yPoints = [];\n    let flags = [];\n    let same = 0;\n    let lastX = 0,\n      lastY = 0,\n      lastFlag = 0;\n    let pointCount = 0;\n    for (let i = 0; i < path.commands.length; i++) {\n      let c = path.commands[i];\n      for (let j = 0; j < c.args.length; j += 2) {\n        let x = c.args[j];\n        let y = c.args[j + 1];\n        let flag = 0;\n        // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n        if (c.command === 'quadraticCurveTo' && j === 2) {\n          let next = path.commands[i + 1];\n          if (next && next.command === 'quadraticCurveTo') {\n            let midX = (lastX + next.args[0]) / 2;\n            let midY = (lastY + next.args[1]) / 2;\n            if (x === midX && y === midY) continue;\n          }\n        }\n        // All points except control points are on curve.\n        if (!(c.command === 'quadraticCurveTo' && j === 0)) flag |= $681deff774310865$var$ON_CURVE;\n        flag = this._encodePoint(x, lastX, xPoints, flag, $681deff774310865$var$X_SHORT_VECTOR, $681deff774310865$var$SAME_X);\n        flag = this._encodePoint(y, lastY, yPoints, flag, $681deff774310865$var$Y_SHORT_VECTOR, $681deff774310865$var$SAME_Y);\n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= $681deff774310865$var$REPEAT;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n          flags.push(flag);\n          lastFlag = flag;\n        }\n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n      if (c.command === 'closePath') endPtsOfContours.push(pointCount - 1);\n    }\n    // Close the path if the last command didn't already\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') endPtsOfContours.push(pointCount - 1);\n    let bbox = path.bbox;\n    let glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n    let size = $681deff774310865$var$Glyf.size(glyf);\n    let tail = 4 - size % 4;\n    let stream = new $5OpyM$restructure.EncodeStream(size + tail);\n    $681deff774310865$var$Glyf.encode(stream, glyf);\n    // Align to 4-byte length\n    if (tail !== 0) stream.fill(0, tail);\n    return stream.buffer;\n  }\n  _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    let diff = value - last;\n    if (value === last) flag |= sameFlag;else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n        if (diff < 0) diff = -diff;else flag |= sameFlag;\n      }\n      points.push(diff);\n    }\n    return flag;\n  }\n}\nvar $06433914835b8dd7$require$Buffer = $5OpyM$Buffer;\nclass $06433914835b8dd7$export$2e2bcd8739ae039 extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {\n  constructor(font) {\n    super(font);\n    this.glyphEncoder = new $681deff774310865$export$2e2bcd8739ae039();\n  }\n  _addGlyph(gid) {\n    let glyph = this.font.getGlyph(gid);\n    let glyf = glyph._decode();\n    // get the offset to the glyph from the loca table\n    let curOffset = this.font.loca.offsets[gid];\n    let nextOffset = this.font.loca.offsets[gid + 1];\n    let stream = this.font._getTableStream('glyf');\n    stream.pos += curOffset;\n    let buffer = stream.readBuffer(nextOffset - curOffset);\n    // if it is a compound glyph, include its components\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = $06433914835b8dd7$require$Buffer.from(buffer);\n      for (let component of glyf.components) {\n        gid = this.includeGlyph(component.glyphID);\n        buffer.writeUInt16BE(gid, component.pos);\n      }\n    } else if (glyf && this.font._variationProcessor)\n      // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  }\n  encode(stream) {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: [],\n      version: this.font.loca.version\n    };\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    };\n    // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n    let i = 0;\n    while (i < this.glyphs.length) this._addGlyph(this.glyphs[i++]);\n    let maxp = $5OpyM$clone(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n    this.loca.offsets.push(this.offset);\n    let head = $5OpyM$clone(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n    let hhea = $5OpyM$clone(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length;\n    // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n    // TODO: subset prep, cvt, fpgm?\n    $d5e01a2298150c9a$export$2e2bcd8739ae039.encode(stream, {\n      tables: {\n        head: head,\n        hhea: hhea,\n        loca: this.loca,\n        maxp: maxp,\n        'cvt ': this.font['cvt '],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm\n      }\n    });\n  }\n}\nvar $2d910ac31fc0baf3$require$Buffer = $5OpyM$Buffer;\nclass $2d910ac31fc0baf3$export$2e2bcd8739ae039 extends $7768c4d2aa7d03a3$export$2e2bcd8739ae039 {\n  constructor(font) {\n    super(font);\n    this.cff = this.font['CFF '];\n    if (!this.cff) throw new Error('Not a CFF Font');\n  }\n  subsetCharstrings() {\n    this.charstrings = [];\n    let gsubrs = {};\n    for (let gid of this.glyphs) {\n      this.charstrings.push(this.cff.getCharString(gid));\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n      for (let subr in glyph._usedGsubrs) gsubrs[subr] = true;\n    }\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  }\n  subsetSubrs(subrs, used) {\n    let res = [];\n    for (let i = 0; i < subrs.length; i++) {\n      let subr = subrs[i];\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else res.push($2d910ac31fc0baf3$require$Buffer.from([11])); // return\n    }\n    return res;\n  }\n  subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n    let used_fds = {};\n    let used_subrs = [];\n    let fd_select = {};\n    for (let gid of this.glyphs) {\n      let fd = this.cff.fdForGlyph(gid);\n      if (fd == null) continue;\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n        fd_select[fd] = topDict.FDArray.length - 1;\n      }\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(fd_select[fd]);\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n      for (let subr in glyph._usedSubrs) used_subrs[fd_select[fd]][subr] = true;\n    }\n    for (let i = 0; i < topDict.FDArray.length; i++) {\n      let dict = topDict.FDArray[i];\n      delete dict.FontName;\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = Object.assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n    return;\n  }\n  createCIDFontdict(topDict) {\n    let used_subrs = {};\n    for (let gid of this.glyphs) {\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n      for (let subr in glyph._usedSubrs) used_subrs[subr] = true;\n    }\n    let privateDict = Object.assign({}, this.cff.topDict.Private);\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    topDict.FDArray = [{\n      Private: privateDict\n    }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{\n        first: 0,\n        fd: 0\n      }],\n      sentinel: this.charstrings.length\n    };\n  }\n  addString(string) {\n    if (!string) return null;\n    if (!this.strings) this.strings = [];\n    this.strings.push(string);\n    return $276d3ff37a4362c9$export$2e2bcd8739ae039.length + this.strings.length - 1;\n  }\n  encode(stream) {\n    this.subsetCharstrings();\n    let charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{\n        first: 1,\n        nLeft: this.charstrings.length - 2\n      }]\n    };\n    let topDict = Object.assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n    for (let key of ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName']) topDict[key] = this.addString(this.cff.string(topDict[key]));\n    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];\n    topDict.CIDCount = this.charstrings.length;\n    if (this.cff.isCIDFont) this.subsetFontdict(topDict);else this.createCIDFontdict(topDict);\n    let top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: 4,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n    $3e41cd50e8921098$export$2e2bcd8739ae039.encode(stream, top);\n  }\n}\nvar _class;\nlet $7de97f725b51e05a$export$2e2bcd8739ae039 = (_class = class $7de97f725b51e05a$export$2e2bcd8739ae039 {\n  type = 'TTF';\n  static probe(buffer) {\n    let format = buffer.toString('ascii', 0, 4);\n    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n  }\n  constructor(stream, variationCoords = null) {\n    this.defaultLanguage = null;\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n    this._decodeDirectory();\n    // define properties for each table to lazily parse\n    for (let tag in this.directory.tables) {\n      let table = this.directory.tables[tag];\n      if ($60d88718e7e1fa97$export$2e2bcd8739ae039[tag] && table.length > 0) Object.defineProperty(this, tag, {\n        get: this._getTable.bind(this, table)\n      });\n    }\n  }\n  setDefaultLanguage(lang = null) {\n    this.defaultLanguage = lang;\n  }\n  _getTable(table) {\n    if (!(table.tag in this._tables)) try {\n      this._tables[table.tag] = this._decodeTable(table);\n    } catch (e) {\n      if ($8857867ee3ddfad5$export$bd5c5d8b8dcafd78) {\n        console.error(`Error decoding table ${table.tag}`);\n        console.error(e.stack);\n      }\n    }\n    return this._tables[table.tag];\n  }\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n    return null;\n  }\n  _decodeDirectory() {\n    return this.directory = $d5e01a2298150c9a$export$2e2bcd8739ae039.decode(this.stream, {\n      _startOffset: 0\n    });\n  }\n  _decodeTable(table) {\n    let pos = this.stream.pos;\n    let stream = this._getTableStream(table.tag);\n    let result = $60d88718e7e1fa97$export$2e2bcd8739ae039[table.tag].decode(stream, this, table.length);\n    this.stream.pos = pos;\n    return result;\n  }\n  /**\n  * Gets a string from the font's `name` table\n  * `lang` is a BCP-47 language code.\n  * @return {string}\n  */\n  getName(key, lang = this.defaultLanguage || $8857867ee3ddfad5$export$42940898df819940) {\n    let record = this.name && this.name.records[key];\n    if (record)\n      // Attempt to retrieve the entry, depending on which translation is available:\n      return record[lang] || record[this.defaultLanguage] || record[$8857867ee3ddfad5$export$42940898df819940] || record['en'] || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n      || null;\n    return null;\n  }\n  /**\n  * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n  * @type {string}\n  */\n  get postscriptName() {\n    return this.getName('postscriptName');\n  }\n  /**\n  * The font's full name, e.g. \"Helvetica Bold\"\n  * @type {string}\n  */\n  get fullName() {\n    return this.getName('fullName');\n  }\n  /**\n  * The font's family name, e.g. \"Helvetica\"\n  * @type {string}\n  */\n  get familyName() {\n    return this.getName('fontFamily');\n  }\n  /**\n  * The font's sub-family, e.g. \"Bold\".\n  * @type {string}\n  */\n  get subfamilyName() {\n    return this.getName('fontSubfamily');\n  }\n  /**\n  * The font's copyright information\n  * @type {string}\n  */\n  get copyright() {\n    return this.getName('copyright');\n  }\n  /**\n  * The font's version number\n  * @type {string}\n  */\n  get version() {\n    return this.getName('version');\n  }\n  /**\n  * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n  * @type {number}\n  */\n  get ascent() {\n    return this.hhea.ascent;\n  }\n  /**\n  * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n  * @type {number}\n  */\n  get descent() {\n    return this.hhea.descent;\n  }\n  /**\n  * The amount of space that should be included between lines\n  * @type {number}\n  */\n  get lineGap() {\n    return this.hhea.lineGap;\n  }\n  /**\n  * The offset from the normal underline position that should be used\n  * @type {number}\n  */\n  get underlinePosition() {\n    return this.post.underlinePosition;\n  }\n  /**\n  * The weight of the underline that should be used\n  * @type {number}\n  */\n  get underlineThickness() {\n    return this.post.underlineThickness;\n  }\n  /**\n  * If this is an italic font, the angle the cursor should be drawn at to match the font design\n  * @type {number}\n  */\n  get italicAngle() {\n    return this.post.italicAngle;\n  }\n  /**\n  * The height of capital letters above the baseline.\n  * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n  * @type {number}\n  */\n  get capHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.capHeight : this.ascent;\n  }\n  /**\n  * The height of lower case letters in the font.\n  * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n  * @type {number}\n  */\n  get xHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.xHeight : 0;\n  }\n  /**\n  * The number of glyphs in the font.\n  * @type {number}\n  */\n  get numGlyphs() {\n    return this.maxp.numGlyphs;\n  }\n  /**\n  * The size of the font’s internal coordinate grid\n  * @type {number}\n  */\n  get unitsPerEm() {\n    return this.head.unitsPerEm;\n  }\n  /**\n  * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n  * @type {BBox}\n  */\n  get bbox() {\n    return Object.freeze(new $fcb46e14b01ea01f$export$2e2bcd8739ae039(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n  }\n  get _cmapProcessor() {\n    return new $5d24cfe1a4cd83bb$export$2e2bcd8739ae039(this.cmap);\n  }\n  /**\n  * An array of all of the unicode code points supported by the font.\n  * @type {number[]}\n  */\n  get characterSet() {\n    return this._cmapProcessor.getCharacterSet();\n  }\n  /**\n  * Returns whether there is glyph in the font for the given unicode code point.\n  *\n  * @param {number} codePoint\n  * @return {boolean}\n  */\n  hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  }\n  /**\n  * Maps a single unicode code point to a Glyph object.\n  * Does not perform any advanced substitutions (there is no context to do so).\n  *\n  * @param {number} codePoint\n  * @return {Glyph}\n  */\n  glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  }\n  /**\n  * Returns an array of Glyph objects for the given string.\n  * This is only a one-to-one mapping from characters to glyphs.\n  * For most uses, you should use font.layout (described below), which\n  * provides a much more advanced mapping supporting AAT and OpenType shaping.\n  *\n  * @param {string} string\n  * @return {Glyph[]}\n  */\n  glyphsForString(string) {\n    let glyphs = [];\n    let len = string.length;\n    let idx = 0;\n    let last = -1;\n    let state = -1;\n    while (idx <= len) {\n      let code = 0;\n      let nextState = 0;\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          let next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;\n      } else idx++;\n      if (state === 0 && nextState === 1)\n        // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));else if (state === 0 && nextState === 0)\n        // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      last = code;\n      state = nextState;\n    }\n    return glyphs;\n  }\n  get _layoutEngine() {\n    return new $2df783177c3b5db5$export$2e2bcd8739ae039(this);\n  }\n  /**\n  * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n  *\n  * @param {string} string\n  * @param {string[]} [userFeatures]\n  * @param {string} [script]\n  * @param {string} [language]\n  * @param {string} [direction]\n  * @return {GlyphRun}\n  */\n  layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  }\n  /**\n  * Returns an array of strings that map to the given glyph id.\n  * @param {number} gid - glyph id\n  */\n  stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  }\n  /**\n  * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n  * (or mapped AAT tags) supported by the font.\n  * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n  * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n  *\n  * @type {string[]}\n  */\n  get availableFeatures() {\n    return this._layoutEngine.getAvailableFeatures();\n  }\n  getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  }\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) this._glyphs[glyph] = new $e20fdd09923e4c19$export$2e2bcd8739ae039(glyph, characters, this);else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) this._glyphs[glyph] = new $efcf21464e1e0f88$export$2e2bcd8739ae039(glyph, characters, this);\n    }\n    return this._glyphs[glyph] || null;\n  }\n  /**\n  * Returns a glyph object for the given glyph id.\n  * You can pass the array of code points this glyph represents for\n  * your use later, and it will be stored in the glyph object.\n  *\n  * @param {number} glyph\n  * @param {number[]} characters\n  * @return {Glyph}\n  */\n  getGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) this._glyphs[glyph] = new $df50792647a3d5cf$export$2e2bcd8739ae039(glyph, characters, this);else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new $729b375ce67e8a00$export$2e2bcd8739ae039(glyph, characters, this);else this._getBaseGlyph(glyph, characters);\n    }\n    return this._glyphs[glyph] || null;\n  }\n  /**\n  * Returns a Subset for this font.\n  * @return {Subset}\n  */\n  createSubset() {\n    if (this.directory.tables['CFF ']) return new $2d910ac31fc0baf3$export$2e2bcd8739ae039(this);\n    return new $06433914835b8dd7$export$2e2bcd8739ae039(this);\n  }\n  /**\n  * Returns an object describing the available variation axes\n  * that this font supports. Keys are setting tags, and values\n  * contain the axis name, range, and default value.\n  *\n  * @type {object}\n  */\n  get variationAxes() {\n    let res = {};\n    if (!this.fvar) return res;\n    for (let axis of this.fvar.axis) res[axis.axisTag.trim()] = {\n      name: axis.name.en,\n      min: axis.minValue,\n      default: axis.defaultValue,\n      max: axis.maxValue\n    };\n    return res;\n  }\n  /**\n  * Returns an object describing the named variation instances\n  * that the font designer has specified. Keys are variation names\n  * and values are the variation settings for this instance.\n  *\n  * @type {object}\n  */\n  get namedVariations() {\n    let res = {};\n    if (!this.fvar) return res;\n    for (let instance of this.fvar.instance) {\n      let settings = {};\n      for (let i = 0; i < this.fvar.axis.length; i++) {\n        let axis = this.fvar.axis[i];\n        settings[axis.axisTag.trim()] = instance.coord[i];\n      }\n      res[instance.name.en] = settings;\n    }\n    return res;\n  }\n  /**\n  * Returns a new font with the given variation settings applied.\n  * Settings can either be an instance name, or an object containing\n  * variation tags as specified by the `variationAxes` property.\n  *\n  * @param {object} settings\n  * @return {TTFFont}\n  */\n  getVariation(settings) {\n    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n    if (typeof settings === 'string') settings = this.namedVariations[settings];\n    if (typeof settings !== 'object') throw new Error('Variation settings must be either a variation name or settings object.');\n    // normalize the coordinates\n    let coords = this.fvar.axis.map((axis, i) => {\n      let axisTag = axis.axisTag.trim();\n      if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));else return axis.defaultValue;\n    });\n    let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n    let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream, coords);\n    font._tables = this._tables;\n    return font;\n  }\n  get _variationProcessor() {\n    if (!this.fvar) return null;\n    let variationCoords = this.variationCoords;\n    // Ignore if no variation coords and not CFF2\n    if (!variationCoords && !this.CFF2) return null;\n    if (!variationCoords) variationCoords = this.fvar.axis.map(axis => axis.defaultValue);\n    return new $62b2d77b45b438f3$export$2e2bcd8739ae039(this, variationCoords);\n  }\n  // Standardized format plugin API\n  getFont(name) {\n    return this.getVariation(name);\n  }\n}, $5OpyM$applyDecoratedDescriptor(_class.prototype, \"bbox\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"bbox\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"_cmapProcessor\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"_cmapProcessor\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"characterSet\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"characterSet\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"_layoutEngine\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"_layoutEngine\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"variationAxes\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"variationAxes\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"namedVariations\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"namedVariations\"), _class.prototype), $5OpyM$applyDecoratedDescriptor(_class.prototype, \"_variationProcessor\", [$df9bc573962369ff$export$69a3209f1a06c04d], Object.getOwnPropertyDescriptor(_class.prototype, \"_variationProcessor\"), _class.prototype), _class);\nlet $ab5f467accf33238$var$WOFFDirectoryEntry = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  offset: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, 'void', {\n    type: 'global'\n  }),\n  compLength: $5OpyM$restructure.uint32,\n  length: $5OpyM$restructure.uint32,\n  origChecksum: $5OpyM$restructure.uint32\n});\nlet $ab5f467accf33238$var$WOFFDirectory = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  flavor: $5OpyM$restructure.uint32,\n  length: $5OpyM$restructure.uint32,\n  numTables: $5OpyM$restructure.uint16,\n  reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n  totalSfntSize: $5OpyM$restructure.uint32,\n  majorVersion: $5OpyM$restructure.uint16,\n  minorVersion: $5OpyM$restructure.uint16,\n  metaOffset: $5OpyM$restructure.uint32,\n  metaLength: $5OpyM$restructure.uint32,\n  metaOrigLength: $5OpyM$restructure.uint32,\n  privOffset: $5OpyM$restructure.uint32,\n  privLength: $5OpyM$restructure.uint32,\n  tables: new $5OpyM$restructure.Array($ab5f467accf33238$var$WOFFDirectoryEntry, 'numTables')\n});\n$ab5f467accf33238$var$WOFFDirectory.process = function () {\n  let tables = {};\n  for (let table of this.tables) tables[table.tag] = table;\n  this.tables = tables;\n};\nvar $ab5f467accf33238$export$2e2bcd8739ae039 = $ab5f467accf33238$var$WOFFDirectory;\nvar $fce99fef0398d8c8$require$Buffer = $5OpyM$Buffer;\nclass $fce99fef0398d8c8$export$2e2bcd8739ae039 extends $7de97f725b51e05a$export$2e2bcd8739ae039 {\n  type = 'WOFF';\n  static probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOFF';\n  }\n  _decodeDirectory() {\n    this.directory = $ab5f467accf33238$export$2e2bcd8739ae039.decode(this.stream, {\n      _startOffset: 0\n    });\n  }\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n        let outBuffer = $fce99fef0398d8c8$require$Buffer.alloc(table.length);\n        let buf = $5OpyM$tinyinflate(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new $5OpyM$restructure.DecodeStream(buf);\n      } else return this.stream;\n    }\n    return null;\n  }\n}\nclass $f6f1feff1ba0de68$export$2e2bcd8739ae039 extends $e20fdd09923e4c19$export$2e2bcd8739ae039 {\n  type = 'WOFF2';\n  _decode() {\n    // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n    return this._font._transformedGlyphs[this.id];\n  }\n  _getCBox() {\n    return this.path.bbox;\n  }\n}\nconst $4965cf368c868bf6$var$Base128 = {\n  decode(stream) {\n    let result = 0;\n    let iterable = [0, 1, 2, 3, 4];\n    for (let j = 0; j < iterable.length; j++) {\n      let i = iterable[j];\n      let code = stream.readUInt8();\n      // If any of the top seven bits are set then we're about to overflow.\n      if (result & 0xe0000000) throw new Error('Overflow');\n      result = result << 7 | code & 0x7f;\n      if ((code & 0x80) === 0) return result;\n    }\n    throw new Error('Bad base 128 number');\n  }\n};\nlet $4965cf368c868bf6$var$knownTags = ['cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ', 'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp', 'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF', 'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL', 'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc', 'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx', 'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'];\nlet $4965cf368c868bf6$var$WOFF2DirectoryEntry = new $5OpyM$restructure.Struct({\n  flags: $5OpyM$restructure.uint8,\n  customTag: new $5OpyM$restructure.Optional(new $5OpyM$restructure.String(4), t => (t.flags & 0x3f) === 0x3f),\n  tag: t => t.customTag || $4965cf368c868bf6$var$knownTags[t.flags & 0x3f],\n  length: $4965cf368c868bf6$var$Base128,\n  transformVersion: t => t.flags >>> 6 & 0x03,\n  transformed: t => t.tag === 'glyf' || t.tag === 'loca' ? t.transformVersion === 0 : t.transformVersion !== 0,\n  transformLength: new $5OpyM$restructure.Optional($4965cf368c868bf6$var$Base128, t => t.transformed)\n});\nlet $4965cf368c868bf6$var$WOFF2Directory = new $5OpyM$restructure.Struct({\n  tag: new $5OpyM$restructure.String(4),\n  flavor: $5OpyM$restructure.uint32,\n  length: $5OpyM$restructure.uint32,\n  numTables: $5OpyM$restructure.uint16,\n  reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint16),\n  totalSfntSize: $5OpyM$restructure.uint32,\n  totalCompressedSize: $5OpyM$restructure.uint32,\n  majorVersion: $5OpyM$restructure.uint16,\n  minorVersion: $5OpyM$restructure.uint16,\n  metaOffset: $5OpyM$restructure.uint32,\n  metaLength: $5OpyM$restructure.uint32,\n  metaOrigLength: $5OpyM$restructure.uint32,\n  privOffset: $5OpyM$restructure.uint32,\n  privLength: $5OpyM$restructure.uint32,\n  tables: new $5OpyM$restructure.Array($4965cf368c868bf6$var$WOFF2DirectoryEntry, 'numTables')\n});\n$4965cf368c868bf6$var$WOFF2Directory.process = function () {\n  let tables = {};\n  for (let i = 0; i < this.tables.length; i++) {\n    let table = this.tables[i];\n    tables[table.tag] = table;\n  }\n  return this.tables = tables;\n};\nvar $4965cf368c868bf6$export$2e2bcd8739ae039 = $4965cf368c868bf6$var$WOFF2Directory;\nvar $b6deb9db8685274b$require$Buffer = $5OpyM$Buffer;\nclass $b6deb9db8685274b$export$2e2bcd8739ae039 extends $7de97f725b51e05a$export$2e2bcd8739ae039 {\n  type = 'WOFF2';\n  static probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOF2';\n  }\n  _decodeDirectory() {\n    this.directory = $4965cf368c868bf6$export$2e2bcd8739ae039.decode(this.stream);\n    this._dataPos = this.stream.pos;\n  }\n  _decompress() {\n    // decompress data and setup table offsets if we haven't already\n    if (!this._decompressed) {\n      this.stream.pos = this._dataPos;\n      let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n      let decompressedSize = 0;\n      for (let tag in this.directory.tables) {\n        let entry = this.directory.tables[tag];\n        entry.offset = decompressedSize;\n        decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;\n      }\n      let decompressed = $5OpyM$brotlidecompressjs(buffer, decompressedSize);\n      if (!decompressed) throw new Error('Error decoding compressed data in WOFF2');\n      this.stream = new $5OpyM$restructure.DecodeStream($b6deb9db8685274b$require$Buffer.from(decompressed));\n      this._decompressed = true;\n    }\n  }\n  _decodeTable(table) {\n    this._decompress();\n    return super._decodeTable(table);\n  }\n  // Override this method to get a glyph and return our\n  // custom subclass if there is a glyf table.\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n        if (!this._transformedGlyphs) this._transformGlyfTable();\n        return this._glyphs[glyph] = new $f6f1feff1ba0de68$export$2e2bcd8739ae039(glyph, characters, this);\n      } else return super._getBaseGlyph(glyph, characters);\n    }\n  }\n  _transformGlyfTable() {\n    this._decompress();\n    this.stream.pos = this.directory.tables.glyf.offset;\n    let table = $b6deb9db8685274b$var$GlyfTable.decode(this.stream);\n    let glyphs = [];\n    for (let index = 0; index < table.numGlyphs; index++) {\n      let glyph = {};\n      let nContours = table.nContours.readInt16BE();\n      glyph.numberOfContours = nContours;\n      if (nContours > 0) {\n        let nPoints = [];\n        let totalPoints = 0;\n        for (let i = 0; i < nContours; i++) {\n          let r = $b6deb9db8685274b$var$read255UInt16(table.nPoints);\n          totalPoints += r;\n          nPoints.push(totalPoints);\n        }\n        glyph.points = $b6deb9db8685274b$var$decodeTriplet(table.flags, table.glyphs, totalPoints);\n        for (let i1 = 0; i1 < nContours; i1++) glyph.points[nPoints[i1] - 1].endContour = true;\n        var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);\n      } else if (nContours < 0) {\n        let haveInstructions = $e20fdd09923e4c19$export$2e2bcd8739ae039.prototype._decodeComposite.call({\n          _font: this\n        }, glyph, table.composites);\n        if (haveInstructions) var instructionSize = $b6deb9db8685274b$var$read255UInt16(table.glyphs);\n      }\n      glyphs.push(glyph);\n    }\n    this._transformedGlyphs = glyphs;\n  }\n}\n// Special class that accepts a length and returns a sub-stream for that data\nclass $b6deb9db8685274b$var$Substream {\n  constructor(length) {\n    this.length = length;\n    this._buf = new $5OpyM$restructure.Buffer(length);\n  }\n  decode(stream, parent) {\n    return new $5OpyM$restructure.DecodeStream(this._buf.decode(stream, parent));\n  }\n}\n// This struct represents the entire glyf table\nlet $b6deb9db8685274b$var$GlyfTable = new $5OpyM$restructure.Struct({\n  version: $5OpyM$restructure.uint32,\n  numGlyphs: $5OpyM$restructure.uint16,\n  indexFormat: $5OpyM$restructure.uint16,\n  nContourStreamSize: $5OpyM$restructure.uint32,\n  nPointsStreamSize: $5OpyM$restructure.uint32,\n  flagStreamSize: $5OpyM$restructure.uint32,\n  glyphStreamSize: $5OpyM$restructure.uint32,\n  compositeStreamSize: $5OpyM$restructure.uint32,\n  bboxStreamSize: $5OpyM$restructure.uint32,\n  instructionStreamSize: $5OpyM$restructure.uint32,\n  nContours: new $b6deb9db8685274b$var$Substream('nContourStreamSize'),\n  nPoints: new $b6deb9db8685274b$var$Substream('nPointsStreamSize'),\n  flags: new $b6deb9db8685274b$var$Substream('flagStreamSize'),\n  glyphs: new $b6deb9db8685274b$var$Substream('glyphStreamSize'),\n  composites: new $b6deb9db8685274b$var$Substream('compositeStreamSize'),\n  bboxes: new $b6deb9db8685274b$var$Substream('bboxStreamSize'),\n  instructions: new $b6deb9db8685274b$var$Substream('instructionStreamSize')\n});\nconst $b6deb9db8685274b$var$WORD_CODE = 253;\nconst $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2 = 254;\nconst $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1 = 255;\nconst $b6deb9db8685274b$var$LOWEST_U_CODE = 253;\nfunction $b6deb9db8685274b$var$read255UInt16(stream) {\n  let code = stream.readUInt8();\n  if (code === $b6deb9db8685274b$var$WORD_CODE) return stream.readUInt16BE();\n  if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1) return stream.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE;\n  if (code === $b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2) return stream.readUInt8() + $b6deb9db8685274b$var$LOWEST_U_CODE * 2;\n  return code;\n}\nfunction $b6deb9db8685274b$var$withSign(flag, baseval) {\n  return flag & 1 ? baseval : -baseval;\n}\nfunction $b6deb9db8685274b$var$decodeTriplet(flags, glyphs, nPoints) {\n  let y;\n  let x = y = 0;\n  let res = [];\n  for (let i = 0; i < nPoints; i++) {\n    let dx = 0,\n      dy = 0;\n    let flag = flags.readUInt8();\n    let onCurve = !(flag >> 7);\n    flag &= 0x7f;\n    if (flag < 10) {\n      dx = 0;\n      dy = $b6deb9db8685274b$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n    } else if (flag < 20) {\n      dx = $b6deb9db8685274b$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());\n      dy = 0;\n    } else if (flag < 84) {\n      var b0 = flag - 20;\n      var b1 = glyphs.readUInt8();\n      dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n      dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n    } else if (flag < 120) {\n      var b0 = flag - 84;\n      dx = $b6deb9db8685274b$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());\n      dy = $b6deb9db8685274b$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());\n    } else if (flag < 124) {\n      var b1 = glyphs.readUInt8();\n      let b2 = glyphs.readUInt8();\n      dx = $b6deb9db8685274b$var$withSign(flag, (b1 << 4) + (b2 >> 4));\n      dy = $b6deb9db8685274b$var$withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n    } else {\n      dx = $b6deb9db8685274b$var$withSign(flag, glyphs.readUInt16BE());\n      dy = $b6deb9db8685274b$var$withSign(flag >> 1, glyphs.readUInt16BE());\n    }\n    x += dx;\n    y += dy;\n    res.push(new $e20fdd09923e4c19$export$baf26146a414f24a(onCurve, false, x, y));\n  }\n  return res;\n}\nvar $313c698c6d2649a4$require$Buffer = $5OpyM$Buffer;\nlet $313c698c6d2649a4$var$TTCHeader = new $5OpyM$restructure.VersionedStruct($5OpyM$restructure.uint32, {\n  0x00010000: {\n    numFonts: $5OpyM$restructure.uint32,\n    offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 'numFonts')\n  },\n  0x00020000: {\n    numFonts: $5OpyM$restructure.uint32,\n    offsets: new $5OpyM$restructure.Array($5OpyM$restructure.uint32, 'numFonts'),\n    dsigTag: $5OpyM$restructure.uint32,\n    dsigLength: $5OpyM$restructure.uint32,\n    dsigOffset: $5OpyM$restructure.uint32\n  }\n});\nclass $313c698c6d2649a4$export$2e2bcd8739ae039 {\n  type = 'TTC';\n  static probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'ttcf';\n  }\n  constructor(stream) {\n    this.stream = stream;\n    if (stream.readString(4) !== 'ttcf') throw new Error('Not a TrueType collection');\n    this.header = $313c698c6d2649a4$var$TTCHeader.decode(stream);\n  }\n  getFont(name) {\n    for (let offset of this.header.offsets) {\n      let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream);\n      if ($313c698c6d2649a4$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name) return font;\n    }\n    return null;\n  }\n  get fonts() {\n    let fonts = [];\n    for (let offset of this.header.offsets) {\n      let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream));\n    }\n    return fonts;\n  }\n}\nvar $7db119589c227f03$require$Buffer = $5OpyM$Buffer;\nlet $7db119589c227f03$var$DFontName = new $5OpyM$restructure.String($5OpyM$restructure.uint8);\nlet $7db119589c227f03$var$DFontData = new $5OpyM$restructure.Struct({\n  len: $5OpyM$restructure.uint32,\n  buf: new $5OpyM$restructure.Buffer('len')\n});\nlet $7db119589c227f03$var$Ref = new $5OpyM$restructure.Struct({\n  id: $5OpyM$restructure.uint16,\n  nameOffset: $5OpyM$restructure.int16,\n  attr: $5OpyM$restructure.uint8,\n  dataOffset: $5OpyM$restructure.uint24,\n  handle: $5OpyM$restructure.uint32\n});\nlet $7db119589c227f03$var$Type = new $5OpyM$restructure.Struct({\n  name: new $5OpyM$restructure.String(4),\n  maxTypeIndex: $5OpyM$restructure.uint16,\n  refList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, new $5OpyM$restructure.Array($7db119589c227f03$var$Ref, t => t.maxTypeIndex + 1), {\n    type: 'parent'\n  })\n});\nlet $7db119589c227f03$var$TypeList = new $5OpyM$restructure.Struct({\n  length: $5OpyM$restructure.uint16,\n  types: new $5OpyM$restructure.Array($7db119589c227f03$var$Type, t => t.length + 1)\n});\nlet $7db119589c227f03$var$DFontMap = new $5OpyM$restructure.Struct({\n  reserved: new $5OpyM$restructure.Reserved($5OpyM$restructure.uint8, 24),\n  typeList: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, $7db119589c227f03$var$TypeList),\n  nameListOffset: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint16, 'void')\n});\nlet $7db119589c227f03$var$DFontHeader = new $5OpyM$restructure.Struct({\n  dataOffset: $5OpyM$restructure.uint32,\n  map: new $5OpyM$restructure.Pointer($5OpyM$restructure.uint32, $7db119589c227f03$var$DFontMap),\n  dataLength: $5OpyM$restructure.uint32,\n  mapLength: $5OpyM$restructure.uint32\n});\nclass $7db119589c227f03$export$2e2bcd8739ae039 {\n  type = 'DFont';\n  static probe(buffer) {\n    let stream = new $5OpyM$restructure.DecodeStream(buffer);\n    try {\n      var header = $7db119589c227f03$var$DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n    for (let type of header.map.typeList.types) {\n      if (type.name === 'sfnt') return true;\n    }\n    return false;\n  }\n  constructor(stream) {\n    this.stream = stream;\n    this.header = $7db119589c227f03$var$DFontHeader.decode(this.stream);\n    for (let type of this.header.map.typeList.types) {\n      for (let ref of type.refList) if (ref.nameOffset >= 0) {\n        this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n        ref.name = $7db119589c227f03$var$DFontName.decode(this.stream);\n      } else ref.name = null;\n      if (type.name === 'sfnt') this.sfnt = type;\n    }\n  }\n  getFont(name) {\n    if (!this.sfnt) return null;\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer.slice(pos));\n      let font = new $7de97f725b51e05a$export$2e2bcd8739ae039(stream);\n      if ($7db119589c227f03$require$Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name) || font.postscriptName === name) return font;\n    }\n    return null;\n  }\n  get fonts() {\n    let fonts = [];\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new $5OpyM$restructure.DecodeStream(this.stream.buffer.slice(pos));\n      fonts.push(new $7de97f725b51e05a$export$2e2bcd8739ae039(stream));\n    }\n    return fonts;\n  }\n}\n\n// Register font formats\n$8857867ee3ddfad5$export$36b2f24e97d43be($7de97f725b51e05a$export$2e2bcd8739ae039);\n$8857867ee3ddfad5$export$36b2f24e97d43be($fce99fef0398d8c8$export$2e2bcd8739ae039);\n$8857867ee3ddfad5$export$36b2f24e97d43be($b6deb9db8685274b$export$2e2bcd8739ae039);\n$8857867ee3ddfad5$export$36b2f24e97d43be($313c698c6d2649a4$export$2e2bcd8739ae039);\n$8857867ee3ddfad5$export$36b2f24e97d43be($7db119589c227f03$export$2e2bcd8739ae039);\nvar\n// Legacy default export for backward compatibility.\n$cf838c15c8b009ba$export$2e2bcd8739ae039 = {\n  registerFormat: $8857867ee3ddfad5$export$36b2f24e97d43be,\n  openSync: $8857867ee3ddfad5$export$fa5499edb1ab414a,\n  open: $8857867ee3ddfad5$export$3ce6949f20cea765,\n  create: $8857867ee3ddfad5$export$185802fd694ee1f5,\n  defaultLanguage: $8857867ee3ddfad5$export$42940898df819940,\n  setDefaultLanguage: $8857867ee3ddfad5$export$5157e7780d44cc36\n};\nexport { $cf838c15c8b009ba$export$2e2bcd8739ae039 as default, $8857867ee3ddfad5$export$bd5c5d8b8dcafd78 as logErrors, $8857867ee3ddfad5$export$36b2f24e97d43be as registerFormat, $8857867ee3ddfad5$export$fa5499edb1ab414a as openSync, $8857867ee3ddfad5$export$185802fd694ee1f5 as create, $8857867ee3ddfad5$export$3ce6949f20cea765 as open, $8857867ee3ddfad5$export$42940898df819940 as defaultLanguage, $8857867ee3ddfad5$export$5157e7780d44cc36 as setDefaultLanguage };","map":{"version":3,"names":["$8857867ee3ddfad5$export$bd5c5d8b8dcafd78","$8857867ee3ddfad5$var$formats","$8857867ee3ddfad5$export$36b2f24e97d43be","format","push","$8857867ee3ddfad5$export$fa5499edb1ab414a","filename","postscriptName","buffer","$5OpyM$readFileSync","$8857867ee3ddfad5$export$185802fd694ee1f5","$8857867ee3ddfad5$export$3ce6949f20cea765","callback","$5OpyM$readFile","err","font","e","i","length","probe","$5OpyM$restructure","DecodeStream","getFont","Error","$8857867ee3ddfad5$export$42940898df819940","$8857867ee3ddfad5$export$5157e7780d44cc36","lang","$df9bc573962369ff$export$69a3209f1a06c04d","target","key1","descriptor","get","value","call","Object","defineProperty","fn","Map","memoized","args","key","has","result","apply","set","$9aad45a64cf8e4b5$var$SubHeader","Struct","firstCode","uint16","entryCount","idDelta","int16","idRangeOffset","$9aad45a64cf8e4b5$var$CmapGroup","startCharCode","uint32","endCharCode","glyphID","$9aad45a64cf8e4b5$var$UnicodeValueRange","startUnicodeValue","uint24","additionalCount","uint8","$9aad45a64cf8e4b5$var$UVSMapping","unicodeValue","$9aad45a64cf8e4b5$var$DefaultUVS","Array","$9aad45a64cf8e4b5$var$NonDefaultUVS","$9aad45a64cf8e4b5$var$VarSelectorRecord","varSelector","defaultUVS","Pointer","type","nonDefaultUVS","$9aad45a64cf8e4b5$var$CmapSubtable","VersionedStruct","language","codeMap","LazyArray","subHeaderKeys","subHeaderCount","t","Math","max","subHeaders","glyphIndexArray","segCountX2","segCount","searchRange","entrySelector","rangeShift","endCode","reservedPad","Reserved","startCode","_currentOffset","glyphIndices","reserved","is32","nGroups","groups","numRecords","varSelectors","$9aad45a64cf8e4b5$var$CmapEntry","platformID","encodingID","table","lazy","$9aad45a64cf8e4b5$export$2e2bcd8739ae039","version","numSubtables","tables","$b41847595480ce3a$export$2e2bcd8739ae039","int32","revision","checkSumAdjustment","magicNumber","flags","unitsPerEm","created","modified","xMin","yMin","xMax","yMax","macStyle","Bitfield","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","$5fda302e2516d0c7$export$2e2bcd8739ae039","ascent","descent","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","numberOfMetrics","$28788c978325a3e1$var$HmtxEntry","advance","bearing","$28788c978325a3e1$export$2e2bcd8739ae039","metrics","parent","hhea","bearings","maxp","numGlyphs","$9e68d972c1fae2a9$export$2e2bcd8739ae039","maxPoints","maxContours","maxComponentPoints","maxComponentContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","$111d7d948974b54a$export$badc544e0651b6b1","languageID","$111d7d948974b54a$export$479e671907f486d1","$111d7d948974b54a$export$6fef87b7618bdf0b","$111d7d948974b54a$export$2092376fd002e13","$866b9b7dd32d7242$var$NameRecord","nameID","string","String","relativeTo","ctx","stringOffset","allowNull","$866b9b7dd32d7242$var$LangTagRecord","tag","$866b9b7dd32d7242$var$NameTable","count","records","langTagCount","langTags","$866b9b7dd32d7242$export$2e2bcd8739ae039","$866b9b7dd32d7242$var$NAMES","process","stream","record","obj","preEncode","isArray","val","indexOf","$866b9b7dd32d7242$require$Buffer","byteLength","en","size","$268023eac606db57$var$OS2","header","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulCharRange","vendorID","fsSelection","usFirstCharIndex","usLastCharIndex","typoAscender","typoDescender","typoLineGap","winAscent","winDescent","codePageRange","xHeight","capHeight","defaultChar","breakChar","maxContent","usLowerOpticalPointSize","usUpperOpticalPointSize","$268023eac606db57$var$versions","versions","$268023eac606db57$export$2e2bcd8739ae039","$5287343c85bea17e$export$2e2bcd8739ae039","fixed32","italicAngle","underlinePosition","underlineThickness","isFixedPitch","minMemType42","maxMemType42","minMemType1","maxMemType1","numberOfGlyphs","glyphNameIndex","names","offsets","map","$5768e6ef8b1a512a$export$2e2bcd8739ae039","controlValues","$6f2fae1f8d2b4b41$export$2e2bcd8739ae039","instructions","$cae48a5e791773ec$var$loca","$cae48a5e791773ec$export$2e2bcd8739ae039","$7b12cfca10f7f884$export$2e2bcd8739ae039","controlValueProgram","$06e9f2dae5795013$export$2e2bcd8739ae039","Buffer","$6333f51d822e64a1$export$2e2bcd8739ae039","constructor","getCFFVersion","hdrSize","decode","readUInt32BE","readUInt16BE","offSize","readUInt8","offsetType","pos","ret","startPos","start","end","offset","arr","item","encode","writeUInt16BE","sizes","s","writeUInt8","item1","$2e2b3208cd32b1af$var$FLOAT_EOF","$2e2b3208cd32b1af$var$FLOAT_LOOKUP","$2e2b3208cd32b1af$var$FLOAT_ENCODE_LOOKUP","$2e2b3208cd32b1af$export$2e2bcd8739ae039","readInt16BE","readInt32BE","str","b","n1","n2","parseFloat","forceLarge","ceil","Number","writeInt32BE","c1","c2","writeInt16BE","$1694c4b242cd1a66$export$2e2bcd8739ae039","ops","fields","field","decodeOperands","operands","op","encodeOperands","defineProperties","_startOffset","$5OpyM$PropertyDescriptor","dict","includePointers","pointerSize","startOffset","len","k","$5OpyM$deepequal","pointers","pointerOffset","op1","ptr","$6631a7581d654814$export$2e2bcd8739ae039","options","$6631a7581d654814$var$Ptr","valueOf","$94c2c7ed7c236891$var$CFFBlendOp","numBlends","pop","$94c2c7ed7c236891$export$2e2bcd8739ae039","$276d3ff37a4362c9$export$2e2bcd8739ae039","$50148a3b88f16e26$export$dee0027060fa13bd","$50148a3b88f16e26$export$4f58f497e14a53c3","$a5fab60a6eadb8ed$export$c33b50336c234f16","$a5fab60a6eadb8ed$export$3ed0f9e1fee8d489","$a5fab60a6eadb8ed$export$dc28be11139d4120","$401800e36a580e62$var$LangSysTable","reqFeatureIndex","featureCount","featureIndexes","$401800e36a580e62$var$LangSysRecord","langSys","$401800e36a580e62$var$Script","defaultLangSys","langSysRecords","$401800e36a580e62$var$ScriptRecord","script","$401800e36a580e62$export$3e15fc05ce864229","$401800e36a580e62$var$FeatureParams","$401800e36a580e62$export$6e91cf7616333d5","featureParams","lookupCount","lookupListIndexes","$401800e36a580e62$var$FeatureRecord","feature","$401800e36a580e62$export$aa18130def4b6cb4","$401800e36a580e62$var$LookupFlags","markAttachmentType","$401800e36a580e62$export$df0008c6ff2da22a","SubTable","Lookup","lookupType","subTableCount","subTables","markFilteringSet","Optional","useMarkFilteringSet","$401800e36a580e62$var$RangeRecord","startCoverageIndex","$401800e36a580e62$export$17608c3f81a6111","glyphCount","glyphs","rangeCount","rangeRecords","$401800e36a580e62$var$ClassRangeRecord","class","$401800e36a580e62$export$843d551fbbafef71","startGlyph","classValueArray","classRangeCount","classRangeRecord","$401800e36a580e62$export$8215d14a63d9fb10","a","deltaFormat","$401800e36a580e62$var$LookupRecord","sequenceIndex","lookupListIndex","$401800e36a580e62$var$Rule","input","lookupRecords","$401800e36a580e62$var$RuleSet","$401800e36a580e62$var$ClassRule","classes","$401800e36a580e62$var$ClassSet","$401800e36a580e62$export$841858b892ce1f4c","coverage","ruleSetCount","ruleSets","classDef","classSetCnt","classSet","coverages","$401800e36a580e62$var$ChainRule","backtrackGlyphCount","backtrack","inputGlyphCount","lookaheadGlyphCount","lookahead","$401800e36a580e62$var$ChainRuleSet","$401800e36a580e62$export$5e6d09e6861162f6","chainCount","chainRuleSets","backtrackClassDef","inputClassDef","lookaheadClassDef","chainClassSet","backtrackCoverage","inputCoverage","lookaheadCoverage","$421a2456cdbaa0d8$var$F2DOT14","Fixed","$421a2456cdbaa0d8$var$RegionAxisCoordinates","startCoord","peakCoord","endCoord","$421a2456cdbaa0d8$var$VariationRegionList","axisCount","regionCount","variationRegions","$421a2456cdbaa0d8$var$DeltaSet","shortDeltas","shortDeltaCount","regionDeltas","int8","regionIndexCount","deltas","concat","$421a2456cdbaa0d8$var$ItemVariationData","itemCount","regionIndexes","deltaSets","$421a2456cdbaa0d8$export$fe1b122a2710f241","variationRegionList","variationDataCount","itemVariationData","$421a2456cdbaa0d8$var$ConditionTable","axisIndex","filterRangeMinValue","filterRangeMaxValue","$421a2456cdbaa0d8$var$ConditionSet","conditionCount","conditionTable","$421a2456cdbaa0d8$var$FeatureTableSubstitutionRecord","featureIndex","alternateFeatureTable","$421a2456cdbaa0d8$var$FeatureTableSubstitution","substitutionCount","substitutions","$421a2456cdbaa0d8$var$FeatureVariationRecord","conditionSet","featureTableSubstitution","$421a2456cdbaa0d8$export$441b70b7971dd419","majorVersion","minorVersion","featureVariationRecordCount","featureVariationRecords","$3e41cd50e8921098$var$PredefinedOp","predefinedOps","index","$3e41cd50e8921098$var$CFFEncodingVersion","$3e41cd50e8921098$var$Range1","first","nLeft","$3e41cd50e8921098$var$Range2","$3e41cd50e8921098$var$CFFCustomEncoding","nCodes","codes","nRanges","ranges","$3e41cd50e8921098$var$CFFEncoding","$3e41cd50e8921098$var$RangeArray","$5OpyM$resolveLength","res","range","$3e41cd50e8921098$var$CFFCustomCharset","CharStrings","$3e41cd50e8921098$var$CFFCharset","$3e41cd50e8921098$var$FDRange3","fd","$3e41cd50e8921098$var$FDRange4","$3e41cd50e8921098$var$FDSelect","fds","sentinel","$3e41cd50e8921098$var$ptr","$3e41cd50e8921098$var$CFFPrivateOp","$3e41cd50e8921098$var$FontDict","$3e41cd50e8921098$var$CFFTopDict","$3e41cd50e8921098$var$VariationStore","itemVariationStore","$3e41cd50e8921098$var$CFF2TopDict","$3e41cd50e8921098$var$CFFTop","fixed16","nameIndex","topDictIndex","stringIndex","globalSubrIndex","topDict","$3e41cd50e8921098$export$2e2bcd8739ae039","$8770fc79268fa3c2$var$CFFFont","top","isCIDFont","ROS","sid","fullName","FullName","familyName","FamilyName","getCharString","glyph","readBuffer","getGlyphName","gid","charset","fdForGlyph","FDSelect","low","high","mid","privateDictForGlyph","FDArray","Private","$8770fc79268fa3c2$export$2e2bcd8739ae039","$79f2eb50e4490e51$var$VerticalOrigin","glyphIndex","vertOriginY","$79f2eb50e4490e51$export$2e2bcd8739ae039","defaultVertOriginY","numVertOriginYMetrics","$9dd3c2ae0a322c53$export$16b227cb15d716a0","height","width","horiBearingX","horiBearingY","horiAdvance","vertBearingX","vertBearingY","vertAdvance","$9dd3c2ae0a322c53$export$62c53e75f69bfe12","bearingX","bearingY","$9dd3c2ae0a322c53$var$EBDTComponent","xOffset","yOffset","$9dd3c2ae0a322c53$var$ByteAligned","$9dd3c2ae0a322c53$var$BitAligned","$9dd3c2ae0a322c53$export$f1f5ddeb20d14f","data","pad","numComponents","components","dataLen","$234c291eab07e474$var$SBitLineMetrics","ascender","descender","widthMax","caretSlopeNumerator","caretSlopeDenominator","minOriginSB","minAdvanceSB","maxBeforeBL","minAfterBL","$234c291eab07e474$var$CodeOffsetPair","glyphCode","$234c291eab07e474$var$IndexSubtable","imageFormat","imageDataOffset","offsetArray","lastGlyphIndex","firstGlyphIndex","imageSize","bigMetrics","glyphArray","glyphCodeArray","$234c291eab07e474$var$IndexSubtableArray","subtable","$234c291eab07e474$var$BitmapSizeTable","indexSubTableArray","indexTablesSize","numberOfIndexSubTables","colorRef","hori","vert","startGlyphIndex","endGlyphIndex","ppemX","ppemY","bitDepth","$234c291eab07e474$export$2e2bcd8739ae039","numSizes","$55d04373f0cac44e$var$ImageTable","ppem","resolution","imageOffsets","$55d04373f0cac44e$export$2e2bcd8739ae039","numImgTables","imageTables","$0e59eccfa3005d9d$var$LayerRecord","paletteIndex","$0e59eccfa3005d9d$var$BaseGlyphRecord","firstLayerIndex","numLayers","$0e59eccfa3005d9d$export$2e2bcd8739ae039","numBaseGlyphRecords","baseGlyphRecord","layerRecords","numLayerRecords","$23affa36a12f7915$var$ColorRecord","blue","green","red","alpha","$23affa36a12f7915$export$2e2bcd8739ae039","numPaletteEntries","numPalettes","numColorRecords","colorRecords","colorRecordIndices","offsetPaletteTypeArray","offsetPaletteLabelArray","offsetPaletteEntryLabelArray","$9fffe61eb0785f74$var$BaseCoord","coordinate","referenceGlyph","baseCoordPoint","deviceTable","$9fffe61eb0785f74$var$BaseValues","defaultIndex","baseCoordCount","baseCoords","$9fffe61eb0785f74$var$FeatMinMaxRecord","minCoord","maxCoord","$9fffe61eb0785f74$var$MinMax","featMinMaxCount","featMinMaxRecords","$9fffe61eb0785f74$var$BaseLangSysRecord","minMax","$9fffe61eb0785f74$var$BaseScript","baseValues","defaultMinMax","baseLangSysCount","baseLangSysRecords","$9fffe61eb0785f74$var$BaseScriptRecord","$9fffe61eb0785f74$var$BaseScriptList","$9fffe61eb0785f74$var$BaseTagList","$9fffe61eb0785f74$var$Axis","baseTagList","baseScriptList","$9fffe61eb0785f74$export$2e2bcd8739ae039","horizAxis","vertAxis","$418face38567ee6e$var$AttachPoint","$418face38567ee6e$var$AttachList","attachPoints","$418face38567ee6e$var$CaretValue","caretValuePoint","$418face38567ee6e$var$LigGlyph","$418face38567ee6e$var$LigCaretList","ligGlyphCount","ligGlyphs","$418face38567ee6e$var$MarkGlyphSetsDef","markSetTableFormat","markSetCount","$418face38567ee6e$export$2e2bcd8739ae039","glyphClassDef","attachList","ligCaretList","markAttachClassDef","markGlyphSetsDef","$010e157f6d8a40e9$var$ValueFormat","$010e157f6d8a40e9$var$types","xPlacement","yPlacement","xAdvance","yAdvance","xPlaDevice","rel","yPlaDevice","xAdvDevice","yAdvDevice","$010e157f6d8a40e9$var$ValueRecord","buildStruct","struct","$010e157f6d8a40e9$var$PairValueRecord","secondGlyph","value1","value2","$010e157f6d8a40e9$var$PairSet","$010e157f6d8a40e9$var$Class2Record","$010e157f6d8a40e9$var$Anchor","xCoordinate","yCoordinate","anchorPoint","xDeviceTable","yDeviceTable","$010e157f6d8a40e9$var$EntryExitRecord","entryAnchor","exitAnchor","$010e157f6d8a40e9$var$MarkRecord","markAnchor","$010e157f6d8a40e9$var$MarkArray","$010e157f6d8a40e9$var$BaseRecord","classCount","$010e157f6d8a40e9$var$BaseArray","$010e157f6d8a40e9$var$ComponentRecord","$010e157f6d8a40e9$var$LigatureAttach","$010e157f6d8a40e9$var$LigatureArray","$010e157f6d8a40e9$export$73a8cfb19cd43a0f","valueFormat","valueCount","values","valueFormat1","valueFormat2","pairSetCount","pairSets","classDef1","classDef2","class1Count","class2Count","classRecords","entryExitCount","entryExitRecords","markCoverage","baseCoverage","markArray","baseArray","ligatureCoverage","ligatureArray","mark1Coverage","mark2Coverage","mark1Array","mark2Array","posFormat","extension","$010e157f6d8a40e9$export$2e2bcd8739ae039","scriptList","featureList","lookupList","featureVariations","$7176ea6bb7dcf1c6$var$Sequence","$7176ea6bb7dcf1c6$var$AlternateSet","$7176ea6bb7dcf1c6$var$Ligature","compCount","$7176ea6bb7dcf1c6$var$LigatureSet","$7176ea6bb7dcf1c6$var$GSUBLookup","deltaGlyphID","substitute","substFormat","sequences","alternateSet","ligatureSets","substitutes","$7176ea6bb7dcf1c6$export$2e2bcd8739ae039","$71e9e74bb6366bce$var$JstfGSUBModList","$71e9e74bb6366bce$var$JstfPriority","shrinkageEnableGSUB","shrinkageDisableGSUB","shrinkageEnableGPOS","shrinkageDisableGPOS","shrinkageJstfMax","extensionEnableGSUB","extensionDisableGSUB","extensionEnableGPOS","extensionDisableGPOS","extensionJstfMax","$71e9e74bb6366bce$var$JstfLangSys","$71e9e74bb6366bce$var$JstfLangSysRecord","jstfLangSys","$71e9e74bb6366bce$var$JstfScript","extenderGlyphs","langSysCount","$71e9e74bb6366bce$var$JstfScriptRecord","$71e9e74bb6366bce$export$2e2bcd8739ae039","scriptCount","$706225b6909f9418$var$VariableSizeNumber","_size","readUInt24BE","$706225b6909f9418$var$MapDataEntry","entry","entryFormat","outerIndex","innerIndex","$706225b6909f9418$var$DeltaSetIndexMap","mapCount","mapData","$706225b6909f9418$export$2e2bcd8739ae039","advanceWidthMapping","LSBMapping","RSBMapping","$4a144b8ae6f53b7c$var$Signature","$4a144b8ae6f53b7c$var$SignatureBlock","cbSignature","signature","$4a144b8ae6f53b7c$export$2e2bcd8739ae039","ulVersion","usNumSigs","usFlag","signatures","signatureBlocks","$a2086c3965d7b105$var$GaspRange","rangeMaxPPEM","rangeGaspBehavior","$a2086c3965d7b105$export$2e2bcd8739ae039","numRanges","gaspRanges","$de83746c6c1c8559$var$DeviceRecord","pixelSize","maximumWidth","widths","$de83746c6c1c8559$export$2e2bcd8739ae039","sizeDeviceRecord","$5a2237650c44652a$var$KernPair","left","right","$5a2237650c44652a$var$ClassTable","firstGlyph","nGlyphs","$5a2237650c44652a$var$Kern2Array","off","leftTable","rowWidth","$5a2237650c44652a$var$KernSubtable","nPairs","pairs","rightTable","array","kernValueCount","leftClassCount","rightClassCount","kernValue","leftClass","rightClass","kernIndex","$5a2237650c44652a$var$KernTable","subVersion","padding","tupleIndex","$5a2237650c44652a$export$2e2bcd8739ae039","nTables","$1eadf070c8b34e48$export$2e2bcd8739ae039","yPels","$8eb2f7302ef75084$export$2e2bcd8739ae039","fontNumber","pitch","style","typeFamily","symbolSet","typeface","characterComplement","fileName","strokeWeight","widthType","serifStyle","$8223b0d67f5fd7c9$var$Ratio","bCharSet","xRatio","yStartRatio","yEndRatio","$8223b0d67f5fd7c9$var$vTable","yPelHeight","$8223b0d67f5fd7c9$var$VdmxGroup","recs","startsz","endsz","entries","$8223b0d67f5fd7c9$export$2e2bcd8739ae039","numRecs","numRatios","ratioRanges","$4b17ac6a75c85897$export$2e2bcd8739ae039","advanceHeightMax","minTopSideBearing","minBottomSideBearing","yMaxExtent","$a9f9c5185d84186d$var$VmtxEntry","$a9f9c5185d84186d$export$2e2bcd8739ae039","vhea","$d9cf6d6467871d68$var$shortFrac","$d9cf6d6467871d68$var$Correspondence","fromCoord","toCoord","$d9cf6d6467871d68$var$Segment","pairCount","correspondence","$d9cf6d6467871d68$export$2e2bcd8739ae039","segment","$c35aa0a165e05d15$var$UnboundedArrayAccessor","base","_items","getItem","inspect","name","$c35aa0a165e05d15$export$c5af1eebc882e39a","$c35aa0a165e05d15$export$8351f8c2ae2f103c","ValueType","Shadow","BinarySearchHeader","unitSize","nUnits","LookupSegmentSingle","lastGlyph","LookupSegmentArray","LookupSingle","binarySearchHeader","segments","$c35aa0a165e05d15$export$79f7d93d790934ba","entryData","assign","newState","Entry","StateArray","nClasses","StateHeader","classTable","stateArray","entryTable","$c35aa0a165e05d15$export$105027425199cc51","ClassLookupTable","newStateOffset","StateHeader1","$53e6946cfb72ad0c$var$BslnSubtable","mappingData","standardGlyph","controlPoints","$53e6946cfb72ad0c$export$2e2bcd8739ae039","defaultBaseline","$117550c71e13cb3d$var$Setting","setting","fontFeatures","$117550c71e13cb3d$var$FeatureName","nSettings","settingTable","featureFlags","defaultSetting","$117550c71e13cb3d$export$2e2bcd8739ae039","featureNameCount","reserved1","reserved2","featureNames","$551f92fdd501454e$var$Axis","axisTag","minValue","defaultValue","maxValue","$551f92fdd501454e$var$Instance","coord","postscriptNameID","instanceSize","$551f92fdd501454e$export$2e2bcd8739ae039","offsetToData","countSizePairs","axisSize","instanceCount","axis","instance","$d03801ee7a5f4d7c$var$shortFrac","$d03801ee7a5f4d7c$var$Offset","$d03801ee7a5f4d7c$var$gvar","globalCoordCount","globalCoords","$d03801ee7a5f4d7c$export$2e2bcd8739ae039","$70ffc7fec5b89b5e$var$ClassTable","subFeatureFlags","stateTable","$70ffc7fec5b89b5e$var$WidthDeltaRecord","justClass","beforeGrowLimit","beforeShrinkLimit","afterGrowLimit","afterShrinkLimit","growFlags","shrinkFlags","$70ffc7fec5b89b5e$var$WidthDeltaCluster","$70ffc7fec5b89b5e$var$ActionData","lowerLimit","upperLimit","order","addGlyph","substThreshold","substGlyph","variationAxis","minimumLimit","noStretchValue","maximumLimit","$70ffc7fec5b89b5e$var$Action","actionClass","actionType","actionLength","actionData","$70ffc7fec5b89b5e$var$PostcompensationAction","$70ffc7fec5b89b5e$var$PostCompensationTable","lookupTable","$70ffc7fec5b89b5e$var$JustificationTable","wdcOffset","postCompensationTable","widthDeltaClusters","$70ffc7fec5b89b5e$export$2e2bcd8739ae039","horizontal","vertical","$dd743f90b6270daa$var$LigatureData","action","$dd743f90b6270daa$var$ContextualData","markIndex","currentIndex","$dd743f90b6270daa$var$InsertionData","currentInsertIndex","markedInsertIndex","$dd743f90b6270daa$var$SubstitutionTable","items","$dd743f90b6270daa$var$SubtableData","substitutionTable","ligatureActions","ligatureList","insertionActions","$dd743f90b6270daa$var$Subtable","$dd743f90b6270daa$var$FeatureEntry","featureType","featureSetting","enableFlags","disableFlags","$dd743f90b6270daa$var$MorxChain","defaultFlags","chainLength","nFeatureEntries","nSubtables","features","subtables","$dd743f90b6270daa$export$2e2bcd8739ae039","unused","nChains","chains","$40e500cc5163d19f$var$OpticalBounds","bottom","$40e500cc5163d19f$export$2e2bcd8739ae039","$60d88718e7e1fa97$var$tables","$60d88718e7e1fa97$export$2e2bcd8739ae039","cmap","head","hmtx","post","fpgm","loca","prep","glyf","VORG","EBLC","CBLC","sbix","COLR","CPAL","BASE","GDEF","GPOS","GSUB","JSTF","HVAR","DSIG","gasp","hdmx","kern","LTSH","PCLT","VDMX","vmtx","avar","bsln","feat","fvar","gvar","just","morx","opbd","$d5e01a2298150c9a$var$TableEntry","checkSum","$d5e01a2298150c9a$var$Directory","numTables","VoidPointer","maxExponentFor2","floor","log","LN2","maxPowerOf2","pow","$d5e01a2298150c9a$export$2e2bcd8739ae039","$f3ad94c9f84f4d57$export$2e0ae67339d5f1ac","cmp","min","$f3ad94c9f84f4d57$export$d02631cccf789723","$5d24cfe1a4cd83bb$export$2e2bcd8739ae039","_class","cmapTable","encoding","findSubtable","$5OpyM$iconvlitecjs","encodingExists","uvs","lookup","codepoint","variationSelector","buf","fromCodePoint","getVariationSelector","rangeOffset","group","selectors","toArray","x","sel","getCharacterSet","endCodes","tail","codePointsForGlyph","delta","c","g","$5OpyM$applyDecoratedDescriptor","prototype","$8526e21034212dc1$export$2e2bcd8739ae039","positions","id","getKerning","crossStream","variation","pairIdx","pair","leftOffset","rightOffset","override","$e4967fef9afc586a$export$2e2bcd8739ae039","positionGlyphs","clusterStart","clusterEnd","isMark","positionCluster","baseBox","cbox","copy","codePoints","minX","yGap","mark","markBox","position","combiningClass","getCombiningClass","maxX","minY","maxY","codePoint","$5OpyM$unicodeproperties","$fcb46e14b01ea01f$export$2e2bcd8739ae039","Infinity","addPoint","y","abs","$a5878e4f4663c9e2$var$UNICODE_SCRIPTS","Caucasian_Albanian","Arabic","Imperial_Aramaic","Armenian","Avestan","Balinese","Bamum","Bassa_Vah","Batak","Bengali","Bopomofo","Brahmi","Braille","Buginese","Buhid","Chakma","Canadian_Aboriginal","Carian","Cham","Cherokee","Coptic","Cypriot","Cyrillic","Devanagari","Deseret","Duployan","Egyptian_Hieroglyphs","Elbasan","Ethiopic","Georgian","Glagolitic","Gothic","Grantha","Greek","Gujarati","Gurmukhi","Hangul","Han","Hanunoo","Hebrew","Hiragana","Pahawh_Hmong","Katakana_Or_Hiragana","Old_Italic","Javanese","Kayah_Li","Katakana","Kharoshthi","Khmer","Khojki","Kannada","Kaithi","Tai_Tham","Lao","Latin","Lepcha","Limbu","Linear_A","Linear_B","Lisu","Lycian","Lydian","Mahajani","Mandaic","Manichaean","Mende_Kikakui","Meroitic_Cursive","Meroitic_Hieroglyphs","Malayalam","Modi","Mongolian","Mro","Meetei_Mayek","Myanmar","Old_North_Arabian","Nabataean","Nko","Ogham","Ol_Chiki","Old_Turkic","Oriya","Osmanya","Palmyrene","Pau_Cin_Hau","Old_Permic","Phags_Pa","Inscriptional_Pahlavi","Psalter_Pahlavi","Phoenician","Miao","Inscriptional_Parthian","Rejang","Runic","Samaritan","Old_South_Arabian","Saurashtra","Shavian","Sharada","Siddham","Khudawadi","Sinhala","Sora_Sompeng","Sundanese","Syloti_Nagri","Syriac","Tagbanwa","Takri","Tai_Le","New_Tai_Lue","Tamil","Tai_Viet","Telugu","Tifinagh","Tagalog","Thaana","Thai","Tibetan","Tirhuta","Ugaritic","Vai","Warang_Citi","Old_Persian","Cuneiform","Yi","Inherited","Common","Unknown","$a5878e4f4663c9e2$var$OPENTYPE_SCRIPTS","$a5878e4f4663c9e2$export$b32f0b5f69d65e51","script1","$a5878e4f4663c9e2$export$ce50e82f12a827a4","$a5878e4f4663c9e2$export$e5cb25e204fb8450","idx","code","charCodeAt","next","script2","getScript","$a5878e4f4663c9e2$export$16fab0757cfc223d","script3","$a5878e4f4663c9e2$var$RTL","arab","hebr","syrc","thaa","cprt","khar","phnx","lydi","avst","armi","phli","prti","sarb","orkh","samr","mand","merc","mero","mani","mend","nbat","narb","palm","phlp","$a5878e4f4663c9e2$export$9fddb9d0dd7d8a54","script4","$5a6ae00fa7e614b0$export$2e2bcd8739ae039","direction","advanceWidth","advanceHeight","bbox","p","$4bff5f854806c785$export$2e2bcd8739ae039","$b603e0ade09ad01e$var$features","allTypographicFeatures","exclusive","allTypeFeatures","ligatures","requiredLigatures","commonLigatures","rareLigatures","rebusPictures","diphthongLigatures","squaredLigatures","abbrevSquaredLigatures","symbolLigatures","contextualLigatures","historicalLigatures","cursiveConnection","unconnected","partiallyConnected","cursive","letterCase","verticalSubstitution","substituteVerticalForms","linguisticRearrangement","numberSpacing","monospacedNumbers","proportionalNumbers","thirdWidthNumbers","quarterWidthNumbers","smartSwash","wordInitialSwashes","wordFinalSwashes","nonFinalSwashes","diacritics","showDiacritics","hideDiacritics","decomposeDiacritics","verticalPosition","normalPosition","superiors","inferiors","ordinals","scientificInferiors","fractions","noFractions","verticalFractions","diagonalFractions","overlappingCharacters","preventOverlap","typographicExtras","slashedZero","mathematicalExtras","mathematicalGreek","ornamentSets","noOrnaments","dingbats","piCharacters","fleurons","decorativeBorders","internationalSymbols","mathSymbols","characterAlternatives","noAlternates","designComplexity","designLevel1","designLevel2","designLevel3","designLevel4","designLevel5","styleOptions","noStyleOptions","displayText","engravedText","illuminatedCaps","titlingCaps","tallCaps","characterShape","traditionalCharacters","simplifiedCharacters","JIS1978Characters","JIS1983Characters","JIS1990Characters","traditionalAltOne","traditionalAltTwo","traditionalAltThree","traditionalAltFour","traditionalAltFive","expertCharacters","JIS2004Characters","hojoCharacters","NLCCharacters","traditionalNamesCharacters","numberCase","lowerCaseNumbers","upperCaseNumbers","textSpacing","proportionalText","monospacedText","halfWidthText","thirdWidthText","quarterWidthText","altProportionalText","altHalfWidthText","transliteration","noTransliteration","annotation","noAnnotation","boxAnnotation","roundedBoxAnnotation","circleAnnotation","invertedCircleAnnotation","parenthesisAnnotation","periodAnnotation","romanNumeralAnnotation","diamondAnnotation","invertedBoxAnnotation","invertedRoundedBoxAnnotation","kanaSpacing","fullWidthKana","proportionalKana","ideographicSpacing","fullWidthIdeographs","proportionalIdeographs","halfWidthIdeographs","unicodeDecomposition","canonicalComposition","compatibilityComposition","transcodingComposition","rubyKana","CJKSymbolAlternatives","noCJKSymbolAlternatives","CJKSymbolAltOne","CJKSymbolAltTwo","CJKSymbolAltThree","CJKSymbolAltFour","CJKSymbolAltFive","ideographicAlternatives","noIdeographicAlternatives","ideographicAltOne","ideographicAltTwo","ideographicAltThree","ideographicAltFour","ideographicAltFive","CJKVerticalRomanPlacement","CJKVerticalRomanCentered","CJKVerticalRomanHBaseline","italicCJKRoman","CJKItalicRoman","caseSensitiveLayout","caseSensitiveSpacing","alternateKana","alternateHorizKana","alternateVertKana","stylisticAlternatives","noStylisticAlternates","stylisticAltOne","stylisticAltTwo","stylisticAltThree","stylisticAltFour","stylisticAltFive","stylisticAltSix","stylisticAltSeven","stylisticAltEight","stylisticAltNine","stylisticAltTen","stylisticAltEleven","stylisticAltTwelve","stylisticAltThirteen","stylisticAltFourteen","stylisticAltFifteen","stylisticAltSixteen","stylisticAltSeventeen","stylisticAltEighteen","stylisticAltNineteen","stylisticAltTwenty","contextualAlternates","swashAlternates","contextualSwashAlternates","lowerCase","defaultLowerCase","lowerCaseSmallCaps","lowerCasePetiteCaps","upperCase","defaultUpperCase","upperCaseSmallCaps","upperCasePetiteCaps","languageTag","CJKRomanSpacing","halfWidthCJKRoman","proportionalCJKRoman","defaultCJKRoman","fullWidthCJKRoman","$b603e0ade09ad01e$var$feature","selector","$b603e0ade09ad01e$var$OTMapping","rlig","clig","dlig","hlig","liga","hist","smcp","pcap","frac","dnom","numr","afrc","case","ccmp","cpct","valt","swsh","cswh","curs","c2pc","c2sc","init","fin2","medi","med2","fin3","fina","pkna","half","halt","hkna","vkna","ital","lnum","onum","mgrk","calt","vrt2","tnum","pnum","sups","subs","ordn","pwid","hwid","qwid","twid","fwid","palt","trad","smpl","jp78","jp83","jp90","jp04","expt","hojo","nlck","tnam","ruby","titl","zero","ss01","ss02","ss03","ss04","ss05","ss06","ss07","ss08","ss09","ss10","ss11","ss12","ss13","ss14","ss15","ss16","ss17","ss18","ss19","ss20","slice","$b603e0ade09ad01e$var$AATMapping","ot","aat","$b603e0ade09ad01e$export$b813f7d2a1677c16","r","$b603e0ade09ad01e$var$mapFeatureStrings","f","isNaN","typeCode","settingCode","$b603e0ade09ad01e$export$bd6df347a4f391c4","keys","$16667a2c0f0b1be5$export$2e2bcd8739ae039","seg","glyphsForValue","classValue","segment1","$de324b614d9ee26c$var$START_OF_TEXT_STATE","$de324b614d9ee26c$var$START_OF_LINE_STATE","$de324b614d9ee26c$var$END_OF_TEXT_CLASS","$de324b614d9ee26c$var$OUT_OF_BOUNDS_CLASS","$de324b614d9ee26c$var$DELETED_GLYPH_CLASS","$de324b614d9ee26c$var$END_OF_LINE_CLASS","$de324b614d9ee26c$var$DONT_ADVANCE","$de324b614d9ee26c$export$2e2bcd8739ae039","reverse","processEntry","currentState","dir","classCode","shouldAdvance","row","entryIndex","traverse","opts","state","visited","Set","add","enter","exit","$696c050512749a50$var$MARK_FIRST","$696c050512749a50$var$MARK_LAST","$696c050512749a50$var$VERB","$696c050512749a50$var$SET_MARK","$696c050512749a50$var$SET_COMPONENT","$696c050512749a50$var$PERFORM_ACTION","$696c050512749a50$var$LAST_MASK","$696c050512749a50$var$STORE_MASK","$696c050512749a50$var$OFFSET_MASK","$696c050512749a50$var$VERTICAL_ONLY","$696c050512749a50$var$REVERSE_DIRECTION","$696c050512749a50$var$HORIZONTAL_AND_VERTICAL","$696c050512749a50$var$CURRENT_IS_KASHIDA_LIKE","$696c050512749a50$var$MARKED_IS_KASHIDA_LIKE","$696c050512749a50$var$CURRENT_INSERT_BEFORE","$696c050512749a50$var$MARKED_INSERT_BEFORE","$696c050512749a50$var$CURRENT_INSERT_COUNT","$696c050512749a50$var$MARKED_INSERT_COUNT","$696c050512749a50$export$2e2bcd8739ae039","processIndicRearragement","bind","processContextualSubstitution","processLigature","processNoncontextualSubstitutions","processGlyphInsertion","inputCache","chain","processSubtable","splice","ligatureStack","markedGlyph","markedIndex","stateMachine","getStateMachine","getProcessor","$696c050512749a50$var$reorderGlyphs","subsitutions","getGlyph","actions","actionIndex","last","ligatureIndex","ligatureGlyphs","componentGlyph","unshift","store","component","ligatureEntry","_insertGlyphs","insertionActionIndex","isBefore","insertions","getSupportedFeatures","generateInputs","generateInputCache","generateInputsForSubtable","stack","g1","found","cache","$696c050512749a50$var$swap","rangeA","rangeB","reverseA","reverseB","verb","$9273c77bc46b13e0$export$2e2bcd8739ae039","morxProcessor","fallbackPosition","glyphRun","getAvailableFeatures","stringsForGlyph","glyphStrings","_addStrings","strings","_cmapProcessor","$d208953d14e55e3c$export$2e2bcd8739ae039","stages","globalFeatures","allFeatures","_addFeatures","global","stageIndex","stage","arg","local","addStage","setFeatureOverrides","assignGlobalFeatures","processor","applyFeatures","$5340de7a86f3ae85$var$VARIATION_FEATURES","$5340de7a86f3ae85$var$COMMON_FEATURES","$5340de7a86f3ae85$var$FRACTIONAL_FEATURES","$5340de7a86f3ae85$var$HORIZONTAL_FEATURES","$5340de7a86f3ae85$var$VERTICAL_FEATURES","$5340de7a86f3ae85$var$DIRECTIONAL_FEATURES","ltr","rtl","$5340de7a86f3ae85$export$2e2bcd8739ae039","zeroMarkWidths","plan","planPreprocessing","planFeatures","planPostprocessing","assignFeatures","userFeatures","isDigit","$5cab828b3273a17c$var$trie","$5OpyM$unicodetrie","$5cab828b3273a17c$require$Buffer","from","$5cab828b3273a17c$var$FEATURES","$5cab828b3273a17c$var$ShapingClasses","Non_Joining","Left_Joining","Right_Joining","Dual_Joining","Join_Causing","ALAPH","Transparent","$5cab828b3273a17c$var$ISOL","$5cab828b3273a17c$var$FINA","$5cab828b3273a17c$var$FIN2","$5cab828b3273a17c$var$FIN3","$5cab828b3273a17c$var$MEDI","$5cab828b3273a17c$var$MED2","$5cab828b3273a17c$var$INIT","$5cab828b3273a17c$var$NONE","$5cab828b3273a17c$var$STATE_TABLE","$5cab828b3273a17c$export$2e2bcd8739ae039","prev","curAction","prevAction","$5cab828b3273a17c$var$getShapingClass","category","getCategory","$ab0ec2aaf85421fe$export$2e2bcd8739ae039","reset","cur","shouldIgnore","ignoreMarks","ignoreBaseGlyphs","isBase","ignoreLigatures","isLigature","move","peek","increment","peekIndex","$cffd0e0e7e88a6c6$var$DEFAULT_SCRIPTS","$cffd0e0e7e88a6c6$export$2e2bcd8739ae039","scriptTag","lookups","variationsIndex","_variationProcessor","findVariationsIndex","normalizedCoords","selectScript","ligatureID","currentFeature","findScript","changed","repeat","substituteFeature","substituteFeatureForVariations","lookupsForFeatures","exclude","lookupIndex","sort","substitution","coords","variations","conditions","variationConditionsMatch","every","condition","advances","applyLookups","glyphIterator","applyLookup","applyLookupList","lookupRecord","coverageIndex","match","sequence","matched","sequenceMatches","sequenceMatchIndices","coverageSequenceMatches","getClassID","classSequenceMatches","classID","applyContext","rule","rule1","applyChainingContext","rules","rule2","$8cba766f534deddd$export$2e2bcd8739ae039","_font","ligatureComponent","isLigated","cursiveAttachment","markAttachment","shaperInfo","substituted","isMultiplied","_id","$ce39c5154631fd0c$export$2e2bcd8739ae039","$ce39c5154631fd0c$var$getType","$ce39c5154631fd0c$var$STATE_TABLE","$ce39c5154631fd0c$var$DECOMPOSE","hasGlyphForCodePoint","$ce39c5154631fd0c$var$decompose","$ce39c5154631fd0c$var$COMPOSE","$ce39c5154631fd0c$var$compose","$ce39c5154631fd0c$var$TONE_MARK","$ce39c5154631fd0c$var$reorderToneMark","$ce39c5154631fd0c$var$INVALID","$ce39c5154631fd0c$var$insertDottedCircle","$ce39c5154631fd0c$var$HANGUL_BASE","$ce39c5154631fd0c$var$HANGUL_END","$ce39c5154631fd0c$var$HANGUL_COUNT","$ce39c5154631fd0c$var$L_BASE","$ce39c5154631fd0c$var$V_BASE","$ce39c5154631fd0c$var$T_BASE","$ce39c5154631fd0c$var$L_COUNT","$ce39c5154631fd0c$var$V_COUNT","$ce39c5154631fd0c$var$T_COUNT","$ce39c5154631fd0c$var$L_END","$ce39c5154631fd0c$var$V_END","$ce39c5154631fd0c$var$T_END","$ce39c5154631fd0c$var$DOTTED_CIRCLE","$ce39c5154631fd0c$var$isL","$ce39c5154631fd0c$var$isV","$ce39c5154631fd0c$var$isT","$ce39c5154631fd0c$var$isTone","$ce39c5154631fd0c$var$isLVT","$ce39c5154631fd0c$var$isLV","$ce39c5154631fd0c$var$isCombiningL","$ce39c5154631fd0c$var$isCombiningV","$ce39c5154631fd0c$var$isCombiningT","$ce39c5154631fd0c$var$X","$ce39c5154631fd0c$var$L","$ce39c5154631fd0c$var$V","$ce39c5154631fd0c$var$T","$ce39c5154631fd0c$var$LV","$ce39c5154631fd0c$var$LVT","$ce39c5154631fd0c$var$M","$ce39c5154631fd0c$var$NO_ACTION","$ce39c5154631fd0c$var$getGlyph","glyphForCodePoint","l","v","ljmo","vjmo","insert","tjmo","prevType","lv","del","$ce39c5154631fd0c$var$getLength","dottedCircle","$a550b6039b7700b3$exports","JSON","parse","$f3bd27a8c88f3f53$exports","$b9778c6b60232cf0$export$a513ea61a7bee91c","X","C","V","N","H","ZWNJ","ZWJ","M","SM","VD","A","Placeholder","Dotted_Circle","RS","Coeng","Repha","Ra","CM","Symbol","$b9778c6b60232cf0$export$1a1f61c9c4dd9df0","Start","Ra_To_Become_Reph","Pre_M","Pre_C","Base_C","After_Main","Above_C","Before_Sub","Below_C","After_Sub","Before_Post","Post_C","After_Post","Final_C","SMVD","End","$b9778c6b60232cf0$export$8519deaa7de2b07","$b9778c6b60232cf0$export$bbcd928767338e0d","$b9778c6b60232cf0$export$ca9599b2a300afc","$b9778c6b60232cf0$export$e99d119da76a0fc5","Default","hasOldSpec","virama","basePos","rephPos","rephMode","blwfMode","$b9778c6b60232cf0$export$f647c9cfdd77d95a","decompositions","$c6b883ac45fa55f1$var$decompositions","$parcel$interopDefault","$c6b883ac45fa55f1$var$trie","$c6b883ac45fa55f1$require$Buffer","$c6b883ac45fa55f1$var$stateMachine","$5OpyM$dfa","$c6b883ac45fa55f1$export$2e2bcd8739ae039","$c6b883ac45fa55f1$var$setupSyllables","$c6b883ac45fa55f1$var$initialReordering","$c6b883ac45fa55f1$var$finalReordering","unicodeScript","indicConfig","isOldSpec","d","decomposed","$c6b883ac45fa55f1$var$indicCategory","$c6b883ac45fa55f1$var$indicPosition","$c6b883ac45fa55f1$var$IndicInfo","syllableType","syllable","tags","$c6b883ac45fa55f1$var$isConsonant","$c6b883ac45fa55f1$var$isJoiner","$c6b883ac45fa55f1$var$isHalantOrCoeng","$c6b883ac45fa55f1$var$wouldSubstitute","_layoutEngine","engine","GSUBProcessor","$c6b883ac45fa55f1$var$consonantPosition","consonant","info","$c6b883ac45fa55f1$var$nextSyllable","limit","hasReph","rphf","seenBelow","i1","i2","j","disallowDoubleHalants","lastPos","i3","i4","i5","i6","blwf","i7","i8","abvf","pstf","prefLen","pref","i9","cfar","i10","nonJoiner","tryPref","BASE_C","newPos","oldPos","tmp","newRephPos","reph","test","categories","$7eb6a55cb7a2526f$var$categories","$7eb6a55cb7a2526f$var$decompositions","$7eb6a55cb7a2526f$var$trie","$7eb6a55cb7a2526f$require$Buffer","$7eb6a55cb7a2526f$var$stateMachine","$7eb6a55cb7a2526f$export$2e2bcd8739ae039","$7eb6a55cb7a2526f$var$setupSyllables","$7eb6a55cb7a2526f$var$clearSubstitutionFlags","$7eb6a55cb7a2526f$var$recordRphf","$7eb6a55cb7a2526f$var$recordPref","$7eb6a55cb7a2526f$var$reorder","$7eb6a55cb7a2526f$var$useCategory","$7eb6a55cb7a2526f$var$USEInfo","$7eb6a55cb7a2526f$var$nextSyllable","$7eb6a55cb7a2526f$var$isBase","$7eb6a55cb7a2526f$var$isHalant","$a1d926e2c804f4db$var$SHAPERS","mong","phag","hang","bng2","beng","dev2","deva","gjr2","gujr","guru","gur2","knda","knd2","mlm2","mlym","ory2","orya","taml","tml2","telu","tel2","khmr","bali","batk","brah","bugi","buhd","cakm","cham","dupl","egyp","gran","hano","java","kthi","kali","khoj","sind","lepc","limb","mahj","mtei","modi","hmng","rjng","saur","shrd","sidd","sinh","sund","sylo","tglg","tagb","tale","lana","tavt","takr","tibt","tfng","tirh","latn","DFLT","$a1d926e2c804f4db$export$7877a478dd30fd3d","shaper","$ec0cc8d4808a62ff$export$2e2bcd8739ae039","curGlyph","replacement","undefined","USER_INDEX","ligature","characters","ligatureGlyph","isMarkLigature","lastLigID","lastNumComps","curComps","matchIndex","$d1645ec9e32ddac0$export$2e2bcd8739ae039","applyPositionValue","variationProcessor","variationStore","getDelta","nextGlyph","class1","class2","pair1","nextIndex","curRecord","nextRecord","getAnchor","rightToLeft","baseGlyphIndex","baseIndex","markRecord","baseAnchor","applyAnchor","ligIndex","ligAttach","markGlyph","ligGlyph","compIndex","mark1Index","prevIndex","good","mark2Index","markCoords","markPos","anchor","fixCursiveAttachment","fixMarkAttachment","k1","$805414ed4cd3125e$export$2e2bcd8739ae039","glyphInfos","GPOSProcessor","setup","glyphInfo","zeroMarkAdvances","cleanup","$2df783177c3b5db5$export$2e2bcd8739ae039","unicodeLayoutEngine","kernProcessor","layout","glyphsForString","hideDefaultIgnorables","positioned","space","isDefaultIgnorable","ch","plane","$af5e1fcddefe17a2$var$SVG_COMMANDS","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","closePath","$af5e1fcddefe17a2$export$2e2bcd8739ae039","commands","_bbox","_cbox","toFunction","forEach","command","toSVG","cmds","round","join","command1","freeze","cx","cy","p0","p1","p2","p3","qp1x","qp1y","p3x","p3y","cp1x","cp1y","cp2x","cp2y","b2ac","t1","sqrt","t2","mapPoints","path","transform","m0","m1","m2","m3","m4","m5","tx","ty","translate","rotate","angle","cos","sin","scale","scaleX","scaleY","$c55d37cb83b3ceea$export$2e2bcd8739ae039","$e1a34a692932ba79$export$2e2bcd8739ae039","_getPath","_getCBox","_getBBox","_getTableMetrics","metric","_getMetrics","_metrics","leftBearing","topBearing","os2","getAdvanceAdjustment","getScaledPath","ligatureCaretPositions","_getName","fromCharCode","render","save","fill","restore","$e20fdd09923e4c19$var$GlyfHeader","numberOfContours","$e20fdd09923e4c19$var$ON_CURVE","$e20fdd09923e4c19$var$X_SHORT_VECTOR","$e20fdd09923e4c19$var$Y_SHORT_VECTOR","$e20fdd09923e4c19$var$REPEAT","$e20fdd09923e4c19$var$SAME_X","$e20fdd09923e4c19$var$SAME_Y","$e20fdd09923e4c19$var$ARG_1_AND_2_ARE_WORDS","$e20fdd09923e4c19$var$ARGS_ARE_XY_VALUES","$e20fdd09923e4c19$var$ROUND_XY_TO_GRID","$e20fdd09923e4c19$var$WE_HAVE_A_SCALE","$e20fdd09923e4c19$var$MORE_COMPONENTS","$e20fdd09923e4c19$var$WE_HAVE_AN_X_AND_Y_SCALE","$e20fdd09923e4c19$var$WE_HAVE_A_TWO_BY_TWO","$e20fdd09923e4c19$var$WE_HAVE_INSTRUCTIONS","$e20fdd09923e4c19$var$USE_MY_METRICS","$e20fdd09923e4c19$var$OVERLAP_COMPOUND","$e20fdd09923e4c19$var$SCALED_COMPONENT_OFFSET","$e20fdd09923e4c19$var$UNSCALED_COMPONENT_OFFSET","$e20fdd09923e4c19$export$baf26146a414f24a","onCurve","endContour","$e20fdd09923e4c19$var$Component","dx","dy","scale01","scale10","$e20fdd09923e4c19$export$2e2bcd8739ae039","internal","_getTableStream","_parseGlyphCoord","short","same","_decode","glyfPos","nextPos","_decodeSimple","_decodeComposite","points","endPtsOfContours","numCoords","flag","point","px","py","_getPhantomPoints","transformPoints","phantomPoints","haveInstructions","gPos","readInt8","_getContours","contours","contour","directory","firstPt","lastPt","curvePt","pt","prevPt","midX","midY","$efcf21464e1e0f88$export$2e2bcd8739ae039","CFF2","bias","cff","trans","nStems","x1","y1","usedGsubrs","usedSubrs","open","_usedGsubrs","_usedSubrs","gsubrs","gsubrsBias","privateDict","subrs","Subrs","subrsBias","vstore","vsindex","checkWidth","shift","nominalWidthX","parseStems","subr","phase","c1x","c1y","c2x","c2y","blendVector","getBlendVector","numOperands","sum","s1","s2","v1","v2","random","n","c3x","c3y","c4x","c4y","c5x","c5y","c6x","c6y","pts","startx","starty","b1","$df50792647a3d5cf$var$SBIXImage","originX","originY","buflen","$df50792647a3d5cf$export$2e2bcd8739ae039","getImageForSize","img","image","renderOutlines","$729b375ce67e8a00$var$COLRLayer","color","$729b375ce67e8a00$export$2e2bcd8739ae039","layers","layer","cpal","colr","rec","baseLayer","_getBaseGlyph","fillColor","$62b2d77b45b438f3$var$TUPLES_SHARE_POINT_NUMBERS","$62b2d77b45b438f3$var$TUPLE_COUNT_MASK","$62b2d77b45b438f3$var$EMBEDDED_TUPLE_COORD","$62b2d77b45b438f3$var$INTERMEDIATE_TUPLE","$62b2d77b45b438f3$var$PRIVATE_POINT_NUMBERS","$62b2d77b45b438f3$var$TUPLE_INDEX_MASK","$62b2d77b45b438f3$var$POINTS_ARE_WORDS","$62b2d77b45b438f3$var$POINT_RUN_COUNT_MASK","$62b2d77b45b438f3$var$DELTAS_ARE_ZERO","$62b2d77b45b438f3$var$DELTAS_ARE_WORDS","$62b2d77b45b438f3$var$DELTA_RUN_COUNT_MASK","$62b2d77b45b438f3$export$2e2bcd8739ae039","normalizeCoords","blendVectors","normalized","EPSILON","glyphPoints","tupleCount","here","sharedPoints","decodePoints","origPoints","tupleDataSize","tupleCoords","startCoords","endCoords","a1","factor","tupleFactor","nPoints","xDeltas","decodeDeltas","yDeltas","outPoints","hasDelta","interpolateMissingDeltas","deltaX","deltaY","Uint16Array","run","runCount","readUInt16","Int16Array","inPoints","firstPoint","endPoint","firstDelta","curDelta","deltaInterpolate","deltaShift","ref1","ref2","iterable","in1","in2","out1","out2","out","ref","itemStore","varData","deltaSet","netAdjustment","master","scalar","regionIndex","axes","axisScalar","$7768c4d2aa7d03a3$var$resolved","Promise","resolve","$7768c4d2aa7d03a3$export$2e2bcd8739ae039","mapping","includeGlyph","encodeStream","EncodeStream","then","$681deff774310865$var$ON_CURVE","$681deff774310865$var$X_SHORT_VECTOR","$681deff774310865$var$Y_SHORT_VECTOR","$681deff774310865$var$REPEAT","$681deff774310865$var$SAME_X","$681deff774310865$var$SAME_Y","$681deff774310865$var$Point","$681deff774310865$var$Glyf","xPoints","yPoints","$681deff774310865$export$2e2bcd8739ae039","encodeSimple","lastX","lastY","lastFlag","pointCount","_encodePoint","shortFlag","sameFlag","diff","$06433914835b8dd7$export$2e2bcd8739ae039","glyphEncoder","_addGlyph","curOffset","nextOffset","$06433914835b8dd7$require$Buffer","$5OpyM$clone","$2d910ac31fc0baf3$export$2e2bcd8739ae039","subsetCharstrings","charstrings","subsetSubrs","used","$2d910ac31fc0baf3$require$Buffer","subsetFontdict","used_fds","used_subrs","fd_select","FontName","createCIDFontdict","addString","Encoding","CIDCount","$7de97f725b51e05a$export$2e2bcd8739ae039","toString","variationCoords","defaultLanguage","_directoryPos","_tables","_glyphs","_decodeDirectory","_getTable","setDefaultLanguage","_decodeTable","console","error","getName","subfamilyName","copyright","characterSet","nextState","availableFeatures","createSubset","variationAxes","trim","default","namedVariations","settings","getVariation","$ab5f467accf33238$var$WOFFDirectoryEntry","compLength","origChecksum","$ab5f467accf33238$var$WOFFDirectory","flavor","totalSfntSize","metaOffset","metaLength","metaOrigLength","privOffset","privLength","$ab5f467accf33238$export$2e2bcd8739ae039","$fce99fef0398d8c8$export$2e2bcd8739ae039","outBuffer","$fce99fef0398d8c8$require$Buffer","alloc","$5OpyM$tinyinflate","$f6f1feff1ba0de68$export$2e2bcd8739ae039","_transformedGlyphs","$4965cf368c868bf6$var$Base128","$4965cf368c868bf6$var$knownTags","$4965cf368c868bf6$var$WOFF2DirectoryEntry","customTag","transformVersion","transformed","transformLength","$4965cf368c868bf6$var$WOFF2Directory","totalCompressedSize","$4965cf368c868bf6$export$2e2bcd8739ae039","$b6deb9db8685274b$export$2e2bcd8739ae039","_dataPos","_decompress","_decompressed","decompressedSize","decompressed","$5OpyM$brotlidecompressjs","$b6deb9db8685274b$require$Buffer","_transformGlyfTable","$b6deb9db8685274b$var$GlyfTable","nContours","totalPoints","$b6deb9db8685274b$var$read255UInt16","$b6deb9db8685274b$var$decodeTriplet","instructionSize","composites","$b6deb9db8685274b$var$Substream","_buf","indexFormat","nContourStreamSize","nPointsStreamSize","flagStreamSize","glyphStreamSize","compositeStreamSize","bboxStreamSize","instructionStreamSize","bboxes","$b6deb9db8685274b$var$WORD_CODE","$b6deb9db8685274b$var$ONE_MORE_BYTE_CODE2","$b6deb9db8685274b$var$ONE_MORE_BYTE_CODE1","$b6deb9db8685274b$var$LOWEST_U_CODE","$b6deb9db8685274b$var$withSign","baseval","b0","b2","$313c698c6d2649a4$var$TTCHeader","numFonts","dsigTag","dsigLength","dsigOffset","$313c698c6d2649a4$export$2e2bcd8739ae039","readString","$313c698c6d2649a4$require$Buffer","isBuffer","equals","fonts","$7db119589c227f03$var$DFontName","$7db119589c227f03$var$DFontData","$7db119589c227f03$var$Ref","nameOffset","attr","dataOffset","handle","$7db119589c227f03$var$Type","maxTypeIndex","refList","$7db119589c227f03$var$TypeList","types","$7db119589c227f03$var$DFontMap","typeList","nameListOffset","$7db119589c227f03$var$DFontHeader","dataLength","mapLength","$7db119589c227f03$export$2e2bcd8739ae039","sfnt","$7db119589c227f03$require$Buffer","$cf838c15c8b009ba$export$2e2bcd8739ae039"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/index.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/base.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/TTFFont.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/decorators.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/directory.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/index.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/cmap.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/head.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/hhea.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/hmtx.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/maxp.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/name.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/encodings.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/OS2.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/post.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/cvt.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/fpgm.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/loca.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/prep.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/glyf.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFFont.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFIndex.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFTop.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFDict.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFOperand.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFPointer.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFPrivateDict.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFStandardStrings.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFEncodings.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/cff/CFFCharsets.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/variations.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/opentype.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/VORG.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/EBLC.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/EBDT.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/sbix.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/COLR.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/CPAL.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/BASE.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/GDEF.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/GPOS.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/GSUB.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/JSTF.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/HVAR.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/DSIG.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/gasp.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/hdmx.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/kern.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/LTSH.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/PCLT.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/VDMX.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/vhea.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/vmtx.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/avar.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/bsln.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/aat.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/feat.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/fvar.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/gvar.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/just.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/morx.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/opbd.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/CmapProcessor.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/utils.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/layout/LayoutEngine.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/layout/KernProcessor.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/layout/UnicodeLayoutEngine.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/layout/GlyphRun.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/BBox.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/layout/Script.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/layout/GlyphPosition.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/aat/AATLayoutEngine.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/aat/AATFeatureMap.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/aat/AATMorxProcessor.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/aat/AATStateMachine.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/aat/AATLookupTable.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/OTLayoutEngine.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/ShapingPlan.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/shapers/index.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/shapers/DefaultShaper.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/shapers/ArabicShaper.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/shapers/HangulShaper.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/GlyphInfo.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/OTProcessor.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/GlyphIterator.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/shapers/IndicShaper.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/shapers/indic.json","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/shapers/use.json","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/shapers/indic-data.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/shapers/UniversalShaper.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/GSUBProcessor.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/opentype/GPOSProcessor.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/TTFGlyph.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/Glyph.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/Path.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/StandardNames.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/CFFGlyph.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/SBIXGlyph.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/COLRGlyph.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/GlyphVariationProcessor.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/subset/TTFSubset.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/subset/Subset.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/TTFGlyphEncoder.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/subset/CFFSubset.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/WOFFFont.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/WOFFDirectory.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/WOFF2Font.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/glyph/WOFF2Glyph.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/tables/WOFF2Directory.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/TrueTypeCollection.js","/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pdfkit/node_modules/fontkit/dist/src/DFont.js"],"sourcesContent":["import { registerFormat, openSync, open, create, defaultLanguage, setDefaultLanguage } from './base';\nimport TTFFont from './TTFFont';\nimport WOFFFont from './WOFFFont';\nimport WOFF2Font from './WOFF2Font';\nimport TrueTypeCollection from './TrueTypeCollection';\nimport DFont from './DFont';\n\n// Register font formats\nregisterFormat(TTFFont);\nregisterFormat(WOFFFont);\nregisterFormat(WOFF2Font);\nregisterFormat(TrueTypeCollection);\nregisterFormat(DFont);\n\nexport * from './base';\n\n// Legacy default export for backward compatibility.\nexport default {\n  registerFormat,\n  openSync,\n  open,\n  create,\n  defaultLanguage,\n  setDefaultLanguage\n};\n","import r from 'restructure';\nconst fs = require('fs');\n\nexport let logErrors = false;\n\nlet formats = [];\nexport function registerFormat(format) {\n  formats.push(format);\n};\n\nexport function openSync(filename, postscriptName) {\n  let buffer = fs.readFileSync(filename);\n  return create(buffer, postscriptName);\n};\n\nexport function open(filename, postscriptName, callback) {\n  if (typeof postscriptName === 'function') {\n    callback = postscriptName;\n    postscriptName = null;\n  }\n\n  fs.readFile(filename, function (err, buffer) {\n    if (err) { return callback(err); }\n\n    try {\n      var font = create(buffer, postscriptName);\n    } catch (e) {\n      return callback(e);\n    }\n\n    return callback(null, font);\n  });\n\n  return;\n};\n\nexport function create(buffer, postscriptName) {\n  for (let i = 0; i < formats.length; i++) {\n    let format = formats[i];\n    if (format.probe(buffer)) {\n      let font = new format(new r.DecodeStream(buffer));\n      if (postscriptName) {\n        return font.getFont(postscriptName);\n      }\n\n      return font;\n    }\n  }\n\n  throw new Error('Unknown font format');\n};\n\nexport let defaultLanguage = 'en';\nexport function setDefaultLanguage(lang = 'en') {\n  defaultLanguage = lang;\n};","import r from 'restructure';\nimport { cache } from './decorators';\nimport * as fontkit from './base';\nimport Directory from './tables/directory';\nimport tables from './tables';\nimport CmapProcessor from './CmapProcessor';\nimport LayoutEngine from './layout/LayoutEngine';\nimport TTFGlyph from './glyph/TTFGlyph';\nimport CFFGlyph from './glyph/CFFGlyph';\nimport SBIXGlyph from './glyph/SBIXGlyph';\nimport COLRGlyph from './glyph/COLRGlyph';\nimport GlyphVariationProcessor from './glyph/GlyphVariationProcessor';\nimport TTFSubset from './subset/TTFSubset';\nimport CFFSubset from './subset/CFFSubset';\nimport BBox from './glyph/BBox';\n\n/**\n * This is the base class for all SFNT-based font formats in fontkit.\n * It supports TrueType, and PostScript glyphs, and several color glyph formats.\n */\nexport default class TTFFont {\n  type = 'TTF';\n\n  static probe(buffer) {\n    let format = buffer.toString('ascii', 0, 4);\n    return format === 'true' || format === 'OTTO' || format === String.fromCharCode(0, 1, 0, 0);\n  }\n\n  constructor(stream, variationCoords = null) {\n    this.defaultLanguage = null;\n    this.stream = stream;\n    this.variationCoords = variationCoords;\n\n    this._directoryPos = this.stream.pos;\n    this._tables = {};\n    this._glyphs = {};\n    this._decodeDirectory();\n\n    // define properties for each table to lazily parse\n    for (let tag in this.directory.tables) {\n      let table = this.directory.tables[tag];\n      if (tables[tag] && table.length > 0) {\n        Object.defineProperty(this, tag, {\n          get: this._getTable.bind(this, table)\n        });\n      }\n    }\n  }\n\n  setDefaultLanguage(lang = null) {\n    this.defaultLanguage = lang;\n  }\n\n  _getTable(table) {\n    if (!(table.tag in this._tables)) {\n      try {\n        this._tables[table.tag] = this._decodeTable(table);\n      } catch (e) {\n        if (fontkit.logErrors) {\n          console.error(`Error decoding table ${table.tag}`);\n          console.error(e.stack);\n        }\n      }\n    }\n\n    return this._tables[table.tag];\n  }\n\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n      return this.stream;\n    }\n\n    return null;\n  }\n\n  _decodeDirectory() {\n    return this.directory = Directory.decode(this.stream, {_startOffset: 0});\n  }\n\n  _decodeTable(table) {\n    let pos = this.stream.pos;\n\n    let stream = this._getTableStream(table.tag);\n    let result = tables[table.tag].decode(stream, this, table.length);\n\n    this.stream.pos = pos;\n    return result;\n  }\n\n  /**\n   * Gets a string from the font's `name` table\n   * `lang` is a BCP-47 language code.\n   * @return {string}\n   */\n  getName(key, lang = this.defaultLanguage || fontkit.defaultLanguage) {\n    let record = this.name && this.name.records[key];\n    if (record) {\n      // Attempt to retrieve the entry, depending on which translation is available:\n      return (\n          record[lang]\n          || record[this.defaultLanguage]\n          || record[fontkit.defaultLanguage]\n          || record['en']\n          || record[Object.keys(record)[0]] // Seriously, ANY language would be fine\n          || null\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * The unique PostScript name for this font, e.g. \"Helvetica-Bold\"\n   * @type {string}\n   */\n  get postscriptName() {\n    return this.getName('postscriptName');\n  }\n\n  /**\n   * The font's full name, e.g. \"Helvetica Bold\"\n   * @type {string}\n   */\n  get fullName() {\n    return this.getName('fullName');\n  }\n\n  /**\n   * The font's family name, e.g. \"Helvetica\"\n   * @type {string}\n   */\n  get familyName() {\n    return this.getName('fontFamily');\n  }\n\n  /**\n   * The font's sub-family, e.g. \"Bold\".\n   * @type {string}\n   */\n  get subfamilyName() {\n    return this.getName('fontSubfamily');\n  }\n\n  /**\n   * The font's copyright information\n   * @type {string}\n   */\n  get copyright() {\n    return this.getName('copyright');\n  }\n\n  /**\n   * The font's version number\n   * @type {string}\n   */\n  get version() {\n    return this.getName('version');\n  }\n\n  /**\n   * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))\n   * @type {number}\n   */\n  get ascent() {\n    return this.hhea.ascent;\n  }\n\n  /**\n   * The font’s [descender](https://en.wikipedia.org/wiki/Descender)\n   * @type {number}\n   */\n  get descent() {\n    return this.hhea.descent;\n  }\n\n  /**\n   * The amount of space that should be included between lines\n   * @type {number}\n   */\n  get lineGap() {\n    return this.hhea.lineGap;\n  }\n\n  /**\n   * The offset from the normal underline position that should be used\n   * @type {number}\n   */\n  get underlinePosition() {\n    return this.post.underlinePosition;\n  }\n\n  /**\n   * The weight of the underline that should be used\n   * @type {number}\n   */\n  get underlineThickness() {\n    return this.post.underlineThickness;\n  }\n\n  /**\n   * If this is an italic font, the angle the cursor should be drawn at to match the font design\n   * @type {number}\n   */\n  get italicAngle() {\n    return this.post.italicAngle;\n  }\n\n  /**\n   * The height of capital letters above the baseline.\n   * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.\n   * @type {number}\n   */\n  get capHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.capHeight : this.ascent;\n  }\n\n  /**\n   * The height of lower case letters in the font.\n   * See [here](https://en.wikipedia.org/wiki/X-height) for more details.\n   * @type {number}\n   */\n  get xHeight() {\n    let os2 = this['OS/2'];\n    return os2 ? os2.xHeight : 0;\n  }\n\n  /**\n   * The number of glyphs in the font.\n   * @type {number}\n   */\n  get numGlyphs() {\n    return this.maxp.numGlyphs;\n  }\n\n  /**\n   * The size of the font’s internal coordinate grid\n   * @type {number}\n   */\n  get unitsPerEm() {\n    return this.head.unitsPerEm;\n  }\n\n  /**\n   * The font’s bounding box, i.e. the box that encloses all glyphs in the font.\n   * @type {BBox}\n   */\n  @cache\n  get bbox() {\n    return Object.freeze(new BBox(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));\n  }\n\n  @cache\n  get _cmapProcessor() {\n    return new CmapProcessor(this.cmap);\n  }\n\n  /**\n   * An array of all of the unicode code points supported by the font.\n   * @type {number[]}\n   */\n  @cache\n  get characterSet() {\n    return this._cmapProcessor.getCharacterSet();\n  }\n\n  /**\n   * Returns whether there is glyph in the font for the given unicode code point.\n   *\n   * @param {number} codePoint\n   * @return {boolean}\n   */\n  hasGlyphForCodePoint(codePoint) {\n    return !!this._cmapProcessor.lookup(codePoint);\n  }\n\n  /**\n   * Maps a single unicode code point to a Glyph object.\n   * Does not perform any advanced substitutions (there is no context to do so).\n   *\n   * @param {number} codePoint\n   * @return {Glyph}\n   */\n  glyphForCodePoint(codePoint) {\n    return this.getGlyph(this._cmapProcessor.lookup(codePoint), [codePoint]);\n  }\n\n  /**\n   * Returns an array of Glyph objects for the given string.\n   * This is only a one-to-one mapping from characters to glyphs.\n   * For most uses, you should use font.layout (described below), which\n   * provides a much more advanced mapping supporting AAT and OpenType shaping.\n   *\n   * @param {string} string\n   * @return {Glyph[]}\n   */\n  glyphsForString(string) {\n    let glyphs = [];\n    let len = string.length;\n    let idx = 0;\n    let last = -1;\n    let state = -1;\n\n    while (idx <= len) {\n      let code = 0;\n      let nextState = 0;\n\n      if (idx < len) {\n        // Decode the next codepoint from UTF 16\n        code = string.charCodeAt(idx++);\n        if (0xd800 <= code && code <= 0xdbff && idx < len) {\n          let next = string.charCodeAt(idx);\n          if (0xdc00 <= next && next <= 0xdfff) {\n            idx++;\n            code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;\n          }\n        }\n\n        // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.\n        nextState = ((0xfe00 <= code && code <= 0xfe0f) || (0xe0100 <= code && code <= 0xe01ef)) ? 1 : 0;\n      } else {\n        idx++;\n      }\n\n      if (state === 0 && nextState === 1) {\n        // Variation selector following normal codepoint.\n        glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [last, code]));\n      } else if (state === 0 && nextState === 0) {\n        // Normal codepoint following normal codepoint.\n        glyphs.push(this.glyphForCodePoint(last));\n      }\n\n      last = code;\n      state = nextState;\n    }\n\n    return glyphs;\n  }\n\n  @cache\n  get _layoutEngine() {\n    return new LayoutEngine(this);\n  }\n\n  /**\n   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.\n   *\n   * @param {string} string\n   * @param {string[]} [userFeatures]\n   * @param {string} [script]\n   * @param {string} [language]\n   * @param {string} [direction]\n   * @return {GlyphRun}\n   */\n  layout(string, userFeatures, script, language, direction) {\n    return this._layoutEngine.layout(string, userFeatures, script, language, direction);\n  }\n\n  /**\n   * Returns an array of strings that map to the given glyph id.\n   * @param {number} gid - glyph id\n   */\n  stringsForGlyph(gid) {\n    return this._layoutEngine.stringsForGlyph(gid);\n  }\n\n  /**\n   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)\n   * (or mapped AAT tags) supported by the font.\n   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.\n   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.\n   *\n   * @type {string[]}\n   */\n  get availableFeatures() {\n    return this._layoutEngine.getAvailableFeatures();\n  }\n\n  getAvailableFeatures(script, language) {\n    return this._layoutEngine.getAvailableFeatures(script, language);\n  }\n\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf) {\n        this._glyphs[glyph] = new TTFGlyph(glyph, characters, this);\n\n      } else if (this.directory.tables['CFF '] || this.directory.tables.CFF2) {\n        this._glyphs[glyph] = new CFFGlyph(glyph, characters, this);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n\n  /**\n   * Returns a glyph object for the given glyph id.\n   * You can pass the array of code points this glyph represents for\n   * your use later, and it will be stored in the glyph object.\n   *\n   * @param {number} glyph\n   * @param {number[]} characters\n   * @return {Glyph}\n   */\n  getGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.sbix) {\n        this._glyphs[glyph] = new SBIXGlyph(glyph, characters, this);\n\n      } else if ((this.directory.tables.COLR) && (this.directory.tables.CPAL)) {\n        this._glyphs[glyph] = new COLRGlyph(glyph, characters, this);\n\n      } else {\n        this._getBaseGlyph(glyph, characters);\n      }\n    }\n\n    return this._glyphs[glyph] || null;\n  }\n\n  /**\n   * Returns a Subset for this font.\n   * @return {Subset}\n   */\n  createSubset() {\n    if (this.directory.tables['CFF ']) {\n      return new CFFSubset(this);\n    }\n\n    return new TTFSubset(this);\n  }\n\n  /**\n   * Returns an object describing the available variation axes\n   * that this font supports. Keys are setting tags, and values\n   * contain the axis name, range, and default value.\n   *\n   * @type {object}\n   */\n  @cache\n  get variationAxes() {\n    let res = {};\n    if (!this.fvar) {\n      return res;\n    }\n\n    for (let axis of this.fvar.axis) {\n      res[axis.axisTag.trim()] = {\n        name: axis.name.en,\n        min: axis.minValue,\n        default: axis.defaultValue,\n        max: axis.maxValue\n      };\n    }\n\n    return res;\n  }\n\n  /**\n   * Returns an object describing the named variation instances\n   * that the font designer has specified. Keys are variation names\n   * and values are the variation settings for this instance.\n   *\n   * @type {object}\n   */\n  @cache\n  get namedVariations() {\n    let res = {};\n    if (!this.fvar) {\n      return res;\n    }\n\n    for (let instance of this.fvar.instance) {\n      let settings = {};\n      for (let i = 0; i < this.fvar.axis.length; i++) {\n        let axis = this.fvar.axis[i];\n        settings[axis.axisTag.trim()] = instance.coord[i];\n      }\n\n      res[instance.name.en] = settings;\n    }\n\n    return res;\n  }\n\n  /**\n   * Returns a new font with the given variation settings applied.\n   * Settings can either be an instance name, or an object containing\n   * variation tags as specified by the `variationAxes` property.\n   *\n   * @param {object} settings\n   * @return {TTFFont}\n   */\n  getVariation(settings) {\n    if (!(this.directory.tables.fvar && ((this.directory.tables.gvar && this.directory.tables.glyf) || this.directory.tables.CFF2))) {\n      throw new Error('Variations require a font with the fvar, gvar and glyf, or CFF2 tables.');\n    }\n\n    if (typeof settings === 'string') {\n      settings = this.namedVariations[settings];\n    }\n\n    if (typeof settings !== 'object') {\n      throw new Error('Variation settings must be either a variation name or settings object.');\n    }\n\n    // normalize the coordinates\n    let coords = this.fvar.axis.map((axis, i) => {\n      let axisTag = axis.axisTag.trim();\n      if (axisTag in settings) {\n        return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));\n      } else {\n        return axis.defaultValue;\n      }\n    });\n\n    let stream = new r.DecodeStream(this.stream.buffer);\n    stream.pos = this._directoryPos;\n\n    let font = new TTFFont(stream, coords);\n    font._tables = this._tables;\n\n    return font;\n  }\n\n  @cache\n  get _variationProcessor() {\n    if (!this.fvar) {\n      return null;\n    }\n\n    let variationCoords = this.variationCoords;\n\n    // Ignore if no variation coords and not CFF2\n    if (!variationCoords && !this.CFF2) {\n      return null;\n    }\n\n    if (!variationCoords) {\n      variationCoords = this.fvar.axis.map(axis => axis.defaultValue);\n    }\n\n    return new GlyphVariationProcessor(this, variationCoords);\n  }\n\n  // Standardized format plugin API\n  getFont(name) {\n    return this.getVariation(name);\n  }\n}\n","/**\n * This decorator caches the results of a getter or method such that\n * the results are lazily computed once, and then cached.\n * @private\n */\nexport function cache(target, key, descriptor) {\n  if (descriptor.get) {\n    let get = descriptor.get;\n    descriptor.get = function() {\n      let value = get.call(this);\n      Object.defineProperty(this, key, { value });\n      return value;\n    };\n  } else if (typeof descriptor.value === 'function') {\n    let fn = descriptor.value;\n\n    return {\n      get() {\n        let cache = new Map;\n        function memoized(...args) {\n          let key = args.length > 0 ? args[0] : 'value';\n          if (cache.has(key)) {\n            return cache.get(key);\n          }\n\n          let result = fn.apply(this, args);\n          cache.set(key, result);\n          return result;\n        };\n\n        Object.defineProperty(this, key, {value: memoized});\n        return memoized;\n      }\n    };\n  }\n}\n","import r from 'restructure';\nimport Tables from './';\n\nlet TableEntry = new r.Struct({\n  tag:        new r.String(4),\n  checkSum:   r.uint32,\n  offset:     new r.Pointer(r.uint32, 'void', { type: 'global' }),\n  length:     r.uint32\n});\n\nlet Directory = new r.Struct({\n  tag:            new r.String(4),\n  numTables:      r.uint16,\n  searchRange:    r.uint16,\n  entrySelector:  r.uint16,\n  rangeShift:     r.uint16,\n  tables:         new r.Array(TableEntry, 'numTables')\n});\n\nDirectory.process = function() {\n  let tables = {};\n  for (let table of this.tables) {\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nDirectory.preEncode = function(stream) {\n  let tables = [];\n  for (let tag in this.tables) {\n    let table = this.tables[tag];\n    if (table) {\n      tables.push({\n        tag: tag,\n        checkSum: 0,\n        offset: new r.VoidPointer(Tables[tag], table),\n        length: Tables[tag].size(table)\n      });\n    }\n  }\n\n  this.tag = 'true';\n  this.numTables = tables.length;\n  this.tables = tables;\n\n  let maxExponentFor2 = Math.floor((Math.log(this.numTables) / Math.LN2));\n  let maxPowerOf2 = Math.pow(2, maxExponentFor2);\n\n  this.searchRange =  maxPowerOf2 * 16;\n  this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;\n  this.rangeShift = this.numTables * 16 - this.searchRange;\n};\n\nexport default Directory;\n","let tables = {};\nexport default tables;\n\n// Required Tables\nimport cmap from './cmap';\nimport head from './head';\nimport hhea from './hhea';\nimport hmtx from './hmtx';\nimport maxp from './maxp';\nimport name from './name';\nimport OS2 from './OS2';\nimport post from './post';\n\ntables.cmap = cmap;\ntables.head = head;\ntables.hhea = hhea;\ntables.hmtx = hmtx;\ntables.maxp = maxp;\ntables.name = name;\ntables['OS/2'] = OS2;\ntables.post = post;\n\n\n// TrueType Outlines\nimport cvt from './cvt';\nimport fpgm from './fpgm';\nimport loca from './loca';\nimport prep from './prep';\nimport glyf from './glyf';\n\ntables.fpgm = fpgm;\ntables.loca = loca;\ntables.prep = prep;\ntables['cvt '] = cvt;\ntables.glyf = glyf;\n\n\n// PostScript Outlines\nimport CFFFont from '../cff/CFFFont';\nimport VORG from './VORG';\n\ntables['CFF '] = CFFFont;\ntables['CFF2'] = CFFFont;\ntables.VORG = VORG;\n\n\n// Bitmap Glyphs\nimport EBLC from './EBLC';\nimport sbix from './sbix';\nimport COLR from './COLR';\nimport CPAL from './CPAL';\n\ntables.EBLC = EBLC;\ntables.CBLC = tables.EBLC;\ntables.sbix = sbix;\ntables.COLR = COLR;\ntables.CPAL = CPAL;\n\n\n// Advanced OpenType Tables\nimport BASE from './BASE';\nimport GDEF from './GDEF';\nimport GPOS from './GPOS';\nimport GSUB from './GSUB';\nimport JSTF from './JSTF';\n\ntables.BASE = BASE;\ntables.GDEF = GDEF;\ntables.GPOS = GPOS;\ntables.GSUB = GSUB;\ntables.JSTF = JSTF;\n\n// OpenType variations tables\nimport HVAR from './HVAR';\n\ntables.HVAR = HVAR;\n\n// Other OpenType Tables\nimport DSIG from './DSIG';\nimport gasp from './gasp';\nimport hdmx from './hdmx';\nimport kern from './kern';\nimport LTSH from './LTSH';\nimport PCLT from './PCLT';\nimport VDMX from './VDMX';\nimport vhea from './vhea';\nimport vmtx from './vmtx';\n\ntables.DSIG = DSIG;\ntables.gasp = gasp;\ntables.hdmx = hdmx;\ntables.kern = kern;\ntables.LTSH = LTSH;\ntables.PCLT = PCLT;\ntables.VDMX = VDMX;\ntables.vhea = vhea;\ntables.vmtx = vmtx;\n\n\n// Apple Advanced Typography Tables\nimport avar from './avar';\nimport bsln from './bsln';\nimport feat from './feat';\nimport fvar from './fvar';\nimport gvar from './gvar';\nimport just from './just';\nimport morx from './morx';\nimport opbd from './opbd';\n\ntables.avar = avar;\ntables.bsln = bsln;\ntables.feat = feat;\ntables.fvar = fvar;\ntables.gvar = gvar;\ntables.just = just;\ntables.morx = morx;\ntables.opbd = opbd;\n","import r from 'restructure';\n\nlet SubHeader = new r.Struct({\n  firstCode:      r.uint16,\n  entryCount:     r.uint16,\n  idDelta:        r.int16,\n  idRangeOffset:  r.uint16\n});\n\nlet CmapGroup = new r.Struct({\n  startCharCode:  r.uint32,\n  endCharCode:    r.uint32,\n  glyphID:        r.uint32\n});\n\nlet UnicodeValueRange = new r.Struct({\n  startUnicodeValue:  r.uint24,\n  additionalCount:    r.uint8\n});\n\nlet UVSMapping = new r.Struct({\n  unicodeValue: r.uint24,\n  glyphID:      r.uint16\n});\n\nlet DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);\nlet NonDefaultUVS = new r.Array(UVSMapping, r.uint32);\n\nlet VarSelectorRecord = new r.Struct({\n  varSelector:    r.uint24,\n  defaultUVS:     new r.Pointer(r.uint32, DefaultUVS, {type: 'parent'}),\n  nonDefaultUVS:  new r.Pointer(r.uint32, NonDefaultUVS, {type: 'parent'})\n});\n\nlet CmapSubtable = new r.VersionedStruct(r.uint16, {\n  0: { // Byte encoding\n    length:     r.uint16,   // Total table length in bytes (set to 262 for format 0)\n    language:   r.uint16,   // Language code for this encoding subtable, or zero if language-independent\n    codeMap:    new r.LazyArray(r.uint8, 256)\n  },\n\n  2: { // High-byte mapping (CJK)\n    length:           r.uint16,\n    language:         r.uint16,\n    subHeaderKeys:    new r.Array(r.uint16, 256),\n    subHeaderCount:   t => Math.max.apply(Math, t.subHeaderKeys),\n    subHeaders:       new r.LazyArray(SubHeader, 'subHeaderCount'),\n    glyphIndexArray:  new r.LazyArray(r.uint16, 'subHeaderCount')\n  },\n\n  4: { // Segment mapping to delta values\n    length:           r.uint16,              // Total table length in bytes\n    language:         r.uint16,              // Language code\n    segCountX2:       r.uint16,\n    segCount:         t => t.segCountX2 >> 1,\n    searchRange:      r.uint16,\n    entrySelector:    r.uint16,\n    rangeShift:       r.uint16,\n    endCode:          new r.LazyArray(r.uint16, 'segCount'),\n    reservedPad:      new r.Reserved(r.uint16),       // This value should be zero\n    startCode:        new r.LazyArray(r.uint16, 'segCount'),\n    idDelta:          new r.LazyArray(r.int16, 'segCount'),\n    idRangeOffset:    new r.LazyArray(r.uint16, 'segCount'),\n    glyphIndexArray:  new r.LazyArray(r.uint16, t => (t.length - t._currentOffset) / 2)\n  },\n\n  6: { // Trimmed table\n    length:         r.uint16,\n    language:       r.uint16,\n    firstCode:      r.uint16,\n    entryCount:     r.uint16,\n    glyphIndices:   new r.LazyArray(r.uint16, 'entryCount')\n  },\n\n  8: { // mixed 16-bit and 32-bit coverage\n    reserved: new r.Reserved(r.uint16),\n    length:   r.uint32,\n    language: r.uint16,\n    is32:     new r.LazyArray(r.uint8, 8192),\n    nGroups:  r.uint32,\n    groups:   new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  10: { // Trimmed Array\n    reserved:       new r.Reserved(r.uint16),\n    length:         r.uint32,\n    language:       r.uint32,\n    firstCode:      r.uint32,\n    entryCount:     r.uint32,\n    glyphIndices:   new r.LazyArray(r.uint16, 'numChars')\n  },\n\n  12: { // Segmented coverage\n    reserved: new r.Reserved(r.uint16),\n    length:   r.uint32,\n    language: r.uint32,\n    nGroups:  r.uint32,\n    groups:   new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  13: { // Many-to-one range mappings (same as 12 except for group.startGlyphID)\n    reserved: new r.Reserved(r.uint16),\n    length:   r.uint32,\n    language: r.uint32,\n    nGroups:  r.uint32,\n    groups:   new r.LazyArray(CmapGroup, 'nGroups')\n  },\n\n  14: { // Unicode Variation Sequences\n    length:       r.uint32,\n    numRecords:   r.uint32,\n    varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')\n  }\n});\n\nlet CmapEntry = new r.Struct({\n  platformID:  r.uint16,  // Platform identifier\n  encodingID:  r.uint16,  // Platform-specific encoding identifier\n  table:       new r.Pointer(r.uint32, CmapSubtable, {type: 'parent', lazy: true})\n});\n\n// character to glyph mapping\nexport default new r.Struct({\n  version:      r.uint16,\n  numSubtables: r.uint16,\n  tables:       new r.Array(CmapEntry, 'numSubtables')\n});\n","import r from 'restructure';\n\n// font header\nexport default new r.Struct({\n  version:            r.int32,                   // 0x00010000 (version 1.0)\n  revision:           r.int32,                   // set by font manufacturer\n  checkSumAdjustment: r.uint32,\n  magicNumber:        r.uint32,                  // set to 0x5F0F3CF5\n  flags:              r.uint16,\n  unitsPerEm:         r.uint16,                  // range from 64 to 16384\n  created:            new r.Array(r.int32, 2),\n  modified:           new r.Array(r.int32, 2),\n  xMin:               r.int16,                   // for all glyph bounding boxes\n  yMin:               r.int16,                   // for all glyph bounding boxes\n  xMax:               r.int16,                   // for all glyph bounding boxes\n  yMax:               r.int16,                   // for all glyph bounding boxes\n  macStyle:           new r.Bitfield(r.uint16, [\n    'bold', 'italic', 'underline', 'outline',\n    'shadow', 'condensed', 'extended'\n  ]),\n  lowestRecPPEM:      r.uint16,                  // smallest readable size in pixels\n  fontDirectionHint:  r.int16,\n  indexToLocFormat:   r.int16,                   // 0 for short offsets, 1 for long\n  glyphDataFormat:    r.int16                    // 0 for current format\n});\n","import r from 'restructure';\n\n// horizontal header\nexport default new r.Struct({\n  version:              r.int32,\n  ascent:               r.int16,   // Distance from baseline of highest ascender\n  descent:              r.int16,   // Distance from baseline of lowest descender\n  lineGap:              r.int16,   // Typographic line gap\n  advanceWidthMax:      r.uint16,  // Maximum advance width value in 'hmtx' table\n  minLeftSideBearing:   r.int16,   // Maximum advance width value in 'hmtx' table\n  minRightSideBearing:  r.int16,   // Minimum right sidebearing value\n  xMaxExtent:           r.int16,\n  caretSlopeRise:       r.int16,   // Used to calculate the slope of the cursor (rise/run); 1 for vertical\n  caretSlopeRun:        r.int16,   // 0 for vertical\n  caretOffset:          r.int16,   // Set to 0 for non-slanted fonts\n  reserved:             new r.Reserved(r.int16, 4),\n  metricDataFormat:     r.int16,   // 0 for current format\n  numberOfMetrics:      r.uint16   // Number of advance widths in 'hmtx' table\n});\n","import r from 'restructure';\n\nlet HmtxEntry = new r.Struct({\n  advance: r.uint16,\n  bearing: r.int16\n});\n\nexport default new r.Struct({\n  metrics:    new r.LazyArray(HmtxEntry, t => t.parent.hhea.numberOfMetrics),\n  bearings:   new r.LazyArray(r.int16, t => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)\n});\n","import r from 'restructure';\n\n// maxiumum profile\nexport default new r.Struct({\n  version:                r.int32,\n  numGlyphs:              r.uint16,  // The number of glyphs in the font\n  maxPoints:              r.uint16,  // Maximum points in a non-composite glyph\n  maxContours:            r.uint16,  // Maximum contours in a non-composite glyph\n  maxComponentPoints:     r.uint16,  // Maximum points in a composite glyph\n  maxComponentContours:   r.uint16,  // Maximum contours in a composite glyph\n  maxZones:               r.uint16,  // 1 if instructions do not use the twilight zone, 2 otherwise\n  maxTwilightPoints:      r.uint16,  // Maximum points used in Z0\n  maxStorage:             r.uint16,  // Number of Storage Area locations\n  maxFunctionDefs:        r.uint16,  // Number of FDEFs\n  maxInstructionDefs:     r.uint16,  // Number of IDEFs\n  maxStackElements:       r.uint16,  // Maximum stack depth\n  maxSizeOfInstructions:  r.uint16,  // Maximum byte count for glyph instructions\n  maxComponentElements:   r.uint16,  // Maximum number of components referenced at “top level” for any composite glyph\n  maxComponentDepth:      r.uint16   // Maximum levels of recursion; 1 for simple components\n});\n","import r from 'restructure';\nimport {getEncoding, LANGUAGES} from '../encodings';\n\nlet NameRecord = new r.Struct({\n  platformID: r.uint16,\n  encodingID: r.uint16,\n  languageID: r.uint16,\n  nameID:     r.uint16,\n  length:     r.uint16,\n  string:     new r.Pointer(r.uint16,\n    new r.String('length', t => getEncoding(t.platformID, t.encodingID, t.languageID)),\n    { type: 'parent', relativeTo: ctx => ctx.parent.stringOffset, allowNull: false }\n  )\n});\n\nlet LangTagRecord = new r.Struct({\n  length:  r.uint16,\n  tag:     new r.Pointer(r.uint16, new r.String('length', 'utf16be'), {type: 'parent', relativeTo: ctx => ctx.stringOffset})\n});\n\nvar NameTable = new r.VersionedStruct(r.uint16, {\n  0: {\n    count:          r.uint16,\n    stringOffset:   r.uint16,\n    records:        new r.Array(NameRecord, 'count')\n  },\n  1: {\n    count:          r.uint16,\n    stringOffset:   r.uint16,\n    records:        new r.Array(NameRecord, 'count'),\n    langTagCount:   r.uint16,\n    langTags:       new r.Array(LangTagRecord, 'langTagCount')\n  }\n});\n\nexport default NameTable;\n\nconst NAMES = [\n  'copyright',\n  'fontFamily',\n  'fontSubfamily',\n  'uniqueSubfamily',\n  'fullName',\n  'version',\n  'postscriptName', // Note: A font may have only one PostScript name and that name must be ASCII.\n  'trademark',\n  'manufacturer',\n  'designer',\n  'description',\n  'vendorURL',\n  'designerURL',\n  'license',\n  'licenseURL',\n  null, // reserved\n  'preferredFamily',\n  'preferredSubfamily',\n  'compatibleFull',\n  'sampleText',\n  'postscriptCIDFontName',\n  'wwsFamilyName',\n  'wwsSubfamilyName'\n];\n\nNameTable.process = function(stream) {\n  var records = {};\n  for (let record of this.records) {\n    // find out what language this is for\n    let language = LANGUAGES[record.platformID][record.languageID];\n\n    if (language == null && this.langTags != null && record.languageID >= 0x8000) {\n      language = this.langTags[record.languageID - 0x8000].tag;\n    }\n\n    if (language == null) {\n      language = record.platformID + '-' + record.languageID;\n    }\n\n    // if the nameID is >= 256, it is a font feature record (AAT)\n    let key = record.nameID >= 256 ? 'fontFeatures' : (NAMES[record.nameID] || record.nameID);\n    if (records[key] == null) {\n      records[key] = {};\n    }\n\n    let obj = records[key];\n    if (record.nameID >= 256) {\n      obj = obj[record.nameID] || (obj[record.nameID] = {});\n    }\n\n    if (typeof record.string === 'string' || typeof obj[language] !== 'string') {\n      obj[language] = record.string;\n    }\n  }\n\n  this.records = records;\n};\n\nNameTable.preEncode = function() {\n  if (Array.isArray(this.records)) return;\n  this.version = 0;\n\n  let records = [];\n  for (let key in this.records) {\n    let val = this.records[key];\n    if (key === 'fontFeatures') continue;\n\n    records.push({\n      platformID: 3,\n      encodingID: 1,\n      languageID: 0x409,\n      nameID: NAMES.indexOf(key),\n      length: Buffer.byteLength(val.en, 'utf16le'),\n      string: val.en\n    });\n\n    if (key === 'postscriptName') {\n      records.push({\n        platformID: 1,\n        encodingID: 0,\n        languageID: 0,\n        nameID: NAMES.indexOf(key),\n        length: val.en.length,\n        string: val.en\n      });\n    }\n  }\n\n  this.records = records;\n  this.count = records.length;\n  this.stringOffset = NameTable.size(this, null, false);\n};\n","/**\n * Gets an encoding name from platform, encoding, and language ids.\n * Returned encoding names can be used in iconv-lite to decode text.\n */\nexport function getEncoding(platformID, encodingID, languageID = 0) {\n  if (platformID === 1 && MAC_LANGUAGE_ENCODINGS[languageID]) {\n    return MAC_LANGUAGE_ENCODINGS[languageID];\n  }\n  \n  return ENCODINGS[platformID][encodingID];\n}\n\n// Map of platform ids to encoding ids.\nexport const ENCODINGS = [\n  // unicode\n  ['utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be', 'utf16be'],\n  \n  // macintosh\n  // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/\n  // 0\tRoman                 17\tMalayalam\n  // 1\tJapanese\t            18\tSinhalese\n  // 2\tTraditional Chinese\t  19\tBurmese\n  // 3\tKorean\t              20\tKhmer\n  // 4\tArabic\t              21\tThai\n  // 5\tHebrew\t              22\tLaotian\n  // 6\tGreek\t                23\tGeorgian\n  // 7\tRussian\t              24\tArmenian\n  // 8\tRSymbol\t              25\tSimplified Chinese\n  // 9\tDevanagari\t          26\tTibetan\n  // 10\tGurmukhi\t            27\tMongolian\n  // 11\tGujarati\t            28\tGeez\n  // 12\tOriya\t                29\tSlavic\n  // 13\tBengali\t              30\tVietnamese\n  // 14\tTamil\t                31\tSindhi\n  // 15\tTelugu\t              32\t(Uninterpreted)\n  // 16\tKannada\n  ['macroman', 'shift-jis', 'big5', 'euc-kr', 'iso-8859-6', 'iso-8859-8',\n   'macgreek', 'maccyrillic', 'symbol', 'Devanagari', 'Gurmukhi', 'Gujarati',\n   'Oriya', 'Bengali', 'Tamil', 'Telugu', 'Kannada', 'Malayalam', 'Sinhalese',\n   'Burmese', 'Khmer', 'macthai', 'Laotian', 'Georgian', 'Armenian', 'gb-2312-80', \n   'Tibetan', 'Mongolian', 'Geez', 'maccenteuro', 'Vietnamese', 'Sindhi'],\n  \n  // ISO (deprecated)\n  ['ascii'],\n  \n  // windows\n  // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx\n  ['symbol', 'utf16be', 'shift-jis', 'gb18030', 'big5', 'wansung', 'johab', null, null, null, 'utf16be']\n];\n\n// Overrides for Mac scripts by language id.\n// See http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt\nexport const MAC_LANGUAGE_ENCODINGS = {\n  15: 'maciceland',\n  17: 'macturkish',\n  18: 'maccroatian',\n  24: 'maccenteuro',\n  25: 'maccenteuro',\n  26: 'maccenteuro',\n  27: 'maccenteuro',\n  28: 'maccenteuro',\n  30: 'maciceland',\n  37: 'macromania',\n  38: 'maccenteuro',\n  39: 'maccenteuro',\n  40: 'maccenteuro',\n  143: 'macinuit', // Unsupported by iconv-lite\n  146: 'macgaelic' // Unsupported by iconv-lite\n};\n\n// Map of platform ids to BCP-47 language codes.\nexport const LANGUAGES = [\n  // unicode\n  [],\n  \n  { // macintosh\n    0: 'en',        30: 'fo',       60: 'ks',       90: 'rw',\n    1: 'fr',        31: 'fa',       61: 'ku',       91: 'rn',\n    2: 'de',        32: 'ru',       62: 'sd',       92: 'ny',\n    3: 'it',        33: 'zh',       63: 'bo',       93: 'mg',\n    4: 'nl',        34: 'nl-BE',    64: 'ne',       94: 'eo',\n    5: 'sv',        35: 'ga',       65: 'sa',       128: 'cy',\n    6: 'es',        36: 'sq',       66: 'mr',       129: 'eu',\n    7: 'da',        37: 'ro',       67: 'bn',       130: 'ca',\n    8: 'pt',        38: 'cz',       68: 'as',       131: 'la',\n    9: 'no',        39: 'sk',       69: 'gu',       132: 'qu',\n    10: 'he',       40: 'si',       70: 'pa',       133: 'gn',\n    11: 'ja',       41: 'yi',       71: 'or',       134: 'ay',\n    12: 'ar',       42: 'sr',       72: 'ml',       135: 'tt',\n    13: 'fi',       43: 'mk',       73: 'kn',       136: 'ug',\n    14: 'el',       44: 'bg',       74: 'ta',       137: 'dz',\n    15: 'is',       45: 'uk',       75: 'te',       138: 'jv',\n    16: 'mt',       46: 'be',       76: 'si',       139: 'su',\n    17: 'tr',       47: 'uz',       77: 'my',       140: 'gl',\n    18: 'hr',       48: 'kk',       78: 'km',       141: 'af',\n    19: 'zh-Hant',  49: 'az-Cyrl',  79: 'lo',       142: 'br',\n    20: 'ur',       50: 'az-Arab',  80: 'vi',       143: 'iu',\n    21: 'hi',       51: 'hy',       81: 'id',       144: 'gd',\n    22: 'th',       52: 'ka',       82: 'tl',       145: 'gv',\n    23: 'ko',       53: 'mo',       83: 'ms',       146: 'ga',\n    24: 'lt',       54: 'ky',       84: 'ms-Arab',  147: 'to',\n    25: 'pl',       55: 'tg',       85: 'am',       148: 'el-polyton',\n    26: 'hu',       56: 'tk',       86: 'ti',       149: 'kl',\n    27: 'es',       57: 'mn-CN',    87: 'om',       150: 'az',\n    28: 'lv',       58: 'mn',       88: 'so',       151: 'nn',\n    29: 'se',       59: 'ps',       89: 'sw',\n  },\n  \n  // ISO (deprecated)\n  [],\n  \n  { // windows                                        \n    0x0436: 'af',       0x4009: 'en-IN',    0x0487: 'rw',          0x0432: 'tn',       \n    0x041C: 'sq',       0x1809: 'en-IE',    0x0441: 'sw',          0x045B: 'si',          \n    0x0484: 'gsw',      0x2009: 'en-JM',    0x0457: 'kok',         0x041B: 'sk',          \n    0x045E: 'am',       0x4409: 'en-MY',    0x0412: 'ko',          0x0424: 'sl',          \n    0x1401: 'ar-DZ',    0x1409: 'en-NZ',    0x0440: 'ky',          0x2C0A: 'es-AR',       \n    0x3C01: 'ar-BH',    0x3409: 'en-PH',    0x0454: 'lo',          0x400A: 'es-BO',       \n    0x0C01: 'ar',       0x4809: 'en-SG',    0x0426: 'lv',          0x340A: 'es-CL',       \n    0x0801: 'ar-IQ',    0x1C09: 'en-ZA',    0x0427: 'lt',          0x240A: 'es-CO',       \n    0x2C01: 'ar-JO',    0x2C09: 'en-TT',    0x082E: 'dsb',         0x140A: 'es-CR',       \n    0x3401: 'ar-KW',    0x0809: 'en-GB',    0x046E: 'lb',          0x1C0A: 'es-DO',       \n    0x3001: 'ar-LB',    0x0409: 'en',       0x042F: 'mk',          0x300A: 'es-EC',       \n    0x1001: 'ar-LY',    0x3009: 'en-ZW',    0x083E: 'ms-BN',       0x440A: 'es-SV',       \n    0x1801: 'ary',      0x0425: 'et',       0x043E: 'ms',          0x100A: 'es-GT',       \n    0x2001: 'ar-OM',    0x0438: 'fo',       0x044C: 'ml',          0x480A: 'es-HN',       \n    0x4001: 'ar-QA',    0x0464: 'fil',      0x043A: 'mt',          0x080A: 'es-MX',       \n    0x0401: 'ar-SA',    0x040B: 'fi',       0x0481: 'mi',          0x4C0A: 'es-NI',       \n    0x2801: 'ar-SY',    0x080C: 'fr-BE',    0x047A: 'arn',         0x180A: 'es-PA',       \n    0x1C01: 'aeb',      0x0C0C: 'fr-CA',    0x044E: 'mr',          0x3C0A: 'es-PY',       \n    0x3801: 'ar-AE',    0x040C: 'fr',       0x047C: 'moh',         0x280A: 'es-PE',       \n    0x2401: 'ar-YE',    0x140C: 'fr-LU',    0x0450: 'mn',          0x500A: 'es-PR',       \n    0x042B: 'hy',       0x180C: 'fr-MC',    0x0850: 'mn-CN',       0x0C0A: 'es',          \n    0x044D: 'as',       0x100C: 'fr-CH',    0x0461: 'ne',          0x040A: 'es',          \n    0x082C: 'az-Cyrl',  0x0462: 'fy',       0x0414: 'nb',          0x540A: 'es-US',       \n    0x042C: 'az',       0x0456: 'gl',       0x0814: 'nn',          0x380A: 'es-UY',     \n    0x046D: 'ba',       0x0437: 'ka',       0x0482: 'oc',          0x200A: 'es-VE',       \n    0x042D: 'eu',       0x0C07: 'de-AT',    0x0448: 'or',          0x081D: 'sv-FI',       \n    0x0423: 'be',       0x0407: 'de',       0x0463: 'ps',          0x041D: 'sv',          \n    0x0845: 'bn',       0x1407: 'de-LI',    0x0415: 'pl',          0x045A: 'syr',         \n    0x0445: 'bn-IN',    0x1007: 'de-LU',    0x0416: 'pt',          0x0428: 'tg',          \n    0x201A: 'bs-Cyrl',  0x0807: 'de-CH',    0x0816: 'pt-PT',       0x085F: 'tzm',         \n    0x141A: 'bs',       0x0408: 'el',       0x0446: 'pa',          0x0449: 'ta',          \n    0x047E: 'br',       0x046F: 'kl',       0x046B: 'qu-BO',       0x0444: 'tt',          \n    0x0402: 'bg',       0x0447: 'gu',       0x086B: 'qu-EC',       0x044A: 'te',          \n    0x0403: 'ca',       0x0468: 'ha',       0x0C6B: 'qu',          0x041E: 'th',          \n    0x0C04: 'zh-HK',    0x040D: 'he',       0x0418: 'ro',          0x0451: 'bo',          \n    0x1404: 'zh-MO',    0x0439: 'hi',       0x0417: 'rm',          0x041F: 'tr',          \n    0x0804: 'zh',       0x040E: 'hu',       0x0419: 'ru',          0x0442: 'tk',          \n    0x1004: 'zh-SG',    0x040F: 'is',       0x243B: 'smn',         0x0480: 'ug',          \n    0x0404: 'zh-TW',    0x0470: 'ig',       0x103B: 'smj-NO',      0x0422: 'uk',          \n    0x0483: 'co',       0x0421: 'id',       0x143B: 'smj',         0x042E: 'hsb',         \n    0x041A: 'hr',       0x045D: 'iu',       0x0C3B: 'se-FI',       0x0420: 'ur',          \n    0x101A: 'hr-BA',    0x085D: 'iu-Latn',  0x043B: 'se',          0x0843: 'uz-Cyrl',     \n    0x0405: 'cs',       0x083C: 'ga',       0x083B: 'se-SE',       0x0443: 'uz',          \n    0x0406: 'da',       0x0434: 'xh',       0x203B: 'sms',         0x042A: 'vi',          \n    0x048C: 'prs',      0x0435: 'zu',       0x183B: 'sma-NO',      0x0452: 'cy',          \n    0x0465: 'dv',       0x0410: 'it',       0x1C3B: 'sms',         0x0488: 'wo',          \n    0x0813: 'nl-BE',    0x0810: 'it-CH',    0x044F: 'sa',          0x0485: 'sah',         \n    0x0413: 'nl',       0x0411: 'ja',       0x1C1A: 'sr-Cyrl-BA',  0x0478: 'ii',          \n    0x0C09: 'en-AU',    0x044B: 'kn',       0x0C1A: 'sr',          0x046A: 'yo',           \n    0x2809: 'en-BZ',    0x043F: 'kk',       0x181A: 'sr-Latn-BA',  \n    0x1009: 'en-CA',    0x0453: 'km',       0x081A: 'sr-Latn',     \n    0x2409: 'en-029',   0x0486: 'quc',      0x046C: 'nso',         \n  }\n];\n","import r from 'restructure';\n\nvar OS2 = new r.VersionedStruct(r.uint16, {\n  header: {\n    xAvgCharWidth:          r.int16,   // average weighted advance width of lower case letters and space\n    usWeightClass:          r.uint16,  // visual weight of stroke in glyphs\n    usWidthClass:           r.uint16,  // relative change from the normal aspect ratio (width to height ratio)\n    fsType:                 new r.Bitfield(r.uint16, [ // Indicates font embedding licensing rights\n      null, 'noEmbedding', 'viewOnly', 'editable', null,\n      null, null, null, 'noSubsetting', 'bitmapOnly'\n    ]),\n    ySubscriptXSize:        r.int16,   // recommended horizontal size in pixels for subscripts\n    ySubscriptYSize:        r.int16,   // recommended vertical size in pixels for subscripts\n    ySubscriptXOffset:      r.int16,   // recommended horizontal offset for subscripts\n    ySubscriptYOffset:      r.int16,   // recommended vertical offset form the baseline for subscripts\n    ySuperscriptXSize:      r.int16,   // recommended horizontal size in pixels for superscripts\n    ySuperscriptYSize:      r.int16,   // recommended vertical size in pixels for superscripts\n    ySuperscriptXOffset:    r.int16,   // recommended horizontal offset for superscripts\n    ySuperscriptYOffset:    r.int16,   // recommended vertical offset from the baseline for superscripts\n    yStrikeoutSize:         r.int16,   // width of the strikeout stroke\n    yStrikeoutPosition:     r.int16,   // position of the strikeout stroke relative to the baseline\n    sFamilyClass:           r.int16,   // classification of font-family design\n    panose:                 new r.Array(r.uint8, 10),   // describe the visual characteristics of a given typeface\n    ulCharRange:            new r.Array(r.uint32, 4),\n    vendorID:               new r.String(4),          // four character identifier for the font vendor\n    fsSelection:            new r.Bitfield(r.uint16, [  // bit field containing information about the font\n      'italic', 'underscore', 'negative', 'outlined', 'strikeout',\n      'bold', 'regular', 'useTypoMetrics', 'wws', 'oblique'\n    ]),\n    usFirstCharIndex:       r.uint16,  // The minimum Unicode index in this font\n    usLastCharIndex:        r.uint16   // The maximum Unicode index in this font\n  },\n\n  // The Apple version of this table ends here, but the Microsoft one continues on...\n  0: {},\n\n  1: {\n    typoAscender:       r.int16,\n    typoDescender:      r.int16,\n    typoLineGap:        r.int16,\n    winAscent:          r.uint16,\n    winDescent:         r.uint16,\n    codePageRange:      new r.Array(r.uint32, 2)\n  },\n\n  2: {\n    // these should be common with version 1 somehow\n    typoAscender:       r.int16,\n    typoDescender:      r.int16,\n    typoLineGap:        r.int16,\n    winAscent:          r.uint16,\n    winDescent:         r.uint16,\n    codePageRange:      new r.Array(r.uint32, 2),\n\n    xHeight:            r.int16,\n    capHeight:          r.int16,\n    defaultChar:        r.uint16,\n    breakChar:          r.uint16,\n    maxContent:         r.uint16\n  },\n\n  5: {\n    typoAscender:       r.int16,\n    typoDescender:      r.int16,\n    typoLineGap:        r.int16,\n    winAscent:          r.uint16,\n    winDescent:         r.uint16,\n    codePageRange:      new r.Array(r.uint32, 2),\n\n    xHeight:            r.int16,\n    capHeight:          r.int16,\n    defaultChar:        r.uint16,\n    breakChar:          r.uint16,\n    maxContent:         r.uint16,\n\n    usLowerOpticalPointSize: r.uint16,\n    usUpperOpticalPointSize: r.uint16\n  }\n});\n\nlet versions = OS2.versions;\nversions[3] = versions[4] = versions[2];\n\nexport default OS2;\n","import r from 'restructure';\n\n// PostScript information\nexport default new r.VersionedStruct(r.fixed32, {\n  header: { // these fields exist at the top of all versions\n    italicAngle:        r.fixed32, // Italic angle in counter-clockwise degrees from the vertical.\n    underlinePosition:  r.int16,   // Suggested distance of the top of the underline from the baseline\n    underlineThickness: r.int16,   // Suggested values for the underline thickness\n    isFixedPitch:       r.uint32,  // Whether the font is monospaced\n    minMemType42:       r.uint32,  // Minimum memory usage when a TrueType font is downloaded as a Type 42 font\n    maxMemType42:       r.uint32,  // Maximum memory usage when a TrueType font is downloaded as a Type 42 font\n    minMemType1:        r.uint32,  // Minimum memory usage when a TrueType font is downloaded as a Type 1 font\n    maxMemType1:        r.uint32   // Maximum memory usage when a TrueType font is downloaded as a Type 1 font\n  },\n\n  1: {}, // version 1 has no additional fields\n\n  2: {\n    numberOfGlyphs: r.uint16,\n    glyphNameIndex: new r.Array(r.uint16, 'numberOfGlyphs'),\n    names:          new r.Array(new r.String(r.uint8))\n  },\n\n  2.5: {\n    numberOfGlyphs: r.uint16,\n    offsets:        new r.Array(r.uint8, 'numberOfGlyphs')\n  },\n\n  3: {}, // version 3 has no additional fields\n\n  4: {\n    map: new r.Array(r.uint32, t => t.parent.maxp.numGlyphs)\n  }\n});\n","import r from 'restructure';\n\n// An array of predefined values accessible by instructions\nexport default new r.Struct({\n  controlValues: new r.Array(r.int16)\n});\n","import r from 'restructure';\n\n// A list of instructions that are executed once when a font is first used.\n// These instructions are known as the font program. The main use of this table\n// is for the definition of functions that are used in many different glyph programs.\nexport default new r.Struct({\n  instructions: new r.Array(r.uint8)\n});\n","import r from 'restructure';\n\nlet loca = new r.VersionedStruct('head.indexToLocFormat', {\n  0: {\n    offsets: new r.Array(r.uint16)\n  },\n  1: {\n    offsets: new r.Array(r.uint32)\n  }\n});\n\nloca.process = function() {\n  if (this.version === 0) {\n    for (let i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] <<= 1;\n    }\n  }\n};\n\nloca.preEncode = function() {\n  if (this.version === 0) {\n    for (let i = 0; i < this.offsets.length; i++) {\n      this.offsets[i] >>>= 1;\n    }\n  }\n};\n\nexport default loca;\n","import r from 'restructure';\n\n// Set of instructions executed whenever the point size or font transformation change\nexport default new r.Struct({\n  controlValueProgram: new r.Array(r.uint8)\n});\n","import r from 'restructure';\n\n// only used for encoding\nexport default new r.Array(new r.Buffer);\n","import r from 'restructure';\nimport CFFIndex from './CFFIndex';\nimport CFFTop from './CFFTop';\nimport CFFPrivateDict from './CFFPrivateDict';\nimport standardStrings from './CFFStandardStrings';\n\nclass CFFFont {\n  constructor(stream) {\n    this.stream = stream;\n    this.decode();\n  }\n\n  static decode(stream) {\n    return new CFFFont(stream);\n  }\n\n  decode() {\n    let start = this.stream.pos;\n    let top = CFFTop.decode(this.stream);\n    for (let key in top) {\n      let val = top[key];\n      this[key] = val;\n    }\n\n    if (this.version < 2) {\n      if (this.topDictIndex.length !== 1) {\n        throw new Error(\"Only a single font is allowed in CFF\");\n      }\n\n      this.topDict = this.topDictIndex[0];\n    }\n\n    this.isCIDFont = this.topDict.ROS != null;\n    return this;\n  }\n\n  string(sid) {\n    if (this.version >= 2) {\n      return null;\n    }\n\n    if (sid < standardStrings.length) {\n      return standardStrings[sid];\n    }\n\n    return this.stringIndex[sid - standardStrings.length];\n  }\n\n  get postscriptName() {\n    if (this.version < 2) {\n      return this.nameIndex[0];\n    }\n\n    return null;\n  }\n\n  get fullName() {\n    return this.string(this.topDict.FullName);\n  }\n\n  get familyName() {\n    return this.string(this.topDict.FamilyName);\n  }\n\n  getCharString(glyph) {\n    this.stream.pos = this.topDict.CharStrings[glyph].offset;\n    return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);\n  }\n\n  getGlyphName(gid) {\n    // CFF2 glyph names are in the post table.\n    if (this.version >= 2) {\n      return null;\n    }\n\n    // CID-keyed fonts don't have glyph names\n    if (this.isCIDFont) {\n      return null;\n    }\n\n    let { charset } = this.topDict;\n    if (Array.isArray(charset)) {\n      return charset[gid];\n    }\n\n    if (gid === 0) {\n      return '.notdef';\n    }\n\n    gid -= 1;\n\n    switch (charset.version) {\n      case 0:\n        return this.string(charset.glyphs[gid]);\n\n      case 1:\n      case 2:\n        for (let i = 0; i < charset.ranges.length; i++) {\n          let range = charset.ranges[i];\n          if (range.offset <= gid && gid <= range.offset + range.nLeft) {\n            return this.string(range.first + (gid - range.offset));\n          }\n        }\n        break;\n    }\n\n    return null;\n  }\n\n  fdForGlyph(gid) {\n    if (!this.topDict.FDSelect) {\n      return null;\n    }\n\n    switch (this.topDict.FDSelect.version) {\n      case 0:\n        return this.topDict.FDSelect.fds[gid];\n\n      case 3:\n      case 4:\n        let { ranges } = this.topDict.FDSelect;\n        let low = 0;\n        let high = ranges.length - 1;\n\n        while (low <= high) {\n          let mid = (low + high) >> 1;\n\n          if (gid < ranges[mid].first) {\n            high = mid - 1;\n          } else if (mid < high && gid >= ranges[mid + 1].first) {\n            low = mid + 1;\n          } else {\n            return ranges[mid].fd;\n          }\n        }\n      default:\n        throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);\n    }\n  }\n\n  privateDictForGlyph(gid) {\n    if (this.topDict.FDSelect) {\n      let fd = this.fdForGlyph(gid);\n      if (this.topDict.FDArray[fd]) {\n        return this.topDict.FDArray[fd].Private;\n      }\n\n      return null;\n    }\n\n    if (this.version < 2) {\n      return this.topDict.Private;\n    }\n\n    return this.topDict.FDArray[0].Private;\n  }\n}\n\nexport default CFFFont;\n","import r from 'restructure';\n\nexport default class CFFIndex {\n  constructor(type) {\n    this.type = type;\n  }\n\n  getCFFVersion(ctx) {\n    while (ctx && !ctx.hdrSize) {\n      ctx = ctx.parent;\n    }\n\n    return ctx ? ctx.version : -1;\n  }\n\n  decode(stream, parent) {\n    let version = this.getCFFVersion(parent);\n    let count = version >= 2\n      ? stream.readUInt32BE()\n      : stream.readUInt16BE();\n\n    if (count === 0) {\n      return [];\n    }\n\n    let offSize = stream.readUInt8();\n    let offsetType;\n    if (offSize === 1) {\n      offsetType = r.uint8;\n    } else if (offSize === 2) {\n      offsetType = r.uint16;\n    } else if (offSize === 3) {\n      offsetType = r.uint24;\n    } else if (offSize === 4) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);\n    }\n\n    let ret = [];\n    let startPos = stream.pos + ((count + 1) * offSize) - 1;\n\n    let start = offsetType.decode(stream);\n    for (let i = 0; i < count; i++) {\n      let end = offsetType.decode(stream);\n\n      if (this.type != null) {\n        let pos = stream.pos;\n        stream.pos = startPos + start;\n\n        parent.length = end - start;\n        ret.push(this.type.decode(stream, parent));\n        stream.pos = pos;\n      } else {\n        ret.push({\n          offset: startPos + start,\n          length: end - start\n        });\n      }\n\n      start = end;\n    }\n\n    stream.pos = startPos + start;\n    return ret;\n  }\n\n  size(arr, parent) {\n    let size = 2;\n    if (arr.length === 0) {\n      return size;\n    }\n\n    let type = this.type || new r.Buffer;\n\n    // find maximum offset to detminine offset type\n    let offset = 1;\n    for (let i = 0; i < arr.length; i++) {\n      let item = arr[i];\n      offset += type.size(item, parent);\n    }\n\n    let offsetType;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    size += 1 + offsetType.size() * (arr.length + 1);\n    size += offset - 1;\n\n    return size;\n  }\n\n  encode(stream, arr, parent) {\n    stream.writeUInt16BE(arr.length);\n    if (arr.length === 0) {\n      return;\n    }\n\n    let type = this.type || new r.Buffer;\n\n    // find maximum offset to detminine offset type\n    let sizes = [];\n    let offset = 1;\n    for (let item of arr) {\n      let s = type.size(item, parent);\n      sizes.push(s);\n      offset += s;\n    }\n\n    let offsetType;\n    if (offset <= 0xff) {\n      offsetType = r.uint8;\n    } else if (offset <= 0xffff) {\n      offsetType = r.uint16;\n    } else if (offset <= 0xffffff) {\n      offsetType = r.uint24;\n    } else if (offset <= 0xffffffff) {\n      offsetType = r.uint32;\n    } else {\n      throw new Error(\"Bad offset in CFFIndex\");\n    }\n\n    // write offset size\n    stream.writeUInt8(offsetType.size());\n\n    // write elements\n    offset = 1;\n    offsetType.encode(stream, offset);\n\n    for (let size of sizes) {\n      offset += size;\n      offsetType.encode(stream, offset);\n    }\n\n    for (let item of arr) {\n      type.encode(stream, item, parent);\n    }\n\n    return;\n  }\n}\n","import r from 'restructure';\nimport { resolveLength } from 'restructure/src/utils.js';\nimport CFFDict from './CFFDict';\nimport CFFIndex from './CFFIndex';\nimport CFFPointer from './CFFPointer';\nimport CFFPrivateDict from './CFFPrivateDict';\nimport StandardStrings from './CFFStandardStrings';\nimport { StandardEncoding, ExpertEncoding } from './CFFEncodings';\nimport { ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset } from './CFFCharsets';\nimport { ItemVariationStore } from '../tables/variations';\n\n// Checks if an operand is an index of a predefined value,\n// otherwise delegates to the provided type.\nclass PredefinedOp {\n  constructor(predefinedOps, type) {\n    this.predefinedOps = predefinedOps;\n    this.type = type;\n  }\n\n  decode(stream, parent, operands) {\n    if (this.predefinedOps[operands[0]]) {\n      return this.predefinedOps[operands[0]];\n    }\n\n    return this.type.decode(stream, parent, operands);\n  }\n\n  size(value, ctx) {\n    return this.type.size(value, ctx);\n  }\n\n  encode(stream, value, ctx) {\n    let index = this.predefinedOps.indexOf(value);\n    if (index !== -1) {\n      return index;\n    }\n\n    return this.type.encode(stream, value, ctx);\n  }\n}\n\nclass CFFEncodingVersion extends r.Number {\n  constructor() {\n    super('UInt8');\n  }\n\n  decode(stream) {\n    return r.uint8.decode(stream) & 0x7f;\n  }\n}\n\nlet Range1 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint8\n});\n\nlet Range2 = new r.Struct({\n  first: r.uint16,\n  nLeft: r.uint16\n});\n\nlet CFFCustomEncoding = new r.VersionedStruct(new CFFEncodingVersion(), {\n  0: {\n    nCodes: r.uint8,\n    codes: new r.Array(r.uint8, 'nCodes')\n  },\n\n  1: {\n    nRanges: r.uint8,\n    ranges: new r.Array(Range1, 'nRanges')\n  }\n\n  // TODO: supplement?\n});\n\nlet CFFEncoding = new PredefinedOp([ StandardEncoding, ExpertEncoding ], new CFFPointer(CFFCustomEncoding, { lazy: true }));\n\n// Decodes an array of ranges until the total\n// length is equal to the provided length.\nclass RangeArray extends r.Array {\n  decode(stream, parent) {\n    let length = resolveLength(this.length, stream, parent);\n    let count = 0;\n    let res = [];\n    while (count < length) {\n      let range = this.type.decode(stream, parent);\n      range.offset = count;\n      count += range.nLeft + 1;\n      res.push(range);\n    }\n\n    return res;\n  }\n}\n\nlet CFFCustomCharset = new r.VersionedStruct(r.uint8, {\n  0: {\n    glyphs: new r.Array(r.uint16, t => t.parent.CharStrings.length - 1)\n  },\n\n  1: {\n    ranges: new RangeArray(Range1, t => t.parent.CharStrings.length - 1)\n  },\n\n  2: {\n    ranges: new RangeArray(Range2, t => t.parent.CharStrings.length - 1)\n  }\n});\n\nlet CFFCharset = new PredefinedOp([ ISOAdobeCharset, ExpertCharset, ExpertSubsetCharset ], new CFFPointer(CFFCustomCharset, {lazy: true}));\n\nlet FDRange3 = new r.Struct({\n  first: r.uint16,\n  fd: r.uint8\n});\n\nlet FDRange4 = new r.Struct({\n  first: r.uint32,\n  fd: r.uint16\n});\n\nlet FDSelect = new r.VersionedStruct(r.uint8, {\n  0: {\n    fds: new r.Array(r.uint8, t => t.parent.CharStrings.length)\n  },\n\n  3: {\n    nRanges: r.uint16,\n    ranges: new r.Array(FDRange3, 'nRanges'),\n    sentinel: r.uint16\n  },\n\n  4: {\n    nRanges: r.uint32,\n    ranges: new r.Array(FDRange4, 'nRanges'),\n    sentinel: r.uint32\n  }\n});\n\nlet ptr = new CFFPointer(CFFPrivateDict);\nclass CFFPrivateOp {\n  decode(stream, parent, operands) {\n    parent.length = operands[0];\n    return ptr.decode(stream, parent, [operands[1]]);\n  }\n\n  size(dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.size(dict, ctx)[0]];\n  }\n\n  encode(stream, dict, ctx) {\n    return [CFFPrivateDict.size(dict, ctx, false), ptr.encode(stream, dict, ctx)[0]];\n  }\n}\n\nlet FontDict = new CFFDict([\n  // key       name                   type(s)                                 default\n  [18,        'Private',              new CFFPrivateOp,                       null],\n  [[12, 38],  'FontName',             'sid',                                  null],\n  [[12, 7],   'FontMatrix',           'array',                                [0.001, 0, 0, 0.001, 0, 0]],\n  [[12, 5],   'PaintType',            'number',                               0],\n]);\n\nlet CFFTopDict = new CFFDict([\n  // key       name                   type(s)                                 default\n  [[12, 30],  'ROS',                  ['sid', 'sid', 'number'],               null],\n\n  [0,         'version',              'sid',                                  null],\n  [1,         'Notice',               'sid',                                  null],\n  [[12, 0],   'Copyright',            'sid',                                  null],\n  [2,         'FullName',             'sid',                                  null],\n  [3,         'FamilyName',           'sid',                                  null],\n  [4,         'Weight',               'sid',                                  null],\n  [[12, 1],   'isFixedPitch',         'boolean',                              false],\n  [[12, 2],   'ItalicAngle',          'number',                               0],\n  [[12, 3],   'UnderlinePosition',    'number',                               -100],\n  [[12, 4],   'UnderlineThickness',   'number',                               50],\n  [[12, 5],   'PaintType',            'number',                               0],\n  [[12, 6],   'CharstringType',       'number',                               2],\n  [[12, 7],   'FontMatrix',           'array',                                [0.001, 0, 0, 0.001, 0, 0]],\n  [13,        'UniqueID',             'number',                               null],\n  [5,         'FontBBox',             'array',                                [0, 0, 0, 0]],\n  [[12, 8],   'StrokeWidth',          'number',                               0],\n  [14,        'XUID',                 'array',                                null],\n  [15,        'charset',              CFFCharset,                             ISOAdobeCharset],\n  [16,        'Encoding',             CFFEncoding,                            StandardEncoding],\n  [17,        'CharStrings',          new CFFPointer(new CFFIndex),           null],\n  [18,        'Private',              new CFFPrivateOp,                       null],\n  [[12, 20],  'SyntheticBase',        'number',                               null],\n  [[12, 21],  'PostScript',           'sid',                                  null],\n  [[12, 22],  'BaseFontName',         'sid',                                  null],\n  [[12, 23],  'BaseFontBlend',        'delta',                                null],\n\n  // CID font specific\n  [[12, 31],  'CIDFontVersion',       'number',                               0],\n  [[12, 32],  'CIDFontRevision',      'number',                               0],\n  [[12, 33],  'CIDFontType',          'number',                               0],\n  [[12, 34],  'CIDCount',             'number',                               8720],\n  [[12, 35],  'UIDBase',              'number',                               null],\n  [[12, 37],  'FDSelect',             new CFFPointer(FDSelect),               null],\n  [[12, 36],  'FDArray',              new CFFPointer(new CFFIndex(FontDict)), null],\n  [[12, 38],  'FontName',             'sid',                                  null]\n]);\n\nlet VariationStore = new r.Struct({\n  length: r.uint16,\n  itemVariationStore: ItemVariationStore\n})\n\nlet CFF2TopDict = new CFFDict([\n  [[12, 7],   'FontMatrix',           'array',                                [0.001, 0, 0, 0.001, 0, 0]],\n  [17,        'CharStrings',          new CFFPointer(new CFFIndex),           null],\n  [[12, 37],  'FDSelect',             new CFFPointer(FDSelect),               null],\n  [[12, 36],  'FDArray',              new CFFPointer(new CFFIndex(FontDict)), null],\n  [24,        'vstore',               new CFFPointer(VariationStore),         null],\n  [25,        'maxstack',             'number',                               193]\n]);\n\nlet CFFTop = new r.VersionedStruct(r.fixed16, {\n  1: {\n    hdrSize:            r.uint8,\n    offSize:            r.uint8,\n    nameIndex:          new CFFIndex(new r.String('length')),\n    topDictIndex:       new CFFIndex(CFFTopDict),\n    stringIndex:        new CFFIndex(new r.String('length')),\n    globalSubrIndex:    new CFFIndex\n  },\n\n  2: {\n    hdrSize:            r.uint8,\n    length:             r.uint16,\n    topDict:            CFF2TopDict,\n    globalSubrIndex:    new CFFIndex\n  }\n});\n\nexport default CFFTop;\n","import isEqual from 'deep-equal';\nimport r from 'restructure';\nimport CFFOperand from './CFFOperand';\nimport { PropertyDescriptor } from 'restructure/src/utils.js';\n\nexport default class CFFDict {\n  constructor(ops = []) {\n    this.ops = ops;\n    this.fields = {};\n    for (let field of ops) {\n      let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];\n      this.fields[key] = field;\n    }\n  }\n\n  decodeOperands(type, stream, ret, operands) {\n    if (Array.isArray(type)) {\n      return operands.map((op, i) => this.decodeOperands(type[i], stream, ret, [op]));\n    } else if (type.decode != null) {\n      return type.decode(stream, ret, operands);\n    } else {\n      switch (type) {\n        case 'number':\n        case 'offset':\n        case 'sid':\n          return operands[0];\n        case 'boolean':\n          return !!operands[0];\n        default:\n          return operands;\n      }\n    }\n  }\n\n  encodeOperands(type, stream, ctx, operands) {\n    if (Array.isArray(type)) {\n      return operands.map((op, i) => this.encodeOperands(type[i], stream, ctx, op)[0]);\n    } else if (type.encode != null) {\n      return type.encode(stream, operands, ctx);\n    } else if (typeof operands === 'number') {\n      return [operands];\n    } else if (typeof operands === 'boolean') {\n      return [+operands];\n    } else if (Array.isArray(operands)) {\n      return operands;\n    } else {\n      return [operands];\n    }\n  }\n\n  decode(stream, parent) {\n    let end = stream.pos + parent.length;\n    let ret = {};\n    let operands = [];\n\n    // define hidden properties\n    Object.defineProperties(ret, {\n      parent:         { value: parent },\n      _startOffset:   { value: stream.pos }\n    });\n\n    // fill in defaults\n    for (let key in this.fields) {\n      let field = this.fields[key];\n      ret[field[1]] = field[3];\n    }\n\n    while (stream.pos < end) {\n      let b = stream.readUInt8();\n      if (b < 28) {\n        if (b === 12) {\n          b = (b << 8) | stream.readUInt8();\n        }\n\n        let field = this.fields[b];\n        if (!field) {\n          throw new Error(`Unknown operator ${b}`);\n        }\n\n        let val = this.decodeOperands(field[2], stream, ret, operands);\n        if (val != null) {\n          if (val instanceof PropertyDescriptor) {\n            Object.defineProperty(ret, field[1], val);\n          } else {\n            ret[field[1]] = val;\n          }\n        }\n\n        operands = [];\n      } else {\n        operands.push(CFFOperand.decode(stream, b));\n      }\n    }\n\n    return ret;\n  }\n\n  size(dict, parent, includePointers = true) {\n    let ctx = {\n      parent,\n      val: dict,\n      pointerSize: 0,\n      startOffset: parent.startOffset || 0\n    };\n\n    let len = 0;\n\n    for (let k in this.fields) {\n      let field = this.fields[k];\n      let val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      let operands = this.encodeOperands(field[2], null, ctx, val);\n      for (let op of operands) {\n        len += CFFOperand.size(op);\n      }\n\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      len += key.length;\n    }\n\n    if (includePointers) {\n      len += ctx.pointerSize;\n    }\n\n    return len;\n  }\n\n  encode(stream, dict, parent) {\n    let ctx = {\n      pointers: [],\n      startOffset: stream.pos,\n      parent,\n      val: dict,\n      pointerSize: 0\n    };\n\n    ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);\n\n    for (let field of this.ops) {\n      let val = dict[field[1]];\n      if (val == null || isEqual(val, field[3])) {\n        continue;\n      }\n\n      let operands = this.encodeOperands(field[2], stream, ctx, val);\n      for (let op of operands) {\n        CFFOperand.encode(stream, op);\n      }\n\n      let key = Array.isArray(field[0]) ? field[0] : [field[0]];\n      for (let op of key) {\n        stream.writeUInt8(op);\n      }\n    }\n\n    let i = 0;\n    while (i < ctx.pointers.length) {\n      let ptr = ctx.pointers[i++];\n      ptr.type.encode(stream, ptr.val, ptr.parent);\n    }\n\n    return;\n  }\n}\n","const FLOAT_EOF = 0xf;\nconst FLOAT_LOOKUP = [\n  '0', '1', '2', '3', '4', '5', '6', '7',\n  '8', '9', '.', 'E', 'E-', null, '-'\n];\n\nconst FLOAT_ENCODE_LOOKUP = {\n  '.': 10,\n  'E': 11,\n  'E-': 12,\n  '-': 14\n};\n\nexport default class CFFOperand {\n  static decode(stream, value) {\n    if (32 <= value && value <= 246) {\n      return value - 139;\n    }\n\n    if (247 <= value && value <= 250) {\n      return (value - 247) * 256 + stream.readUInt8() + 108;\n    }\n\n    if (251 <= value && value <= 254) {\n      return -(value - 251) * 256 - stream.readUInt8() - 108;\n    }\n\n    if (value === 28) {\n      return stream.readInt16BE();\n    }\n\n    if (value === 29) {\n      return stream.readInt32BE();\n    }\n\n    if (value === 30) {\n      let str = '';\n      while (true) {\n        let b = stream.readUInt8();\n\n        let n1 = b >> 4;\n        if (n1 === FLOAT_EOF) { break; }\n        str += FLOAT_LOOKUP[n1];\n\n        let n2 = b & 15;\n        if (n2 === FLOAT_EOF) { break; }\n        str += FLOAT_LOOKUP[n2];\n      }\n\n      return parseFloat(str);\n    }\n\n    return null;\n  }\n\n  static size(value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, set to 32768\n    if (value.forceLarge) {\n      value = 32768;\n    }\n\n    if ((value | 0) !== value) { // floating point\n      let str = '' + value;\n      return 1 + Math.ceil((str.length + 1) / 2);\n\n    } else if (-107 <= value && value <= 107) {\n      return 1;\n\n    } else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) {\n      return 2;\n\n    } else if (-32768 <= value && value <= 32767) {\n      return 3;\n\n    } else {\n      return 5;\n    }\n  }\n\n  static encode(stream, value) {\n    // if the value needs to be forced to the largest size (32 bit)\n    // e.g. for unknown pointers, save the old value and set to 32768\n    let val = Number(value);\n\n    if (value.forceLarge) {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n\n    } else if ((val | 0) !== val) { // floating point\n      stream.writeUInt8(30);\n\n      let str = '' + val;\n      for (let i = 0; i < str.length; i += 2) {\n        let c1 = str[i];\n        let n1 = FLOAT_ENCODE_LOOKUP[c1] || +c1;\n\n        if (i === str.length - 1) {\n          var n2 = FLOAT_EOF;\n        } else {\n          let c2 = str[i + 1];\n          var n2 = FLOAT_ENCODE_LOOKUP[c2] || +c2;\n        }\n\n        stream.writeUInt8((n1 << 4) | (n2 & 15));\n      }\n\n      if (n2 !== FLOAT_EOF) {\n        return stream.writeUInt8((FLOAT_EOF << 4));\n      }\n\n    } else if (-107 <= val && val <= 107) {\n      return stream.writeUInt8(val + 139);\n\n    } else if (108 <= val && val <= 1131) {\n      val -= 108;\n      stream.writeUInt8((val >> 8) + 247);\n      return stream.writeUInt8(val & 0xff);\n\n    } else if (-1131 <= val && val <= -108) {\n      val = -val - 108;\n      stream.writeUInt8((val >> 8) + 251);\n      return stream.writeUInt8(val & 0xff);\n\n    } else if (-32768 <= val && val <= 32767) {\n      stream.writeUInt8(28);\n      return stream.writeInt16BE(val);\n\n    } else {\n      stream.writeUInt8(29);\n      return stream.writeInt32BE(val);\n    }\n  }\n}\n","import r from 'restructure';\n\nexport default class CFFPointer extends r.Pointer {\n  constructor(type, options = {}) {\n    if (options.type == null) {\n      options.type = 'global';\n    }\n\n    super(null, type, options);\n  }\n\n  decode(stream, parent, operands) {\n    this.offsetType = {\n      decode: () => operands[0]\n    };\n\n    return super.decode(stream, parent, operands);\n  }\n\n  encode(stream, value, ctx) {\n    if (!stream) {\n      // compute the size (so ctx.pointerSize is correct)\n      this.offsetType = {\n        size: () => 0\n      };\n\n      this.size(value, ctx);\n      return [new Ptr(0)];\n    }\n\n    let ptr = null;\n    this.offsetType = {\n      encode: (stream, val) => ptr = val\n    };\n\n    super.encode(stream, value, ctx);\n    return [new Ptr(ptr)];\n  }\n}\n\nclass Ptr {\n  constructor(val) {\n    this.val = val;\n    this.forceLarge = true;\n  }\n\n  valueOf() {\n    return this.val;\n  }\n}\n","import CFFDict from './CFFDict';\nimport CFFIndex from './CFFIndex';\nimport CFFPointer from './CFFPointer';\n\nclass CFFBlendOp {\n  static decode(stream, parent, operands) {\n    let numBlends = operands.pop();\n\n    // TODO: actually blend. For now just consume the deltas\n    // since we don't use any of the values anyway.\n    while (operands.length > numBlends) {\n      operands.pop();\n    }\n  }\n}\n\nexport default new CFFDict([\n  // key       name                    type                                          default\n  [6,         'BlueValues',           'delta',                                       null],\n  [7,         'OtherBlues',           'delta',                                       null],\n  [8,         'FamilyBlues',          'delta',                                       null],\n  [9,         'FamilyOtherBlues',     'delta',                                       null],\n  [[12, 9],   'BlueScale',            'number',                                      0.039625],\n  [[12, 10],  'BlueShift',            'number',                                      7],\n  [[12, 11],  'BlueFuzz',             'number',                                      1],\n  [10,        'StdHW',                'number',                                      null],\n  [11,        'StdVW',                'number',                                      null],\n  [[12, 12],  'StemSnapH',            'delta',                                       null],\n  [[12, 13],  'StemSnapV',            'delta',                                       null],\n  [[12, 14],  'ForceBold',            'boolean',                                     false],\n  [[12, 17],  'LanguageGroup',        'number',                                      0],\n  [[12, 18],  'ExpansionFactor',      'number',                                      0.06],\n  [[12, 19],  'initialRandomSeed',    'number',                                      0],\n  [20,        'defaultWidthX',        'number',                                      0],\n  [21,        'nominalWidthX',        'number',                                      0],\n  [22,        'vsindex',              'number',                                      0],\n  [23,        'blend',                CFFBlendOp,                                    null],\n  [19,        'Subrs',                new CFFPointer(new CFFIndex, {type: 'local'}), null]\n]);\n","// Automatically generated from Appendix A of the CFF specification; do\n// not edit. Length should be 391.\nexport default [\n  \".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\",\n  \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\",\n  \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\",\n  \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\",\n  \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\",\n  \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n  \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\",\n  \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\",\n  \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\",\n  \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\",\n  \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\",\n  \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\",\n  \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\",\n  \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\",\n  \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\",\n  \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\",\n  \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\",\n  \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\",\n  \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\",\n  \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\",\n  \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\",\n  \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\",\n  \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\",\n  \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\",\n  \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\",\n  \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\",\n  \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\",\n  \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\",\n  \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\",\n  \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\",\n  \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\",\n  \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\",\n  \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\",\n  \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\",\n  \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\",\n  \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\",\n  \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\",\n  \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\",\n  \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\",\n  \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\",\n  \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\",\n  \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\",\n  \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\",\n  \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\",\n  \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\",\n  \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\",\n  \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\",\n  \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\",\n  \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\",\n  \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\",\n  \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\",\n  \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\",\n  \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\",\n  \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\",\n  \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\",\n  \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\",\n  \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\",\n  \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\",\n  \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\",\n  \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\",\n  \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\",\n  \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\",\n  \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\",\n  \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\",\n  \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\",\n  \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\",\n  \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"\n];\n","export let StandardEncoding = [\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',\n  'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',\n  'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',\n  'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\n  'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n  'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n  'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',\n  'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',\n  'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',\n  'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',\n  'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',\n  'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',\n  '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',\n  'lslash', 'oslash', 'oe', 'germandbls'\n];\n\nexport let ExpertEncoding = [\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',\n  'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',\n  'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n  'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',\n  'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',\n  'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',\n  'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',\n  'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',\n  'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',\n  'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',\n  'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',\n  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',\n  'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n  'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',\n  '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',\n  'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',\n  '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n  'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',\n  'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',\n  'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',\n  'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',\n  'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n  'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',\n  'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n  'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'\n];\n","export let ISOAdobeCharset = [\n  '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar',\n  'percent', 'ampersand', 'quoteright', 'parenleft', 'parenright',\n  'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero',\n  'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\n  'nine', 'colon', 'semicolon', 'less', 'equal', 'greater', 'question',\n  'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',\n  'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\n  'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n  'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent',\n  'sterling', 'fraction', 'yen', 'florin', 'section', 'currency',\n  'quotesingle', 'quotedblleft', 'guillemotleft', 'guilsinglleft',\n  'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl',\n  'periodcentered', 'paragraph', 'bullet', 'quotesinglbase',\n  'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis',\n  'perthousand', 'questiondown', 'grave', 'acute', 'circumflex', 'tilde',\n  'macron', 'breve', 'dotaccent', 'dieresis', 'ring', 'cedilla',\n  'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine',\n  'Lslash', 'Oslash', 'OE', 'ordmasculine', 'ae', 'dotlessi', 'lslash',\n  'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',\n  'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter',\n  'divide', 'brokenbar', 'degree', 'thorn', 'threequarters', 'twosuperior',\n  'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',\n  'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde',\n  'Ccedilla', 'Eacute', 'Ecircumflex', 'Edieresis', 'Egrave', 'Iacute',\n  'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',\n  'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex',\n  'Udieresis', 'Ugrave', 'Yacute', 'Ydieresis', 'Zcaron', 'aacute',\n  'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla',\n  'eacute', 'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex',\n  'idieresis', 'igrave', 'ntilde', 'oacute', 'ocircumflex', 'odieresis',\n  'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis',\n  'ugrave', 'yacute', 'ydieresis', 'zcaron'\n];\n\nexport let ExpertCharset = [\n  '.notdef', 'space', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle',\n  'dollarsuperior', 'ampersandsmall', 'Acutesmall', 'parenleftsuperior',\n  'parenrightsuperior', 'twodotenleader', 'onedotenleader', 'comma',\n  'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle',\n  'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle',\n  'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle',\n  'colon', 'semicolon', 'commasuperior', 'threequartersemdash',\n  'periodsuperior', 'questionsmall', 'asuperior', 'bsuperior',\n  'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n  'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior',\n  'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior',\n  'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall',\n  'Asmall', 'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall',\n  'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall', 'Msmall', 'Nsmall',\n  'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall',\n  'Vsmall', 'Wsmall', 'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary',\n  'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall', 'centoldstyle',\n  'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',\n  'Brevesmall', 'Caronsmall', 'Dotaccentsmall', 'Macronsmall',\n  'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall',\n  'Cedillasmall', 'onequarter', 'onehalf', 'threequarters',\n  'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths',\n  'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior',\n  'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n  'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n  'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior',\n  'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior',\n  'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior',\n  'periodinferior', 'commainferior', 'Agravesmall', 'Aacutesmall',\n  'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall',\n  'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall',\n  'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',\n  'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall',\n  'Ogravesmall', 'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall',\n  'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',\n  'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall',\n  'Ydieresissmall'\n];\n\nexport let ExpertSubsetCharset = [\n  '.notdef', 'space', 'dollaroldstyle', 'dollarsuperior',\n  'parenleftsuperior', 'parenrightsuperior', 'twodotenleader',\n  'onedotenleader', 'comma', 'hyphen', 'period', 'fraction',\n  'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',\n  'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle',\n  'eightoldstyle', 'nineoldstyle', 'colon', 'semicolon', 'commasuperior',\n  'threequartersemdash', 'periodsuperior', 'asuperior', 'bsuperior',\n  'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',\n  'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior',\n  'tsuperior', 'ff', 'fi', 'fl', 'ffi', 'ffl', 'parenleftinferior',\n  'parenrightinferior', 'hyphensuperior', 'colonmonetary', 'onefitted',\n  'rupiah', 'centoldstyle', 'figuredash', 'hypheninferior', 'onequarter',\n  'onehalf', 'threequarters', 'oneeighth', 'threeeighths', 'fiveeighths',\n  'seveneighths', 'onethird', 'twothirds', 'zerosuperior', 'onesuperior',\n  'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',\n  'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',\n  'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior',\n  'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior',\n  'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior',\n  'periodinferior', 'commainferior'\n];\n","import {Feature} from './opentype';\nimport r from 'restructure';\n\n/*******************\n * Variation Store *\n *******************/\n\nlet F2DOT14 = new r.Fixed(16, 'BE', 14);\nlet RegionAxisCoordinates = new r.Struct({\n  startCoord: F2DOT14,\n  peakCoord: F2DOT14,\n  endCoord: F2DOT14\n});\n\nlet VariationRegionList = new r.Struct({\n  axisCount: r.uint16,\n  regionCount: r.uint16,\n  variationRegions: new r.Array(new r.Array(RegionAxisCoordinates, 'axisCount'), 'regionCount')\n});\n\nlet DeltaSet = new r.Struct({\n  shortDeltas: new r.Array(r.int16, t => t.parent.shortDeltaCount),\n  regionDeltas: new r.Array(r.int8, t => t.parent.regionIndexCount - t.parent.shortDeltaCount),\n  deltas: t => t.shortDeltas.concat(t.regionDeltas)\n});\n\nlet ItemVariationData = new r.Struct({\n  itemCount: r.uint16,\n  shortDeltaCount: r.uint16,\n  regionIndexCount: r.uint16,\n  regionIndexes: new r.Array(r.uint16, 'regionIndexCount'),\n  deltaSets: new r.Array(DeltaSet, 'itemCount')\n});\n\nexport let ItemVariationStore = new r.Struct({\n  format: r.uint16,\n  variationRegionList: new r.Pointer(r.uint32, VariationRegionList),\n  variationDataCount: r.uint16,\n  itemVariationData: new r.Array(new r.Pointer(r.uint32, ItemVariationData), 'variationDataCount')\n});\n\n/**********************\n * Feature Variations *\n **********************/\n\nlet ConditionTable = new r.VersionedStruct(r.uint16, {\n  1: {\n    axisIndex: r.uint16,\n    axisIndex: r.uint16,\n    filterRangeMinValue: F2DOT14,\n    filterRangeMaxValue: F2DOT14\n  }\n});\n\nlet ConditionSet = new r.Struct({\n  conditionCount: r.uint16,\n  conditionTable: new r.Array(new r.Pointer(r.uint32, ConditionTable), 'conditionCount')\n});\n\nlet FeatureTableSubstitutionRecord = new r.Struct({\n  featureIndex: r.uint16,\n  alternateFeatureTable: new r.Pointer(r.uint32, Feature, {type: 'parent'})\n});\n\nlet FeatureTableSubstitution = new r.Struct({\n  version: r.fixed32,\n  substitutionCount: r.uint16,\n  substitutions: new r.Array(FeatureTableSubstitutionRecord, 'substitutionCount')\n});\n\nlet FeatureVariationRecord = new r.Struct({\n  conditionSet: new r.Pointer(r.uint32, ConditionSet, {type: 'parent'}),\n  featureTableSubstitution: new r.Pointer(r.uint32, FeatureTableSubstitution, {type: 'parent'})\n});\n\nexport let FeatureVariations = new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  featureVariationRecordCount: r.uint32,\n  featureVariationRecords: new r.Array(FeatureVariationRecord, 'featureVariationRecordCount')\n});\n","import r from 'restructure';\n\n//########################\n// Scripts and Languages #\n//########################\n\nlet LangSysTable = new r.Struct({\n  reserved:         new r.Reserved(r.uint16),\n  reqFeatureIndex:  r.uint16,\n  featureCount:     r.uint16,\n  featureIndexes:   new r.Array(r.uint16, 'featureCount')\n});\n\nlet LangSysRecord = new r.Struct({\n  tag:      new r.String(4),\n  langSys:  new r.Pointer(r.uint16, LangSysTable, { type: 'parent' })\n});\n\nlet Script = new r.Struct({\n  defaultLangSys: new r.Pointer(r.uint16, LangSysTable),\n  count:          r.uint16,\n  langSysRecords: new r.Array(LangSysRecord, 'count')\n});\n\nlet ScriptRecord = new r.Struct({\n  tag:    new r.String(4),\n  script: new r.Pointer(r.uint16, Script, { type: 'parent' })\n});\n\nexport let ScriptList = new r.Array(ScriptRecord, r.uint16);\n\n//#######################\n// Features and Lookups #\n//#######################\n\nlet FeatureParams = new r.Struct({\n  version:    r.uint16, // should be set to 0 according OT spec\n  nameID:     r.uint16, //OT spec: UI Name ID or uiLabelNameId\n});\n\nexport let Feature = new r.Struct({\n  featureParams:      new r.Pointer(r.uint16, FeatureParams),\n  lookupCount:        r.uint16,\n  lookupListIndexes:  new r.Array(r.uint16, 'lookupCount')\n});\n\nlet FeatureRecord = new r.Struct({\n  tag:      new r.String(4),\n  feature:  new r.Pointer(r.uint16, Feature, { type: 'parent' })\n});\n\nexport let FeatureList = new r.Array(FeatureRecord, r.uint16);\n\nlet LookupFlags = new r.Struct({\n  markAttachmentType: r.uint8,\n  flags: new r.Bitfield(r.uint8, [\n    'rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures',\n    'ignoreMarks', 'useMarkFilteringSet'\n  ])\n});\n\nexport function LookupList(SubTable) {\n  let Lookup = new r.Struct({\n    lookupType:         r.uint16,\n    flags:              LookupFlags,\n    subTableCount:      r.uint16,\n    subTables:          new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),\n    markFilteringSet:   new r.Optional(r.uint16, t => t.flags.flags.useMarkFilteringSet)\n  });\n\n  return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);\n}\n\n//#################\n// Coverage Table #\n//#################\n\nlet RangeRecord = new r.Struct({\n  start:              r.uint16,\n  end:                r.uint16,\n  startCoverageIndex: r.uint16\n});\n\nexport let Coverage = new r.VersionedStruct(r.uint16, {\n  1: {\n    glyphCount:   r.uint16,\n    glyphs:       new r.Array(r.uint16, 'glyphCount')\n  },\n  2: {\n    rangeCount:   r.uint16,\n    rangeRecords: new r.Array(RangeRecord, 'rangeCount')\n  }\n});\n\n//#########################\n// Class Definition Table #\n//#########################\n\nlet ClassRangeRecord = new r.Struct({\n  start:  r.uint16,\n  end:    r.uint16,\n  class:  r.uint16\n});\n\nexport let ClassDef = new r.VersionedStruct(r.uint16, {\n  1: { // Class array\n    startGlyph:       r.uint16,\n    glyphCount:       r.uint16,\n    classValueArray:  new r.Array(r.uint16, 'glyphCount')\n  },\n  2: { // Class ranges\n    classRangeCount:  r.uint16,\n    classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')\n  }\n});\n\n//###############\n// Device Table #\n//###############\n\nexport let Device = new r.Struct({\n  a: r.uint16, // startSize for hinting Device, outerIndex for VariationIndex\n  b: r.uint16, // endSize for Device, innerIndex for VariationIndex\n  deltaFormat: r.uint16\n});\n\n//#############################################\n// Contextual Substitution/Positioning Tables #\n//#############################################\n\nlet LookupRecord = new r.Struct({\n  sequenceIndex:      r.uint16,\n  lookupListIndex:    r.uint16\n});\n\nlet Rule = new r.Struct({\n  glyphCount:     r.uint16,\n  lookupCount:    r.uint16,\n  input:          new r.Array(r.uint16, t => t.glyphCount - 1),\n  lookupRecords:  new r.Array(LookupRecord, 'lookupCount')\n});\n\nlet RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);\n\nlet ClassRule = new r.Struct({\n  glyphCount:     r.uint16,\n  lookupCount:    r.uint16,\n  classes:        new r.Array(r.uint16, t => t.glyphCount - 1),\n  lookupRecords:  new r.Array(LookupRecord, 'lookupCount')\n});\n\nlet ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);\n\nexport let Context = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context\n    coverage:      new r.Pointer(r.uint16, Coverage),\n    ruleSetCount:  r.uint16,\n    ruleSets:      new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')\n  },\n  2: { // Class-based context\n    coverage:      new r.Pointer(r.uint16, Coverage),\n    classDef:      new r.Pointer(r.uint16, ClassDef),\n    classSetCnt:   r.uint16,\n    classSet:      new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')\n  },\n  3: {\n    glyphCount:    r.uint16,\n    lookupCount:   r.uint16,\n    coverages:     new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),\n    lookupRecords: new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n\n//######################################################\n// Chaining Contextual Substitution/Positioning Tables #\n//######################################################\n\nlet ChainRule = new r.Struct({\n  backtrackGlyphCount:  r.uint16,\n  backtrack:            new r.Array(r.uint16, 'backtrackGlyphCount'),\n  inputGlyphCount:      r.uint16,\n  input:                new r.Array(r.uint16, t => t.inputGlyphCount - 1),\n  lookaheadGlyphCount:  r.uint16,\n  lookahead:            new r.Array(r.uint16, 'lookaheadGlyphCount'),\n  lookupCount:          r.uint16,\n  lookupRecords:        new r.Array(LookupRecord, 'lookupCount')\n});\n\nlet ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);\n\nexport let ChainingContext = new r.VersionedStruct(r.uint16, {\n  1: { // Simple context glyph substitution\n    coverage:           new r.Pointer(r.uint16, Coverage),\n    chainCount:         r.uint16,\n    chainRuleSets:      new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  2: { // Class-based chaining context\n    coverage:           new r.Pointer(r.uint16, Coverage),\n    backtrackClassDef:  new r.Pointer(r.uint16, ClassDef),\n    inputClassDef:      new r.Pointer(r.uint16, ClassDef),\n    lookaheadClassDef:  new r.Pointer(r.uint16, ClassDef),\n    chainCount:         r.uint16,\n    chainClassSet:      new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')\n  },\n\n  3: { // Coverage-based chaining context\n    backtrackGlyphCount:    r.uint16,\n    backtrackCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    inputGlyphCount:        r.uint16,\n    inputCoverage:          new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),\n    lookaheadGlyphCount:    r.uint16,\n    lookaheadCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    lookupCount:            r.uint16,\n    lookupRecords:          new r.Array(LookupRecord, 'lookupCount')\n  }\n});\n","import r from 'restructure';\n\nlet VerticalOrigin = new r.Struct({\n  glyphIndex:   r.uint16,\n  vertOriginY:  r.int16\n});\n\nexport default new r.Struct({\n  majorVersion:           r.uint16,\n  minorVersion:           r.uint16,\n  defaultVertOriginY:     r.int16,\n  numVertOriginYMetrics:  r.uint16,\n  metrics:                new r.Array(VerticalOrigin, 'numVertOriginYMetrics')\n});\n","import r from 'restructure';\nimport {BigMetrics} from './EBDT';\n\nlet SBitLineMetrics = new r.Struct({\n  ascender: r.int8,\n  descender: r.int8,\n  widthMax: r.uint8,\n  caretSlopeNumerator: r.int8,\n  caretSlopeDenominator: r.int8,\n  caretOffset: r.int8,\n  minOriginSB: r.int8,\n  minAdvanceSB: r.int8,\n  maxBeforeBL: r.int8,\n  minAfterBL: r.int8,\n  pad: new r.Reserved(r.int8, 2)\n});\n\nlet CodeOffsetPair = new r.Struct({\n  glyphCode: r.uint16,\n  offset: r.uint16\n});\n\nlet IndexSubtable = new r.VersionedStruct(r.uint16, {\n  header: {\n    imageFormat: r.uint16,\n    imageDataOffset: r.uint32\n  },\n\n  1: {\n    offsetArray: new r.Array(r.uint32, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n\n  2: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics\n  },\n\n  3: {\n    offsetArray: new r.Array(r.uint16, t => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)\n  },\n\n  4: {\n    numGlyphs: r.uint32,\n    glyphArray: new r.Array(CodeOffsetPair, t => t.numGlyphs + 1)\n  },\n\n  5: {\n    imageSize: r.uint32,\n    bigMetrics: BigMetrics,\n    numGlyphs: r.uint32,\n    glyphCodeArray: new r.Array(r.uint16, 'numGlyphs')\n  }\n});\n\nlet IndexSubtableArray = new r.Struct({\n  firstGlyphIndex: r.uint16,\n  lastGlyphIndex: r.uint16,\n  subtable: new r.Pointer(r.uint32, IndexSubtable)\n});\n\nlet BitmapSizeTable = new r.Struct({\n  indexSubTableArray: new r.Pointer(r.uint32, new r.Array(IndexSubtableArray, 1), { type: 'parent' }),\n  indexTablesSize: r.uint32,\n  numberOfIndexSubTables: r.uint32,\n  colorRef: r.uint32,\n  hori: SBitLineMetrics,\n  vert: SBitLineMetrics,\n  startGlyphIndex: r.uint16,\n  endGlyphIndex: r.uint16,\n  ppemX: r.uint8,\n  ppemY: r.uint8,\n  bitDepth: r.uint8,\n  flags: new r.Bitfield(r.uint8, ['horizontal', 'vertical'])\n});\n\nexport default new r.Struct({\n  version:  r.uint32, // 0x00020000\n  numSizes: r.uint32,\n  sizes:    new r.Array(BitmapSizeTable, 'numSizes')\n});\n","import r from 'restructure';\n\nexport let BigMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  horiBearingX: r.int8,\n  horiBearingY: r.int8,\n  horiAdvance: r.uint8,\n  vertBearingX: r.int8,\n  vertBearingY: r.int8,\n  vertAdvance: r.uint8\n});\n\nexport let SmallMetrics = new r.Struct({\n  height: r.uint8,\n  width: r.uint8,\n  bearingX: r.int8,\n  bearingY: r.int8,\n  advance: r.uint8\n});\n\nlet EBDTComponent = new r.Struct({\n  glyph: r.uint16,\n  xOffset: r.int8,\n  yOffset: r.int8\n});\n\nclass ByteAligned {}\n\nclass BitAligned {}\n\nexport let glyph = new r.VersionedStruct('version', {\n  1: {\n    metrics: SmallMetrics,\n    data: ByteAligned\n  },\n\n  2: {\n    metrics: SmallMetrics,\n    data: BitAligned\n  },\n\n  // format 3 is deprecated\n  // format 4 is not supported by Microsoft\n\n  5: {\n    data: BitAligned\n  },\n\n  6: {\n    metrics: BigMetrics,\n    data: ByteAligned\n  },\n\n  7: {\n    metrics: BigMetrics,\n    data: BitAligned\n  },\n\n  8: {\n    metrics: SmallMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  9: {\n    metrics: BigMetrics,\n    pad: new r.Reserved(r.uint8),\n    numComponents: r.uint16,\n    components: new r.Array(EBDTComponent, 'numComponents')\n  },\n\n  17: {\n    metrics: SmallMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  18: {\n    metrics: BigMetrics,\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  },\n\n  19: {\n    dataLen: r.uint32,\n    data: new r.Buffer('dataLen')\n  }\n});\n\n","import r from 'restructure';\n\nlet ImageTable = new r.Struct({\n  ppem: r.uint16,\n  resolution: r.uint16,\n  imageOffsets: new r.Array(new r.Pointer(r.uint32, 'void'), t => t.parent.parent.maxp.numGlyphs + 1)\n});\n\n// This is the Apple sbix table, used by the \"Apple Color Emoji\" font.\n// It includes several image tables with images for each bitmap glyph\n// of several different sizes.\nexport default new r.Struct({\n  version: r.uint16,\n  flags: new r.Bitfield(r.uint16, ['renderOutlines']),\n  numImgTables: r.uint32,\n  imageTables: new r.Array(new r.Pointer(r.uint32, ImageTable), 'numImgTables')\n});\n","import r from 'restructure';\n\nlet LayerRecord = new r.Struct({\n  gid: r.uint16,          // Glyph ID of layer glyph (must be in z-order from bottom to top).\n  paletteIndex: r.uint16  // Index value to use in the appropriate palette. This value must\n});                       // be less than numPaletteEntries in the CPAL table, except for\n                          // the special case noted below. Each palette entry is 16 bits.\n                          // A palette index of 0xFFFF is a special case indicating that\n                          // the text foreground color should be used.\n\nlet BaseGlyphRecord = new r.Struct({\n  gid: r.uint16,             // Glyph ID of reference glyph. This glyph is for reference only\n                             // and is not rendered for color.\n  firstLayerIndex: r.uint16, // Index (from beginning of the Layer Records) to the layer record.\n                             // There will be numLayers consecutive entries for this base glyph.\n  numLayers: r.uint16\n});\n\nexport default new r.Struct({\n  version: r.uint16,\n  numBaseGlyphRecords: r.uint16,\n  baseGlyphRecord: new r.Pointer(r.uint32, new r.Array(BaseGlyphRecord, 'numBaseGlyphRecords')),\n  layerRecords: new r.Pointer(r.uint32, new r.Array(LayerRecord, 'numLayerRecords'), { lazy: true }),\n  numLayerRecords: r.uint16\n});\n","import r from 'restructure';\n\nlet ColorRecord = new r.Struct({\n  blue: r.uint8,\n  green: r.uint8,\n  red: r.uint8,\n  alpha: r.uint8\n});\n\nexport default new r.VersionedStruct(r.uint16, {\n  header: {\n    numPaletteEntries: r.uint16,\n    numPalettes: r.uint16,\n    numColorRecords: r.uint16,\n    colorRecords: new r.Pointer(r.uint32, new r.Array(ColorRecord, 'numColorRecords')),\n    colorRecordIndices: new r.Array(r.uint16, 'numPalettes'),\n  },\n  0: {},\n  1: {\n    offsetPaletteTypeArray: new r.Pointer(r.uint32, new r.Array(r.uint32, 'numPalettes')),\n    offsetPaletteLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPalettes')),\n    offsetPaletteEntryLabelArray: new r.Pointer(r.uint32, new r.Array(r.uint16, 'numPaletteEntries'))\n  }\n});\n","import r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device} from './opentype';\nimport {ItemVariationStore} from './variations';\n\nlet BaseCoord = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate:   r.int16 // X or Y value, in design units\n  },\n\n  2: { // Design units plus contour point\n    coordinate:     r.int16,   // X or Y value, in design units\n    referenceGlyph: r.uint16,  // GlyphID of control glyph\n    baseCoordPoint: r.uint16   // Index of contour point on the referenceGlyph\n  },\n\n  3: { // Design units plus Device table\n    coordinate:   r.int16,                         // X or Y value, in design units\n    deviceTable:  new r.Pointer(r.uint16, Device)  // Device table for X or Y value\n  }\n});\n\nlet BaseValues = new r.Struct({\n  defaultIndex:   r.uint16,  // Index of default baseline for this script-same index in the BaseTagList\n  baseCoordCount: r.uint16,\n  baseCoords:     new r.Array(new r.Pointer(r.uint16, BaseCoord), 'baseCoordCount')\n});\n\nlet FeatMinMaxRecord = new r.Struct({\n  tag:        new r.String(4),  // 4-byte feature identification tag-must match FeatureTag in FeatureList\n  minCoord:   new r.Pointer(r.uint16, BaseCoord, {type: 'parent'}), // May be NULL\n  maxCoord:   new r.Pointer(r.uint16, BaseCoord, {type: 'parent'})  // May be NULL\n});\n\nlet MinMax = new r.Struct({\n  minCoord:           new r.Pointer(r.uint16, BaseCoord),  // May be NULL\n  maxCoord:           new r.Pointer(r.uint16, BaseCoord),  // May be NULL\n  featMinMaxCount:    r.uint16,                            // May be 0\n  featMinMaxRecords:  new r.Array(FeatMinMaxRecord, 'featMinMaxCount') // In alphabetical order\n});\n\nlet BaseLangSysRecord = new r.Struct({\n  tag:    new r.String(4),  // 4-byte language system identification tag\n  minMax: new r.Pointer(r.uint16, MinMax, {type: 'parent'})\n});\n\nlet BaseScript = new r.Struct({\n  baseValues:         new r.Pointer(r.uint16, BaseValues), // May be NULL\n  defaultMinMax:      new r.Pointer(r.uint16, MinMax),     // May be NULL\n  baseLangSysCount:   r.uint16,                            // May be 0\n  baseLangSysRecords: new r.Array(BaseLangSysRecord, 'baseLangSysCount') // in alphabetical order by BaseLangSysTag\n});\n\nlet BaseScriptRecord = new r.Struct({\n  tag:      new r.String(4),  // 4-byte script identification tag\n  script:   new r.Pointer(r.uint16, BaseScript, {type: 'parent'})\n});\n\nlet BaseScriptList = new r.Array(BaseScriptRecord, r.uint16);\n\n// Array of 4-byte baseline identification tags-must be in alphabetical order\nlet BaseTagList = new r.Array(new r.String(4), r.uint16);\n\nlet Axis = new r.Struct({\n  baseTagList:    new r.Pointer(r.uint16, BaseTagList),  // May be NULL\n  baseScriptList: new r.Pointer(r.uint16, BaseScriptList)\n});\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    horizAxis:    new r.Pointer(r.uint16, Axis),   // May be NULL\n    vertAxis:     new r.Pointer(r.uint16, Axis)    // May be NULL\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n","import r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device} from './opentype';\nimport {ItemVariationStore} from './variations';\n\nlet AttachPoint = new r.Array(r.uint16, r.uint16);\nlet AttachList = new r.Struct({\n  coverage:       new r.Pointer(r.uint16, Coverage),\n  glyphCount:     r.uint16,\n  attachPoints:   new r.Array(new r.Pointer(r.uint16, AttachPoint), 'glyphCount')\n});\n\nlet CaretValue = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    coordinate: r.int16\n  },\n\n  2: { // Contour point\n    caretValuePoint: r.uint16\n  },\n\n  3: { // Design units plus Device table\n    coordinate:     r.int16,\n    deviceTable:    new r.Pointer(r.uint16, Device)\n  }\n});\n\nlet LigGlyph = new r.Array(new r.Pointer(r.uint16, CaretValue), r.uint16);\n\nlet LigCaretList = new r.Struct({\n  coverage:       new r.Pointer(r.uint16, Coverage),\n  ligGlyphCount:  r.uint16,\n  ligGlyphs:      new r.Array(new r.Pointer(r.uint16, LigGlyph), 'ligGlyphCount')\n});\n\nlet MarkGlyphSetsDef = new r.Struct({\n  markSetTableFormat: r.uint16,\n  markSetCount:       r.uint16,\n  coverage:           new r.Array(new r.Pointer(r.uint32, Coverage), 'markSetCount')\n});\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    glyphClassDef:      new r.Pointer(r.uint16, ClassDef),\n    attachList:         new r.Pointer(r.uint16, AttachList),\n    ligCaretList:       new r.Pointer(r.uint16, LigCaretList),\n    markAttachClassDef: new r.Pointer(r.uint16, ClassDef)\n  },\n\n  0x00010000: {},\n  0x00010002: {\n    markGlyphSetsDef:   new r.Pointer(r.uint16, MarkGlyphSetsDef)\n  },\n  0x00010003: {\n    markGlyphSetsDef:   new r.Pointer(r.uint16, MarkGlyphSetsDef),\n    itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore)\n  }\n});\n","import r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device, Context, ChainingContext} from './opentype';\nimport {FeatureVariations} from './variations';\n\nlet ValueFormat = new r.Bitfield(r.uint16, [\n  'xPlacement', 'yPlacement',\n  'xAdvance', 'yAdvance',\n  'xPlaDevice', 'yPlaDevice',\n  'xAdvDevice', 'yAdvDevice'\n]);\n\nlet types = {\n  xPlacement: r.int16,\n  yPlacement: r.int16,\n  xAdvance:   r.int16,\n  yAdvance:   r.int16,\n  xPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel }),\n  yPlaDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel }),\n  xAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel }),\n  yAdvDevice: new r.Pointer(r.uint16, Device, { type: 'global', relativeTo: ctx => ctx.rel })\n};\n\nclass ValueRecord {\n  constructor(key = 'valueFormat') {\n    this.key = key;\n  }\n\n  buildStruct(parent) {\n    let struct = parent;\n    while (!struct[this.key] && struct.parent) {\n      struct = struct.parent;\n    }\n\n    if (!struct[this.key]) return;\n\n    let fields = {};\n    fields.rel = () => struct._startOffset;\n\n    let format = struct[this.key];\n    for (let key in format) {\n      if (format[key]) {\n        fields[key] = types[key];\n      }\n    }\n\n    return new r.Struct(fields);\n  }\n\n  size(val, ctx) {\n    return this.buildStruct(ctx).size(val, ctx);\n  }\n\n  decode(stream, parent) {\n    let res = this.buildStruct(parent).decode(stream, parent);\n    delete res.rel;\n    return res;\n  }\n}\n\nlet PairValueRecord = new r.Struct({\n  secondGlyph:    r.uint16,\n  value1:         new ValueRecord('valueFormat1'),\n  value2:         new ValueRecord('valueFormat2')\n});\n\nlet PairSet = new r.Array(PairValueRecord, r.uint16);\n\nlet Class2Record = new r.Struct({\n  value1: new ValueRecord('valueFormat1'),\n  value2: new ValueRecord('valueFormat2')\n});\n\nlet Anchor = new r.VersionedStruct(r.uint16, {\n  1: { // Design units only\n    xCoordinate:    r.int16,\n    yCoordinate:    r.int16\n  },\n\n  2: { // Design units plus contour point\n    xCoordinate:    r.int16,\n    yCoordinate:    r.int16,\n    anchorPoint:    r.uint16\n  },\n\n  3: { // Design units plus Device tables\n    xCoordinate:    r.int16,\n    yCoordinate:    r.int16,\n    xDeviceTable:   new r.Pointer(r.uint16, Device),\n    yDeviceTable:   new r.Pointer(r.uint16, Device)\n  }\n});\n\nlet EntryExitRecord = new r.Struct({\n  entryAnchor:    new r.Pointer(r.uint16, Anchor, {type: 'parent'}),\n  exitAnchor:     new r.Pointer(r.uint16, Anchor, {type: 'parent'})\n});\n\nlet MarkRecord = new r.Struct({\n  class:      r.uint16,\n  markAnchor: new r.Pointer(r.uint16, Anchor, {type: 'parent'})\n});\n\nlet MarkArray = new r.Array(MarkRecord, r.uint16);\n\nlet BaseRecord  = new r.Array(new r.Pointer(r.uint16, Anchor), t => t.parent.classCount);\nlet BaseArray   = new r.Array(BaseRecord, r.uint16);\n\nlet ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), t => t.parent.parent.classCount);\nlet LigatureAttach  = new r.Array(ComponentRecord, r.uint16);\nlet LigatureArray   = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);\n\nlet GPOSLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, { // Single Adjustment\n    1: { // Single positioning value\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat:    ValueFormat,\n      value:          new ValueRecord()\n    },\n    2: {\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat:    ValueFormat,\n      valueCount:     r.uint16,\n      values:         new r.LazyArray(new ValueRecord(), 'valueCount')\n    }\n  }),\n\n  2: new r.VersionedStruct(r.uint16, { // Pair Adjustment Positioning\n    1: { // Adjustments for glyph pairs\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat1:   ValueFormat,\n      valueFormat2:   ValueFormat,\n      pairSetCount:   r.uint16,\n      pairSets:       new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')\n    },\n\n    2: { // Class pair adjustment\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      valueFormat1:   ValueFormat,\n      valueFormat2:   ValueFormat,\n      classDef1:      new r.Pointer(r.uint16, ClassDef),\n      classDef2:      new r.Pointer(r.uint16, ClassDef),\n      class1Count:    r.uint16,\n      class2Count:    r.uint16,\n      classRecords:   new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')\n    }\n  }),\n\n  3: { // Cursive Attachment Positioning\n    format:             r.uint16,\n    coverage:           new r.Pointer(r.uint16, Coverage),\n    entryExitCount:     r.uint16,\n    entryExitRecords:   new r.Array(EntryExitRecord, 'entryExitCount')\n  },\n\n  4: { // MarkToBase Attachment Positioning\n    format:             r.uint16,\n    markCoverage:       new r.Pointer(r.uint16, Coverage),\n    baseCoverage:       new r.Pointer(r.uint16, Coverage),\n    classCount:         r.uint16,\n    markArray:          new r.Pointer(r.uint16, MarkArray),\n    baseArray:          new r.Pointer(r.uint16, BaseArray)\n  },\n\n  5: { // MarkToLigature Attachment Positioning\n    format:             r.uint16,\n    markCoverage:       new r.Pointer(r.uint16, Coverage),\n    ligatureCoverage:   new r.Pointer(r.uint16, Coverage),\n    classCount:         r.uint16,\n    markArray:          new r.Pointer(r.uint16, MarkArray),\n    ligatureArray:      new r.Pointer(r.uint16, LigatureArray)\n  },\n\n  6: { // MarkToMark Attachment Positioning\n    format:             r.uint16,\n    mark1Coverage:      new r.Pointer(r.uint16, Coverage),\n    mark2Coverage:      new r.Pointer(r.uint16, Coverage),\n    classCount:         r.uint16,\n    mark1Array:         new r.Pointer(r.uint16, MarkArray),\n    mark2Array:         new r.Pointer(r.uint16, BaseArray)\n  },\n\n  7: Context,          // Contextual positioning\n  8: ChainingContext,  // Chaining contextual positioning\n\n  9: { // Extension Positioning\n    posFormat:   r.uint16,\n    lookupType:  r.uint16,   // cannot also be 9\n    extension:   new r.Pointer(r.uint32, null)\n  }\n});\n\n// Fix circular reference\nGPOSLookup.versions[9].extension.type = GPOSLookup;\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList:     new r.Pointer(r.uint16, ScriptList),\n    featureList:    new r.Pointer(r.uint16, FeatureList),\n    lookupList:     new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n\n// export GPOSLookup for JSTF table\nexport { GPOSLookup };\n","import r from 'restructure';\nimport {ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device, Context, ChainingContext} from './opentype';\nimport {FeatureVariations} from './variations';\n\nlet Sequence = new r.Array(r.uint16, r.uint16);\nlet AlternateSet = Sequence;\n\nlet Ligature = new r.Struct({\n  glyph:      r.uint16,\n  compCount:  r.uint16,\n  components: new r.Array(r.uint16, t => t.compCount - 1)\n});\n\nlet LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);\n\nlet GSUBLookup = new r.VersionedStruct('lookupType', {\n  1: new r.VersionedStruct(r.uint16, {// Single Substitution\n    1: {\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      deltaGlyphID:   r.int16\n    },\n    2: {\n      coverage:       new r.Pointer(r.uint16, Coverage),\n      glyphCount:     r.uint16,\n      substitute:     new r.LazyArray(r.uint16, 'glyphCount')\n    }\n  }),\n\n  2: { // Multiple Substitution\n    substFormat:    r.uint16,\n    coverage:       new r.Pointer(r.uint16, Coverage),\n    count:          r.uint16,\n    sequences:      new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')\n  },\n\n  3: { // Alternate Substitution\n    substFormat:    r.uint16,\n    coverage:       new r.Pointer(r.uint16, Coverage),\n    count:          r.uint16,\n    alternateSet:   new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')\n  },\n\n  4: { // Ligature Substitution\n    substFormat:    r.uint16,\n    coverage:       new r.Pointer(r.uint16, Coverage),\n    count:          r.uint16,\n    ligatureSets:   new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')\n  },\n\n  5: Context,         // Contextual Substitution\n  6: ChainingContext, // Chaining Contextual Substitution\n\n  7: { // Extension Substitution\n    substFormat:   r.uint16,\n    lookupType:    r.uint16,   // cannot also be 7\n    extension:     new r.Pointer(r.uint32, null)\n  },\n\n  8: { // Reverse Chaining Contextual Single Substitution\n    substFormat:            r.uint16,\n    coverage:               new r.Pointer(r.uint16, Coverage),\n    backtrackCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),\n    lookaheadGlyphCount:    r.uint16,\n    lookaheadCoverage:      new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),\n    glyphCount:             r.uint16,\n    substitutes:            new r.Array(r.uint16, 'glyphCount')\n  }\n});\n\n// Fix circular reference\nGSUBLookup.versions[7].extension.type = GSUBLookup;\n\nexport default new r.VersionedStruct(r.uint32, {\n  header: {\n    scriptList:     new r.Pointer(r.uint16, ScriptList),\n    featureList:    new r.Pointer(r.uint16, FeatureList),\n    lookupList:     new r.Pointer(r.uint16, new LookupList(GSUBLookup))\n  },\n\n  0x00010000: {},\n  0x00010001: {\n    featureVariations: new r.Pointer(r.uint32, FeatureVariations)\n  }\n});\n","import r from 'restructure';\nimport { ScriptList, FeatureList, LookupList, Coverage, ClassDef, Device } from './opentype';\nimport { GPOSLookup } from './GPOS';\n\nlet JstfGSUBModList = new r.Array(r.uint16, r.uint16);\n\nlet JstfPriority = new r.Struct({\n  shrinkageEnableGSUB:    new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGSUB:   new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageEnableGPOS:    new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageDisableGPOS:   new r.Pointer(r.uint16, JstfGSUBModList),\n  shrinkageJstfMax:       new r.Pointer(r.uint16, new LookupList(GPOSLookup)),\n  extensionEnableGSUB:    new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGSUB:   new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionEnableGPOS:    new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionDisableGPOS:   new r.Pointer(r.uint16, JstfGSUBModList),\n  extensionJstfMax:       new r.Pointer(r.uint16, new LookupList(GPOSLookup))\n});\n\nlet JstfLangSys = new r.Array(new r.Pointer(r.uint16, JstfPriority), r.uint16);\n\nlet JstfLangSysRecord = new r.Struct({\n  tag:         new r.String(4),\n  jstfLangSys: new r.Pointer(r.uint16, JstfLangSys)\n});\n\nlet JstfScript = new r.Struct({\n  extenderGlyphs: new r.Pointer(r.uint16, new r.Array(r.uint16, r.uint16)), // array of glyphs to extend line length\n  defaultLangSys: new r.Pointer(r.uint16, JstfLangSys),\n  langSysCount:   r.uint16,\n  langSysRecords: new r.Array(JstfLangSysRecord, 'langSysCount')\n});\n\nlet JstfScriptRecord = new r.Struct({\n  tag:    new r.String(4),\n  script: new r.Pointer(r.uint16, JstfScript, {type: 'parent'})\n});\n\nexport default new r.Struct({\n  version:     r.uint32,  // should be 0x00010000\n  scriptCount: r.uint16,\n  scriptList:  new r.Array(JstfScriptRecord, 'scriptCount')\n});\n","import r from 'restructure';\nimport { resolveLength } from 'restructure/src/utils.js';\nimport { ItemVariationStore } from './variations';\n\n// TODO: add this to restructure\nclass VariableSizeNumber {\n  constructor(size) {\n    this._size = size;\n  }\n\n  decode(stream, parent) {\n    switch (this.size(0, parent)) {\n      case 1: return stream.readUInt8();\n      case 2: return stream.readUInt16BE();\n      case 3: return stream.readUInt24BE();\n      case 4: return stream.readUInt32BE();\n    }\n  }\n\n  size(val, parent) {\n    return resolveLength(this._size, null, parent);\n  }\n}\n\nlet MapDataEntry = new r.Struct({\n  entry: new VariableSizeNumber(t => ((t.parent.entryFormat & 0x0030) >> 4) + 1),\n  outerIndex: t => t.entry >> ((t.parent.entryFormat & 0x000F) + 1),\n  innerIndex: t => t.entry & ((1 << ((t.parent.entryFormat & 0x000F) + 1)) - 1)\n});\n\nlet DeltaSetIndexMap = new r.Struct({\n  entryFormat: r.uint16,\n  mapCount: r.uint16,\n  mapData: new r.Array(MapDataEntry, 'mapCount')\n});\n\nexport default new r.Struct({\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  itemVariationStore: new r.Pointer(r.uint32, ItemVariationStore),\n  advanceWidthMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  LSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap),\n  RSBMapping: new r.Pointer(r.uint32, DeltaSetIndexMap)\n});\n","import r from 'restructure';\n\nlet Signature = new r.Struct({\n  format: r.uint32,\n  length: r.uint32,\n  offset: r.uint32\n});\n\nlet SignatureBlock = new r.Struct({\n  reserved:       new r.Reserved(r.uint16, 2),\n  cbSignature:    r.uint32,  // Length (in bytes) of the PKCS#7 packet in pbSignature\n  signature:      new r.Buffer('cbSignature')\n});\n\nexport default new r.Struct({\n  ulVersion:       r.uint32,  // Version number of the DSIG table (0x00000001)\n  usNumSigs:       r.uint16,  // Number of signatures in the table\n  usFlag:          r.uint16,  // Permission flags\n  signatures:      new r.Array(Signature, 'usNumSigs'),\n  signatureBlocks: new r.Array(SignatureBlock, 'usNumSigs')\n});\n","import r from 'restructure';\n\nlet GaspRange = new r.Struct({\n  rangeMaxPPEM:       r.uint16,                  // Upper limit of range, in ppem\n  rangeGaspBehavior:  new r.Bitfield(r.uint16, [ // Flags describing desired rasterizer behavior\n    'grayscale', 'gridfit',\n    'symmetricSmoothing', 'symmetricGridfit'     // only in version 1, for ClearType\n  ])\n});\n\nexport default new r.Struct({\n  version:    r.uint16,  // set to 0\n  numRanges:  r.uint16,\n  gaspRanges: new r.Array(GaspRange, 'numRanges') // Sorted by ppem\n});\n","import r from 'restructure';\n\nlet DeviceRecord = new r.Struct({\n  pixelSize:      r.uint8,\n  maximumWidth:   r.uint8,\n  widths:         new r.Array(r.uint8, t => t.parent.parent.maxp.numGlyphs)\n});\n\n// The Horizontal Device Metrics table stores integer advance widths scaled to particular pixel sizes\nexport default new r.Struct({\n  version:            r.uint16,\n  numRecords:         r.int16,\n  sizeDeviceRecord:   r.int32,\n  records:            new r.Array(DeviceRecord, 'numRecords')\n});\n","import r from 'restructure';\n\nlet KernPair = new r.Struct({\n  left:   r.uint16,\n  right:  r.uint16,\n  value:  r.int16\n});\n\nlet ClassTable = new r.Struct({\n  firstGlyph: r.uint16,\n  nGlyphs: r.uint16,\n  offsets: new r.Array(r.uint16, 'nGlyphs'),\n  max: t => t.offsets.length && Math.max.apply(Math, t.offsets)\n});\n\nlet Kern2Array = new r.Struct({\n  off: t => t._startOffset - t.parent.parent._startOffset,\n  len: t => (((t.parent.leftTable.max - t.off) / t.parent.rowWidth) + 1) * (t.parent.rowWidth / 2),\n  values: new r.LazyArray(r.int16, 'len')\n});\n\nlet KernSubtable = new r.VersionedStruct('format', {\n  0: {\n    nPairs:         r.uint16,\n    searchRange:    r.uint16,\n    entrySelector:  r.uint16,\n    rangeShift:     r.uint16,\n    pairs:          new r.Array(KernPair, 'nPairs')\n  },\n\n  2: {\n    rowWidth:   r.uint16,\n    leftTable:  new r.Pointer(r.uint16, ClassTable, {type: 'parent'}),\n    rightTable: new r.Pointer(r.uint16, ClassTable, {type: 'parent'}),\n    array:      new r.Pointer(r.uint16, Kern2Array, {type: 'parent'})\n  },\n\n  3: {\n    glyphCount:       r.uint16,\n    kernValueCount:   r.uint8,\n    leftClassCount:   r.uint8,\n    rightClassCount:  r.uint8,\n    flags:            r.uint8,\n    kernValue:        new r.Array(r.int16, 'kernValueCount'),\n    leftClass:        new r.Array(r.uint8, 'glyphCount'),\n    rightClass:       new r.Array(r.uint8, 'glyphCount'),\n    kernIndex:        new r.Array(r.uint8, t => t.leftClassCount * t.rightClassCount)\n  }\n});\n\nlet KernTable = new r.VersionedStruct('version', {\n  0: { // Microsoft uses this format\n    subVersion: r.uint16,  // Microsoft has an extra sub-table version number\n    length:     r.uint16,  // Length of the subtable, in bytes\n    format:     r.uint8,   // Format of subtable\n    coverage:   new r.Bitfield(r.uint8, [\n      'horizontal',    // 1 if table has horizontal data, 0 if vertical\n      'minimum',       // If set to 1, the table has minimum values. If set to 0, the table has kerning values.\n      'crossStream',   // If set to 1, kerning is perpendicular to the flow of the text\n      'override'      // If set to 1 the value in this table replaces the accumulated value\n    ]),\n    subtable:   KernSubtable,\n    padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n  },\n  1: { // Apple uses this format\n    length:     r.uint32,\n    coverage:   new r.Bitfield(r.uint8, [\n      null, null, null, null, null,\n      'variation',     // Set if table has variation kerning values\n      'crossStream',   // Set if table has cross-stream kerning values\n      'vertical'      // Set if table has vertical kerning values\n    ]),\n    format:     r.uint8,\n    tupleIndex: r.uint16,\n    subtable:   KernSubtable,\n    padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n  }\n});\n\nexport default new r.VersionedStruct(r.uint16, {\n  0: { // Microsoft Version\n    nTables:    r.uint16,\n    tables:     new r.Array(KernTable, 'nTables')\n  },\n\n  1: { // Apple Version\n    reserved:   new r.Reserved(r.uint16), // the other half of the version number\n    nTables:    r.uint32,\n    tables:     new r.Array(KernTable, 'nTables')\n  }\n});\n","import r from 'restructure';\n\n// Linear Threshold table\n// Records the ppem for each glyph at which the scaling becomes linear again,\n// despite instructions effecting the advance width\nexport default new r.Struct({\n  version:    r.uint16,\n  numGlyphs:  r.uint16,\n  yPels:      new r.Array(r.uint8, 'numGlyphs')\n});\n","import r from 'restructure';\n\n// PCL 5 Table\n// NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines\nexport default new r.Struct({\n  version:              r.uint16,\n  fontNumber:           r.uint32,\n  pitch:                r.uint16,\n  xHeight:              r.uint16,\n  style:                r.uint16,\n  typeFamily:           r.uint16,\n  capHeight:            r.uint16,\n  symbolSet:            r.uint16,\n  typeface:             new r.String(16),\n  characterComplement:  new r.String(8),\n  fileName:             new r.String(6),\n  strokeWeight:         new r.String(1),\n  widthType:            new r.String(1),\n  serifStyle:           r.uint8,\n  reserved:             new r.Reserved(r.uint8)\n});\n","import r from 'restructure';\n\n// VDMX tables contain ascender/descender overrides for certain (usually small)\n// sizes. This is needed in order to match font metrics on Windows.\n\nlet Ratio = new r.Struct({\n  bCharSet:       r.uint8,                             // Character set\n  xRatio:         r.uint8,                             // Value to use for x-Ratio\n  yStartRatio:    r.uint8,                             // Starting y-Ratio value\n  yEndRatio:      r.uint8                              // Ending y-Ratio value\n});\n\nlet vTable = new r.Struct({\n  yPelHeight:     r.uint16,                            // yPelHeight to which values apply\n  yMax:           r.int16,                             // Maximum value (in pels) for this yPelHeight\n  yMin:           r.int16                              // Minimum value (in pels) for this yPelHeight\n});\n\nlet VdmxGroup = new r.Struct({\n  recs:           r.uint16,                            // Number of height records in this group\n  startsz:        r.uint8,                             // Starting yPelHeight\n  endsz:          r.uint8,                             // Ending yPelHeight\n  entries:        new r.Array(vTable, 'recs')          // The VDMX records\n});\n\nexport default new r.Struct({\n  version:        r.uint16,                            // Version number (0 or 1)\n  numRecs:        r.uint16,                            // Number of VDMX groups present\n  numRatios:      r.uint16,                            // Number of aspect ratio groupings\n  ratioRanges:    new r.Array(Ratio, 'numRatios'),     // Ratio ranges\n  offsets:        new r.Array(r.uint16, 'numRatios'),  // Offset to the VDMX group for this ratio range\n  groups:         new r.Array(VdmxGroup, 'numRecs')    // The actual VDMX groupings\n});\n","import r from 'restructure';\n\n// Vertical Header Table\nexport default new r.Struct({\n  version:                r.uint16,  // Version number of the Vertical Header Table\n  ascent:                 r.int16,   // The vertical typographic ascender for this font\n  descent:                r.int16,   // The vertical typographic descender for this font\n  lineGap:                r.int16,   // The vertical typographic line gap for this font\n  advanceHeightMax:       r.int16,   // The maximum advance height measurement found in the font\n  minTopSideBearing:      r.int16,   // The minimum top side bearing measurement found in the font\n  minBottomSideBearing:   r.int16,   // The minimum bottom side bearing measurement found in the font\n  yMaxExtent:             r.int16,\n  caretSlopeRise:         r.int16,   // Caret slope (rise/run)\n  caretSlopeRun:          r.int16,\n  caretOffset:            r.int16,   // Set value equal to 0 for nonslanted fonts\n  reserved:               new r.Reserved(r.int16, 4),\n  metricDataFormat:       r.int16,   // Set to 0\n  numberOfMetrics:        r.uint16   // Number of advance heights in the Vertical Metrics table\n});\n","import r from 'restructure';\n\nlet VmtxEntry = new r.Struct({\n  advance: r.uint16,  // The advance height of the glyph\n  bearing: r.int16    // The top sidebearing of the glyph\n});\n\n// Vertical Metrics Table\nexport default new r.Struct({\n  metrics:  new r.LazyArray(VmtxEntry, t => t.parent.vhea.numberOfMetrics),\n  bearings: new r.LazyArray(r.int16, t => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)\n});\n","import r from 'restructure';\n\nlet shortFrac = new r.Fixed(16, 'BE', 14);\n\nlet Correspondence = new r.Struct({\n  fromCoord: shortFrac,\n  toCoord: shortFrac\n});\n\nlet Segment = new r.Struct({\n  pairCount: r.uint16,\n  correspondence: new r.Array(Correspondence, 'pairCount')\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  axisCount: r.uint32,\n  segment: new r.Array(Segment, 'axisCount')\n});\n","import r from 'restructure';\nimport { LookupTable } from './aat';\n\nlet BslnSubtable = new r.VersionedStruct('format', {\n  0: { // Distance-based, no mapping\n    deltas: new r.Array(r.int16, 32)\n  },\n\n  1: { // Distance-based, with mapping\n    deltas: new r.Array(r.int16, 32),\n    mappingData: new LookupTable(r.uint16)\n  },\n\n  2: { // Control point-based, no mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32)\n  },\n\n  3: { // Control point-based, with mapping\n    standardGlyph: r.uint16,\n    controlPoints: new r.Array(r.uint16, 32),\n    mappingData: new LookupTable(r.uint16)\n  }\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  defaultBaseline: r.uint16,\n  subtable: BslnSubtable\n});\n","import r from 'restructure';\n\nclass UnboundedArrayAccessor {\n  constructor(type, stream, parent) {\n    this.type = type;\n    this.stream = stream;\n    this.parent = parent;\n    this.base = this.stream.pos;\n    this._items = [];\n  }\n\n  getItem(index) {\n    if (this._items[index] == null) {\n      let pos = this.stream.pos;\n      this.stream.pos = this.base + this.type.size(null, this.parent) * index;\n      this._items[index] = this.type.decode(this.stream, this.parent);\n      this.stream.pos = pos;\n    }\n\n    return this._items[index];\n  }\n\n  inspect() {\n    return `[UnboundedArray ${this.type.constructor.name}]`;\n  }\n}\n\nexport class UnboundedArray extends r.Array {\n  constructor(type) {\n    super(type, 0);\n  }\n\n  decode(stream, parent) {\n    return new UnboundedArrayAccessor(this.type, stream, parent);\n  }\n}\n\nexport let LookupTable = function(ValueType = r.uint16) {\n  // Helper class that makes internal structures invisible to pointers\n  class Shadow {\n    constructor(type) {\n      this.type = type;\n    }\n\n    decode(stream, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.decode(stream, ctx);\n    }\n\n    size(val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.size(val, ctx);\n    }\n\n    encode(stream, val, ctx) {\n      ctx = ctx.parent.parent;\n      return this.type.encode(stream, val, ctx);\n    }\n  }\n\n  ValueType = new Shadow(ValueType);\n\n  let BinarySearchHeader = new r.Struct({\n    unitSize: r.uint16,\n    nUnits: r.uint16,\n    searchRange: r.uint16,\n    entrySelector: r.uint16,\n    rangeShift: r.uint16\n  });\n\n  let LookupSegmentSingle = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    value: ValueType\n  });\n\n  let LookupSegmentArray = new r.Struct({\n    lastGlyph: r.uint16,\n    firstGlyph: r.uint16,\n    values: new r.Pointer(r.uint16, new r.Array(ValueType, t => t.lastGlyph - t.firstGlyph + 1), {type: 'parent'})\n  });\n\n  let LookupSingle = new r.Struct({\n    glyph: r.uint16,\n    value: ValueType\n  });\n\n  return new r.VersionedStruct(r.uint16, {\n    0: {\n      values: new UnboundedArray(ValueType) // length == number of glyphs maybe?\n    },\n    2: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentSingle, t => t.binarySearchHeader.nUnits)\n    },\n    4: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSegmentArray, t => t.binarySearchHeader.nUnits)\n    },\n    6: {\n      binarySearchHeader: BinarySearchHeader,\n      segments: new r.Array(LookupSingle, t => t.binarySearchHeader.nUnits)\n    },\n    8: {\n      firstGlyph: r.uint16,\n      count: r.uint16,\n      values: new r.Array(ValueType, 'count')\n    }\n  });\n};\n\nexport function StateTable(entryData = {}, lookupType = r.uint16) {\n  let entry = Object.assign({\n    newState: r.uint16,\n    flags: r.uint16\n  }, entryData);\n\n  let Entry = new r.Struct(entry);\n  let StateArray = new UnboundedArray(new r.Array(r.uint16, t => t.nClasses));\n\n  let StateHeader = new r.Struct({\n    nClasses: r.uint32,\n    classTable: new r.Pointer(r.uint32, new LookupTable(lookupType)),\n    stateArray: new r.Pointer(r.uint32, StateArray),\n    entryTable: new r.Pointer(r.uint32, new UnboundedArray(Entry))\n  });\n\n  return StateHeader;\n}\n\n// This is the old version of the StateTable structure\nexport function StateTable1(entryData = {}, lookupType = r.uint16) {\n  let ClassLookupTable = new r.Struct({\n    version() { return 8; }, // simulate LookupTable\n    firstGlyph: r.uint16,\n    values: new r.Array(r.uint8, r.uint16)\n  });\n\n  let entry = Object.assign({\n    newStateOffset: r.uint16,\n    // convert offset to stateArray index\n    newState: t => (t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,\n    flags: r.uint16\n  }, entryData);\n\n  let Entry = new r.Struct(entry);\n  let StateArray = new UnboundedArray(new r.Array(r.uint8, t => t.nClasses));\n\n  let StateHeader1 = new r.Struct({\n    nClasses: r.uint16,\n    classTable: new r.Pointer(r.uint16, ClassLookupTable),\n    stateArray: new r.Pointer(r.uint16, StateArray),\n    entryTable: new r.Pointer(r.uint16, new UnboundedArray(Entry))\n  });\n\n  return StateHeader1;\n}\n","import r from 'restructure';\n\nlet Setting = new r.Struct({\n  setting: r.uint16,\n  nameIndex: r.int16,\n  name: t => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\n\nlet FeatureName = new r.Struct({\n  feature: r.uint16,\n  nSettings: r.uint16,\n  settingTable: new r.Pointer(r.uint32, new r.Array(Setting, 'nSettings'), { type: 'parent' }),\n  featureFlags: new r.Bitfield(r.uint8, [\n    null, null, null, null, null, null,\n    'hasDefault', 'exclusive'\n  ]),\n  defaultSetting: r.uint8,\n  nameIndex: r.int16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameIndex]\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  featureNameCount: r.uint16,\n  reserved1: new r.Reserved(r.uint16),\n  reserved2: new r.Reserved(r.uint32),\n  featureNames: new r.Array(FeatureName, 'featureNameCount')\n});\n","import r from 'restructure';\n\nlet Axis = new r.Struct({\n  axisTag: new r.String(4),\n  minValue: r.fixed32,\n  defaultValue: r.fixed32,\n  maxValue: r.fixed32,\n  flags: r.uint16,\n  nameID: r.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID]\n});\n\nlet Instance = new r.Struct({\n  nameID: r.uint16,\n  name: t => t.parent.parent.name.records.fontFeatures[t.nameID],\n  flags: r.uint16,\n  coord: new r.Array(r.fixed32, t => t.parent.axisCount),\n  postscriptNameID: new r.Optional(r.uint16, t => t.parent.instanceSize - t._currentOffset > 0)\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  offsetToData: r.uint16,\n  countSizePairs: r.uint16,\n  axisCount: r.uint16,\n  axisSize: r.uint16,\n  instanceCount: r.uint16,\n  instanceSize: r.uint16,\n  axis: new r.Array(Axis, 'axisCount'),\n  instance: new r.Array(Instance, 'instanceCount')\n});\n","import r from 'restructure';\n\nlet shortFrac = new r.Fixed(16, 'BE', 14);\nclass Offset {\n  static decode(stream, parent) {\n    // In short format, offsets are multiplied by 2.\n    // This doesn't seem to be documented by Apple, but it\n    // is implemented this way in Freetype.\n    return parent.flags\n      ? stream.readUInt32BE()\n      : stream.readUInt16BE() * 2;\n  }\n}\n\nlet gvar = new r.Struct({\n  version: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  axisCount: r.uint16,\n  globalCoordCount: r.uint16,\n  globalCoords: new r.Pointer(r.uint32, new r.Array(new r.Array(shortFrac, 'axisCount'), 'globalCoordCount')),\n  glyphCount: r.uint16,\n  flags: r.uint16,\n  offsetToData: r.uint32,\n  offsets: new r.Array(new r.Pointer(Offset, 'void', { relativeTo: ctx => ctx.offsetToData, allowNull: false }), t => t.glyphCount + 1)\n});\n\nexport default gvar;\n","import r from 'restructure';\nimport { LookupTable, StateTable1 } from './aat';\n\nlet ClassTable = new r.Struct({\n  length: r.uint16,\n  coverage: r.uint16,\n  subFeatureFlags: r.uint32,\n  stateTable: new StateTable1\n});\n\nlet WidthDeltaRecord = new r.Struct({\n  justClass: r.uint32,\n  beforeGrowLimit: r.fixed32,\n  beforeShrinkLimit: r.fixed32,\n  afterGrowLimit: r.fixed32,\n  afterShrinkLimit: r.fixed32,\n  growFlags: r.uint16,\n  shrinkFlags: r.uint16\n});\n\nlet WidthDeltaCluster = new r.Array(WidthDeltaRecord, r.uint32);\n\nlet ActionData = new r.VersionedStruct('actionType', {\n  0: { // Decomposition action\n    lowerLimit: r.fixed32,\n    upperLimit: r.fixed32,\n    order: r.uint16,\n    glyphs: new r.Array(r.uint16, r.uint16)\n  },\n\n  1: { // Unconditional add glyph action\n    addGlyph: r.uint16\n  },\n\n  2: { // Conditional add glyph action\n    substThreshold: r.fixed32,\n    addGlyph: r.uint16,\n    substGlyph: r.uint16\n  },\n\n  3: {}, // Stretch glyph action (no data, not supported by CoreText)\n\n  4: { // Ductile glyph action (not supported by CoreText)\n    variationAxis: r.uint32,\n    minimumLimit: r.fixed32,\n    noStretchValue: r.fixed32,\n    maximumLimit: r.fixed32\n  },\n\n  5: { // Repeated add glyph action\n    flags: r.uint16,\n    glyph: r.uint16\n  }\n});\n\nlet Action = new r.Struct({\n  actionClass: r.uint16,\n  actionType: r.uint16,\n  actionLength: r.uint32,\n  actionData: ActionData,\n  padding: new r.Reserved(r.uint8, t => t.actionLength - t._currentOffset)\n});\n\nlet PostcompensationAction = new r.Array(Action, r.uint32);\nlet PostCompensationTable = new r.Struct({\n  lookupTable: new LookupTable(new r.Pointer(r.uint16, PostcompensationAction))\n});\n\nlet JustificationTable = new r.Struct({\n  classTable: new r.Pointer(r.uint16, ClassTable, { type: 'parent' }),\n  wdcOffset: r.uint16,\n  postCompensationTable: new r.Pointer(r.uint16, PostCompensationTable, { type: 'parent' }),\n  widthDeltaClusters: new LookupTable(new r.Pointer(r.uint16, WidthDeltaCluster, { type: 'parent', relativeTo: ctx => ctx.wdcOffset }))\n});\n\nexport default new r.Struct({\n  version: r.uint32,\n  format: r.uint16,\n  horizontal: new r.Pointer(r.uint16, JustificationTable),\n  vertical: new r.Pointer(r.uint16, JustificationTable)\n});\n","import r from 'restructure';\nimport { UnboundedArray, LookupTable, StateTable } from './aat';\n\nlet LigatureData = {\n  action: r.uint16\n};\n\nlet ContextualData = {\n  markIndex: r.uint16,\n  currentIndex: r.uint16\n};\n\nlet InsertionData = {\n  currentInsertIndex: r.uint16,\n  markedInsertIndex: r.uint16\n};\n\nlet SubstitutionTable = new r.Struct({\n  items: new UnboundedArray(new r.Pointer(r.uint32, new LookupTable))\n});\n\nlet SubtableData = new r.VersionedStruct('type', {\n  0: { // Indic Rearrangement Subtable\n    stateTable: new StateTable\n  },\n\n  1: { // Contextual Glyph Substitution Subtable\n    stateTable: new StateTable(ContextualData),\n    substitutionTable: new r.Pointer(r.uint32, SubstitutionTable)\n  },\n\n  2: { // Ligature subtable\n    stateTable: new StateTable(LigatureData),\n    ligatureActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint32)),\n    components: new r.Pointer(r.uint32, new UnboundedArray(r.uint16)),\n    ligatureList: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  },\n\n  4: { // Non-contextual Glyph Substitution Subtable\n    lookupTable: new LookupTable\n  },\n\n  5: { // Glyph Insertion Subtable\n    stateTable: new StateTable(InsertionData),\n    insertionActions: new r.Pointer(r.uint32, new UnboundedArray(r.uint16))\n  }\n});\n\nlet Subtable = new r.Struct({\n  length: r.uint32,\n  coverage: r.uint24,\n  type: r.uint8,\n  subFeatureFlags: r.uint32,\n  table: SubtableData,\n  padding: new r.Reserved(r.uint8, t => t.length - t._currentOffset)\n});\n\nlet FeatureEntry = new r.Struct({\n  featureType:    r.uint16,\n  featureSetting: r.uint16,\n  enableFlags:    r.uint32,\n  disableFlags:   r.uint32\n});\n\nlet MorxChain = new r.Struct({\n  defaultFlags:     r.uint32,\n  chainLength:      r.uint32,\n  nFeatureEntries:  r.uint32,\n  nSubtables:       r.uint32,\n  features:         new r.Array(FeatureEntry, 'nFeatureEntries'),\n  subtables:        new r.Array(Subtable, 'nSubtables')\n});\n\nexport default new r.Struct({\n  version:  r.uint16,\n  unused:   new r.Reserved(r.uint16),\n  nChains:  r.uint32,\n  chains:   new r.Array(MorxChain, 'nChains')\n});\n","import r from 'restructure';\nimport { LookupTable } from './aat';\n\nlet OpticalBounds = new r.Struct({\n  left: r.int16,\n  top: r.int16,\n  right: r.int16,\n  bottom: r.int16\n});\n\nexport default new r.Struct({\n  version: r.fixed32,\n  format: r.uint16,\n  lookupTable: new LookupTable(OpticalBounds)\n});\n","import { binarySearch } from './utils';\nimport { getEncoding } from './encodings';\nimport { cache } from './decorators';\nimport { range } from './utils';\nimport iconv from '../iconv-lite.cjs';\n\nexport default class CmapProcessor {\n  constructor(cmapTable) {\n    // Attempt to find a Unicode cmap first\n    this.encoding = null;\n    this.cmap = this.findSubtable(cmapTable, [\n      // 32-bit subtables\n      [3, 10],\n      [0, 6],\n      [0, 4],\n\n      // 16-bit subtables\n      [3, 1],\n      [0, 3],\n      [0, 2],\n      [0, 1],\n      [0, 0]\n    ]);\n\n    // If not unicode cmap was found, and iconv-lite is installed,\n    // take the first table with a supported encoding.\n    if (!this.cmap && iconv) {\n      for (let cmap of cmapTable.tables) {\n        let encoding = getEncoding(cmap.platformID, cmap.encodingID, cmap.table.language - 1);\n        if (iconv.encodingExists(encoding)) {\n          this.cmap = cmap.table;\n          this.encoding = encoding;\n        }\n      }\n    }\n\n    if (!this.cmap) {\n      throw new Error(\"Could not find a supported cmap table\");\n    }\n\n    this.uvs = this.findSubtable(cmapTable, [[0, 5]]);\n    if (this.uvs && this.uvs.version !== 14) {\n      this.uvs = null;\n    }\n  }\n\n  findSubtable(cmapTable, pairs) {\n    for (let [platformID, encodingID] of pairs) {\n      for (let cmap of cmapTable.tables) {\n        if (cmap.platformID === platformID && cmap.encodingID === encodingID) {\n          return cmap.table;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  lookup(codepoint, variationSelector) {\n    // If there is no Unicode cmap in this font, we need to re-encode\n    // the codepoint in the encoding that the cmap supports.\n    if (this.encoding) {\n      let buf = iconv.encode(String.fromCodePoint(codepoint), this.encoding);\n      codepoint = 0;\n      for (let i = 0; i < buf.length; i++) {\n        codepoint = (codepoint << 8) | buf[i];\n      }\n\n      // Otherwise, try to get a Unicode variation selector for this codepoint if one is provided.\n    } else if (variationSelector) {\n      let gid = this.getVariationSelector(codepoint, variationSelector);\n      if (gid) {\n        return gid;\n      }\n    }\n\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return cmap.codeMap.get(codepoint) || 0;\n\n      case 4: {\n        let min = 0;\n        let max = cmap.segCount - 1;\n        while (min <= max) {\n          let mid = (min + max) >> 1;\n\n          if (codepoint < cmap.startCode.get(mid)) {\n            max = mid - 1;\n          } else if (codepoint > cmap.endCode.get(mid)) {\n            min = mid + 1;\n          } else {\n            let rangeOffset = cmap.idRangeOffset.get(mid);\n            let gid;\n\n            if (rangeOffset === 0) {\n              gid = codepoint + cmap.idDelta.get(mid);\n            } else {\n              let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);\n              gid = cmap.glyphIndexArray.get(index) || 0;\n              if (gid !== 0) {\n                gid += cmap.idDelta.get(mid);\n              }\n            }\n\n            return gid & 0xffff;\n          }\n        }\n\n        return 0;\n      }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;\n\n      case 12:\n      case 13: {\n        let min = 0;\n        let max = cmap.nGroups - 1;\n        while (min <= max) {\n          let mid = (min + max) >> 1;\n          let group = cmap.groups.get(mid);\n\n          if (codepoint < group.startCharCode) {\n            max = mid - 1;\n          } else if (codepoint > group.endCharCode) {\n            min = mid + 1;\n          } else {\n            if (cmap.version === 12) {\n              return group.glyphID + (codepoint - group.startCharCode);\n            } else {\n              return group.glyphID;\n            }\n          }\n        }\n\n        return 0;\n      }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n\n  getVariationSelector(codepoint, variationSelector) {\n    if (!this.uvs) {\n      return 0;\n    }\n\n    let selectors = this.uvs.varSelectors.toArray();\n    let i = binarySearch(selectors, x => variationSelector - x.varSelector);\n    let sel = selectors[i];\n\n    if (i !== -1 && sel.defaultUVS) {\n      i = binarySearch(sel.defaultUVS, x =>\n        codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? +1 : 0\n      );\n    }\n\n    if (i !== -1 && sel.nonDefaultUVS) {\n      i = binarySearch(sel.nonDefaultUVS, x => codepoint - x.unicodeValue);\n      if (i !== -1) {\n        return sel.nonDefaultUVS[i].glyphID;\n      }\n    }\n\n    return 0;\n  }\n\n  @cache\n  getCharacterSet() {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0:\n        return range(0, cmap.codeMap.length);\n\n      case 4: {\n        let res = [];\n        let endCodes = cmap.endCode.toArray();\n        for (let i = 0; i < endCodes.length; i++) {\n          let tail = endCodes[i] + 1;\n          let start = cmap.startCode.get(i);\n          res.push(...range(start, tail));\n        }\n\n        return res;\n      }\n\n      case 8:\n        throw new Error('TODO: cmap format 8');\n\n      case 6:\n      case 10:\n        return range(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);\n\n      case 12:\n      case 13: {\n        let res = [];\n        for (let group of cmap.groups.toArray()) {\n          res.push(...range(group.startCharCode, group.endCharCode + 1));\n        }\n\n        return res;\n      }\n\n      case 14:\n        throw new Error('TODO: cmap format 14');\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n\n  @cache\n  codePointsForGlyph(gid) {\n    let cmap = this.cmap;\n    switch (cmap.version) {\n      case 0: {\n        let res = [];\n        for (let i = 0; i < 256; i++) {\n          if (cmap.codeMap.get(i) === gid) {\n            res.push(i);\n          }\n        }\n\n        return res;\n      }\n\n      case 4: {\n        let res = [];\n        for (let i = 0; i < cmap.segCount; i++) {\n          let end = cmap.endCode.get(i);\n          let start = cmap.startCode.get(i);\n          let rangeOffset = cmap.idRangeOffset.get(i);\n          let delta = cmap.idDelta.get(i);\n\n          for (var c = start; c <= end; c++) {\n            let g = 0;\n            if (rangeOffset === 0) {\n              g = c + delta;\n            } else {\n              let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);\n              g = cmap.glyphIndexArray.get(index) || 0;\n              if (g !== 0) {\n                g += delta;\n              }\n            }\n\n            if (g === gid) {\n              res.push(c);\n            }\n          }\n        }\n\n        return res;\n      }\n\n      case 12: {\n        let res = [];\n        for (let group of cmap.groups.toArray()) {\n          if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) {\n            res.push(group.startCharCode + (gid - group.glyphID));\n          }\n        }\n\n        return res;\n      }\n\n      case 13: {\n        let res = [];\n        for (let group of cmap.groups.toArray()) {\n          if (gid === group.glyphID) {\n            res.push(...range(group.startCharCode, group.endCharCode + 1));\n          }\n        }\n\n        return res;\n      }\n\n      default:\n        throw new Error(`Unknown cmap format ${cmap.version}`);\n    }\n  }\n}\n","export function binarySearch(arr, cmp) {\n  let min = 0;\n  let max = arr.length - 1;\n  while (min <= max) {\n    let mid = (min + max) >> 1;\n    let res = cmp(arr[mid]);\n\n    if (res < 0) {\n      max = mid - 1;\n    } else if (res > 0) {\n      min = mid + 1;\n    } else {\n      return mid;\n    }\n  }\n\n  return -1;\n}\n\nexport function range(index, end) {\n  let range = [];\n  while (index < end) {\n    range.push(index++);\n  }\n  return range;\n}\n","import KernProcessor from './KernProcessor';\nimport UnicodeLayoutEngine from './UnicodeLayoutEngine';\nimport GlyphRun from './GlyphRun';\nimport GlyphPosition from './GlyphPosition';\nimport * as Script from './Script';\nimport unicode from 'unicode-properties';\nimport AATLayoutEngine from '../aat/AATLayoutEngine';\nimport OTLayoutEngine from '../opentype/OTLayoutEngine';\n\nexport default class LayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.unicodeLayoutEngine = null;\n    this.kernProcessor = null;\n\n    // Choose an advanced layout engine. We try the AAT morx table first since more\n    // scripts are currently supported because the shaping logic is built into the font.\n    if (this.font.morx) {\n      this.engine = new AATLayoutEngine(this.font);\n\n    } else if (this.font.GSUB || this.font.GPOS) {\n      this.engine = new OTLayoutEngine(this.font);\n    }\n  }\n\n  layout(string, features, script, language, direction) {\n    // Make the features parameter optional\n    if (typeof features === 'string') {\n      direction = language;\n      language = script;\n      script = features;\n      features = [];\n    }\n\n    // Map string to glyphs if needed\n    if (typeof string === 'string') {\n      // Attempt to detect the script from the string if not provided.\n      if (script == null) {\n        script = Script.forString(string);\n      }\n\n      var glyphs = this.font.glyphsForString(string);\n    } else {\n      // Attempt to detect the script from the glyph code points if not provided.\n      if (script == null) {\n        let codePoints = [];\n        for (let glyph of string) {\n          codePoints.push(...glyph.codePoints);\n        }\n\n        script = Script.forCodePoints(codePoints);\n      }\n\n      var glyphs = string;\n    }\n\n    let glyphRun = new GlyphRun(glyphs, features, script, language, direction);\n\n    // Return early if there are no glyphs\n    if (glyphs.length === 0) {\n      glyphRun.positions = [];\n      return glyphRun;\n    }\n\n    // Setup the advanced layout engine\n    if (this.engine && this.engine.setup) {\n      this.engine.setup(glyphRun);\n    }\n\n    // Substitute and position the glyphs\n    this.substitute(glyphRun);\n    this.position(glyphRun);\n\n    this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);\n\n    // Let the layout engine clean up any state it might have\n    if (this.engine && this.engine.cleanup) {\n      this.engine.cleanup();\n    }\n\n    return glyphRun;\n  }\n\n  substitute(glyphRun) {\n    // Call the advanced layout engine to make substitutions\n    if (this.engine && this.engine.substitute) {\n      this.engine.substitute(glyphRun);\n    }\n  }\n\n  position(glyphRun) {\n    // Get initial glyph positions\n    glyphRun.positions = glyphRun.glyphs.map(glyph => new GlyphPosition(glyph.advanceWidth));\n    let positioned = null;\n\n    // Call the advanced layout engine. Returns the features applied.\n    if (this.engine && this.engine.position) {\n      positioned = this.engine.position(glyphRun);\n    }\n\n    // if there is no GPOS table, use unicode properties to position marks.\n    if (!positioned && (!this.engine || this.engine.fallbackPosition)) {\n      if (!this.unicodeLayoutEngine) {\n        this.unicodeLayoutEngine = new UnicodeLayoutEngine(this.font);\n      }\n\n      this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);\n    }\n\n    // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table\n    if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {\n      if (!this.kernProcessor) {\n        this.kernProcessor = new KernProcessor(this.font);\n      }\n\n      this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);\n      glyphRun.features.kern = true;\n    }\n  }\n\n  hideDefaultIgnorables(glyphs, positions) {\n    let space = this.font.glyphForCodePoint(0x20);\n    for (let i = 0; i < glyphs.length; i++) {\n      if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {\n        glyphs[i] = space;\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  }\n\n  isDefaultIgnorable(ch) {\n    // From DerivedCoreProperties.txt in the Unicode database,\n    // minus U+115F, U+1160, U+3164 and U+FFA0, which is what\n    // Harfbuzz and Uniscribe do.\n    let plane = ch >> 16;\n    if (plane === 0) {\n      // BMP\n      switch (ch >> 8) {\n      \tcase 0x00: return ch === 0x00AD;\n      \tcase 0x03: return ch === 0x034F;\n      \tcase 0x06: return ch === 0x061C;\n      \tcase 0x17: return 0x17B4 <= ch && ch <= 0x17B5;\n      \tcase 0x18: return 0x180B <= ch && ch <= 0x180E;\n      \tcase 0x20: return (0x200B <= ch && ch <= 0x200F) || (0x202A <= ch && ch <= 0x202E) || (0x2060 <= ch && ch <= 0x206F);\n      \tcase 0xFE: return (0xFE00 <= ch && ch <= 0xFE0F) || ch === 0xFEFF;\n      \tcase 0xFF: return 0xFFF0 <= ch && ch <= 0xFFF8;\n      \tdefault:   return false;\n      }\n    } else {\n      // Other planes\n      switch (plane) {\n      \tcase 0x01: return (0x1BCA0 <= ch && ch <= 0x1BCA3) || (0x1D173 <= ch && ch <= 0x1D17A);\n      \tcase 0x0E: return 0xE0000 <= ch && ch <= 0xE0FFF;\n      \tdefault:   return false;\n      }\n    }\n  }\n\n  getAvailableFeatures(script, language) {\n    let features = [];\n\n    if (this.engine) {\n      features.push(...this.engine.getAvailableFeatures(script, language));\n    }\n\n    if (this.font.kern && features.indexOf('kern') === -1) {\n      features.push('kern');\n    }\n\n    return features;\n  }\n\n  stringsForGlyph(gid) {\n    let result = new Set;\n\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);\n    for (let codePoint of codePoints) {\n      result.add(String.fromCodePoint(codePoint));\n    }\n\n    if (this.engine && this.engine.stringsForGlyph) {\n      for (let string of this.engine.stringsForGlyph(gid)) {\n        result.add(string);\n      }\n    }\n\n    return Array.from(result);\n  }\n}\n","import {binarySearch} from '../utils';\n\nexport default class KernProcessor {\n  constructor(font) {\n    this.kern = font.kern;\n  }\n\n  process(glyphs, positions) {\n    for (let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++) {\n      let left = glyphs[glyphIndex].id;\n      let right = glyphs[glyphIndex + 1].id;\n      positions[glyphIndex].xAdvance += this.getKerning(left, right);\n    }\n  }\n\n  getKerning(left, right) {\n    let res = 0;\n\n    for (let table of this.kern.tables) {\n      if (table.coverage.crossStream) {\n        continue;\n      }\n\n      switch (table.version) {\n        case 0:\n          if (!table.coverage.horizontal) {\n            continue;\n          }\n\n          break;\n        case 1:\n          if (table.coverage.vertical || table.coverage.variation) {\n            continue;\n          }\n\n          break;\n        default:\n          throw new Error(`Unsupported kerning table version ${table.version}`);\n      }\n\n      let val = 0;\n      let s = table.subtable;\n      switch (table.format) {\n        case 0:\n          let pairIdx = binarySearch(s.pairs, function (pair) {\n            return (left - pair.left) || (right - pair.right);\n          });\n\n          if (pairIdx >= 0) {\n            val = s.pairs[pairIdx].value;\n          }\n\n          break;\n\n        case 2:\n          let leftOffset = 0, rightOffset = 0;\n          if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) {\n            leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];\n          } else {\n            leftOffset = s.array.off;\n          }\n\n          if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) {\n            rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];\n          }\n\n          let index = (leftOffset + rightOffset - s.array.off) / 2;\n          val = s.array.values.get(index);\n          break;\n\n        case 3:\n          if (left >= s.glyphCount || right >= s.glyphCount) {\n            return 0;\n          }\n\n          val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];\n          break;\n\n        default:\n          throw new Error(`Unsupported kerning sub-table format ${table.format}`);\n      }\n\n      // Microsoft supports the override flag, which resets the result\n      // Otherwise, the sum of the results from all subtables is returned\n      if (table.coverage.override) {\n        res = val;\n      } else {\n        res += val;\n      }\n    }\n\n    return res;\n  }\n}\n","import unicode from 'unicode-properties';\n\n/**\n * This class is used when GPOS does not define 'mark' or 'mkmk' features\n * for positioning marks relative to base glyphs. It uses the unicode\n * combining class property to position marks.\n *\n * Based on code from Harfbuzz, thanks!\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-fallback.cc\n */\nexport default class UnicodeLayoutEngine {\n  constructor(font) {\n    this.font = font;\n  }\n\n  positionGlyphs(glyphs, positions) {\n    // find each base + mark cluster, and position the marks relative to the base\n    let clusterStart = 0;\n    let clusterEnd = 0;\n    for (let index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.isMark) { // TODO: handle ligatures\n        clusterEnd = index;\n      } else {\n        if (clusterStart !== clusterEnd) {\n          this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n        }\n\n        clusterStart = clusterEnd = index;\n      }\n    }\n\n    if (clusterStart !== clusterEnd) {\n      this.positionCluster(glyphs, positions, clusterStart, clusterEnd);\n    }\n\n    return positions;\n  }\n\n  positionCluster(glyphs, positions, clusterStart, clusterEnd) {\n    let base = glyphs[clusterStart];\n    let baseBox = base.cbox.copy();\n\n    // adjust bounding box for ligature glyphs\n    if (base.codePoints.length > 1) {\n      // LTR. TODO: RTL support.\n      baseBox.minX += ((base.codePoints.length - 1) * baseBox.width) / base.codePoints.length;\n    }\n\n    let xOffset = -positions[clusterStart].xAdvance;\n    let yOffset = 0;\n    let yGap = this.font.unitsPerEm / 16;\n\n    // position each of the mark glyphs relative to the base glyph\n    for (let index = clusterStart + 1; index <= clusterEnd; index++) {\n      let mark = glyphs[index];\n      let markBox = mark.cbox;\n      let position = positions[index];\n\n      let combiningClass = this.getCombiningClass(mark.codePoints[0]);\n\n      if (combiningClass !== 'Not_Reordered') {\n        position.xOffset = position.yOffset = 0;\n\n        // x positioning\n        switch (combiningClass) {\n          case 'Double_Above':\n          case 'Double_Below':\n            // LTR. TODO: RTL support.\n            position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;\n            break;\n\n          case 'Attached_Below_Left':\n          case 'Below_Left':\n          case 'Above_Left':\n            // left align\n            position.xOffset += baseBox.minX - markBox.minX;\n            break;\n\n          case 'Attached_Above_Right':\n          case 'Below_Right':\n          case 'Above_Right':\n            // right align\n            position.xOffset += baseBox.maxX - markBox.width - markBox.minX;\n            break;\n\n          default: // Attached_Below, Attached_Above, Below, Above, other\n            // center align\n            position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;\n        }\n\n        // y positioning\n        switch (combiningClass) {\n          case 'Double_Below':\n          case 'Below_Left':\n          case 'Below':\n          case 'Below_Right':\n          case 'Attached_Below_Left':\n          case 'Attached_Below':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Below_Left' || combiningClass === 'Attached_Below') {\n              baseBox.minY += yGap;\n            }\n\n            position.yOffset = -baseBox.minY - markBox.maxY;\n            baseBox.minY += markBox.height;\n            break;\n\n          case 'Double_Above':\n          case 'Above_Left':\n          case 'Above':\n          case 'Above_Right':\n          case 'Attached_Above':\n          case 'Attached_Above_Right':\n            // add a small gap between the glyphs if they are not attached\n            if (combiningClass === 'Attached_Above' || combiningClass === 'Attached_Above_Right') {\n              baseBox.maxY += yGap;\n            }\n\n            position.yOffset = baseBox.maxY - markBox.minY;\n            baseBox.maxY += markBox.height;\n            break;\n        }\n\n        position.xAdvance = position.yAdvance = 0;\n        position.xOffset += xOffset;\n        position.yOffset += yOffset;\n\n      } else {\n        xOffset -= position.xAdvance;\n        yOffset -= position.yAdvance;\n      }\n    }\n\n    return;\n  }\n\n  getCombiningClass(codePoint) {\n    let combiningClass = unicode.getCombiningClass(codePoint);\n\n    // Thai / Lao need some per-character work\n    if ((codePoint & ~0xff) === 0x0e00) {\n      if (combiningClass === 'Not_Reordered') {\n        switch (codePoint) {\n          case 0x0e31:\n          case 0x0e34:\n          case 0x0e35:\n          case 0x0e36:\n          case 0x0e37:\n          case 0x0e47:\n          case 0x0e4c:\n          case 0x0e3d:\n          case 0x0e4e:\n            return 'Above_Right';\n\n          case 0x0eb1:\n          case 0x0eb4:\n          case 0x0eb5:\n          case 0x0eb6:\n          case 0x0eb7:\n          case 0x0ebb:\n          case 0x0ecc:\n          case 0x0ecd:\n            return 'Above';\n\n          case 0x0ebc:\n            return 'Below';\n        }\n      } else if (codePoint === 0x0e3a) { // virama\n        return 'Below_Right';\n      }\n    }\n\n    switch (combiningClass) {\n      // Hebrew\n\n      case 'CCC10': // sheva\n      case 'CCC11': // hataf segol\n      case 'CCC12': // hataf patah\n      case 'CCC13': // hataf qamats\n      case 'CCC14': // hiriq\n      case 'CCC15': // tsere\n      case 'CCC16': // segol\n      case 'CCC17': // patah\n      case 'CCC18': // qamats\n      case 'CCC20': // qubuts\n      case 'CCC22': // meteg\n        return 'Below';\n\n      case 'CCC23': // rafe\n        return 'Attached_Above';\n\n      case 'CCC24': // shin dot\n        return 'Above_Right';\n\n      case 'CCC25': // sin dot\n      case 'CCC19': // holam\n        return 'Above_Left';\n\n      case 'CCC26': // point varika\n        return 'Above';\n\n      case 'CCC21': // dagesh\n        break;\n\n      // Arabic and Syriac\n\n      case 'CCC27': // fathatan\n      case 'CCC28': // dammatan\n      case 'CCC30': // fatha\n      case 'CCC31': // damma\n      case 'CCC33': // shadda\n      case 'CCC34': // sukun\n      case 'CCC35': // superscript alef\n      case 'CCC36': // superscript alaph\n        return 'Above';\n\n      case 'CCC29': // kasratan\n      case 'CCC32': // kasra\n        return 'Below';\n\n      // Thai\n\n      case 'CCC103': // sara u / sara uu\n        return 'Below_Right';\n\n      case 'CCC107': // mai\n        return 'Above_Right';\n\n      // Lao\n\n      case 'CCC118': // sign u / sign uu\n        return 'Below';\n\n      case 'CCC122': // mai\n        return 'Above';\n\n      // Tibetan\n\n      case 'CCC129': // sign aa\n      case 'CCC132': // sign u\n        return 'Below';\n\n      case 'CCC130': // sign i\n        return 'Above';\n    }\n\n    return combiningClass;\n  }\n}\n","import BBox from '../glyph/BBox';\nimport * as Script from '../layout/Script';\n\n/**\n * Represents a run of Glyph and GlyphPosition objects.\n * Returned by the font layout method.\n */\nexport default class GlyphRun {\n  constructor(glyphs, features, script, language, direction) {\n    /**\n     * An array of Glyph objects in the run\n     * @type {Glyph[]}\n     */\n    this.glyphs = glyphs;\n\n    /**\n     * An array of GlyphPosition objects for each glyph in the run\n     * @type {GlyphPosition[]}\n     */\n    this.positions = null;\n\n    /**\n     * The script that was requested for shaping. This was either passed in or detected automatically.\n     * @type {string}\n     */\n    this.script = script;\n\n    /**\n     * The language requested for shaping, as passed in. If `null`, the default language for the\n     * script was used.\n     * @type {string}\n     */\n    this.language = language || null;\n\n    /**\n     * The direction requested for shaping, as passed in (either ltr or rtl).\n     * If `null`, the default direction of the script is used.\n     * @type {string}\n     */\n    this.direction = direction || Script.direction(script);\n\n    /**\n     * The features requested during shaping. This is a combination of user\n     * specified features and features chosen by the shaper.\n     * @type {object}\n     */\n    this.features = {};\n\n    // Convert features to an object\n    if (Array.isArray(features)) {\n      for (let tag of features) {\n        this.features[tag] = true;\n      }\n    } else if (typeof features === 'object') {\n      this.features = features;\n    }\n  }\n\n  /**\n   * The total advance width of the run.\n   * @type {number}\n   */\n  get advanceWidth() {\n    let width = 0;\n    for (let position of this.positions) {\n      width += position.xAdvance;\n    }\n\n    return width;\n  }\n\n /**\n  * The total advance height of the run.\n  * @type {number}\n  */\n  get advanceHeight() {\n    let height = 0;\n    for (let position of this.positions) {\n      height += position.yAdvance;\n    }\n\n    return height;\n  }\n\n /**\n  * The bounding box containing all glyphs in the run.\n  * @type {BBox}\n  */\n  get bbox() {\n    let bbox = new BBox;\n\n    let x = 0;\n    let y = 0;\n    for (let index = 0; index < this.glyphs.length; index++) {\n      let glyph = this.glyphs[index];\n      let p = this.positions[index];\n      let b = glyph.bbox;\n\n      bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);\n      bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);\n\n      x += p.xAdvance;\n      y += p.yAdvance;\n    }\n\n    return bbox;\n  }\n}\n","/**\n * Represents a glyph bounding box\n */\nexport default class BBox {\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /**\n     * The minimum X position in the bounding box\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * The minimum Y position in the bounding box\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * The maxmimum X position in the bounding box\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * The maxmimum Y position in the bounding box\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * The width of the bounding box\n   * @type {number}\n   */\n  get width() {\n    return this.maxX - this.minX;\n  }\n\n  /**\n   * The height of the bounding box\n   * @type {number}\n   */\n  get height() {\n    return this.maxY - this.minY;\n  }\n\n  addPoint(x, y) {\n    if (Math.abs(x) !== Infinity) {\n      if (x < this.minX) {\n        this.minX = x;\n      }\n\n      if (x > this.maxX) {\n        this.maxX = x;\n      }\n    }\n\n    if (Math.abs(y) !== Infinity) {\n      if (y < this.minY) {\n        this.minY = y;\n      }\n\n      if (y > this.maxY) {\n        this.maxY = y;\n      }\n    }\n  }\n\n  copy() {\n    return new BBox(this.minX, this.minY, this.maxX, this.maxY);\n  }\n}\n","import unicode from 'unicode-properties';\n\n// This maps the Unicode Script property to an OpenType script tag\n// Data from http://www.microsoft.com/typography/otspec/scripttags.htm\n// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.\nconst UNICODE_SCRIPTS = {\n  Caucasian_Albanian: 'aghb',\n  Arabic: 'arab',\n  Imperial_Aramaic: 'armi',\n  Armenian: 'armn',\n  Avestan: 'avst',\n  Balinese: 'bali',\n  Bamum: 'bamu',\n  Bassa_Vah: 'bass',\n  Batak: 'batk',\n  Bengali: ['bng2', 'beng'],\n  Bopomofo: 'bopo',\n  Brahmi: 'brah',\n  Braille: 'brai',\n  Buginese: 'bugi',\n  Buhid: 'buhd',\n  Chakma: 'cakm',\n  Canadian_Aboriginal: 'cans',\n  Carian: 'cari',\n  Cham: 'cham',\n  Cherokee: 'cher',\n  Coptic: 'copt',\n  Cypriot: 'cprt',\n  Cyrillic: 'cyrl',\n  Devanagari: ['dev2', 'deva'],\n  Deseret: 'dsrt',\n  Duployan: 'dupl',\n  Egyptian_Hieroglyphs: 'egyp',\n  Elbasan: 'elba',\n  Ethiopic: 'ethi',\n  Georgian: 'geor',\n  Glagolitic: 'glag',\n  Gothic: 'goth',\n  Grantha: 'gran',\n  Greek: 'grek',\n  Gujarati: ['gjr2', 'gujr'],\n  Gurmukhi: ['gur2', 'guru'],\n  Hangul: 'hang',\n  Han: 'hani',\n  Hanunoo: 'hano',\n  Hebrew: 'hebr',\n  Hiragana: 'hira',\n  Pahawh_Hmong: 'hmng',\n  Katakana_Or_Hiragana: 'hrkt',\n  Old_Italic: 'ital',\n  Javanese: 'java',\n  Kayah_Li: 'kali',\n  Katakana: 'kana',\n  Kharoshthi: 'khar',\n  Khmer: 'khmr',\n  Khojki: 'khoj',\n  Kannada: ['knd2', 'knda'],\n  Kaithi: 'kthi',\n  Tai_Tham: 'lana',\n  Lao: 'lao ',\n  Latin: 'latn',\n  Lepcha: 'lepc',\n  Limbu: 'limb',\n  Linear_A: 'lina',\n  Linear_B: 'linb',\n  Lisu: 'lisu',\n  Lycian: 'lyci',\n  Lydian: 'lydi',\n  Mahajani: 'mahj',\n  Mandaic: 'mand',\n  Manichaean: 'mani',\n  Mende_Kikakui: 'mend',\n  Meroitic_Cursive: 'merc',\n  Meroitic_Hieroglyphs: 'mero',\n  Malayalam: ['mlm2', 'mlym'],\n  Modi: 'modi',\n  Mongolian: 'mong',\n  Mro: 'mroo',\n  Meetei_Mayek: 'mtei',\n  Myanmar: ['mym2', 'mymr'],\n  Old_North_Arabian: 'narb',\n  Nabataean: 'nbat',\n  Nko: 'nko ',\n  Ogham: 'ogam',\n  Ol_Chiki: 'olck',\n  Old_Turkic: 'orkh',\n  Oriya: ['ory2', 'orya'],\n  Osmanya: 'osma',\n  Palmyrene: 'palm',\n  Pau_Cin_Hau: 'pauc',\n  Old_Permic: 'perm',\n  Phags_Pa: 'phag',\n  Inscriptional_Pahlavi: 'phli',\n  Psalter_Pahlavi: 'phlp',\n  Phoenician: 'phnx',\n  Miao: 'plrd',\n  Inscriptional_Parthian: 'prti',\n  Rejang: 'rjng',\n  Runic: 'runr',\n  Samaritan: 'samr',\n  Old_South_Arabian: 'sarb',\n  Saurashtra: 'saur',\n  Shavian: 'shaw',\n  Sharada: 'shrd',\n  Siddham: 'sidd',\n  Khudawadi: 'sind',\n  Sinhala: 'sinh',\n  Sora_Sompeng: 'sora',\n  Sundanese: 'sund',\n  Syloti_Nagri: 'sylo',\n  Syriac: 'syrc',\n  Tagbanwa: 'tagb',\n  Takri: 'takr',\n  Tai_Le: 'tale',\n  New_Tai_Lue: 'talu',\n  Tamil: ['tml2', 'taml'],\n  Tai_Viet: 'tavt',\n  Telugu: ['tel2', 'telu'],\n  Tifinagh: 'tfng',\n  Tagalog: 'tglg',\n  Thaana: 'thaa',\n  Thai: 'thai',\n  Tibetan: 'tibt',\n  Tirhuta: 'tirh',\n  Ugaritic: 'ugar',\n  Vai: 'vai ',\n  Warang_Citi: 'wara',\n  Old_Persian: 'xpeo',\n  Cuneiform: 'xsux',\n  Yi: 'yi  ',\n  Inherited: 'zinh',\n  Common: 'zyyy',\n  Unknown: 'zzzz'\n};\n\nconst OPENTYPE_SCRIPTS = {};\nfor (let script in UNICODE_SCRIPTS) {\n  let tag = UNICODE_SCRIPTS[script];\n  if (Array.isArray(tag)) {\n    for (let t of tag) {\n      OPENTYPE_SCRIPTS[t] = script;\n    }\n  } else {\n    OPENTYPE_SCRIPTS[tag] = script;\n  }\n}\n\nexport function fromUnicode(script) {\n  return UNICODE_SCRIPTS[script];\n}\n\nexport function fromOpenType(tag) {\n  return OPENTYPE_SCRIPTS[tag];\n}\n\nexport function forString(string) {\n  let len = string.length;\n  let idx = 0;\n  while (idx < len) {\n    let code = string.charCodeAt(idx++);\n\n    // Check if this is a high surrogate\n    if (0xd800 <= code && code <= 0xdbff && idx < len) {\n      let next = string.charCodeAt(idx);\n\n      // Check if this is a low surrogate\n      if (0xdc00 <= next && next <= 0xdfff) {\n        idx++;\n        code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;\n      }\n    }\n\n    let script = unicode.getScript(code);\n    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') {\n      return UNICODE_SCRIPTS[script];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\n\nexport function forCodePoints(codePoints) {\n  for (let i = 0; i < codePoints.length; i++) {\n    let codePoint = codePoints[i];\n    let script = unicode.getScript(codePoint);\n    if (script !== 'Common' && script !== 'Inherited' && script !== 'Unknown') {\n      return UNICODE_SCRIPTS[script];\n    }\n  }\n\n  return UNICODE_SCRIPTS.Unknown;\n}\n\n// The scripts in this map are written from right to left\nconst RTL = {\n  arab: true,   // Arabic\n  hebr: true,   // Hebrew\n  syrc: true,   // Syriac\n  thaa: true,   // Thaana\n  cprt: true,   // Cypriot Syllabary\n  khar: true,   // Kharosthi\n  phnx: true,   // Phoenician\n  'nko ': true, // N'Ko\n  lydi: true,   // Lydian\n  avst: true,   // Avestan\n  armi: true,   // Imperial Aramaic\n  phli: true,   // Inscriptional Pahlavi\n  prti: true,   // Inscriptional Parthian\n  sarb: true,   // Old South Arabian\n  orkh: true,   // Old Turkic, Orkhon Runic\n  samr: true,   // Samaritan\n  mand: true,   // Mandaic, Mandaean\n  merc: true,   // Meroitic Cursive\n  mero: true,   // Meroitic Hieroglyphs\n\n  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)\n  mani: true,   // Manichaean\n  mend: true,   // Mende Kikakui\n  nbat: true,   // Nabataean\n  narb: true,   // Old North Arabian\n  palm: true,   // Palmyrene\n  phlp: true    // Psalter Pahlavi\n};\n\nexport function direction(script) {\n  if (RTL[script]) {\n    return 'rtl';\n  }\n\n  return 'ltr';\n}\n","/**\n * Represents positioning information for a glyph in a GlyphRun.\n */\nexport default class GlyphPosition {\n  constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0) {\n    /**\n     * The amount to move the virtual pen in the X direction after rendering this glyph.\n     * @type {number}\n     */\n    this.xAdvance = xAdvance;\n\n    /**\n     * The amount to move the virtual pen in the Y direction after rendering this glyph.\n     * @type {number}\n     */\n    this.yAdvance = yAdvance;\n\n    /**\n     * The offset from the pen position in the X direction at which to render this glyph.\n     * @type {number}\n     */\n    this.xOffset = xOffset;\n\n    /**\n     * The offset from the pen position in the Y direction at which to render this glyph.\n     * @type {number}\n     */\n    this.yOffset = yOffset;\n  }\n}\n","import * as AATFeatureMap from './AATFeatureMap';\nimport * as Script from '../layout/Script';\nimport AATMorxProcessor from './AATMorxProcessor';\n\nexport default class AATLayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.morxProcessor = new AATMorxProcessor(font);\n    this.fallbackPosition = false;\n  }\n\n  substitute(glyphRun) {\n    // AAT expects the glyphs to be in visual order prior to morx processing,\n    // so reverse the glyphs if the script is right-to-left.\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n    }\n\n    this.morxProcessor.process(glyphRun.glyphs, AATFeatureMap.mapOTToAAT(glyphRun.features));\n  }\n\n  getAvailableFeatures(script, language) {\n    return AATFeatureMap.mapAATToOT(this.morxProcessor.getSupportedFeatures());\n  }\n\n  stringsForGlyph(gid) {\n    let glyphStrings = this.morxProcessor.generateInputs(gid);\n    let result = new Set;\n\n    for (let glyphs of glyphStrings) {\n      this._addStrings(glyphs, 0, result, '');\n    }\n\n    return result;\n  }\n\n  _addStrings(glyphs, index, strings, string) {\n    let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);\n\n    for (let codePoint of codePoints) {\n      let s = string + String.fromCodePoint(codePoint);\n      if (index < glyphs.length - 1) {\n        this._addStrings(glyphs, index + 1, strings, s);\n      } else {\n        strings.add(s);\n      }\n    }\n  }\n}\n","// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html\n// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac\nconst features = {\n  allTypographicFeatures: {\n    code: 0,\n    exclusive: false,\n    allTypeFeatures: 0\n  },\n  ligatures: {\n    code: 1,\n    exclusive: false,\n    requiredLigatures: 0,\n    commonLigatures: 2,\n    rareLigatures: 4,\n    // logos: 6\n    rebusPictures: 8,\n    diphthongLigatures: 10,\n    squaredLigatures: 12,\n    abbrevSquaredLigatures: 14,\n    symbolLigatures: 16,\n    contextualLigatures: 18,\n    historicalLigatures: 20\n  },\n  cursiveConnection: {\n    code: 2,\n    exclusive: true,\n    unconnected: 0,\n    partiallyConnected: 1,\n    cursive: 2\n  },\n  letterCase: {\n    code: 3,\n    exclusive: true\n  },\n    // upperAndLowerCase: 0          # deprecated\n    // allCaps: 1                    # deprecated\n    // allLowerCase: 2               # deprecated\n    // smallCaps: 3                  # deprecated\n    // initialCaps: 4                # deprecated\n    // initialCapsAndSmallCaps: 5    # deprecated\n  verticalSubstitution: {\n    code: 4,\n    exclusive: false,\n    substituteVerticalForms: 0\n  },\n  linguisticRearrangement: {\n    code: 5,\n    exclusive: false,\n    linguisticRearrangement: 0\n  },\n  numberSpacing: {\n    code: 6,\n    exclusive: true,\n    monospacedNumbers: 0,\n    proportionalNumbers: 1,\n    thirdWidthNumbers: 2,\n    quarterWidthNumbers: 3\n  },\n  smartSwash: {\n    code: 8,\n    exclusive: false,\n    wordInitialSwashes: 0,\n    wordFinalSwashes: 2,\n    // lineInitialSwashes: 4\n    // lineFinalSwashes: 6\n    nonFinalSwashes: 8\n  },\n  diacritics: {\n    code: 9,\n    exclusive: true,\n    showDiacritics: 0,\n    hideDiacritics: 1,\n    decomposeDiacritics: 2\n  },\n  verticalPosition: {\n    code: 10,\n    exclusive: true,\n    normalPosition: 0,\n    superiors: 1,\n    inferiors: 2,\n    ordinals: 3,\n    scientificInferiors: 4\n  },\n  fractions: {\n    code: 11,\n    exclusive: true,\n    noFractions: 0,\n    verticalFractions: 1,\n    diagonalFractions: 2\n  },\n  overlappingCharacters: {\n    code: 13,\n    exclusive: false,\n    preventOverlap: 0\n  },\n  typographicExtras: {\n    code: 14,\n    exclusive: false,\n    // hyphensToEmDash: 0\n    // hyphenToEnDash: 2\n    slashedZero: 4\n  },\n    // formInterrobang: 6\n    // smartQuotes: 8\n    // periodsToEllipsis: 10\n  mathematicalExtras: {\n    code: 15,\n    exclusive: false,\n    // hyphenToMinus: 0\n    // asteristoMultiply: 2\n    // slashToDivide: 4\n    // inequalityLigatures: 6\n    // exponents: 8\n    mathematicalGreek: 10\n  },\n  ornamentSets: {\n    code: 16,\n    exclusive: true,\n    noOrnaments: 0,\n    dingbats: 1,\n    piCharacters: 2,\n    fleurons: 3,\n    decorativeBorders: 4,\n    internationalSymbols: 5,\n    mathSymbols: 6\n  },\n  characterAlternatives: {\n    code: 17,\n    exclusive: true,\n    noAlternates: 0\n  },\n    // user defined options\n  designComplexity: {\n    code: 18,\n    exclusive: true,\n    designLevel1: 0,\n    designLevel2: 1,\n    designLevel3: 2,\n    designLevel4: 3,\n    designLevel5: 4\n  },\n  styleOptions: {\n    code: 19,\n    exclusive: true,\n    noStyleOptions: 0,\n    displayText: 1,\n    engravedText: 2,\n    illuminatedCaps: 3,\n    titlingCaps: 4,\n    tallCaps: 5\n  },\n  characterShape: {\n    code: 20,\n    exclusive: true,\n    traditionalCharacters: 0,\n    simplifiedCharacters: 1,\n    JIS1978Characters: 2,\n    JIS1983Characters: 3,\n    JIS1990Characters: 4,\n    traditionalAltOne: 5,\n    traditionalAltTwo: 6,\n    traditionalAltThree: 7,\n    traditionalAltFour: 8,\n    traditionalAltFive: 9,\n    expertCharacters: 10,\n    JIS2004Characters: 11,\n    hojoCharacters: 12,\n    NLCCharacters: 13,\n    traditionalNamesCharacters: 14\n  },\n  numberCase: {\n    code: 21,\n    exclusive: true,\n    lowerCaseNumbers: 0,\n    upperCaseNumbers: 1\n  },\n  textSpacing: {\n    code: 22,\n    exclusive: true,\n    proportionalText: 0,\n    monospacedText: 1,\n    halfWidthText: 2,\n    thirdWidthText: 3,\n    quarterWidthText: 4,\n    altProportionalText: 5,\n    altHalfWidthText: 6\n  },\n  transliteration: {\n    code: 23,\n    exclusive: true,\n    noTransliteration: 0\n  },\n    // hanjaToHangul: 1\n    // hiraganaToKatakana: 2\n    // katakanaToHiragana: 3\n    // kanaToRomanization: 4\n    // romanizationToHiragana: 5\n    // romanizationToKatakana: 6\n    // hanjaToHangulAltOne: 7\n    // hanjaToHangulAltTwo: 8\n    // hanjaToHangulAltThree: 9\n  annotation: {\n    code: 24,\n    exclusive: true,\n    noAnnotation: 0,\n    boxAnnotation: 1,\n    roundedBoxAnnotation: 2,\n    circleAnnotation: 3,\n    invertedCircleAnnotation: 4,\n    parenthesisAnnotation: 5,\n    periodAnnotation: 6,\n    romanNumeralAnnotation: 7,\n    diamondAnnotation: 8,\n    invertedBoxAnnotation: 9,\n    invertedRoundedBoxAnnotation: 10\n  },\n  kanaSpacing: {\n    code: 25,\n    exclusive: true,\n    fullWidthKana: 0,\n    proportionalKana: 1\n  },\n  ideographicSpacing: {\n    code: 26,\n    exclusive: true,\n    fullWidthIdeographs: 0,\n    proportionalIdeographs: 1,\n    halfWidthIdeographs: 2\n  },\n  unicodeDecomposition: {\n    code: 27,\n    exclusive: false,\n    canonicalComposition: 0,\n    compatibilityComposition: 2,\n    transcodingComposition: 4\n  },\n  rubyKana: {\n    code: 28,\n    exclusive: false,\n    // noRubyKana: 0     # deprecated - use rubyKanaOff instead\n    // rubyKana: 1     # deprecated - use rubyKanaOn instead\n    rubyKana: 2\n  },\n  CJKSymbolAlternatives: {\n    code: 29,\n    exclusive: true,\n    noCJKSymbolAlternatives: 0,\n    CJKSymbolAltOne: 1,\n    CJKSymbolAltTwo: 2,\n    CJKSymbolAltThree: 3,\n    CJKSymbolAltFour: 4,\n    CJKSymbolAltFive: 5\n  },\n  ideographicAlternatives: {\n    code: 30,\n    exclusive: true,\n    noIdeographicAlternatives: 0,\n    ideographicAltOne: 1,\n    ideographicAltTwo: 2,\n    ideographicAltThree: 3,\n    ideographicAltFour: 4,\n    ideographicAltFive: 5\n  },\n  CJKVerticalRomanPlacement: {\n    code: 31,\n    exclusive: true,\n    CJKVerticalRomanCentered: 0,\n    CJKVerticalRomanHBaseline: 1\n  },\n  italicCJKRoman: {\n    code: 32,\n    exclusive: false,\n    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead\n    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead\n    CJKItalicRoman: 2\n  },\n  caseSensitiveLayout: {\n    code: 33,\n    exclusive: false,\n    caseSensitiveLayout: 0,\n    caseSensitiveSpacing: 2\n  },\n  alternateKana: {\n    code: 34,\n    exclusive: false,\n    alternateHorizKana: 0,\n    alternateVertKana: 2\n  },\n  stylisticAlternatives: {\n    code: 35,\n    exclusive: false,\n    noStylisticAlternates: 0,\n    stylisticAltOne: 2,\n    stylisticAltTwo: 4,\n    stylisticAltThree: 6,\n    stylisticAltFour: 8,\n    stylisticAltFive: 10,\n    stylisticAltSix: 12,\n    stylisticAltSeven: 14,\n    stylisticAltEight: 16,\n    stylisticAltNine: 18,\n    stylisticAltTen: 20,\n    stylisticAltEleven: 22,\n    stylisticAltTwelve: 24,\n    stylisticAltThirteen: 26,\n    stylisticAltFourteen: 28,\n    stylisticAltFifteen: 30,\n    stylisticAltSixteen: 32,\n    stylisticAltSeventeen: 34,\n    stylisticAltEighteen: 36,\n    stylisticAltNineteen: 38,\n    stylisticAltTwenty: 40\n  },\n  contextualAlternates: {\n    code: 36,\n    exclusive: false,\n    contextualAlternates: 0,\n    swashAlternates: 2,\n    contextualSwashAlternates: 4\n  },\n  lowerCase: {\n    code: 37,\n    exclusive: true,\n    defaultLowerCase: 0,\n    lowerCaseSmallCaps: 1,\n    lowerCasePetiteCaps: 2\n  },\n  upperCase: {\n    code: 38,\n    exclusive: true,\n    defaultUpperCase: 0,\n    upperCaseSmallCaps: 1,\n    upperCasePetiteCaps: 2\n  },\n  languageTag: { // indices into ltag table\n    code: 39,\n    exclusive: true\n  },\n  CJKRomanSpacing: {\n    code: 103,\n    exclusive: true,\n    halfWidthCJKRoman: 0,\n    proportionalCJKRoman: 1,\n    defaultCJKRoman: 2,\n    fullWidthCJKRoman: 3\n  }\n};\n\nconst feature = (name, selector) => [features[name].code, features[name][selector]];\n\nconst OTMapping = {\n  rlig: feature('ligatures', 'requiredLigatures'),\n  clig: feature('ligatures', 'contextualLigatures'),\n  dlig: feature('ligatures', 'rareLigatures'),\n  hlig: feature('ligatures', 'historicalLigatures'),\n  liga: feature('ligatures', 'commonLigatures'),\n  hist: feature('ligatures', 'historicalLigatures'), // ??\n\n  smcp: feature('lowerCase', 'lowerCaseSmallCaps'),\n  pcap: feature('lowerCase', 'lowerCasePetiteCaps'),\n\n  frac: feature('fractions', 'diagonalFractions'),\n  dnom: feature('fractions', 'diagonalFractions'), // ??\n  numr: feature('fractions', 'diagonalFractions'), // ??\n  afrc: feature('fractions', 'verticalFractions'),\n  // aalt\n  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?\n  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?\n  // unic, vatu, vhal, vjmo, vpal, vrt2\n  // dist -> trak table?\n  // kern, vkrn -> kern table\n  // lfbd + opbd + rtbd -> opbd table?\n  // mark, mkmk -> acnt table?\n  // locl -> languageTag + ltag table\n\n  case: feature('caseSensitiveLayout', 'caseSensitiveLayout'), // also caseSensitiveSpacing\n  ccmp: feature('unicodeDecomposition', 'canonicalComposition'), // compatibilityComposition?\n  cpct: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'), // guess..., probably not given below\n  valt: feature('CJKVerticalRomanPlacement', 'CJKVerticalRomanCentered'),\n  swsh: feature('contextualAlternates', 'swashAlternates'),\n  cswh: feature('contextualAlternates', 'contextualSwashAlternates'),\n  curs: feature('cursiveConnection', 'cursive'), // ??\n  c2pc: feature('upperCase', 'upperCasePetiteCaps'),\n  c2sc: feature('upperCase', 'upperCaseSmallCaps'),\n\n  init: feature('smartSwash', 'wordInitialSwashes'), // ??\n  fin2: feature('smartSwash', 'wordFinalSwashes'), // ??\n  medi: feature('smartSwash', 'nonFinalSwashes'), // ??\n  med2: feature('smartSwash', 'nonFinalSwashes'), // ??\n  fin3: feature('smartSwash', 'wordFinalSwashes'), // ??\n  fina: feature('smartSwash', 'wordFinalSwashes'), // ??\n\n  pkna: feature('kanaSpacing', 'proportionalKana'),\n  half: feature('textSpacing', 'halfWidthText'), // also HalfWidthCJKRoman, HalfWidthIdeographs?\n  halt: feature('textSpacing', 'altHalfWidthText'),\n\n  hkna: feature('alternateKana', 'alternateHorizKana'),\n  vkna: feature('alternateKana', 'alternateVertKana'),\n  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated\n\n  ital: feature('italicCJKRoman', 'CJKItalicRoman'),\n  lnum: feature('numberCase', 'upperCaseNumbers'),\n  onum: feature('numberCase', 'lowerCaseNumbers'),\n  mgrk: feature('mathematicalExtras', 'mathematicalGreek'),\n\n  // nalt: not enough info. what type of annotation?\n  // ornm: ditto, which ornament style?\n\n  calt: feature('contextualAlternates', 'contextualAlternates'), // or more?\n  vrt2: feature('verticalSubstitution', 'substituteVerticalForms'), // oh... below?\n  vert: feature('verticalSubstitution', 'substituteVerticalForms'),\n  tnum: feature('numberSpacing', 'monospacedNumbers'),\n  pnum: feature('numberSpacing', 'proportionalNumbers'),\n  sups: feature('verticalPosition', 'superiors'),\n  subs: feature('verticalPosition', 'inferiors'),\n  ordn: feature('verticalPosition', 'ordinals'),\n  pwid: feature('textSpacing', 'proportionalText'),\n  hwid: feature('textSpacing', 'halfWidthText'),\n  qwid: feature('textSpacing', 'quarterWidthText'), // also QuarterWidthNumbers?\n  twid: feature('textSpacing', 'thirdWidthText'), // also ThirdWidthNumbers?\n  fwid: feature('textSpacing', 'proportionalText'), //??\n  palt: feature('textSpacing', 'altProportionalText'),\n  trad: feature('characterShape', 'traditionalCharacters'),\n  smpl: feature('characterShape', 'simplifiedCharacters'),\n  jp78: feature('characterShape', 'JIS1978Characters'),\n  jp83: feature('characterShape', 'JIS1983Characters'),\n  jp90: feature('characterShape', 'JIS1990Characters'),\n  jp04: feature('characterShape', 'JIS2004Characters'),\n  expt: feature('characterShape', 'expertCharacters'),\n  hojo: feature('characterShape', 'hojoCharacters'),\n  nlck: feature('characterShape', 'NLCCharacters'),\n  tnam: feature('characterShape', 'traditionalNamesCharacters'),\n  ruby: feature('rubyKana', 'rubyKana'),\n  titl: feature('styleOptions', 'titlingCaps'),\n  zero: feature('typographicExtras', 'slashedZero'),\n\n  ss01: feature('stylisticAlternatives', 'stylisticAltOne'),\n  ss02: feature('stylisticAlternatives', 'stylisticAltTwo'),\n  ss03: feature('stylisticAlternatives', 'stylisticAltThree'),\n  ss04: feature('stylisticAlternatives', 'stylisticAltFour'),\n  ss05: feature('stylisticAlternatives', 'stylisticAltFive'),\n  ss06: feature('stylisticAlternatives', 'stylisticAltSix'),\n  ss07: feature('stylisticAlternatives', 'stylisticAltSeven'),\n  ss08: feature('stylisticAlternatives', 'stylisticAltEight'),\n  ss09: feature('stylisticAlternatives', 'stylisticAltNine'),\n  ss10: feature('stylisticAlternatives', 'stylisticAltTen'),\n  ss11: feature('stylisticAlternatives', 'stylisticAltEleven'),\n  ss12: feature('stylisticAlternatives', 'stylisticAltTwelve'),\n  ss13: feature('stylisticAlternatives', 'stylisticAltThirteen'),\n  ss14: feature('stylisticAlternatives', 'stylisticAltFourteen'),\n  ss15: feature('stylisticAlternatives', 'stylisticAltFifteen'),\n  ss16: feature('stylisticAlternatives', 'stylisticAltSixteen'),\n  ss17: feature('stylisticAlternatives', 'stylisticAltSeventeen'),\n  ss18: feature('stylisticAlternatives', 'stylisticAltEighteen'),\n  ss19: feature('stylisticAlternatives', 'stylisticAltNineteen'),\n  ss20: feature('stylisticAlternatives', 'stylisticAltTwenty')\n};\n\n  // salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose\n\n// Add cv01-cv99 features\nfor (let i = 1; i <= 99; i++) {\n  OTMapping[`cv${`00${i}`.slice(-2)}`] = [features.characterAlternatives.code, i];\n}\n\n// create inverse mapping\nlet AATMapping = {};\nfor (let ot in OTMapping) {\n  let aat = OTMapping[ot];\n  if (AATMapping[aat[0]] == null) {\n    AATMapping[aat[0]] = {};\n  }\n\n  AATMapping[aat[0]][aat[1]] = ot;\n}\n\n// Maps an array of OpenType features to AAT features\n// in the form of {featureType:{featureSetting:true}}\nexport function mapOTToAAT(features) {\n  let res = {};\n  for (let k in features) {\n    let r;\n    if (r = OTMapping[k]) {\n      if (res[r[0]] == null) {\n        res[r[0]] = {};\n      }\n\n      res[r[0]][r[1]] = features[k];\n    }\n  }\n\n  return res;\n}\n\n// Maps strings in a [featureType, featureSetting]\n// to their equivalent number codes\nfunction mapFeatureStrings(f) {\n  let [type, setting] = f;\n  if (isNaN(type)) {\n    var typeCode = features[type] && features[type].code;\n  } else {\n    var typeCode = type;\n  }\n\n  if (isNaN(setting)) {\n    var settingCode = features[type] && features[type][setting];\n  } else {\n    var settingCode = setting;\n  }\n\n  return [typeCode, settingCode];\n}\n\n// Maps AAT features to an array of OpenType features\n// Supports both arrays in the form of [[featureType, featureSetting]]\n// and objects in the form of {featureType:{featureSetting:true}}\n// featureTypes and featureSettings can be either strings or number codes\nexport function mapAATToOT(features) {\n  let res = {};\n  if (Array.isArray(features)) {\n    for (let k = 0; k < features.length; k++) {\n      let r;\n      let f = mapFeatureStrings(features[k]);\n      if (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]]) {\n        res[r] = true;\n      }\n    }\n\n  } else if (typeof features === 'object') {\n    for (let type in features) {\n      let feature = features[type];\n      for (let setting in feature) {\n        let r;\n        let f = mapFeatureStrings([type, setting]);\n        if (feature[setting] && (r = AATMapping[f[0]] && AATMapping[f[0]][f[1]])) {\n          res[r] = true;\n        }\n      }\n    }\n  }\n\n  return Object.keys(res);\n}\n","import AATStateMachine from './AATStateMachine';\nimport AATLookupTable from './AATLookupTable';\nimport {cache} from '../decorators';\n\n// indic replacement flags\nconst MARK_FIRST = 0x8000;\nconst MARK_LAST  = 0x2000;\nconst VERB       = 0x000F;\n\n// contextual substitution and glyph insertion flag\nconst SET_MARK = 0x8000;\n\n// ligature entry flags\nconst SET_COMPONENT  = 0x8000;\nconst PERFORM_ACTION = 0x2000;\n\n// ligature action masks\nconst LAST_MASK   = 0x80000000;\nconst STORE_MASK  = 0x40000000;\nconst OFFSET_MASK = 0x3FFFFFFF;\n\nconst VERTICAL_ONLY           = 0x800000;\nconst REVERSE_DIRECTION       = 0x400000;\nconst HORIZONTAL_AND_VERTICAL = 0x200000;\n\n// glyph insertion flags\nconst CURRENT_IS_KASHIDA_LIKE = 0x2000;\nconst MARKED_IS_KASHIDA_LIKE  = 0x1000;\nconst CURRENT_INSERT_BEFORE   = 0x0800;\nconst MARKED_INSERT_BEFORE    = 0x0400;\nconst CURRENT_INSERT_COUNT    = 0x03E0;\nconst MARKED_INSERT_COUNT     = 0x001F;\n\nexport default class AATMorxProcessor {\n  constructor(font) {\n    this.processIndicRearragement = this.processIndicRearragement.bind(this);\n    this.processContextualSubstitution = this.processContextualSubstitution.bind(this);\n    this.processLigature = this.processLigature.bind(this);\n    this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);\n    this.processGlyphInsertion = this.processGlyphInsertion.bind(this);\n    this.font = font;\n    this.morx = font.morx;\n    this.inputCache = null;\n  }\n\n  // Processes an array of glyphs and applies the specified features\n  // Features should be in the form of {featureType:{featureSetting:boolean}}\n  process(glyphs, features = {}) {\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n\n      // enable/disable the requested features\n      for (let feature of chain.features) {\n        let f;\n        if (f = features[feature.featureType]) {\n          if (f[feature.featureSetting]) {\n            flags &= feature.disableFlags;\n            flags |= feature.enableFlags;\n          } else if (f[feature.featureSetting] === false) {\n            flags |= ~feature.disableFlags;\n            flags &= ~feature.enableFlags;\n          }\n        }\n      }\n\n      for (let subtable of chain.subtables) {\n        if (subtable.subFeatureFlags & flags) {\n          this.processSubtable(subtable, glyphs);\n        }\n      }\n    }\n\n    // remove deleted glyphs\n    let index = glyphs.length - 1;\n    while (index >= 0) {\n      if (glyphs[index].id === 0xffff) {\n        glyphs.splice(index, 1);\n      }\n\n      index--;\n    }\n\n    return glyphs;\n  }\n\n  processSubtable(subtable, glyphs) {\n    this.subtable = subtable;\n    this.glyphs = glyphs;\n    if (this.subtable.type === 4) {\n      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);\n      return;\n    }\n\n    this.ligatureStack = [];\n    this.markedGlyph = null;\n    this.firstGlyph = null;\n    this.lastGlyph = null;\n    this.markedIndex = null;\n\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n\n    let reverse = !!(this.subtable.coverage & REVERSE_DIRECTION);\n    return stateMachine.process(this.glyphs, reverse, process);\n  }\n\n  @cache\n  getStateMachine(subtable) {\n    return new AATStateMachine(subtable.table.stateTable);\n  }\n\n  getProcessor() {\n    switch (this.subtable.type) {\n      case 0:\n        return this.processIndicRearragement;\n      case 1:\n        return this.processContextualSubstitution;\n      case 2:\n        return this.processLigature;\n      case 4:\n        return this.processNoncontextualSubstitutions;\n      case 5:\n        return this.processGlyphInsertion;\n      default:\n        throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);\n    }\n  }\n\n  processIndicRearragement(glyph, entry, index) {\n    if (entry.flags & MARK_FIRST) {\n      this.firstGlyph = index;\n    }\n\n    if (entry.flags & MARK_LAST) {\n      this.lastGlyph = index;\n    }\n\n    reorderGlyphs(this.glyphs, entry.flags & VERB, this.firstGlyph, this.lastGlyph);\n  }\n\n  processContextualSubstitution(glyph, entry, index) {\n    let subsitutions = this.subtable.table.substitutionTable.items;\n    if (entry.markIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.markIndex);\n      let lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[this.markedGlyph];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.currentIndex !== 0xffff) {\n      let lookup = subsitutions.getItem(entry.currentIndex);\n      let lookupTable = new AATLookupTable(lookup);\n      glyph = this.glyphs[index];\n      var gid = lookupTable.lookup(glyph.id);\n      if (gid) {\n        this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n      }\n    }\n\n    if (entry.flags & SET_MARK) {\n      this.markedGlyph = index;\n    }\n  }\n\n  processLigature(glyph, entry, index) {\n    if (entry.flags & SET_COMPONENT) {\n      this.ligatureStack.push(index);\n    }\n\n    if (entry.flags & PERFORM_ACTION) {\n      let actions = this.subtable.table.ligatureActions;\n      let components = this.subtable.table.components;\n      let ligatureList = this.subtable.table.ligatureList;\n\n      let actionIndex = entry.action;\n      let last = false;\n      let ligatureIndex = 0;\n      let codePoints = [];\n      let ligatureGlyphs = [];\n\n      while (!last) {\n        let componentGlyph = this.ligatureStack.pop();\n        codePoints.unshift(...this.glyphs[componentGlyph].codePoints);\n\n        let action = actions.getItem(actionIndex++);\n        last = !!(action & LAST_MASK);\n        let store = !!(action & STORE_MASK);\n        let offset = (action & OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits\n        offset += this.glyphs[componentGlyph].id;\n\n        let component = components.getItem(offset);\n        ligatureIndex += component;\n\n        if (last || store) {\n          let ligatureEntry = ligatureList.getItem(ligatureIndex);\n          this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);\n          ligatureGlyphs.push(componentGlyph);\n          ligatureIndex = 0;\n          codePoints = [];\n        } else {\n          this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);\n        }\n      }\n\n      // Put ligature glyph indexes back on the stack\n      this.ligatureStack.push(...ligatureGlyphs);\n    }\n  }\n\n  processNoncontextualSubstitutions(subtable, glyphs, index) {\n    let lookupTable = new AATLookupTable(subtable.table.lookupTable);\n\n    for (index = 0; index < glyphs.length; index++) {\n      let glyph = glyphs[index];\n      if (glyph.id !== 0xffff) {\n        let gid = lookupTable.lookup(glyph.id);\n        if (gid) { // 0 means do nothing\n          glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);\n        }\n      }\n    }\n  }\n\n  _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {\n    let insertions = [];\n    while (count--) {\n      let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);\n      insertions.push(this.font.getGlyph(gid));\n    }\n\n    if (!isBefore) {\n      glyphIndex++;\n    }\n\n    this.glyphs.splice(glyphIndex, 0, ...insertions);\n  }\n\n  processGlyphInsertion(glyph, entry, index) {\n    if (entry.flags & SET_MARK) {\n      this.markedIndex = index;\n    }\n\n    if (entry.markedInsertIndex !== 0xffff) {\n      let count = (entry.flags & MARKED_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & MARKED_INSERT_BEFORE);\n      this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);\n    }\n\n    if (entry.currentInsertIndex !== 0xffff) {\n      let count = (entry.flags & CURRENT_INSERT_COUNT) >>> 5;\n      let isBefore = !!(entry.flags & CURRENT_INSERT_BEFORE);\n      this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);\n    }\n  }\n\n  getSupportedFeatures() {\n    let features = [];\n    for (let chain of this.morx.chains) {\n      for (let feature of chain.features) {\n        features.push([feature.featureType, feature.featureSetting]);\n      }\n    }\n\n    return features;\n  }\n\n  generateInputs(gid) {\n    if (!this.inputCache) {\n      this.generateInputCache();\n    }\n\n    return this.inputCache[gid] || [];\n  }\n\n  generateInputCache() {\n    this.inputCache = {};\n\n    for (let chain of this.morx.chains) {\n      let flags = chain.defaultFlags;\n\n      for (let subtable of chain.subtables) {\n        if (subtable.subFeatureFlags & flags) {\n          this.generateInputsForSubtable(subtable);\n        }\n      }\n    }\n  }\n\n  generateInputsForSubtable(subtable) {\n    // Currently, only supporting ligature subtables.\n    if (subtable.type !== 2) {\n      return;\n    }\n\n    let reverse = !!(subtable.coverage & REVERSE_DIRECTION);\n    if (reverse) {\n      throw new Error('Reverse subtable, not supported.');\n    }\n\n    this.subtable = subtable;\n    this.ligatureStack = [];\n\n    let stateMachine = this.getStateMachine(subtable);\n    let process = this.getProcessor();\n\n    let input = [];\n    let stack = [];\n    this.glyphs = [];\n\n    stateMachine.traverse({\n      enter: (glyph, entry) => {\n        let glyphs = this.glyphs;\n        stack.push({\n          glyphs: glyphs.slice(),\n          ligatureStack: this.ligatureStack.slice()\n        });\n\n        // Add glyph to input and glyphs to process.\n        let g = this.font.getGlyph(glyph);\n        input.push(g);\n        glyphs.push(input[input.length - 1]);\n\n        // Process ligature substitution\n        process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);\n\n        // Add input to result if only one matching (non-deleted) glyph remains.\n        let count = 0;\n        let found = 0;\n        for (let i = 0; i < glyphs.length && count <= 1; i++) {\n          if (glyphs[i].id !== 0xffff) {\n            count++;\n            found = glyphs[i].id;\n          }\n        }\n\n        if (count === 1) {\n          let result = input.map(g => g.id);\n          let cache = this.inputCache[found];\n          if (cache) {\n            cache.push(result);\n          } else {\n            this.inputCache[found] = [result];\n          }\n        }\n      },\n\n      exit: () => {\n        ({glyphs: this.glyphs, ligatureStack: this.ligatureStack} = stack.pop());\n        input.pop();\n      }\n    });\n  }\n}\n\n// swaps the glyphs in rangeA with those in rangeB\n// reverse the glyphs inside those ranges if specified\n// ranges are in [offset, length] format\nfunction swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {\n  let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);\n  if (reverseB) {\n    end.reverse();\n  }\n\n  let start = glyphs.splice(rangeA[0], rangeA[1], ...end);\n  if (reverseA) {\n    start.reverse();\n  }\n\n  glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);\n  return glyphs;\n}\n\nfunction reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {\n  let length = lastGlyph - firstGlyph + 1;\n  switch (verb) {\n    case 0: // no change\n      return glyphs;\n\n    case 1: // Ax => xA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 0]);\n\n    case 2: // xD => Dx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 1]);\n\n    case 3: // AxD => DxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 1]);\n\n    case 4: // ABx => xAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0]);\n\n    case 5: // ABx => xBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 0], true, false);\n\n    case 6: // xCD => CDx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2]);\n\n    case 7: // xCD => DCx\n      return swap(glyphs, [firstGlyph, 0], [lastGlyph, 2], false, true);\n\n    case 8: // AxCD => CDxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2]);\n\n    case 9: // AxCD => DCxA\n      return swap(glyphs, [firstGlyph, 1], [lastGlyph, 2], false, true);\n\n    case 10: // ABxD => DxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1]);\n\n    case 11: // ABxD => DxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 1], true, false);\n\n    case 12: // ABxCD => CDxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2]);\n\n    case 13: // ABxCD => CDxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, false);\n\n    case 14: // ABxCD => DCxAB\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], false, true);\n\n    case 15: // ABxCD => DCxBA\n      return swap(glyphs, [firstGlyph, 2], [lastGlyph, 2], true, true);\n\n    default:\n      throw new Error(`Unknown verb: ${verb}`);\n  }\n}\n","import AATLookupTable from './AATLookupTable';\n\nconst START_OF_TEXT_STATE = 0;\nconst START_OF_LINE_STATE = 1;\n\nconst END_OF_TEXT_CLASS = 0;\nconst OUT_OF_BOUNDS_CLASS = 1;\nconst DELETED_GLYPH_CLASS = 2;\nconst END_OF_LINE_CLASS = 3;\n\nconst DONT_ADVANCE = 0x4000;\n\nexport default class AATStateMachine {\n  constructor(stateTable) {\n    this.stateTable = stateTable;\n    this.lookupTable = new AATLookupTable(stateTable.classTable);\n  }\n\n  process(glyphs, reverse, processEntry) {\n    let currentState = START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?\n    let index = reverse ? glyphs.length - 1 : 0;\n    let dir = reverse ? -1 : 1;\n\n    while ((dir === 1 && index <= glyphs.length) || (dir === -1 && index >= -1)) {\n      let glyph = null;\n      let classCode = OUT_OF_BOUNDS_CLASS;\n      let shouldAdvance = true;\n\n      if (index === glyphs.length || index === -1) {\n        classCode = END_OF_TEXT_CLASS;\n      } else {\n        glyph = glyphs[index];\n        if (glyph.id === 0xffff) { // deleted glyph\n          classCode = DELETED_GLYPH_CLASS;\n        } else {\n          classCode = this.lookupTable.lookup(glyph.id);\n          if (classCode == null) {\n            classCode = OUT_OF_BOUNDS_CLASS;\n          }\n        }\n      }\n\n      let row = this.stateTable.stateArray.getItem(currentState);\n      let entryIndex = row[classCode];\n      let entry = this.stateTable.entryTable.getItem(entryIndex);\n\n      if (classCode !== END_OF_TEXT_CLASS && classCode !==  DELETED_GLYPH_CLASS) {\n        processEntry(glyph, entry, index);\n        shouldAdvance = !(entry.flags & DONT_ADVANCE);\n      }\n\n      currentState = entry.newState;\n      if (shouldAdvance) {\n        index += dir;\n      }\n    }\n\n    return glyphs;\n  }\n\n  /**\n   * Performs a depth-first traversal of the glyph strings\n   * represented by the state machine.\n   */\n  traverse(opts, state = 0, visited = new Set) {\n    if (visited.has(state)) {\n      return;\n    }\n\n    visited.add(state);\n\n    let {nClasses, stateArray, entryTable} = this.stateTable;\n    let row = stateArray.getItem(state);\n\n    // Skip predefined classes\n    for (let classCode = 4; classCode < nClasses; classCode++) {\n      let entryIndex = row[classCode];\n      let entry = entryTable.getItem(entryIndex);\n\n      // Try all glyphs in the class\n      for (let glyph of this.lookupTable.glyphsForValue(classCode)) {\n        if (opts.enter) {\n          opts.enter(glyph, entry);\n        }\n\n        if (entry.newState !== 0) {\n          this.traverse(opts, entry.newState, visited);\n        }\n\n        if (opts.exit) {\n          opts.exit(glyph, entry);\n        }\n      }\n    }\n  }\n}\n","import {cache} from '../decorators';\nimport {range} from '../utils';\n\nexport default class AATLookupTable {\n  constructor(table) {\n    this.table = table;\n  }\n\n  lookup(glyph) {\n    switch (this.table.version) {\n      case 0: // simple array format\n        return this.table.values.getItem(glyph);\n\n      case 2: // segment format\n      case 4: {\n        let min = 0;\n        let max = this.table.binarySearchHeader.nUnits - 1;\n\n        while (min <= max) {\n          var mid = (min + max) >> 1;\n          var seg = this.table.segments[mid];\n\n          // special end of search value\n          if (seg.firstGlyph === 0xffff) {\n            return null;\n          }\n\n          if (glyph < seg.firstGlyph) {\n            max = mid - 1;\n          } else if (glyph > seg.lastGlyph) {\n            min = mid + 1;\n          } else {\n            if (this.table.version === 2) {\n              return seg.value;\n            } else {\n              return seg.values[glyph - seg.firstGlyph];\n            }\n          }\n        }\n\n        return null;\n      }\n\n      case 6: { // lookup single\n        let min = 0;\n        let max = this.table.binarySearchHeader.nUnits - 1;\n\n        while (min <= max) {\n          var mid = (min + max) >> 1;\n          var seg = this.table.segments[mid];\n\n          // special end of search value\n          if (seg.glyph === 0xffff) {\n            return null;\n          }\n\n          if (glyph < seg.glyph) {\n            max = mid - 1;\n          } else if (glyph > seg.glyph) {\n            min = mid + 1;\n          } else {\n            return seg.value;\n          }\n        }\n\n        return null;\n      }\n\n      case 8: // lookup trimmed\n        return this.table.values[glyph - this.table.firstGlyph];\n\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n  }\n\n  @cache\n  glyphsForValue(classValue) {\n    let res = [];\n\n    switch (this.table.version) {\n      case 2: // segment format\n      case 4: {\n        for (let segment of this.table.segments) {\n          if ((this.table.version === 2 && segment.value === classValue)) {\n            res.push(...range(segment.firstGlyph, segment.lastGlyph + 1));\n          } else {\n            for (let index = 0; index < segment.values.length; index++) {\n              if (segment.values[index] === classValue) {\n                res.push(segment.firstGlyph + index);\n              }\n            }\n          }\n        }\n\n        break;\n      }\n\n      case 6: { // lookup single\n        for (let segment of this.table.segments) {\n          if (segment.value === classValue) {\n            res.push(segment.glyph);\n          }\n        }\n\n        break;\n      }\n\n      case 8: { // lookup trimmed\n        for (let i = 0; i < this.table.values.length; i++) {\n          if (this.table.values[i] === classValue) {\n            res.push(this.table.firstGlyph + i);\n          }\n        }\n\n        break;\n      }\n\n      default:\n        throw new Error(`Unknown lookup table format: ${this.table.version}`);\n    }\n\n    return res;\n  }\n}\n","import ShapingPlan from './ShapingPlan';\nimport * as Shapers from './shapers';\nimport GlyphInfo from './GlyphInfo';\nimport GSUBProcessor from './GSUBProcessor';\nimport GPOSProcessor from './GPOSProcessor';\n\nexport default class OTLayoutEngine {\n  constructor(font) {\n    this.font = font;\n    this.glyphInfos = null;\n    this.plan = null;\n    this.GSUBProcessor = null;\n    this.GPOSProcessor = null;\n    this.fallbackPosition = true;\n\n    if (font.GSUB) {\n      this.GSUBProcessor = new GSUBProcessor(font, font.GSUB);\n    }\n\n    if (font.GPOS) {\n      this.GPOSProcessor = new GPOSProcessor(font, font.GPOS);\n    }\n  }\n\n  setup(glyphRun) {\n    // Map glyphs to GlyphInfo objects so data can be passed between\n    // GSUB and GPOS without mutating the real (shared) Glyph objects.\n    this.glyphInfos = glyphRun.glyphs.map(glyph => new GlyphInfo(this.font, glyph.id, [...glyph.codePoints]));\n\n    // Select a script based on what is available in GSUB/GPOS.\n    let script = null;\n    if (this.GPOSProcessor) {\n      script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    if (this.GSUBProcessor) {\n      script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);\n    }\n\n    // Choose a shaper based on the script, and setup a shaping plan.\n    // This determines which features to apply to which glyphs.\n    this.shaper = Shapers.choose(script);\n    this.plan = new ShapingPlan(this.font, script, glyphRun.direction);\n    this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);\n\n    // Assign chosen features to output glyph run\n    for (let key in this.plan.allFeatures) {\n      glyphRun.features[key] = true;\n    }\n  }\n\n  substitute(glyphRun) {\n    if (this.GSUBProcessor) {\n      this.plan.process(this.GSUBProcessor, this.glyphInfos);\n\n      // Map glyph infos back to normal Glyph objects\n      glyphRun.glyphs = this.glyphInfos.map(glyphInfo => this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));\n    }\n  }\n\n  position(glyphRun) {\n    if (this.shaper.zeroMarkWidths === 'BEFORE_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    }\n\n    if (this.GPOSProcessor) {\n      this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);\n    }\n\n    if (this.shaper.zeroMarkWidths === 'AFTER_GPOS') {\n      this.zeroMarkAdvances(glyphRun.positions);\n    }\n\n    // Reverse the glyphs and positions if the script is right-to-left\n    if (glyphRun.direction === 'rtl') {\n      glyphRun.glyphs.reverse();\n      glyphRun.positions.reverse();\n    }\n\n    return this.GPOSProcessor && this.GPOSProcessor.features;\n  }\n\n  zeroMarkAdvances(positions) {\n    for (let i = 0; i < this.glyphInfos.length; i++) {\n      if (this.glyphInfos[i].isMark) {\n        positions[i].xAdvance = 0;\n        positions[i].yAdvance = 0;\n      }\n    }\n  }\n\n  cleanup() {\n    this.glyphInfos = null;\n    this.plan = null;\n    this.shaper = null;\n  }\n\n  getAvailableFeatures(script, language) {\n    let features = [];\n\n    if (this.GSUBProcessor) {\n      this.GSUBProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GSUBProcessor.features));\n    }\n\n    if (this.GPOSProcessor) {\n      this.GPOSProcessor.selectScript(script, language);\n      features.push(...Object.keys(this.GPOSProcessor.features));\n    }\n\n    return features;\n  }\n}\n","import * as Script from '../layout/Script';\n\n/**\n * ShapingPlans are used by the OpenType shapers to store which\n * features should by applied, and in what order to apply them.\n * The features are applied in groups called stages. A feature\n * can be applied globally to all glyphs, or locally to only\n * specific glyphs.\n *\n * @private\n */\nexport default class ShapingPlan {\n  constructor(font, script, direction) {\n    this.font = font;\n    this.script = script;\n    this.direction = direction;\n    this.stages = [];\n    this.globalFeatures = {};\n    this.allFeatures = {};\n  }\n\n  /**\n   * Adds the given features to the last stage.\n   * Ignores features that have already been applied.\n   */\n  _addFeatures(features, global) {\n    let stageIndex = this.stages.length - 1;\n    let stage = this.stages[stageIndex];\n    for (let feature of features) {\n      if (this.allFeatures[feature] == null) {\n        stage.push(feature);\n        this.allFeatures[feature] = stageIndex;\n\n        if (global) {\n          this.globalFeatures[feature] = true;\n        }\n      }\n    }\n  }\n\n  /**\n   * Add features to the last stage\n   */\n  add(arg, global = true) {\n    if (this.stages.length === 0) {\n      this.stages.push([]);\n    }\n\n    if (typeof arg === 'string') {\n      arg = [arg];\n    }\n\n    if (Array.isArray(arg)) {\n      this._addFeatures(arg, global);\n    } else if (typeof arg === 'object') {\n      this._addFeatures(arg.global || [], true);\n      this._addFeatures(arg.local || [], false);\n    } else {\n      throw new Error(\"Unsupported argument to ShapingPlan#add\");\n    }\n  }\n\n  /**\n   * Add a new stage\n   */\n  addStage(arg, global) {\n    if (typeof arg === 'function') {\n      this.stages.push(arg, []);\n    } else {\n      this.stages.push([]);\n      this.add(arg, global);\n    }\n  }\n\n  setFeatureOverrides(features) {\n    if (Array.isArray(features)) {\n      this.add(features);\n    } else if (typeof features === 'object') {\n      for (let tag in features) {\n        if (features[tag]) {\n          this.add(tag);\n        } else if (this.allFeatures[tag] != null) {\n          let stage = this.stages[this.allFeatures[tag]];\n          stage.splice(stage.indexOf(tag), 1);\n          delete this.allFeatures[tag];\n          delete this.globalFeatures[tag];\n        }\n      }\n    }\n  }\n\n  /**\n   * Assigns the global features to the given glyphs\n   */\n  assignGlobalFeatures(glyphs) {\n    for (let glyph of glyphs) {\n      for (let feature in this.globalFeatures) {\n        glyph.features[feature] = true;\n      }\n    }\n  }\n\n  /**\n   * Executes the planned stages using the given OTProcessor\n   */\n  process(processor, glyphs, positions) {\n    for (let stage of this.stages) {\n      if (typeof stage === 'function') {\n        if (!positions) {\n          stage(this.font, glyphs, this);\n        }\n\n      } else if (stage.length > 0) {\n        processor.applyFeatures(stage, glyphs, positions);\n      }\n    }\n  }\n}\n","import DefaultShaper from './DefaultShaper';\nimport ArabicShaper from './ArabicShaper';\nimport HangulShaper from './HangulShaper';\nimport IndicShaper from './IndicShaper';\nimport UniversalShaper from './UniversalShaper';\n\nconst SHAPERS = {\n  arab: ArabicShaper,    // Arabic\n  mong: ArabicShaper,    // Mongolian\n  syrc: ArabicShaper,    // Syriac\n  'nko ': ArabicShaper,  // N'Ko\n  phag: ArabicShaper,    // Phags Pa\n  mand: ArabicShaper,    // Mandaic\n  mani: ArabicShaper,    // Manichaean\n  phlp: ArabicShaper,    // Psalter Pahlavi\n\n  hang: HangulShaper,    // Hangul\n\n  bng2: IndicShaper,     // Bengali\n  beng: IndicShaper,     // Bengali\n  dev2: IndicShaper,     // Devanagari\n  deva: IndicShaper,     // Devanagari\n  gjr2: IndicShaper,     // Gujarati\n  gujr: IndicShaper,     // Gujarati\n  guru: IndicShaper,     // Gurmukhi\n  gur2: IndicShaper,     // Gurmukhi\n  knda: IndicShaper,     // Kannada\n  knd2: IndicShaper,     // Kannada\n  mlm2: IndicShaper,     // Malayalam\n  mlym: IndicShaper,     // Malayalam\n  ory2: IndicShaper,     // Oriya\n  orya: IndicShaper,     // Oriya\n  taml: IndicShaper,     // Tamil\n  tml2: IndicShaper,     // Tamil\n  telu: IndicShaper,     // Telugu\n  tel2: IndicShaper,     // Telugu\n  khmr: IndicShaper,     // Khmer\n\n  bali: UniversalShaper, // Balinese\n  batk: UniversalShaper, // Batak\n  brah: UniversalShaper, // Brahmi\n  bugi: UniversalShaper, // Buginese\n  buhd: UniversalShaper, // Buhid\n  cakm: UniversalShaper, // Chakma\n  cham: UniversalShaper, // Cham\n  dupl: UniversalShaper, // Duployan\n  egyp: UniversalShaper, // Egyptian Hieroglyphs\n  gran: UniversalShaper, // Grantha\n  hano: UniversalShaper, // Hanunoo\n  java: UniversalShaper, // Javanese\n  kthi: UniversalShaper, // Kaithi\n  kali: UniversalShaper, // Kayah Li\n  khar: UniversalShaper, // Kharoshthi\n  khoj: UniversalShaper, // Khojki\n  sind: UniversalShaper, // Khudawadi\n  lepc: UniversalShaper, // Lepcha\n  limb: UniversalShaper, // Limbu\n  mahj: UniversalShaper, // Mahajani\n  // mand: UniversalShaper, // Mandaic\n  // mani: UniversalShaper, // Manichaean\n  mtei: UniversalShaper, // Meitei Mayek\n  modi: UniversalShaper, // Modi\n  // mong: UniversalShaper, // Mongolian\n  // 'nko ': UniversalShaper, // N’Ko\n  hmng: UniversalShaper, // Pahawh Hmong\n  // phag: UniversalShaper, // Phags-pa\n  // phlp: UniversalShaper, // Psalter Pahlavi\n  rjng: UniversalShaper, // Rejang\n  saur: UniversalShaper, // Saurashtra\n  shrd: UniversalShaper, // Sharada\n  sidd: UniversalShaper, // Siddham\n  sinh: IndicShaper, // Sinhala\n  sund: UniversalShaper, // Sundanese\n  sylo: UniversalShaper, // Syloti Nagri\n  tglg: UniversalShaper, // Tagalog\n  tagb: UniversalShaper, // Tagbanwa\n  tale: UniversalShaper, // Tai Le\n  lana: UniversalShaper, // Tai Tham\n  tavt: UniversalShaper, // Tai Viet\n  takr: UniversalShaper, // Takri\n  tibt: UniversalShaper, // Tibetan\n  tfng: UniversalShaper, // Tifinagh\n  tirh: UniversalShaper, // Tirhuta\n\n  latn: DefaultShaper,   // Latin\n  DFLT: DefaultShaper    // Default\n};\n\nexport function choose(script) {\n  if (!Array.isArray(script)) {\n    script = [script];\n  }\n\n  for (let s of script) {\n    let shaper = SHAPERS[s];\n    if (shaper) {\n      return shaper;\n    }\n  }\n\n  return DefaultShaper;\n}\n","import unicode from 'unicode-properties';\n\nconst VARIATION_FEATURES = ['rvrn'];\nconst COMMON_FEATURES = ['ccmp', 'locl', 'rlig', 'mark', 'mkmk'];\nconst FRACTIONAL_FEATURES = ['frac', 'numr', 'dnom'];\nconst HORIZONTAL_FEATURES = ['calt', 'clig', 'liga', 'rclt', 'curs', 'kern'];\nconst VERTICAL_FEATURES = ['vert'];\nconst DIRECTIONAL_FEATURES = {\n  ltr: ['ltra', 'ltrm'],\n  rtl: ['rtla', 'rtlm']\n};\n\nexport default class DefaultShaper {\n  static zeroMarkWidths = 'AFTER_GPOS';\n  static plan(plan, glyphs, features) {\n    // Plan the features we want to apply\n    this.planPreprocessing(plan);\n    this.planFeatures(plan);\n    this.planPostprocessing(plan, features);\n\n    // Assign the global features to all the glyphs\n    plan.assignGlobalFeatures(glyphs);\n\n    // Assign local features to glyphs\n    this.assignFeatures(plan, glyphs);\n  }\n\n  static planPreprocessing(plan) {\n    plan.add({\n      global: [...VARIATION_FEATURES, ...DIRECTIONAL_FEATURES[plan.direction]],\n      local: FRACTIONAL_FEATURES\n    });\n  }\n\n  static planFeatures(plan) {\n    // Do nothing by default. Let subclasses override this.\n  }\n\n  static planPostprocessing(plan, userFeatures) {\n    plan.add([...COMMON_FEATURES, ...HORIZONTAL_FEATURES]);\n    plan.setFeatureOverrides(userFeatures);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Enable contextual fractions\n    for (let i = 0; i < glyphs.length; i++) {\n      let glyph = glyphs[i];\n      if (glyph.codePoints[0] === 0x2044) { // fraction slash\n        let start = i;\n        let end = i + 1;\n\n        // Apply numerator\n        while (start > 0 && unicode.isDigit(glyphs[start - 1].codePoints[0])) {\n          glyphs[start - 1].features.numr = true;\n          glyphs[start - 1].features.frac = true;\n          start--;\n        }\n\n        // Apply denominator\n        while (end < glyphs.length && unicode.isDigit(glyphs[end].codePoints[0])) {\n          glyphs[end].features.dnom = true;\n          glyphs[end].features.frac = true;\n          end++;\n        }\n\n        // Apply fraction slash\n        glyph.features.frac = true;\n        i = end - 1;\n      }\n    }\n  }\n}\n","import DefaultShaper from './DefaultShaper';\nimport unicode from 'unicode-properties';\nimport UnicodeTrie from 'unicode-trie';\n\nconst trie = new UnicodeTrie(require('fs').readFileSync(__dirname + '/data.trie'));\nconst FEATURES = ['isol', 'fina', 'fin2', 'fin3', 'medi', 'med2', 'init'];\n\nconst ShapingClasses = {\n  Non_Joining: 0,\n  Left_Joining: 1,\n  Right_Joining: 2,\n  Dual_Joining: 3,\n  Join_Causing: 3,\n  ALAPH: 4,\n  'DALATH RISH': 5,\n  Transparent: 6\n};\n\nconst ISOL = 'isol';\nconst FINA = 'fina';\nconst FIN2 = 'fin2';\nconst FIN3 = 'fin3';\nconst MEDI = 'medi';\nconst MED2 = 'med2';\nconst INIT = 'init';\nconst NONE = null;\n\n// Each entry is [prevAction, curAction, nextState]\nconst STATE_TABLE = [\n  //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH\n  // State 0: prev was U,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 6 ] ],\n\n  // State 1: prev was R or ISOL/ALAPH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 2 ],  [ NONE, FIN2, 5 ],  [ NONE, ISOL, 6 ] ],\n\n  // State 2: prev was D/L in ISOL form,  willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ INIT, FINA, 1 ],  [ INIT, FINA, 3 ],  [ INIT, FINA, 4 ],  [ INIT, FINA, 6 ] ],\n\n  // State 3: prev was D in FINA form,  willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ MEDI, FINA, 1 ],  [ MEDI, FINA, 3 ],  [ MEDI, FINA, 4 ],  [ MEDI, FINA, 6 ] ],\n\n  // State 4: prev was FINA ALAPH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ MED2, ISOL, 1 ],  [ MED2, ISOL, 2 ],  [ MED2, FIN2, 5 ],  [ MED2, ISOL, 6 ] ],\n\n  // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ ISOL, ISOL, 1 ],  [ ISOL, ISOL, 2 ],  [ ISOL, FIN2, 5 ],  [ ISOL, ISOL, 6 ] ],\n\n  // State 6: prev was DALATH/RISH,  not willing to join.\n  [ [ NONE, NONE, 0 ],  [ NONE, ISOL, 2 ],  [ NONE, ISOL, 1 ],  [ NONE, ISOL, 2 ],  [ NONE, FIN3, 5 ],  [ NONE, ISOL, 6 ] ]\n];\n\n/**\n * This is a shaper for Arabic, and other cursive scripts.\n * It uses data from ArabicShaping.txt in the Unicode database,\n * compiled to a UnicodeTrie by generate-data.coffee.\n *\n * The shaping state machine was ported from Harfbuzz.\n * https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-arabic.cc\n */\nexport default class ArabicShaper extends DefaultShaper {\n  static planFeatures(plan) {\n    plan.add(['ccmp', 'locl']);\n    for (let i = 0; i < FEATURES.length; i++) {\n      let feature = FEATURES[i];\n      plan.addStage(feature, false);\n    }\n\n    plan.addStage('mset');\n  }\n\n  static assignFeatures(plan, glyphs) {\n    super.assignFeatures(plan, glyphs);\n\n    let prev = -1;\n    let state = 0;\n    let actions = [];\n\n    // Apply the state machine to map glyphs to features\n    for (let i = 0; i < glyphs.length; i++) {\n      let curAction, prevAction;\n      var glyph = glyphs[i];\n      let type = getShapingClass(glyph.codePoints[0]);\n      if (type === ShapingClasses.Transparent) {\n        actions[i] = NONE;\n        continue;\n      }\n\n      [prevAction, curAction, state] = STATE_TABLE[state][type];\n\n      if (prevAction !== NONE && prev !== -1) {\n        actions[prev] = prevAction;\n      }\n\n      actions[i] = curAction;\n      prev = i;\n    }\n\n    // Apply the chosen features to their respective glyphs\n    for (let index = 0; index < glyphs.length; index++) {\n      let feature;\n      var glyph = glyphs[index];\n      if (feature = actions[index]) {\n        glyph.features[feature] = true;\n      }\n    }\n  }\n}\n\nfunction getShapingClass(codePoint) {\n  let res = trie.get(codePoint);\n  if (res) {\n    return res - 1;\n  }\n\n  let category = unicode.getCategory(codePoint);\n  if (category === 'Mn' || category === 'Me' || category === 'Cf') {\n    return ShapingClasses.Transparent;\n  }\n\n  return ShapingClasses.Non_Joining;\n}\n","import DefaultShaper from './DefaultShaper';\nimport GlyphInfo from '../GlyphInfo';\n\n/**\n * This is a shaper for the Hangul script, used by the Korean language.\n * It does the following:\n *   - decompose if unsupported by the font:\n *     <LV>   -> <L,V>\n *     <LVT>  -> <L,V,T>\n *     <LV,T> -> <L,V,T>\n *\n *   - compose if supported by the font:\n *     <L,V>   -> <LV>\n *     <L,V,T> -> <LVT>\n *     <LV,T>  -> <LVT>\n *\n *   - reorder tone marks (S is any valid syllable):\n *     <S, M> -> <M, S>\n *\n *   - apply ljmo, vjmo, and tjmo OpenType features to decomposed Jamo sequences.\n *\n * This logic is based on the following documents:\n *   - http://www.microsoft.com/typography/OpenTypeDev/hangul/intro.htm\n *   - http://ktug.org/~nomos/harfbuzz-hangul/hangulshaper.pdf\n */\nexport default class HangulShaper extends DefaultShaper {\n  static zeroMarkWidths = 'NONE';\n  static planFeatures(plan) {\n    plan.add(['ljmo', 'vjmo', 'tjmo'], false);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    let state = 0;\n    let i = 0;\n    while (i < glyphs.length) {\n      let action;\n      let glyph = glyphs[i];\n      let code = glyph.codePoints[0];\n      let type = getType(code);\n\n      [ action, state ] = STATE_TABLE[state][type];\n\n      switch (action) {\n        case DECOMPOSE:\n          // Decompose the composed syllable if it is not supported by the font.\n          if (!plan.font.hasGlyphForCodePoint(code)) {\n            i = decompose(glyphs, i, plan.font);\n          }\n          break;\n\n        case COMPOSE:\n          // Found a decomposed syllable. Try to compose if supported by the font.\n          i = compose(glyphs, i, plan.font);\n          break;\n\n        case TONE_MARK:\n          // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.\n          reorderToneMark(glyphs, i, plan.font);\n          break;\n\n        case INVALID:\n          // Tone mark has no valid syllable to attach to, so insert a dotted circle\n          i = insertDottedCircle(glyphs, i, plan.font);\n          break;\n      }\n\n      i++;\n    }\n  }\n}\n\nconst HANGUL_BASE  = 0xac00;\nconst HANGUL_END   = 0xd7a4;\nconst HANGUL_COUNT = HANGUL_END - HANGUL_BASE + 1;\nconst L_BASE  = 0x1100; // lead\nconst V_BASE  = 0x1161; // vowel\nconst T_BASE  = 0x11a7; // trail\nconst L_COUNT = 19;\nconst V_COUNT = 21;\nconst T_COUNT = 28;\nconst L_END   = L_BASE + L_COUNT - 1;\nconst V_END   = V_BASE + V_COUNT - 1;\nconst T_END   = T_BASE + T_COUNT - 1;\nconst DOTTED_CIRCLE = 0x25cc;\n\nconst isL    = code => 0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;\nconst isV    = code => 0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;\nconst isT    = code => 0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;\nconst isTone = code => 0x302e <= code && code <= 0x302f;\nconst isLVT  = code => HANGUL_BASE <= code && code <= HANGUL_END;\nconst isLV   = code => (code - HANGUL_BASE) < HANGUL_COUNT && (code - HANGUL_BASE) % T_COUNT === 0;\nconst isCombiningL = code => L_BASE <= code && code <= L_END;\nconst isCombiningV = code => V_BASE <= code && code <= V_END;\nconst isCombiningT = code => T_BASE + 1 && 1 <= code && code <= T_END;\n\n// Character categories\nconst X   = 0; // Other character\nconst L   = 1; // Leading consonant\nconst V   = 2; // Medial vowel\nconst T   = 3; // Trailing consonant\nconst LV  = 4; // Composed <LV> syllable\nconst LVT = 5; // Composed <LVT> syllable\nconst M   = 6; // Tone mark\n\n// This function classifies a character using the above categories.\nfunction getType(code) {\n  if (isL(code))    { return L; }\n  if (isV(code))    { return V; }\n  if (isT(code))    { return T; }\n  if (isLV(code))   { return LV; }\n  if (isLVT(code))  { return LVT; }\n  if (isTone(code)) { return M; }\n  return X;\n}\n\n// State machine actions\nconst NO_ACTION = 0;\nconst DECOMPOSE = 1;\nconst COMPOSE   = 2;\nconst TONE_MARK = 4;\nconst INVALID   = 5;\n\n// Build a state machine that accepts valid syllables, and applies actions along the way.\n// The logic this is implementing is documented at the top of the file.\nconst STATE_TABLE = [\n  //       X                 L                 V                T                  LV                LVT               M\n  // State 0: start state\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [ NO_ACTION, 0 ], [ NO_ACTION, 0 ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [  INVALID, 0  ] ],\n\n  // State 1: <L>\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [  COMPOSE, 2  ], [ NO_ACTION, 0 ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [  INVALID, 0  ] ],\n\n  // State 2: <L,V> or <LV>\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [ NO_ACTION, 0 ], [  COMPOSE, 3  ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [ TONE_MARK, 0 ] ],\n\n  // State 3: <L,V,T> or <LVT>\n  [ [ NO_ACTION, 0 ], [ NO_ACTION, 1 ], [ NO_ACTION, 0 ], [ NO_ACTION, 0 ], [ DECOMPOSE, 2 ], [ DECOMPOSE, 3 ], [ TONE_MARK, 0 ] ]\n];\n\nfunction getGlyph(font, code, features) {\n  return new GlyphInfo(font, font.glyphForCodePoint(code).id, [code], features);\n}\n\nfunction decompose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyph.codePoints[0];\n\n  let s = code - HANGUL_BASE;\n  let t = T_BASE + s % T_COUNT;\n  s = s / T_COUNT | 0;\n  let l = L_BASE + s / V_COUNT | 0;\n  let v = V_BASE + s % V_COUNT;\n\n  // Don't decompose if all of the components are not available\n  if (!font.hasGlyphForCodePoint(l) ||\n      !font.hasGlyphForCodePoint(v) ||\n      (t !== T_BASE && !font.hasGlyphForCodePoint(t))) {\n    return i;\n  }\n\n  // Replace the current glyph with decomposed L, V, and T glyphs,\n  // and apply the proper OpenType features to each component.\n  let ljmo = getGlyph(font, l, glyph.features);\n  ljmo.features.ljmo = true;\n\n  let vjmo = getGlyph(font, v, glyph.features);\n  vjmo.features.vjmo = true;\n\n  let insert = [ ljmo, vjmo ];\n\n  if (t > T_BASE) {\n    let tjmo = getGlyph(font, t, glyph.features);\n    tjmo.features.tjmo = true;\n    insert.push(tjmo);\n  }\n\n  glyphs.splice(i, 1, ...insert);\n  return i + insert.length - 1;\n}\n\nfunction compose(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n  let type = getType(code);\n\n  let prev = glyphs[i - 1].codePoints[0];\n  let prevType = getType(prev);\n\n  // Figure out what type of syllable we're dealing with\n  let lv, ljmo, vjmo, tjmo;\n  if (prevType === LV && type === T) {\n    // <LV,T>\n    lv = prev;\n    tjmo = glyph;\n  } else {\n    if (type === V) {\n      // <L,V>\n      ljmo = glyphs[i - 1];\n      vjmo = glyph;\n    } else {\n      // <L,V,T>\n      ljmo = glyphs[i - 2];\n      vjmo = glyphs[i - 1];\n      tjmo = glyph;\n    }\n\n    let l = ljmo.codePoints[0];\n    let v = vjmo.codePoints[0];\n\n    // Make sure L and V are combining characters\n    if (isCombiningL(l) && isCombiningV(v)) {\n      lv = HANGUL_BASE + ((l - L_BASE) * V_COUNT + (v - V_BASE)) * T_COUNT;\n    }\n  }\n\n  let t = (tjmo && tjmo.codePoints[0]) || T_BASE;\n  if ((lv != null) && (t === T_BASE || isCombiningT(t))) {\n    let s = lv + (t - T_BASE);\n\n    // Replace with a composed glyph if supported by the font,\n    // otherwise apply the proper OpenType features to each component.\n    if (font.hasGlyphForCodePoint(s)) {\n      let del = prevType === V ? 3 : 2;\n      glyphs.splice(i - del + 1, del, getGlyph(font, s, glyph.features));\n      return i - del + 1;\n    }\n  }\n\n  // Didn't compose (either a non-combining component or unsupported by font).\n  if (ljmo) { ljmo.features.ljmo = true; }\n  if (vjmo) { vjmo.features.vjmo = true; }\n  if (tjmo) { tjmo.features.tjmo = true; }\n\n  if (prevType === LV) {\n    // Sequence was originally <L,V>, which got combined earlier.\n    // Either the T was non-combining, or the LVT glyph wasn't supported.\n    // Decompose the glyph again and apply OT features.\n    decompose(glyphs, i - 1, font);\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction getLength(code) {\n  switch (getType(code)) {\n    case LV:\n    case LVT:\n      return 1;\n    case V:\n      return 2;\n    case T:\n      return 3;\n  }\n}\n\nfunction reorderToneMark(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n\n  // Move tone mark to the beginning of the previous syllable, unless it is zero width\n  if (font.glyphForCodePoint(code).advanceWidth === 0) { return; }\n\n  let prev = glyphs[i - 1].codePoints[0];\n  let len = getLength(prev);\n\n  glyphs.splice(i, 1);\n  return glyphs.splice(i - len, 0, glyph);\n}\n\nfunction insertDottedCircle(glyphs, i, font) {\n  let glyph = glyphs[i];\n  let code = glyphs[i].codePoints[0];\n\n  if (font.hasGlyphForCodePoint(DOTTED_CIRCLE)) {\n    let dottedCircle = getGlyph(font, DOTTED_CIRCLE, glyph.features);\n\n    // If the tone mark is zero width, insert the dotted circle before, otherwise after\n    let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;\n    glyphs.splice(idx, 0, dottedCircle);\n    i++;\n  }\n\n  return i;\n}\n","import unicode from 'unicode-properties';\nimport OTProcessor from './OTProcessor';\n\nexport default class GlyphInfo {\n  constructor(font, id, codePoints = [], features) {\n    this._font = font;\n    this.codePoints = codePoints;\n    this.id = id;\n\n    this.features = {};\n    if (Array.isArray(features)) {\n      for (let i = 0; i < features.length; i++) {\n        let feature = features[i];\n        this.features[feature] = true;\n      }\n    } else if (typeof features === 'object') {\n      Object.assign(this.features, features);\n    }\n\n    this.ligatureID = null;\n    this.ligatureComponent = null;\n    this.isLigated = false;\n    this.cursiveAttachment = null;\n    this.markAttachment = null;\n    this.shaperInfo = null;\n    this.substituted = false;\n    this.isMultiplied = false;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(id) {\n    this._id = id;\n    this.substituted = true;\n\n    let GDEF = this._font.GDEF;\n    if (GDEF && GDEF.glyphClassDef) {\n      // TODO: clean this up\n      let classID = OTProcessor.prototype.getClassID(id, GDEF.glyphClassDef);\n      this.isBase = classID === 1;\n      this.isLigature = classID === 2;\n      this.isMark = classID === 3;\n      this.markAttachmentType = GDEF.markAttachClassDef ? OTProcessor.prototype.getClassID(id, GDEF.markAttachClassDef) : 0;\n    } else {\n      this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n      this.isBase = !this.isMark;\n      this.isLigature = this.codePoints.length > 1;\n      this.markAttachmentType = 0;\n    }\n  }\n\n  copy() {\n    return new GlyphInfo(this._font, this.id, this.codePoints, this.features);\n  }\n}\n","import GlyphIterator from './GlyphIterator';\nimport * as Script from '../layout/Script';\n\nconst DEFAULT_SCRIPTS = ['DFLT', 'dflt', 'latn'];\n\nexport default class OTProcessor {\n  constructor(font, table) {\n    this.font = font;\n    this.table = table;\n\n    this.script = null;\n    this.scriptTag = null;\n\n    this.language = null;\n    this.languageTag = null;\n\n    this.features = {};\n    this.lookups = {};\n\n    // Setup variation substitutions\n    this.variationsIndex = font._variationProcessor\n      ? this.findVariationsIndex(font._variationProcessor.normalizedCoords)\n      : -1;\n\n    // initialize to default script + language\n    this.selectScript();\n\n    // current context (set by applyFeatures)\n    this.glyphs = [];\n    this.positions = []; // only used by GPOS\n    this.ligatureID = 1;\n    this.currentFeature = null;\n  }\n\n  findScript(script) {\n    if (this.table.scriptList == null) {\n      return null;\n    }\n\n    if (!Array.isArray(script)) {\n      script = [script];\n    }\n\n    for (let s of script) {\n      for (let entry of this.table.scriptList) {\n        if (entry.tag === s) {\n          return entry;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  selectScript(script, language, direction) {\n    let changed = false;\n    let entry;\n    if (!this.script || script !== this.scriptTag) {\n      entry = this.findScript(script);\n      if (!entry) {\n        entry = this.findScript(DEFAULT_SCRIPTS);\n      }\n\n      if (!entry) {\n        return this.scriptTag;\n      }\n\n      this.scriptTag = entry.tag;\n      this.script = entry.script;\n      this.language = null;\n      this.languageTag = null;\n      changed = true;\n    }\n\n    if (!direction || direction !== this.direction) {\n      this.direction = direction || Script.direction(script);\n    }\n\n    if (language && language.length < 4) {\n      language += ' '.repeat(4 - language.length);\n    }\n\n    if (!language || language !== this.languageTag) {\n      this.language = null;\n\n      for (let lang of this.script.langSysRecords) {\n        if (lang.tag === language) {\n          this.language = lang.langSys;\n          this.languageTag = lang.tag;\n          break;\n        }\n      }\n\n      if (!this.language) {\n        this.language = this.script.defaultLangSys;\n        this.languageTag = null;\n      }\n\n      changed = true;\n    }\n\n    // Build a feature lookup table\n    if (changed) {\n      this.features = {};\n      if (this.language) {\n        for (let featureIndex of this.language.featureIndexes) {\n          let record = this.table.featureList[featureIndex];\n          let substituteFeature = this.substituteFeatureForVariations(featureIndex);\n          this.features[record.tag] = substituteFeature || record.feature;\n        }\n      }\n    }\n\n    return this.scriptTag;\n  }\n\n  lookupsForFeatures(userFeatures = [], exclude) {\n    let lookups = [];\n    for (let tag of userFeatures) {\n      let feature = this.features[tag];\n      if (!feature) {\n        continue;\n      }\n\n      for (let lookupIndex of feature.lookupListIndexes) {\n        if (exclude && exclude.indexOf(lookupIndex) !== -1) {\n          continue;\n        }\n\n        lookups.push({\n          feature: tag,\n          index: lookupIndex,\n          lookup: this.table.lookupList.get(lookupIndex)\n        });\n      }\n    }\n\n    lookups.sort((a, b) => a.index - b.index);\n    return lookups;\n  }\n\n  substituteFeatureForVariations(featureIndex) {\n    if (this.variationsIndex === -1) {\n      return null;\n    }\n\n    let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];\n    let substitutions = record.featureTableSubstitution.substitutions;\n    for (let substitution of substitutions) {\n      if (substitution.featureIndex === featureIndex) {\n        return substitution.alternateFeatureTable;\n      }\n    }\n\n    return null;\n  }\n\n  findVariationsIndex(coords) {\n    let variations = this.table.featureVariations;\n    if (!variations) {\n      return -1;\n    }\n\n    let records = variations.featureVariationRecords;\n    for (let i = 0; i < records.length; i++) {\n      let conditions = records[i].conditionSet.conditionTable;\n      if (this.variationConditionsMatch(conditions, coords)) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  variationConditionsMatch(conditions, coords) {\n    return conditions.every(condition => {\n      let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;\n      return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;\n    });\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    let lookups = this.lookupsForFeatures(userFeatures);\n    this.applyLookups(lookups, glyphs, advances);\n  }\n\n  applyLookups(lookups, glyphs, positions) {\n    this.glyphs = glyphs;\n    this.positions = positions;\n    this.glyphIterator = new GlyphIterator(glyphs);\n\n    for (let { feature, lookup } of lookups) {\n      this.currentFeature = feature;\n      this.glyphIterator.reset(lookup.flags);\n\n      while (this.glyphIterator.index < glyphs.length) {\n        if (!(feature in this.glyphIterator.cur.features)) {\n          this.glyphIterator.next();\n          continue;\n        }\n\n        for (let table of lookup.subTables) {\n          let res = this.applyLookup(lookup.lookupType, table);\n          if (res) {\n            break;\n          }\n        }\n\n        this.glyphIterator.next();\n      }\n    }\n  }\n\n  applyLookup(lookup, table) {\n    throw new Error(\"applyLookup must be implemented by subclasses\");\n  }\n\n  applyLookupList(lookupRecords) {\n    let options = this.glyphIterator.options;\n    let glyphIndex = this.glyphIterator.index;\n\n    for (let lookupRecord of lookupRecords) {\n      // Reset flags and find glyph index for this lookup record\n      this.glyphIterator.reset(options, glyphIndex);\n      this.glyphIterator.increment(lookupRecord.sequenceIndex);\n\n      // Get the lookup and setup flags for subtables\n      let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);\n      this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);\n\n      // Apply lookup subtables until one matches\n      for (let table of lookup.subTables) {\n        if (this.applyLookup(lookup.lookupType, table)) {\n          break;\n        }\n      }\n    }\n\n    this.glyphIterator.reset(options, glyphIndex);\n    return true;\n  }\n\n  coverageIndex(coverage, glyph) {\n    if (glyph == null) {\n      glyph = this.glyphIterator.cur.id;\n    }\n\n    switch (coverage.version) {\n      case 1:\n        return coverage.glyphs.indexOf(glyph);\n\n      case 2:\n        for (let range of coverage.rangeRecords) {\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.startCoverageIndex + glyph - range.start;\n          }\n        }\n\n        break;\n    }\n\n    return -1;\n  }\n\n  match(sequenceIndex, sequence, fn, matched) {\n    let pos = this.glyphIterator.index;\n    let glyph = this.glyphIterator.increment(sequenceIndex);\n    let idx = 0;\n\n    while (idx < sequence.length && glyph && fn(sequence[idx], glyph)) {\n      if (matched) {\n        matched.push(this.glyphIterator.index);\n      }\n\n      idx++;\n      glyph = this.glyphIterator.next();\n    }\n\n    this.glyphIterator.index = pos;\n    if (idx < sequence.length) {\n      return false;\n    }\n\n    return matched || true;\n  }\n\n  sequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => component === glyph.id);\n  }\n\n  sequenceMatchIndices(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (component, glyph) => {\n      // If the current feature doesn't apply to this glyph,\n      if (!(this.currentFeature in glyph.features)) {\n        return false;\n      }\n\n      return component === glyph.id;\n    }, []);\n  }\n\n  coverageSequenceMatches(sequenceIndex, sequence) {\n    return this.match(sequenceIndex, sequence, (coverage, glyph) =>\n      this.coverageIndex(coverage, glyph.id) >= 0\n    );\n  }\n\n  getClassID(glyph, classDef) {\n    switch (classDef.version) {\n      case 1: // Class array\n        let i = glyph - classDef.startGlyph;\n        if (i >= 0 && i < classDef.classValueArray.length) {\n          return classDef.classValueArray[i];\n        }\n\n        break;\n\n      case 2:\n        for (let range of classDef.classRangeRecord) {\n          if (range.start <= glyph && glyph <= range.end) {\n            return range.class;\n          }\n        }\n\n        break;\n    }\n\n    return 0;\n  }\n\n  classSequenceMatches(sequenceIndex, sequence, classDef) {\n    return this.match(sequenceIndex, sequence, (classID, glyph) =>\n      classID === this.getClassID(glyph.id, classDef)\n    );\n  }\n\n  applyContext(table) {\n    let index, set;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        set = table.ruleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(1, rule.input)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.classDef);\n        if (index === -1) {\n          return false;\n        }\n\n        set = table.classSet[index];\n        for (let rule of set) {\n          if (this.classSequenceMatches(1, rule.classes, table.classDef)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(0, table.coverages)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  }\n\n  applyChainingContext(table) {\n    let index;\n    switch (table.version) {\n      case 1:\n        index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        let set = table.chainRuleSets[index];\n        for (let rule of set) {\n          if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack)\n            && this.sequenceMatches(1, rule.input)\n            && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 2:\n        if (this.coverageIndex(table.coverage) === -1) {\n          return false;\n        }\n\n        index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);\n        let rules = table.chainClassSet[index];\n        if (!rules) {\n          return false;\n        }\n\n        for (let rule of rules) {\n          if (this.classSequenceMatches(-rule.backtrack.length, rule.backtrack, table.backtrackClassDef) &&\n            this.classSequenceMatches(1, rule.input, table.inputClassDef) &&\n            this.classSequenceMatches(1 + rule.input.length, rule.lookahead, table.lookaheadClassDef)) {\n            return this.applyLookupList(rule.lookupRecords);\n          }\n        }\n\n        break;\n\n      case 3:\n        if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) &&\n          this.coverageSequenceMatches(0, table.inputCoverage) &&\n          this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) {\n          return this.applyLookupList(table.lookupRecords);\n        }\n\n        break;\n    }\n\n    return false;\n  }\n}\n","export default class GlyphIterator {\n  constructor(glyphs, options) {\n    this.glyphs = glyphs;\n    this.reset(options);\n  }\n\n  reset(options = {}, index = 0) {\n    this.options = options;\n    this.flags = options.flags || {};\n    this.markAttachmentType = options.markAttachmentType || 0;\n    this.index = index;\n  }\n\n  get cur() {\n    return this.glyphs[this.index] || null;\n  }\n\n  shouldIgnore(glyph) {\n    return (this.flags.ignoreMarks && glyph.isMark) ||\n           (this.flags.ignoreBaseGlyphs && glyph.isBase) ||\n           (this.flags.ignoreLigatures && glyph.isLigature) ||\n           (this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType);\n  }\n\n  move(dir) {\n    this.index += dir;\n    while (0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index])) {\n      this.index += dir;\n    }\n\n    if (0 > this.index || this.index >= this.glyphs.length) {\n      return null;\n    }\n\n    return this.glyphs[this.index];\n  }\n\n  next() {\n    return this.move(+1);\n  }\n\n  prev() {\n    return this.move(-1);\n  }\n\n  peek(count = 1) {\n    let idx = this.index;\n    let res = this.increment(count);\n    this.index = idx;\n    return res;\n  }\n\n  peekIndex(count = 1) {\n    let idx = this.index;\n    this.increment(count);\n    let res = this.index;\n    this.index = idx;\n    return res;\n  }\n\n  increment(count = 1) {\n    let dir = count < 0 ? -1 : 1;\n    count = Math.abs(count);\n    while (count--) {\n      this.move(dir);\n    }\n\n    return this.glyphs[this.index];\n  }\n}\n","import DefaultShaper from './DefaultShaper';\nimport StateMachine from 'dfa';\nimport UnicodeTrie from 'unicode-trie';\nimport unicode from 'unicode-properties';\nimport * as Script from '../../layout/Script';\nimport GlyphInfo from '../GlyphInfo';\nimport indicMachine from './indic.json';\nimport useData from './use.json';\nimport {\n  CATEGORIES,\n  POSITIONS,\n  CONSONANT_FLAGS,\n  JOINER_FLAGS,\n  HALANT_OR_COENG_FLAGS, INDIC_CONFIGS,\n  INDIC_DECOMPOSITIONS\n} from './indic-data';\n\nconst {decompositions} = useData;\nconst trie = new UnicodeTrie(require('fs').readFileSync(__dirname + '/indic.trie'));\nconst stateMachine = new StateMachine(indicMachine);\n\n/**\n * The IndicShaper supports indic scripts e.g. Devanagari, Kannada, etc.\n * Based on code from Harfbuzz: https://github.com/behdad/harfbuzz/blob/master/src/hb-ot-shape-complex-indic.cc\n */\nexport default class IndicShaper extends DefaultShaper {\n  static zeroMarkWidths = 'NONE';\n  static planFeatures(plan) {\n    plan.addStage(setupSyllables);\n\n    plan.addStage(['locl', 'ccmp']);\n\n    plan.addStage(initialReordering);\n\n    plan.addStage('nukt');\n    plan.addStage('akhn');\n    plan.addStage('rphf', false);\n    plan.addStage('rkrf');\n    plan.addStage('pref', false);\n    plan.addStage('blwf', false);\n    plan.addStage('abvf', false);\n    plan.addStage('half', false);\n    plan.addStage('pstf', false);\n    plan.addStage('vatu');\n    plan.addStage('cjct');\n    plan.addStage('cfar', false);\n\n    plan.addStage(finalReordering);\n\n    plan.addStage({\n      local: ['init'],\n      global: ['pres', 'abvs', 'blws', 'psts', 'haln', 'dist', 'abvm', 'blwm', 'calt', 'clig']\n    });\n\n    // Setup the indic config for the selected script\n    plan.unicodeScript = Script.fromOpenType(plan.script);\n    plan.indicConfig = INDIC_CONFIGS[plan.unicodeScript] || INDIC_CONFIGS.Default;\n    plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== '2';\n\n    // TODO: turn off kern (Khmer) and liga features.\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Decompose split matras\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      let d = INDIC_DECOMPOSITIONS[codepoint] || decompositions[codepoint];\n      if (d) {\n        let decomposed = d.map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\n\nfunction indicCategory(glyph) {\n  return trie.get(glyph.codePoints[0]) >> 8;\n}\n\nfunction indicPosition(glyph) {\n  return 1 << (trie.get(glyph.codePoints[0]) & 0xff);\n}\n\nclass IndicInfo {\n  constructor(category, position, syllableType, syllable) {\n    this.category = category;\n    this.position = position;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\n\nfunction setupSyllables(font, glyphs) {\n  let syllable = 0;\n  let last = 0;\n  for (let [start, end, tags] of stateMachine.match(glyphs.map(indicCategory))) {\n    if (start > last) {\n      ++syllable;\n      for (let i = last; i < start; i++) {\n        glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n      }\n    }\n\n    ++syllable;\n\n    // Create shaper info\n    for (let i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new IndicInfo(\n        1 << indicCategory(glyphs[i]),\n        indicPosition(glyphs[i]),\n        tags[0],\n        syllable\n      );\n    }\n\n    last = end + 1;\n  }\n\n  if (last < glyphs.length) {\n    ++syllable;\n    for (let i = last; i < glyphs.length; i++) {\n      glyphs[i].shaperInfo = new IndicInfo(CATEGORIES.X, POSITIONS.End, 'non_indic_cluster', syllable);\n    }\n  }\n}\n\nfunction isConsonant(glyph) {\n  return glyph.shaperInfo.category & CONSONANT_FLAGS;\n}\n\nfunction isJoiner(glyph) {\n  return glyph.shaperInfo.category & JOINER_FLAGS;\n}\n\nfunction isHalantOrCoeng(glyph) {\n  return glyph.shaperInfo.category & HALANT_OR_COENG_FLAGS;\n}\n\nfunction wouldSubstitute(glyphs, feature) {\n  for (let glyph of glyphs) {\n    glyph.features = {[feature]: true};\n  }\n\n  let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;\n  GSUB.applyFeatures([feature], glyphs);\n\n  return glyphs.length === 1;\n}\n\nfunction consonantPosition(font, consonant, virama) {\n  let glyphs = [virama, consonant, virama];\n  if (wouldSubstitute(glyphs.slice(0, 2), 'blwf') || wouldSubstitute(glyphs.slice(1, 3), 'blwf')) {\n    return POSITIONS.Below_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pstf') || wouldSubstitute(glyphs.slice(1, 3), 'pstf')) {\n    return POSITIONS.Post_C;\n  } else if (wouldSubstitute(glyphs.slice(0, 2), 'pref') || wouldSubstitute(glyphs.slice(1, 3), 'pref')) {\n    return POSITIONS.Post_C;\n  }\n\n  return POSITIONS.Base_C;\n}\n\nfunction initialReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n  let virama = font.glyphForCodePoint(indicConfig.virama).id;\n  if (virama) {\n    let info = new GlyphInfo(font, virama, [indicConfig.virama]);\n    for (let i = 0; i < glyphs.length; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        glyphs[i].shaperInfo.position = consonantPosition(font, glyphs[i].copy(), info);\n      }\n    }\n  }\n\n  for (let start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    let {category, syllableType} = glyphs[start].shaperInfo;\n\n    if (syllableType === 'symbol_cluster' || syllableType === 'non_indic_cluster') {\n      continue;\n    }\n\n    if (syllableType === 'broken_cluster' && dottedCircle) {\n      let g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = new IndicInfo(\n        1 << indicCategory(g),\n        indicPosition(g),\n        glyphs[start].shaperInfo.syllableType,\n        glyphs[start].shaperInfo.syllable\n      );\n\n      // Insert after possible Repha.\n      let i = start;\n      while (i < end && glyphs[i].shaperInfo.category === CATEGORIES.Repha) {\n        i++;\n      }\n\n      glyphs.splice(i++, 0, g);\n      end++;\n    }\n\n    // 1. Find base consonant:\n    //\n    // The shaping engine finds the base consonant of the syllable, using the\n    // following algorithm: starting from the end of the syllable, move backwards\n    // until a consonant is found that does not have a below-base or post-base\n    // form (post-base forms have to follow below-base forms), or that is not a\n    // pre-base reordering Ra, or arrive at the first consonant. The consonant\n    // stopped at will be the base.\n\n    let base = end;\n    let limit = start;\n    let hasReph = false;\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    if (indicConfig.rephPos !== POSITIONS.Ra_To_Become_Reph &&\n      features.rphf &&\n      start + 3 <= end && (\n        (indicConfig.rephMode === 'Implicit' && !isJoiner(glyphs[start + 2])) ||\n        (indicConfig.rephMode === 'Explicit' && glyphs[start + 2].shaperInfo.category === CATEGORIES.ZWJ)\n      )\n    ) {\n      // See if it matches the 'rphf' feature.\n      let g = [glyphs[start].copy(), glyphs[start + 1].copy(), glyphs[start + 2].copy()];\n      if (wouldSubstitute(g.slice(0, 2), 'rphf') || (indicConfig.rephMode === 'Explicit' && wouldSubstitute(g, 'rphf'))) {\n        limit += 2;\n        while (limit < end && isJoiner(glyphs[limit])) {\n          limit++;\n        }\n        base = start;\n        hasReph = true;\n      }\n    } else if (indicConfig.rephMode === 'Log_Repha' && glyphs[start].shaperInfo.category === CATEGORIES.Repha) {\n      limit++;\n      while (limit < end && isJoiner(glyphs[limit])) {\n        limit++;\n      }\n      base = start;\n      hasReph = true;\n    }\n\n    switch (indicConfig.basePos) {\n      case 'Last': {\n        // starting from the end of the syllable, move backwards\n        let i = end;\n        let seenBelow = false;\n\n        do {\n          let info = glyphs[--i].shaperInfo;\n\n          // until a consonant is found\n          if (isConsonant(glyphs[i])) {\n            // that does not have a below-base or post-base form\n            // (post-base forms have to follow below-base forms),\n            if (info.position !== POSITIONS.Below_C && (info.position !== POSITIONS.Post_C || seenBelow)) {\n              base = i;\n              break;\n            }\n\n            // or that is not a pre-base reordering Ra,\n            //\n            // IMPLEMENTATION NOTES:\n            //\n            // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped\n            // by the logic above already.\n            //\n\n            // or arrive at the first consonant. The consonant stopped at will\n            // be the base.\n            if (info.position === POSITIONS.Below_C) {\n              seenBelow = true;\n            }\n\n            base = i;\n          } else if (start < i && info.category === CATEGORIES.ZWJ && glyphs[i - 1].shaperInfo.category === CATEGORIES.H) {\n            // A ZWJ after a Halant stops the base search, and requests an explicit\n            // half form.\n            // A ZWJ before a Halant, requests a subjoined form instead, and hence\n            // search continues.  This is particularly important for Bengali\n            // sequence Ra,H,Ya that should form Ya-Phalaa by subjoining Ya.\n            break;\n          }\n        } while (i > limit);\n        break;\n      }\n\n      case 'First': {\n        // The first consonant is always the base.\n        base = start;\n\n        // Mark all subsequent consonants as below.\n        for (let i = base + 1; i < end; i++) {\n          if (isConsonant(glyphs[i])) {\n            glyphs[i].shaperInfo.position = POSITIONS.Below_C;\n          }\n        }\n      }\n    }\n\n    // If the syllable starts with Ra + Halant (in a script that has Reph)\n    // and has more than one consonant, Ra is excluded from candidates for\n    // base consonants.\n    //\n    //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)\n    if (hasReph && base === start && limit - base <= 2) {\n      hasReph = false;\n    }\n\n    // 2. Decompose and reorder Matras:\n    //\n    // Each matra and any syllable modifier sign in the cluster are moved to the\n    // appropriate position relative to the consonant(s) in the cluster. The\n    // shaping engine decomposes two- or three-part matras into their constituent\n    // parts before any repositioning. Matra characters are classified by which\n    // consonant in a conjunct they have affinity for and are reordered to the\n    // following positions:\n    //\n    //   o Before first half form in the syllable\n    //   o After subjoined consonants\n    //   o After post-form consonant\n    //   o After main consonant (for above marks)\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // The normalize() routine has already decomposed matras for us, so we don't\n    // need to worry about that.\n\n    // 3.  Reorder marks to canonical order:\n    //\n    // Adjacent nukta and halant or nukta and vedic sign are always repositioned\n    // if necessary, so that the nukta is first.\n    //\n    // IMPLEMENTATION NOTES:\n    //\n    // We don't need to do this: the normalize() routine already did this for us.\n\n    // Reorder characters\n\n    for (let i = start; i < base; i++) {\n      let info = glyphs[i].shaperInfo;\n      info.position = Math.min(POSITIONS.Pre_C, info.position);\n    }\n\n    if (base < end) {\n      glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n    }\n\n    // Mark final consonants.  A final consonant is one appearing after a matra,\n    // like in Khmer.\n    for (let i = base + 1; i < end; i++) {\n      if (glyphs[i].shaperInfo.category === CATEGORIES.M) {\n        for (let j = i + 1; j < end; j++) {\n          if (isConsonant(glyphs[j])) {\n            glyphs[j].shaperInfo.position = POSITIONS.Final_C;\n            break;\n          }\n        }\n        break;\n      }\n    }\n\n    // Handle beginning Ra\n    if (hasReph) {\n      glyphs[start].shaperInfo.position = POSITIONS.Ra_To_Become_Reph;\n    }\n\n    // For old-style Indic script tags, move the first post-base Halant after\n    // last consonant.\n    //\n    // Reports suggest that in some scripts Uniscribe does this only if there\n    // is *not* a Halant after last consonant already (eg. Kannada), while it\n    // does it unconditionally in other scripts (eg. Malayalam).  We don't\n    // currently know about other scripts, so we single out Malayalam for now.\n    //\n    // Kannada test case:\n    // U+0C9A,U+0CCD,U+0C9A,U+0CCD\n    // With some versions of Lohit Kannada.\n    // https://bugs.freedesktop.org/show_bug.cgi?id=59118\n    //\n    // Malayalam test case:\n    // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D\n    // With lohit-ttf-20121122/Lohit-Malayalam.ttf\n    if (plan.isOldSpec) {\n      let disallowDoubleHalants = plan.unicodeScript !== 'Malayalam';\n      for (let i = base + 1; i < end; i++) {\n        if (glyphs[i].shaperInfo.category === CATEGORIES.H) {\n          let j;\n          for (j = end - 1; j > i; j--) {\n            if (isConsonant(glyphs[j]) || (disallowDoubleHalants && glyphs[j].shaperInfo.category === CATEGORIES.H)) {\n              break;\n            }\n          }\n\n          if (glyphs[j].shaperInfo.category !== CATEGORIES.H && j > i) {\n            // Move Halant to after last consonant.\n            let t = glyphs[i];\n            glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));\n            glyphs[j] = t;\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Attach misc marks to previous char to move with them.\n    let lastPos = POSITIONS.Start;\n    for (let i = start; i < end; i++) {\n      let info = glyphs[i].shaperInfo;\n      if (info.category & (JOINER_FLAGS | CATEGORIES.N | CATEGORIES.RS | CATEGORIES.CM | HALANT_OR_COENG_FLAGS & info.category)) {\n        info.position = lastPos;\n        if (info.category === CATEGORIES.H && info.position === POSITIONS.Pre_M) {\n          // Uniscribe doesn't move the Halant with Left Matra.\n          // TEST: U+092B,U+093F,U+094DE\n          // We follow.  This is important for the Sinhala\n          // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA\n          // where U+0DD9 is a left matra and U+0DCA is the virama.\n          // We don't want to move the virama with the left matra.\n          // TEST: U+0D9A,U+0DDA\n          for (let j = i; j > start; j--) {\n            if (glyphs[j - 1].shaperInfo.position !== POSITIONS.Pre_M) {\n              info.position = glyphs[j - 1].shaperInfo.position;\n              break;\n            }\n          }\n        }\n      } else if (info.position !== POSITIONS.SMVD) {\n        lastPos = info.position;\n      }\n    }\n\n    // For post-base consonants let them own anything before them\n    // since the last consonant or matra.\n    let last = base;\n    for (let i = base + 1; i < end; i++) {\n      if (isConsonant(glyphs[i])) {\n        for (let j = last + 1; j < i; j++) {\n          if (glyphs[j].shaperInfo.position < POSITIONS.SMVD) {\n            glyphs[j].shaperInfo.position = glyphs[i].shaperInfo.position;\n          }\n        }\n        last = i;\n      } else if (glyphs[i].shaperInfo.category === CATEGORIES.M) {\n        last = i;\n      }\n    }\n\n    let arr = glyphs.slice(start, end);\n    arr.sort((a, b) => a.shaperInfo.position - b.shaperInfo.position);\n    glyphs.splice(start, arr.length, ...arr);\n\n    // Find base again\n    for (let i = start; i < end; i++) {\n      if (glyphs[i].shaperInfo.position === POSITIONS.Base_C) {\n        base = i;\n        break;\n      }\n    }\n\n    // Setup features now\n\n    // Reph\n    for (let i = start; i < end && glyphs[i].shaperInfo.position === POSITIONS.Ra_To_Become_Reph; i++) {\n      glyphs[i].features.rphf = true;\n    }\n\n    // Pre-base\n    let blwf = !plan.isOldSpec && indicConfig.blwfMode === 'Pre_And_Post';\n    for (let i = start; i < base; i++) {\n      glyphs[i].features.half = true;\n      if (blwf) {\n        glyphs[i].features.blwf = true;\n      }\n    }\n\n    // Post-base\n    for (let i = base + 1; i < end; i++) {\n      glyphs[i].features.abvf = true;\n      glyphs[i].features.pstf = true;\n      glyphs[i].features.blwf = true;\n    }\n\n    if (plan.isOldSpec && plan.unicodeScript === 'Devanagari') {\n      // Old-spec eye-lash Ra needs special handling.  From the\n      // spec:\n      //\n      // \"The feature 'below-base form' is applied to consonants\n      // having below-base forms and following the base consonant.\n      // The exception is vattu, which may appear below half forms\n      // as well as below the base glyph. The feature 'below-base\n      // form' will be applied to all such occurrences of Ra as well.\"\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+0915\n      // with Sanskrit 2003 font.\n      //\n      // However, note that Ra,Halant,ZWJ is the correct way to\n      // request eyelash form of Ra, so we wouldbn't inhibit it\n      // in that sequence.\n      //\n      // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915\n      for (let i = start; i + 1 < base; i++) {\n        if (glyphs[i].shaperInfo.category === CATEGORIES.Ra &&\n          glyphs[i + 1].shaperInfo.category === CATEGORIES.H &&\n          (i + 1 === base || glyphs[i + 2].shaperInfo.category === CATEGORIES.ZWJ)\n        ) {\n          glyphs[i].features.blwf = true;\n          glyphs[i + 1].features.blwf = true;\n        }\n      }\n    }\n\n    let prefLen = 2;\n    if (features.pref && base + prefLen < end) {\n      // Find a Halant,Ra sequence and mark it for pre-base reordering processing.\n      for (let i = base + 1; i + prefLen - 1 < end; i++) {\n        let g = [glyphs[i].copy(), glyphs[i + 1].copy()];\n        if (wouldSubstitute(g, 'pref')) {\n          for (let j = 0; j < prefLen; j++) {\n            glyphs[i++].features.pref = true;\n          }\n\n          // Mark the subsequent stuff with 'cfar'.  Used in Khmer.\n          // Read the feature spec.\n          // This allows distinguishing the following cases with MS Khmer fonts:\n          // U+1784,U+17D2,U+179A,U+17D2,U+1782\n          // U+1784,U+17D2,U+1782,U+17D2,U+179A\n          if (features.cfar) {\n            for (; i < end; i++) {\n              glyphs[i].features.cfar = true;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply ZWJ/ZWNJ effects\n    for (let i = start + 1; i < end; i++) {\n      if (isJoiner(glyphs[i])) {\n        let nonJoiner = glyphs[i].shaperInfo.category === CATEGORIES.ZWNJ;\n        let j = i;\n\n        do {\n          j--;\n\n          // ZWJ/ZWNJ should disable CJCT.  They do that by simply\n          // being there, since we don't skip them for the CJCT\n          // feature (ie. F_MANUAL_ZWJ)\n\n          // A ZWNJ disables HALF.\n          if (nonJoiner) {\n            delete glyphs[j].features.half;\n          }\n        } while (j > start && !isConsonant(glyphs[j]));\n      }\n    }\n  }\n}\n\nfunction finalReordering(font, glyphs, plan) {\n  let indicConfig = plan.indicConfig;\n  let features = font._layoutEngine.engine.GSUBProcessor.features;\n\n  for (let start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    // 4. Final reordering:\n    //\n    // After the localized forms and basic shaping forms GSUB features have been\n    // applied (see below), the shaping engine performs some final glyph\n    // reordering before applying all the remaining font features to the entire\n    // cluster.\n\n    let tryPref = !!features.pref;\n\n    // Find base again\n    let base = start;\n    for (; base < end; base++) {\n      if (glyphs[base].shaperInfo.position >= POSITIONS.Base_C) {\n        if (tryPref && base + 1 < end) {\n          for (let i = base + 1; i < end; i++) {\n            if (glyphs[i].features.pref) {\n              if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {\n                // Ok, this was a 'pref' candidate but didn't form any.\n                // Base is around here...\n                base = i;\n                while (base < end && isHalantOrCoeng(glyphs[base])) {\n                  base++;\n                }\n                glyphs[base].shaperInfo.position = POSITIONS.BASE_C;\n                tryPref = false;\n              }\n              break;\n            }\n          }\n        }\n\n        // For Malayalam, skip over unformed below- (but NOT post-) forms.\n        if (plan.unicodeScript === 'Malayalam') {\n          for (let i = base + 1; i < end; i++) {\n            while (i < end && isJoiner(glyphs[i])) {\n              i++;\n            }\n\n            if (i === end || !isHalantOrCoeng(glyphs[i])) {\n              break;\n            }\n\n            i++; // Skip halant.\n            while (i < end && isJoiner(glyphs[i])) {\n              i++;\n            }\n\n            if (i < end && isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === POSITIONS.Below_C) {\n              base = i;\n              glyphs[base].shaperInfo.position = POSITIONS.Base_C;\n            }\n          }\n        }\n\n        if (start < base && glyphs[base].shaperInfo.position > POSITIONS.Base_C) {\n          base--;\n        }\n        break;\n      }\n    }\n\n    if (base === end && start < base && glyphs[base - 1].shaperInfo.category === CATEGORIES.ZWJ) {\n      base--;\n    }\n\n    if (base < end) {\n      while (start < base && glyphs[base].shaperInfo.category & (CATEGORIES.N | HALANT_OR_COENG_FLAGS)) {\n        base--;\n      }\n    }\n\n    // o Reorder matras:\n    //\n    // If a pre-base matra character had been reordered before applying basic\n    // features, the glyph can be moved closer to the main consonant based on\n    // whether half-forms had been formed. Actual position for the matra is\n    // defined as “after last standalone halant glyph, after initial matra\n    // position and before the main consonant”. If ZWJ or ZWNJ follow this\n    // halant, position is moved after it.\n    //\n\n    if (start + 1 < end && start < base) { // Otherwise there can't be any pre-base matra characters.\n      // If we lost track of base, alas, position before last thingy.\n      let newPos = base === end ? base - 2 : base - 1;\n\n      // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n      // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n      // We want to position matra after them.\n      if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n        while (newPos > start && !(glyphs[newPos].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n          newPos--;\n        }\n\n        // If we found no Halant we are done.\n        // Otherwise only proceed if the Halant does\n        // not belong to the Matra itself!\n        if (isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n          // If ZWJ or ZWNJ follow this halant, position is moved after it.\n          if (newPos + 1 < end && isJoiner(glyphs[newPos + 1])) {\n            newPos++;\n          }\n        } else {\n          newPos = start; // No move.\n        }\n      }\n\n      if (start < newPos && glyphs[newPos].shaperInfo.position !== POSITIONS.Pre_M) {\n        // Now go see if there's actually any matras...\n        for (let i = newPos; i > start; i--) {\n          if (glyphs[i - 1].shaperInfo.position === POSITIONS.Pre_M) {\n            let oldPos = i - 1;\n            if (oldPos < base && base <= newPos) { // Shouldn't actually happen.\n              base--;\n            }\n\n            let tmp = glyphs[oldPos];\n            glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));\n            glyphs[newPos] = tmp;\n\n            newPos--;\n          }\n        }\n      }\n    }\n\n    // o Reorder reph:\n    //\n    // Reph’s original position is always at the beginning of the syllable,\n    // (i.e. it is not reordered at the character reordering stage). However,\n    // it will be reordered according to the basic-forms shaping results.\n    // Possible positions for reph, depending on the script, are; after main,\n    // before post-base consonant forms, and after post-base consonant forms.\n\n    // Two cases:\n    //\n    // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then\n    //   we should only move it if the sequence ligated to the repha form.\n    //\n    // - If repha is encoded separately and in the logical position, we should only\n    //   move it if it did NOT ligate.  If it ligated, it's probably the font trying\n    //   to make it work without the reordering.\n    if (start + 1 < end &&\n      glyphs[start].shaperInfo.position === POSITIONS.Ra_To_Become_Reph &&\n      (glyphs[start].shaperInfo.category === CATEGORIES.Repha) !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)\n    ) {\n      let newRephPos;\n      let rephPos = indicConfig.rephPos;\n      let found = false;\n\n      // 1. If reph should be positioned after post-base consonant forms,\n      //    proceed to step 5.\n      if (rephPos !== POSITIONS.After_Post) {\n        //  2. If the reph repositioning class is not after post-base: target\n        //     position is after the first explicit halant glyph between the\n        //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ\n        //     are following this halant, position is moved after it. If such\n        //     position is found, this is the target position. Otherwise,\n        //     proceed to the next step.\n        //\n        //     Note: in old-implementation fonts, where classifications were\n        //     fixed in shaping engine, there was no case where reph position\n        //     will be found on this step.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n\n        // 3. If reph should be repositioned after the main consonant: find the\n        //    first consonant not ligated with main, or find the first\n        //    consonant that is not a potential pre-base reordering Ra.\n        if (!found && rephPos === POSITIONS.After_Main) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= POSITIONS.After_Main) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n\n        // 4. If reph should be positioned before post-base consonant, find\n        //    first post-base classified consonant not ligated with main. If no\n        //    consonant is found, the target position should be before the\n        //    first matra, syllable modifier sign or vedic sign.\n        //\n        // This is our take on what step 4 is trying to say (and failing, BADLY).\n        if (!found && rephPos === POSITIONS.After_Sub) {\n          newRephPos = base;\n          while (newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & (POSITIONS.Post_C | POSITIONS.After_Post | POSITIONS.SMVD))) {\n            newRephPos++;\n          }\n\n          found = newRephPos < end;\n        }\n      }\n\n      //  5. If no consonant is found in steps 3 or 4, move reph to a position\n      //     immediately before the first post-base matra, syllable modifier\n      //     sign or vedic sign that has a reordering class after the intended\n      //     reph position. For example, if the reordering position for reph\n      //     is post-main, it will skip above-base matras that also have a\n      //     post-main position.\n      if (!found) {\n        // Copied from step 2.\n        newRephPos = start + 1;\n        while (newRephPos < base && !isHalantOrCoeng(glyphs[newRephPos])) {\n          newRephPos++;\n        }\n\n        if (newRephPos < base && isHalantOrCoeng(glyphs[newRephPos])) {\n          // ->If ZWJ or ZWNJ are following this halant, position is moved after it.\n          if (newRephPos + 1 < base && isJoiner(glyphs[newRephPos + 1])) {\n            newRephPos++;\n          }\n\n          found = true;\n        }\n      }\n\n      // 6. Otherwise, reorder reph to the end of the syllable.\n      if (!found) {\n        newRephPos = end - 1;\n        while (newRephPos > start && glyphs[newRephPos].shaperInfo.position === POSITIONS.SMVD) {\n          newRephPos--;\n        }\n\n        // If the Reph is to be ending up after a Matra,Halant sequence,\n        // position it before that Halant so it can interact with the Matra.\n        // However, if it's a plain Consonant,Halant we shouldn't do that.\n        // Uniscribe doesn't do this.\n        // TEST: U+0930,U+094D,U+0915,U+094B,U+094D\n        if (isHalantOrCoeng(glyphs[newRephPos])) {\n          for (let i = base + 1; i < newRephPos; i++) {\n            if (glyphs[i].shaperInfo.category === CATEGORIES.M) {\n              newRephPos--;\n            }\n          }\n        }\n      }\n\n      let reph = glyphs[start];\n      glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));\n      glyphs[newRephPos] = reph;\n\n      if (start < base && base <= newRephPos) {\n        base--;\n      }\n    }\n\n    // o Reorder pre-base reordering consonants:\n    //\n    // If a pre-base reordering consonant is found, reorder it according to\n    // the following rules:\n    if (tryPref && base + 1 < end) {\n      for (let i = base + 1; i < end; i++) {\n        if (glyphs[i].features.pref) {\n           // 1. Only reorder a glyph produced by substitution during application\n           //    of the <pref> feature. (Note that a font may shape a Ra consonant with\n           //    the feature generally but block it in certain contexts.)\n\n          // Note: We just check that something got substituted.  We don't check that\n          // the <pref> feature actually did it...\n          //\n          // Reorder pref only if it ligated.\n          if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {\n            // 2. Try to find a target position the same way as for pre-base matra.\n            //    If it is found, reorder pre-base consonant glyph.\n            //\n            // 3. If position is not found, reorder immediately before main\n            //    consonant.\n            let newPos = base;\n\n            // Malayalam / Tamil do not have \"half\" forms or explicit virama forms.\n            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.\n            // We want to position matra after them.\n            if (plan.unicodeScript !== 'Malayalam' && plan.unicodeScript !== 'Tamil') {\n              while (newPos > start && !(glyphs[newPos - 1].shaperInfo.category & (CATEGORIES.M | HALANT_OR_COENG_FLAGS))) {\n                newPos--;\n              }\n\n              // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a\n              // split matra, it should be reordered to *before* the left part of such matra.\n              if (newPos > start && glyphs[newPos - 1].shaperInfo.category === CATEGORIES.M) {\n                let oldPos = i;\n                for (let j = base + 1; j < oldPos; j++) {\n                  if (glyphs[j].shaperInfo.category === CATEGORIES.M) {\n                    newPos--;\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (newPos > start && isHalantOrCoeng(glyphs[newPos - 1])) {\n              // -> If ZWJ or ZWNJ follow this halant, position is moved after it.\n              if (newPos < end && isJoiner(glyphs[newPos])) {\n                newPos++;\n              }\n            }\n\n            let oldPos = i;\n            let tmp = glyphs[oldPos];\n            glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));\n            glyphs[newPos] = tmp;\n\n            if (newPos <= base && base < oldPos) {\n              base++;\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    // Apply 'init' to the Left Matra if it's a word start.\n    if (glyphs[start].shaperInfo.position === POSITIONS.Pre_M && (!start || !/Cf|Mn/.test(unicode.getCategory(glyphs[start - 1].codePoints[0])))) {\n      glyphs[start].features.init = true;\n    }\n  }\n}\n\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\n","{\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],\"accepting\":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"symbol_cluster\"],[],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"broken_cluster\"],[\"symbol_cluster\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[\"standalone_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[],[],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[],[],[\"consonant_syllable\",\"broken_cluster\"],[\"consonant_syllable\",\"broken_cluster\"],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[],[],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"consonant_syllable\"],[],[\"consonant_syllable\"],[\"consonant_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"vowel_syllable\"],[],[\"vowel_syllable\"],[\"vowel_syllable\"],[\"broken_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"standalone_cluster\"],[\"standalone_cluster\"],[],[\"consonant_syllable\"],[\"vowel_syllable\"],[\"standalone_cluster\"]]}","{\"categories\":[\"O\",\"IND\",\"S\",\"GB\",\"B\",\"FM\",\"CGJ\",\"VMAbv\",\"VMPst\",\"VAbv\",\"VPst\",\"CMBlw\",\"VPre\",\"VBlw\",\"H\",\"VMBlw\",\"CMAbv\",\"MBlw\",\"CS\",\"R\",\"SUB\",\"MPst\",\"MPre\",\"FAbv\",\"FPst\",\"FBlw\",\"SMAbv\",\"SMBlw\",\"VMPre\",\"ZWNJ\",\"ZWJ\",\"WJ\",\"VS\",\"N\",\"HN\",\"MAbv\"],\"decompositions\":{\"2507\":[2503,2494],\"2508\":[2503,2519],\"2888\":[2887,2902],\"2891\":[2887,2878],\"2892\":[2887,2903],\"3018\":[3014,3006],\"3019\":[3015,3006],\"3020\":[3014,3031],\"3144\":[3142,3158],\"3264\":[3263,3285],\"3271\":[3270,3285],\"3272\":[3270,3286],\"3274\":[3270,3266],\"3275\":[3270,3266,3285],\"3402\":[3398,3390],\"3403\":[3399,3390],\"3404\":[3398,3415],\"3546\":[3545,3530],\"3548\":[3545,3535],\"3549\":[3545,3535,3530],\"3550\":[3545,3551],\"3635\":[3661,3634],\"3763\":[3789,3762],\"3955\":[3953,3954],\"3957\":[3953,3956],\"3958\":[4018,3968],\"3959\":[4018,3953,3968],\"3960\":[4019,3968],\"3961\":[4019,3953,3968],\"3969\":[3953,3968],\"6971\":[6970,6965],\"6973\":[6972,6965],\"6976\":[6974,6965],\"6977\":[6975,6965],\"6979\":[6978,6965],\"69934\":[69937,69927],\"69935\":[69938,69927],\"70475\":[70471,70462],\"70476\":[70471,70487],\"70843\":[70841,70842],\"70844\":[70841,70832],\"70846\":[70841,70845],\"71098\":[71096,71087],\"71099\":[71097,71087]},\"stateTable\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,23,0,0,2,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,23,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,46,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,23,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,46,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],\"accepting\":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"tags\":[[],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"broken_cluster\"],[\"independent_cluster\"],[\"symbol_cluster\"],[\"symbol_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"virama_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"broken_cluster\"],[\"broken_cluster\"],[\"numeral_cluster\"],[\"number_joiner_terminated_cluster\"],[\"standard_cluster\"],[\"standard_cluster\"],[\"numeral_cluster\"]]}","// Cateories used in the OpenType spec:\n// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx\nexport const CATEGORIES = {\n  X: 1 << 0,\n  C: 1 << 1,\n  V: 1 << 2,\n  N: 1 << 3,\n  H: 1 << 4,\n  ZWNJ: 1 << 5,\n  ZWJ: 1 << 6,\n  M: 1 << 7,\n  SM: 1 << 8,\n  VD: 1 << 9,\n  A: 1 << 10,\n  Placeholder: 1 << 11,\n  Dotted_Circle: 1 << 12,\n  RS: 1 << 13,    // Register Shifter, used in Khmer OT spec.\n  Coeng: 1 << 14, // Khmer-style Virama.\n  Repha: 1 << 15, // Atomically-encoded logical or visual repha.\n  Ra: 1 << 16,\n  CM: 1 << 17,    // Consonant-Medial.\n  Symbol: 1 << 18 // Avagraha, etc that take marks (SM,A,VD).\n};\n\n// Visual positions in a syllable from left to right.\nexport const POSITIONS = {\n  Start: 1 << 0,\n\n  Ra_To_Become_Reph: 1 << 1,\n  Pre_M: 1 << 2,\n  Pre_C: 1 << 3,\n\n  Base_C: 1 << 4,\n  After_Main: 1 << 5,\n\n  Above_C: 1 << 6,\n\n  Before_Sub: 1 << 7,\n  Below_C: 1 << 8,\n  After_Sub: 1 << 9,\n\n  Before_Post: 1 << 10,\n  Post_C: 1 << 11,\n  After_Post: 1 << 12,\n\n  Final_C: 1 << 13,\n  SMVD: 1 << 14,\n\n  End: 1 << 15\n};\n\nexport const CONSONANT_FLAGS = CATEGORIES.C | CATEGORIES.Ra | CATEGORIES.CM | CATEGORIES.V | CATEGORIES.Placeholder | CATEGORIES.Dotted_Circle;\nexport const JOINER_FLAGS = CATEGORIES.ZWJ | CATEGORIES.ZWNJ;\nexport const HALANT_OR_COENG_FLAGS = CATEGORIES.H | CATEGORIES.Coeng;\n\nexport const INDIC_CONFIGS = {\n  Default: {\n    hasOldSpec: false,\n    virama: 0,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Devanagari: {\n    hasOldSpec: true,\n    virama: 0x094D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Bengali: {\n    hasOldSpec: true,\n    virama: 0x09CD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gurmukhi: {\n    hasOldSpec: true,\n    virama: 0x0A4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Sub,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Gujarati: {\n    hasOldSpec: true,\n    virama: 0x0ACD,\n    basePos: 'Last',\n    rephPos: POSITIONS.Before_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Oriya: {\n    hasOldSpec: true,\n    virama: 0x0B4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Tamil: {\n    hasOldSpec: true,\n    virama: 0x0BCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  Telugu: {\n    hasOldSpec: true,\n    virama: 0x0C4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Explicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Kannada: {\n    hasOldSpec: true,\n    virama: 0x0CCD,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Post,\n    rephMode: 'Implicit',\n    blwfMode: 'Post_Only'\n  },\n\n  Malayalam: {\n    hasOldSpec: true,\n    virama: 0x0D4D,\n    basePos: 'Last',\n    rephPos: POSITIONS.After_Main,\n    rephMode: 'Log_Repha',\n    blwfMode: 'Pre_And_Post'\n  },\n\n  // Handled by UniversalShaper\n  // Sinhala: {\n  //   hasOldSpec: false,\n  //   virama: 0x0DCA,\n  //   basePos: 'Last_Sinhala',\n  //   rephPos: POSITIONS.After_Main,\n  //   rephMode: 'Explicit',\n  //   blwfMode: 'Pre_And_Post'\n  // },\n\n  Khmer: {\n    hasOldSpec: false,\n    virama: 0x17D2,\n    basePos: 'First',\n    rephPos: POSITIONS.Ra_To_Become_Reph,\n    rephMode: 'Vis_Repha',\n    blwfMode: 'Pre_And_Post'\n  }\n};\n\n// Additional decompositions that aren't in Unicode\nexport const INDIC_DECOMPOSITIONS = {\n  // Khmer\n  0x17BE: [0x17C1, 0x17BE],\n  0x17BF: [0x17C1, 0x17BF],\n  0x17C0: [0x17C1, 0x17C0],\n  0x17C4: [0x17C1, 0x17C4],\n  0x17C5: [0x17C1, 0x17C5]\n};\n","import DefaultShaper from './DefaultShaper';\nimport StateMachine from 'dfa';\nimport UnicodeTrie from 'unicode-trie';\nimport GlyphInfo from '../GlyphInfo';\nimport useData from './use.json';\n\nconst {categories, decompositions} = useData;\nconst trie = new UnicodeTrie(require('fs').readFileSync(__dirname + '/use.trie'));\nconst stateMachine = new StateMachine(useData);\n\n/**\n * This shaper is an implementation of the Universal Shaping Engine, which\n * uses Unicode data to shape a number of scripts without a dedicated shaping engine.\n * See https://www.microsoft.com/typography/OpenTypeDev/USE/intro.htm.\n */\nexport default class UniversalShaper extends DefaultShaper {\n  static zeroMarkWidths = 'BEFORE_GPOS';\n  static planFeatures(plan) {\n    plan.addStage(setupSyllables);\n\n    // Default glyph pre-processing group\n    plan.addStage(['locl', 'ccmp', 'nukt', 'akhn']);\n\n    // Reordering group\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['rphf'], false);\n    plan.addStage(recordRphf);\n    plan.addStage(clearSubstitutionFlags);\n    plan.addStage(['pref']);\n    plan.addStage(recordPref);\n\n    // Orthographic unit shaping group\n    plan.addStage(['rkrf', 'abvf', 'blwf', 'half', 'pstf', 'vatu', 'cjct']);\n    plan.addStage(reorder);\n\n    // Topographical features\n    // Scripts that need this are handled by the Arabic shaper, not implemented here for now.\n    // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);\n\n    // Standard topographic presentation and positional feature application\n    plan.addStage(['abvs', 'blws', 'pres', 'psts', 'dist', 'abvm', 'blwm']);\n  }\n\n  static assignFeatures(plan, glyphs) {\n    // Decompose split vowels\n    // TODO: do this in a more general unicode normalizer\n    for (let i = glyphs.length - 1; i >= 0; i--) {\n      let codepoint = glyphs[i].codePoints[0];\n      if (decompositions[codepoint]) {\n        let decomposed = decompositions[codepoint].map(c => {\n          let g = plan.font.glyphForCodePoint(c);\n          return new GlyphInfo(plan.font, g.id, [c], glyphs[i].features);\n        });\n\n        glyphs.splice(i, 1, ...decomposed);\n      }\n    }\n  }\n}\n\nfunction useCategory(glyph) {\n  return trie.get(glyph.codePoints[0]);\n}\n\nclass USEInfo {\n  constructor(category, syllableType, syllable) {\n    this.category = category;\n    this.syllableType = syllableType;\n    this.syllable = syllable;\n  }\n}\n\nfunction setupSyllables(font, glyphs) {\n  let syllable = 0;\n  for (let [start, end, tags] of stateMachine.match(glyphs.map(useCategory))) {\n    ++syllable;\n\n    // Create shaper info\n    for (let i = start; i <= end; i++) {\n      glyphs[i].shaperInfo = new USEInfo(categories[useCategory(glyphs[i])], tags[0], syllable);\n    }\n\n    // Assign rphf feature\n    let limit = glyphs[start].shaperInfo.category === 'R' ? 1 : Math.min(3, end - start);\n    for (let i = start; i < start + limit; i++) {\n      glyphs[i].features.rphf = true;\n    }\n  }\n}\n\nfunction clearSubstitutionFlags(font, glyphs) {\n  for (let glyph of glyphs) {\n    glyph.substituted = false;\n  }\n}\n\nfunction recordRphf(font, glyphs) {\n  for (let glyph of glyphs) {\n    if (glyph.substituted && glyph.features.rphf) {\n      // Mark a substituted repha.\n      glyph.shaperInfo.category = 'R';\n    }\n  }\n}\n\nfunction recordPref(font, glyphs) {\n  for (let glyph of glyphs) {\n    if (glyph.substituted) {\n      // Mark a substituted pref as VPre, as they behave the same way.\n      glyph.shaperInfo.category = 'VPre';\n    }\n  }\n}\n\nfunction reorder(font, glyphs) {\n  let dottedCircle = font.glyphForCodePoint(0x25cc).id;\n\n  for (let start = 0, end = nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = nextSyllable(glyphs, start)) {\n    let i, j;\n    let info = glyphs[start].shaperInfo;\n    let type = info.syllableType;\n\n    // Only a few syllable types need reordering.\n    if (type !== 'virama_terminated_cluster' && type !== 'standard_cluster' && type !== 'broken_cluster') {\n      continue;\n    }\n\n    // Insert a dotted circle glyph in broken clusters.\n    if (type === 'broken_cluster' && dottedCircle) {\n      let g = new GlyphInfo(font, dottedCircle, [0x25cc]);\n      g.shaperInfo = info;\n\n      // Insert after possible Repha.\n      for (i = start; i < end && glyphs[i].shaperInfo.category === 'R'; i++);\n      glyphs.splice(++i, 0, g);\n      end++;\n    }\n\n    // Move things forward.\n    if (info.category === 'R' && end - start > 1) {\n      // Got a repha. Reorder it to after first base, before first halant.\n      for (i = start + 1; i < end; i++) {\n        info = glyphs[i].shaperInfo;\n        if (isBase(info) || isHalant(glyphs[i])) {\n          // If we hit a halant, move before it; otherwise it's a base: move to it's\n          // place, and shift things in between backward.\n          if (isHalant(glyphs[i])) {\n            i--;\n          }\n\n          glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);\n          break;\n        }\n      }\n    }\n\n    // Move things back.\n    for (i = start, j = end; i < end; i++) {\n      info = glyphs[i].shaperInfo;\n      if (isBase(info) || isHalant(glyphs[i])) {\n        // If we hit a halant, move after it; otherwise it's a base: move to it's\n        // place, and shift things in between backward.\n        j = isHalant(glyphs[i]) ? i + 1 : i;\n      } else if ((info.category === 'VPre' || info.category === 'VMPre') && j < i) {\n        glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));\n      }\n    }\n  }\n}\n\nfunction nextSyllable(glyphs, start) {\n  if (start >= glyphs.length) return start;\n  let syllable = glyphs[start].shaperInfo.syllable;\n  while (++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);\n  return start;\n}\n\nfunction isHalant(glyph) {\n  return glyph.shaperInfo.category === 'H' && !glyph.isLigated;\n}\n\nfunction isBase(info) {\n  return info.category === 'B' || info.category === 'GB';\n}\n","import OTProcessor from './OTProcessor';\nimport GlyphInfo from './GlyphInfo';\n\nexport default class GSUBProcessor extends OTProcessor {\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1: { // Single Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        let glyph = this.glyphIterator.cur;\n        switch (table.version) {\n          case 1:\n            glyph.id = (glyph.id + table.deltaGlyphID) & 0xffff;\n            break;\n\n          case 2:\n            glyph.id = table.substitute.get(index);\n            break;\n        }\n\n        return true;\n      }\n\n      case 2: { // Multiple Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index !== -1) {\n          let sequence = table.sequences.get(index);\n\n          if (sequence.length === 0) {\n            // If the sequence length is zero, delete the glyph.\n            // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.\n            this.glyphs.splice(this.glyphIterator.index, 1);\n            return true;\n          }\n\n          this.glyphIterator.cur.id = sequence[0];\n          this.glyphIterator.cur.ligatureComponent = 0;\n\n          let features = this.glyphIterator.cur.features;\n          let curGlyph = this.glyphIterator.cur;\n          let replacement = sequence.slice(1).map((gid, i) => {\n            let glyph = new GlyphInfo(this.font, gid, undefined, features);\n            glyph.shaperInfo = curGlyph.shaperInfo;\n            glyph.isLigated = curGlyph.isLigated;\n            glyph.ligatureComponent = i + 1;\n            glyph.substituted = true;\n            glyph.isMultiplied = true;\n            return glyph;\n          });\n\n          this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);\n          return true;\n        }\n\n        return false;\n      }\n\n      case 3: { // Alternate Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index !== -1) {\n          let USER_INDEX = 0; // TODO\n          this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];\n          return true;\n        }\n\n        return false;\n      }\n\n      case 4: { // Ligature Substitution\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        for (let ligature of table.ligatureSets.get(index)) {\n          let matched = this.sequenceMatchIndices(1, ligature.components);\n          if (!matched) {\n            continue;\n          }\n\n          let curGlyph = this.glyphIterator.cur;\n\n          // Concatenate all of the characters the new ligature will represent\n          let characters = curGlyph.codePoints.slice();\n          for (let index of matched) {\n            characters.push(...this.glyphs[index].codePoints);\n          }\n\n          // Create the replacement ligature glyph\n          let ligatureGlyph = new GlyphInfo(this.font, ligature.glyph, characters, curGlyph.features);\n          ligatureGlyph.shaperInfo = curGlyph.shaperInfo;\n          ligatureGlyph.isLigated = true;\n          ligatureGlyph.substituted = true;\n\n          // From Harfbuzz:\n          // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave\n          //   the ligature to keep its old ligature id.  This will allow it to attach to\n          //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,\n          //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a\n          //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature\n          //   later, we don't want them to lose their ligature id/component, otherwise\n          //   GPOS will fail to correctly position the mark ligature on top of the\n          //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343\n          //\n          // - If a ligature is formed of components that some of which are also ligatures\n          //   themselves, and those ligature components had marks attached to *their*\n          //   components, we have to attach the marks to the new ligature component\n          //   positions!  Now *that*'s tricky!  And these marks may be following the\n          //   last component of the whole sequence, so we should loop forward looking\n          //   for them and update them.\n          //\n          //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a\n          //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature\n          //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature\n          //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to\n          //   the new ligature with a component value of 2.\n          //\n          //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633\n          let isMarkLigature = curGlyph.isMark;\n          for (let i = 0; i < matched.length && isMarkLigature; i++) {\n            isMarkLigature = this.glyphs[matched[i]].isMark;\n          }\n\n          ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;\n\n          let lastLigID = curGlyph.ligatureID;\n          let lastNumComps = curGlyph.codePoints.length;\n          let curComps = lastNumComps;\n          let idx = this.glyphIterator.index + 1;\n\n          // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.\n          // This allows GPOS to attach marks to the correct ligature components.\n          for (let matchIndex of matched) {\n            // Don't assign new ligature components for mark ligatures (see above)\n            if (isMarkLigature) {\n              idx = matchIndex;\n            } else {\n              while (idx < matchIndex) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);\n                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;\n                this.glyphs[idx].ligatureComponent = ligatureComponent;\n                idx++;\n              }\n            }\n\n            lastLigID = this.glyphs[idx].ligatureID;\n            lastNumComps = this.glyphs[idx].codePoints.length;\n            curComps += lastNumComps;\n            idx++; // skip base glyph\n          }\n\n          // Adjust ligature components for any marks following\n          if (lastLigID && !isMarkLigature) {\n            for (let i = idx; i < this.glyphs.length; i++) {\n              if (this.glyphs[i].ligatureID === lastLigID) {\n                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i].ligatureComponent || 1, lastNumComps);\n                this.glyphs[i].ligatureComponent = ligatureComponent;\n              } else {\n                break;\n              }\n            }\n          }\n\n          // Delete the matched glyphs, and replace the current glyph with the ligature glyph\n          for (let i = matched.length - 1; i >= 0; i--) {\n            this.glyphs.splice(matched[i], 1);\n          }\n\n          this.glyphs[this.glyphIterator.index] = ligatureGlyph;\n          return true;\n        }\n\n        return false;\n      }\n\n      case 5: // Contextual Substitution\n        return this.applyContext(table);\n\n      case 6: // Chaining Contextual Substitution\n        return this.applyChainingContext(table);\n\n      case 7: // Extension Substitution\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(`GSUB lookupType ${lookupType} is not supported`);\n    }\n  }\n}\n","import OTProcessor from './OTProcessor';\n\nexport default class GPOSProcessor extends OTProcessor {\n  applyPositionValue(sequenceIndex, value) {\n    let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];\n    if (value.xAdvance != null) {\n      position.xAdvance += value.xAdvance;\n    }\n\n    if (value.yAdvance != null) {\n      position.yAdvance += value.yAdvance;\n    }\n\n    if (value.xPlacement != null) {\n      position.xOffset += value.xPlacement;\n    }\n\n    if (value.yPlacement != null) {\n      position.yOffset += value.yPlacement;\n    }\n\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (value.xPlaDevice) {\n        position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);\n      }\n\n      if (value.yPlaDevice) {\n        position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);\n      }\n\n      if (value.xAdvDevice) {\n        position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);\n      }\n\n      if (value.yAdvDevice) {\n        position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);\n      }\n    }\n\n    // TODO: device tables\n  }\n\n  applyLookup(lookupType, table) {\n    switch (lookupType) {\n      case 1: { // Single positioning value\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        switch (table.version) {\n          case 1:\n            this.applyPositionValue(0, table.value);\n            break;\n\n          case 2:\n            this.applyPositionValue(0, table.values.get(index));\n            break;\n        }\n\n        return true;\n      }\n\n      case 2: { // Pair Adjustment Positioning\n        let nextGlyph = this.glyphIterator.peek();\n        if (!nextGlyph) {\n          return false;\n        }\n\n        let index = this.coverageIndex(table.coverage);\n        if (index === -1) {\n          return false;\n        }\n\n        switch (table.version) {\n          case 1: // Adjustments for glyph pairs\n            let set = table.pairSets.get(index);\n\n            for (let pair of set) {\n              if (pair.secondGlyph === nextGlyph.id) {\n                this.applyPositionValue(0, pair.value1);\n                this.applyPositionValue(1, pair.value2);\n                return true;\n              }\n            }\n\n            return false;\n\n          case 2: // Class pair adjustment\n            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);\n            let class2 = this.getClassID(nextGlyph.id, table.classDef2);\n            if (class1 === -1 || class2 === -1) {\n              return false;\n            }\n\n            var pair = table.classRecords.get(class1).get(class2);\n            this.applyPositionValue(0, pair.value1);\n            this.applyPositionValue(1, pair.value2);\n            return true;\n        }\n      }\n\n      case 3: { // Cursive Attachment Positioning\n        let nextIndex = this.glyphIterator.peekIndex();\n        let nextGlyph = this.glyphs[nextIndex];\n        if (!nextGlyph) {\n          return false;\n        }\n\n        let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];\n        if (!curRecord || !curRecord.exitAnchor) {\n          return false;\n        }\n\n        let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];\n        if (!nextRecord || !nextRecord.entryAnchor) {\n          return false;\n        }\n\n        let entry = this.getAnchor(nextRecord.entryAnchor);\n        let exit = this.getAnchor(curRecord.exitAnchor);\n\n        let cur = this.positions[this.glyphIterator.index];\n        let next = this.positions[nextIndex];\n        let d;\n\n        switch (this.direction) {\n          case 'ltr':\n            cur.xAdvance = exit.x + cur.xOffset;\n\n            d = entry.x + next.xOffset;\n            next.xAdvance -= d;\n            next.xOffset -= d;\n            break;\n\n          case 'rtl':\n            d = exit.x + cur.xOffset;\n            cur.xAdvance -= d;\n            cur.xOffset -= d;\n            next.xAdvance = entry.x + next.xOffset;\n            break;\n        }\n\n        if (this.glyphIterator.flags.rightToLeft) {\n          this.glyphIterator.cur.cursiveAttachment = nextIndex;\n          cur.yOffset = entry.y - exit.y;\n        } else {\n          nextGlyph.cursiveAttachment = this.glyphIterator.index;\n          cur.yOffset = exit.y - entry.y;\n        }\n\n        return true;\n      }\n\n      case 4: { // Mark to base positioning\n        let markIndex = this.coverageIndex(table.markCoverage);\n        if (markIndex === -1) {\n          return false;\n        }\n\n        // search backward for a base glyph\n        let baseGlyphIndex = this.glyphIterator.index;\n        while (--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));\n\n        if (baseGlyphIndex < 0) {\n          return false;\n        }\n\n        let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);\n        if (baseIndex === -1) {\n          return false;\n        }\n\n        let markRecord = table.markArray[markIndex];\n        let baseAnchor = table.baseArray[baseIndex][markRecord.class];\n        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n        return true;\n      }\n\n      case 5: { // Mark to ligature positioning\n        let markIndex = this.coverageIndex(table.markCoverage);\n        if (markIndex === -1) {\n          return false;\n        }\n\n        // search backward for a base glyph\n        let baseGlyphIndex = this.glyphIterator.index;\n        while (--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);\n\n        if (baseGlyphIndex < 0) {\n          return false;\n        }\n\n        let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);\n        if (ligIndex === -1) {\n          return false;\n        }\n\n        let ligAttach = table.ligatureArray[ligIndex];\n        let markGlyph = this.glyphIterator.cur;\n        let ligGlyph = this.glyphs[baseGlyphIndex];\n        let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && (markGlyph.ligatureComponent > 0)\n          ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1\n          : ligGlyph.codePoints.length - 1;\n\n        let markRecord = table.markArray[markIndex];\n        let baseAnchor = ligAttach[compIndex][markRecord.class];\n        this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);\n        return true;\n      }\n\n      case 6: { // Mark to mark positioning\n        let mark1Index = this.coverageIndex(table.mark1Coverage);\n        if (mark1Index === -1) {\n          return false;\n        }\n\n        // get the previous mark to attach to\n        let prevIndex = this.glyphIterator.peekIndex(-1);\n        let prev = this.glyphs[prevIndex];\n        if (!prev || !prev.isMark) {\n          return false;\n        }\n\n        let cur = this.glyphIterator.cur;\n\n        // The following logic was borrowed from Harfbuzz\n        let good = false;\n        if (cur.ligatureID === prev.ligatureID) {\n          if (!cur.ligatureID) { // Marks belonging to the same base\n            good = true;\n          } else if (cur.ligatureComponent === prev.ligatureComponent) { // Marks belonging to the same ligature component\n            good = true;\n          }\n        } else {\n          // If ligature ids don't match, it may be the case that one of the marks\n          // itself is a ligature, in which case match.\n          if ((cur.ligatureID && !cur.ligatureComponent) || (prev.ligatureID && !prev.ligatureComponent)) {\n            good = true;\n          }\n        }\n\n        if (!good) {\n          return false;\n        }\n\n        let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);\n        if (mark2Index === -1) {\n          return false;\n        }\n\n        let markRecord = table.mark1Array[mark1Index];\n        let baseAnchor = table.mark2Array[mark2Index][markRecord.class];\n        this.applyAnchor(markRecord, baseAnchor, prevIndex);\n        return true;\n      }\n\n      case 7: // Contextual positioning\n        return this.applyContext(table);\n\n      case 8: // Chaining contextual positioning\n        return this.applyChainingContext(table);\n\n      case 9: // Extension positioning\n        return this.applyLookup(table.lookupType, table.extension);\n\n      default:\n        throw new Error(`Unsupported GPOS table: ${lookupType}`);\n    }\n  }\n\n  applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {\n    let baseCoords = this.getAnchor(baseAnchor);\n    let markCoords = this.getAnchor(markRecord.markAnchor);\n\n    let basePos = this.positions[baseGlyphIndex];\n    let markPos = this.positions[this.glyphIterator.index];\n\n    markPos.xOffset = baseCoords.x - markCoords.x;\n    markPos.yOffset = baseCoords.y - markCoords.y;\n    this.glyphIterator.cur.markAttachment = baseGlyphIndex;\n  }\n\n  getAnchor(anchor) {\n    // TODO: contour point, device tables\n    let x = anchor.xCoordinate;\n    let y = anchor.yCoordinate;\n\n    // Adjustments for font variations\n    let variationProcessor = this.font._variationProcessor;\n    let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;\n    if (variationProcessor && variationStore) {\n      if (anchor.xDeviceTable) {\n        x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);\n      }\n\n      if (anchor.yDeviceTable) {\n        y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);\n      }\n    }\n\n    return { x, y };\n  }\n\n  applyFeatures(userFeatures, glyphs, advances) {\n    super.applyFeatures(userFeatures, glyphs, advances);\n\n    for (var i = 0; i < this.glyphs.length; i++) {\n      this.fixCursiveAttachment(i);\n    }\n\n    this.fixMarkAttachment();\n  }\n\n  fixCursiveAttachment(i) {\n    let glyph = this.glyphs[i];\n    if (glyph.cursiveAttachment != null) {\n      let j = glyph.cursiveAttachment;\n\n      glyph.cursiveAttachment = null;\n      this.fixCursiveAttachment(j);\n\n      this.positions[i].yOffset += this.positions[j].yOffset;\n    }\n  }\n\n  fixMarkAttachment() {\n    for (let i = 0; i < this.glyphs.length; i++) {\n      let glyph = this.glyphs[i];\n      if (glyph.markAttachment != null) {\n        let j = glyph.markAttachment;\n\n        this.positions[i].xOffset += this.positions[j].xOffset;\n        this.positions[i].yOffset += this.positions[j].yOffset;\n\n        if (this.direction === 'ltr') {\n          for (let k = j; k < i; k++) {\n            this.positions[i].xOffset -= this.positions[k].xAdvance;\n            this.positions[i].yOffset -= this.positions[k].yAdvance;\n          }\n        } else {\n          for (let k = j + 1; k < i + 1; k++) {\n            this.positions[i].xOffset += this.positions[k].xAdvance;\n            this.positions[i].yOffset += this.positions[k].yAdvance;\n          }\n        }\n      }\n    }\n  }\n}\n","import Glyph from './Glyph';\nimport Path from './Path';\nimport BBox from './BBox';\nimport r from 'restructure';\n\n// The header for both simple and composite glyphs\nlet GlyfHeader = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin:             r.int16,\n  yMin:             r.int16,\n  xMax:             r.int16,\n  yMax:             r.int16\n});\n\n// Flags for simple glyphs\nconst ON_CURVE        = 1 << 0;\nconst X_SHORT_VECTOR  = 1 << 1;\nconst Y_SHORT_VECTOR  = 1 << 2;\nconst REPEAT          = 1 << 3;\nconst SAME_X          = 1 << 4;\nconst SAME_Y          = 1 << 5;\n\n// Flags for composite glyphs\nconst ARG_1_AND_2_ARE_WORDS     = 1 << 0;\nconst ARGS_ARE_XY_VALUES        = 1 << 1;\nconst ROUND_XY_TO_GRID          = 1 << 2;\nconst WE_HAVE_A_SCALE           = 1 << 3;\nconst MORE_COMPONENTS           = 1 << 5;\nconst WE_HAVE_AN_X_AND_Y_SCALE  = 1 << 6;\nconst WE_HAVE_A_TWO_BY_TWO      = 1 << 7;\nconst WE_HAVE_INSTRUCTIONS      = 1 << 8;\nconst USE_MY_METRICS            = 1 << 9;\nconst OVERLAP_COMPOUND          = 1 << 10;\nconst SCALED_COMPONENT_OFFSET   = 1 << 11;\nconst UNSCALED_COMPONENT_OFFSET = 1 << 12;\n\n// Represents a point in a simple glyph\nexport class Point {\n  constructor(onCurve, endContour, x = 0, y = 0) {\n    this.onCurve = onCurve;\n    this.endContour = endContour;\n    this.x = x;\n    this.y = y;\n  }\n\n  copy() {\n    return new Point(this.onCurve, this.endContour, this.x, this.y);\n  }\n}\n\n// Represents a component in a composite glyph\nclass Component {\n  constructor(glyphID, dx, dy) {\n    this.glyphID = glyphID;\n    this.dx = dx;\n    this.dy = dy;\n    this.pos = 0;\n    this.scaleX = this.scaleY = 1;\n    this.scale01 = this.scale10 = 0;\n  }\n}\n\n/**\n * Represents a TrueType glyph.\n */\nexport default class TTFGlyph extends Glyph {\n  type = 'TTF';\n\n  // Parses just the glyph header and returns the bounding box\n  _getCBox(internal) {\n    // We need to decode the glyph if variation processing is requested,\n    // so it's easier just to recompute the path's cbox after decoding.\n    if (this._font._variationProcessor && !internal) {\n      return this.path.cbox;\n    }\n\n    let stream = this._font._getTableStream('glyf');\n    stream.pos += this._font.loca.offsets[this.id];\n    let glyph = GlyfHeader.decode(stream);\n\n    let cbox = new BBox(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);\n    return Object.freeze(cbox);\n  }\n\n  // Parses a single glyph coordinate\n  _parseGlyphCoord(stream, prev, short, same) {\n    if (short) {\n      var val = stream.readUInt8();\n      if (!same) {\n        val = -val;\n      }\n\n      val += prev;\n    } else {\n      if (same) {\n        var val = prev;\n      } else {\n        var val = prev + stream.readInt16BE();\n      }\n    }\n\n    return val;\n  }\n\n  // Decodes the glyph data into points for simple glyphs,\n  // or components for composite glyphs\n  _decode() {\n    let glyfPos = this._font.loca.offsets[this.id];\n    let nextPos = this._font.loca.offsets[this.id + 1];\n\n    // Nothing to do if there is no data for this glyph\n    if (glyfPos === nextPos) { return null; }\n\n    let stream = this._font._getTableStream('glyf');\n    stream.pos += glyfPos;\n    let startPos = stream.pos;\n\n    let glyph = GlyfHeader.decode(stream);\n\n    if (glyph.numberOfContours > 0) {\n      this._decodeSimple(glyph, stream);\n\n    } else if (glyph.numberOfContours < 0) {\n      this._decodeComposite(glyph, stream, startPos);\n    }\n\n    return glyph;\n  }\n\n  _decodeSimple(glyph, stream) {\n    // this is a simple glyph\n    glyph.points = [];\n\n    let endPtsOfContours = new r.Array(r.uint16, glyph.numberOfContours).decode(stream);\n    glyph.instructions = new r.Array(r.uint8, r.uint16).decode(stream);\n\n    let flags = [];\n    let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;\n\n    while (flags.length < numCoords) {\n      var flag = stream.readUInt8();\n      flags.push(flag);\n\n      // check for repeat flag\n      if (flag & REPEAT) {\n        let count = stream.readUInt8();\n        for (let j = 0; j < count; j++) {\n          flags.push(flag);\n        }\n      }\n    }\n\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      let point = new Point(!!(flag & ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);\n      glyph.points.push(point);\n    }\n\n    let px = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & X_SHORT_VECTOR, flag & SAME_X);\n    }\n\n    let py = 0;\n    for (var i = 0; i < flags.length; i++) {\n      var flag = flags[i];\n      glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & Y_SHORT_VECTOR, flag & SAME_Y);\n    }\n\n    if (this._font._variationProcessor) {\n      let points = glyph.points.slice();\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.slice(-4);\n    }\n\n    return;\n  }\n\n  _decodeComposite(glyph, stream, offset = 0) {\n    // this is a composite glyph\n    glyph.components = [];\n    let haveInstructions = false;\n    let flags = MORE_COMPONENTS;\n\n    while (flags & MORE_COMPONENTS) {\n      flags = stream.readUInt16BE();\n      let gPos = stream.pos - offset;\n      let glyphID = stream.readUInt16BE();\n      if (!haveInstructions) {\n        haveInstructions = (flags & WE_HAVE_INSTRUCTIONS) !== 0;\n      }\n\n      if (flags & ARG_1_AND_2_ARE_WORDS) {\n        var dx = stream.readInt16BE();\n        var dy = stream.readInt16BE();\n      } else {\n        var dx = stream.readInt8();\n        var dy = stream.readInt8();\n      }\n\n      var component = new Component(glyphID, dx, dy);\n      component.pos = gPos;\n\n      if (flags & WE_HAVE_A_SCALE) {\n        // fixed number with 14 bits of fraction\n        component.scaleX =\n        component.scaleY = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n\n      } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n        component.scaleX = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scaleY = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n\n      } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n        component.scaleX  = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scale01 = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scale10 = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n        component.scaleY  = ((stream.readUInt8() << 24) | (stream.readUInt8() << 16)) / 1073741824;\n      }\n\n      glyph.components.push(component);\n    }\n\n    if (this._font._variationProcessor) {\n      let points = [];\n      for (let j = 0; j < glyph.components.length; j++) {\n        var component = glyph.components[j];\n        points.push(new Point(true, true, component.dx, component.dy));\n      }\n\n      points.push(...this._getPhantomPoints(glyph));\n\n      this._font._variationProcessor.transformPoints(this.id, points);\n      glyph.phantomPoints = points.splice(-4, 4);\n\n      for (let i = 0; i < points.length; i++) {\n        let point = points[i];\n        glyph.components[i].dx = point.x;\n        glyph.components[i].dy = point.y;\n      }\n    }\n\n    return haveInstructions;\n  }\n\n  _getPhantomPoints(glyph) {\n    let cbox = this._getCBox(true);\n    if (this._metrics == null) {\n      this._metrics = Glyph.prototype._getMetrics.call(this, cbox);\n    }\n\n    let { advanceWidth, advanceHeight, leftBearing, topBearing } = this._metrics;\n\n    return [\n      new Point(false, true, glyph.xMin - leftBearing, 0),\n      new Point(false, true, glyph.xMin - leftBearing + advanceWidth, 0),\n      new Point(false, true, 0, glyph.yMax + topBearing),\n      new Point(false, true, 0, glyph.yMax + topBearing + advanceHeight)\n    ];\n  }\n\n  // Decodes font data, resolves composite glyphs, and returns an array of contours\n  _getContours() {\n    let glyph = this._decode();\n    if (!glyph) {\n      return [];\n    }\n\n    let points = [];\n\n    if (glyph.numberOfContours < 0) {\n      // resolve composite glyphs\n      for (let component of glyph.components) {\n        let contours = this._font.getGlyph(component.glyphID)._getContours();\n        for (let i = 0; i < contours.length; i++) {\n          let contour = contours[i];\n          for (let j = 0; j < contour.length; j++) {\n            let point = contour[j];\n            let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;\n            let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;\n            points.push(new Point(point.onCurve, point.endContour, x, y));\n          }\n        }\n      }\n    } else {\n      points = glyph.points || [];\n    }\n\n    // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table\n    if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {\n      this._metrics.advanceWidth  = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;\n      this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;\n      this._metrics.leftBearing   = glyph.xMin - glyph.phantomPoints[0].x;\n      this._metrics.topBearing    = glyph.phantomPoints[2].y - glyph.yMax;\n    }\n\n    let contours = [];\n    let cur = [];\n    for (let k = 0; k < points.length; k++) {\n      var point = points[k];\n      cur.push(point);\n      if (point.endContour) {\n        contours.push(cur);\n        cur = [];\n      }\n    }\n\n    return contours;\n  }\n\n  _getMetrics() {\n    if (this._metrics) {\n      return this._metrics;\n    }\n\n    let cbox = this._getCBox(true);\n    super._getMetrics(cbox);\n\n    if (this._font._variationProcessor && !this._font.HVAR) {\n      // No HVAR table, decode the glyph. This triggers recomputation of metrics.\n      this.path;\n    }\n\n    return this._metrics;\n  }\n\n  // Converts contours to a Path object that can be rendered\n  _getPath() {\n    let contours = this._getContours();\n    let path = new Path;\n\n    for (let i = 0; i < contours.length; i++) {\n      let contour = contours[i];\n      let firstPt = contour[0];\n      let lastPt = contour[contour.length - 1];\n      let start = 0;\n\n      if (firstPt.onCurve) {\n        // The first point will be consumed by the moveTo command, so skip in the loop\n        var curvePt = null;\n        start = 1;\n      } else {\n        if (lastPt.onCurve) {\n          // Start at the last point if the first point is off curve and the last point is on curve\n          firstPt = lastPt;\n        } else {\n          // Start at the middle if both the first and last points are off curve\n          firstPt = new Point(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);\n        }\n\n        var curvePt = firstPt;\n      }\n\n      path.moveTo(firstPt.x, firstPt.y);\n\n      for (let j = start; j < contour.length; j++) {\n        let pt = contour[j];\n        let prevPt = j === 0 ? firstPt : contour[j - 1];\n\n        if (prevPt.onCurve && pt.onCurve) {\n          path.lineTo(pt.x, pt.y);\n\n        } else if (prevPt.onCurve && !pt.onCurve) {\n          var curvePt = pt;\n\n        } else if (!prevPt.onCurve && !pt.onCurve) {\n          let midX = (prevPt.x + pt.x) / 2;\n          let midY = (prevPt.y + pt.y) / 2;\n          path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);\n          var curvePt = pt;\n\n        } else if (!prevPt.onCurve && pt.onCurve) {\n          path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);\n          var curvePt = null;\n\n        } else {\n          throw new Error(\"Unknown TTF path state\");\n        }\n      }\n\n      // Connect the first and last points\n      if (curvePt) {\n        path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);\n      }\n\n      path.closePath();\n    }\n\n    return path;\n  }\n}\n","import { cache } from '../decorators';\nimport Path from './Path';\nimport unicode from 'unicode-properties';\nimport StandardNames from './StandardNames';\n\n/**\n * Glyph objects represent a glyph in the font. They have various properties for accessing metrics and\n * the actual vector path the glyph represents, and methods for rendering the glyph to a graphics context.\n *\n * You do not create glyph objects directly. They are created by various methods on the font object.\n * There are several subclasses of the base Glyph class internally that may be returned depending\n * on the font format, but they all inherit from this class.\n */\nexport default class Glyph {\n  constructor(id, codePoints, font) {\n    /**\n     * The glyph id in the font\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * An array of unicode code points that are represented by this glyph.\n     * There can be multiple code points in the case of ligatures and other glyphs\n     * that represent multiple visual characters.\n     * @type {number[]}\n     */\n    this.codePoints = codePoints;\n    this._font = font;\n\n    // TODO: get this info from GDEF if available\n    this.isMark = this.codePoints.length > 0 && this.codePoints.every(unicode.isMark);\n    this.isLigature = this.codePoints.length > 1;\n  }\n\n  _getPath() {\n    return new Path();\n  }\n\n  _getCBox() {\n    return this.path.cbox;\n  }\n\n  _getBBox() {\n    return this.path.bbox;\n  }\n\n  _getTableMetrics(table) {\n    if (this.id < table.metrics.length) {\n      return table.metrics.get(this.id);\n    }\n\n    let metric = table.metrics.get(table.metrics.length - 1);\n    let res = {\n      advance: metric ? metric.advance : 0,\n      bearing: table.bearings.get(this.id - table.metrics.length) || 0\n    };\n\n    return res;\n  }\n\n  _getMetrics(cbox) {\n    if (this._metrics) { return this._metrics; }\n\n    let {advance:advanceWidth, bearing:leftBearing} = this._getTableMetrics(this._font.hmtx);\n\n    // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea\n    if (this._font.vmtx) {\n      var {advance:advanceHeight, bearing:topBearing} = this._getTableMetrics(this._font.vmtx);\n\n    } else {\n      let os2;\n      if (typeof cbox === 'undefined' || cbox === null) { ({ cbox } = this); }\n\n      if ((os2 = this._font['OS/2']) && os2.version > 0) {\n        var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);\n        var topBearing = os2.typoAscender - cbox.maxY;\n\n      } else {\n        let { hhea } = this._font;\n        var advanceHeight = Math.abs(hhea.ascent - hhea.descent);\n        var topBearing = hhea.ascent - cbox.maxY;\n      }\n    }\n\n    if (this._font._variationProcessor && this._font.HVAR) {\n      advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);\n    }\n\n    return this._metrics = { advanceWidth, advanceHeight, leftBearing, topBearing };\n  }\n\n  /**\n   * The glyph’s control box.\n   * This is often the same as the bounding box, but is faster to compute.\n   * Because of the way bezier curves are defined, some of the control points\n   * can be outside of the bounding box. Where `bbox` takes this into account,\n   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.\n   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)\n   * for a more detailed description.\n   *\n   * @type {BBox}\n   */\n  @cache\n  get cbox() {\n    return this._getCBox();\n  }\n\n  /**\n   * The glyph’s bounding box, i.e. the rectangle that encloses the\n   * glyph outline as tightly as possible.\n   * @type {BBox}\n   */\n  @cache\n  get bbox() {\n    return this._getBBox();\n  }\n\n  /**\n   * A vector Path object representing the glyph outline.\n   * @type {Path}\n   */\n  @cache\n  get path() {\n    // Cache the path so we only decode it once\n    // Decoding is actually performed by subclasses\n    return this._getPath();\n  }\n\n  /**\n   * Returns a path scaled to the given font size.\n   * @param {number} size\n   * @return {Path}\n   */\n  getScaledPath(size) {\n    let scale = 1 / this._font.unitsPerEm * size;\n    return this.path.scale(scale);\n  }\n\n  /**\n   * The glyph's advance width.\n   * @type {number}\n   */\n  @cache\n  get advanceWidth() {\n    return this._getMetrics().advanceWidth;\n  }\n\n  /**\n   * The glyph's advance height.\n   * @type {number}\n   */\n  @cache\n  get advanceHeight() {\n    return this._getMetrics().advanceHeight;\n  }\n\n  get ligatureCaretPositions() {}\n\n  _getName() {\n    let { post } = this._font;\n    if (!post) {\n      return null;\n    }\n\n    switch (post.version) {\n      case 1:\n        return StandardNames[this.id];\n\n      case 2:\n        let id = post.glyphNameIndex[this.id];\n        if (id < StandardNames.length) {\n          return StandardNames[id];\n        }\n\n        return post.names[id - StandardNames.length];\n\n      case 2.5:\n        return StandardNames[this.id + post.offsets[this.id]];\n\n      case 4:\n        return String.fromCharCode(post.map[this.id]);\n    }\n  }\n\n  /**\n   * The glyph's name\n   * @type {string}\n   */\n  @cache\n  get name() {\n    return this._getName();\n  }\n\n  /**\n   * Renders the glyph to the given graphics context, at the specified font size.\n   * @param {CanvasRenderingContext2d} ctx\n   * @param {number} size\n   */\n  render(ctx, size) {\n    ctx.save();\n\n    let scale = 1 / this._font.head.unitsPerEm * size;\n    ctx.scale(scale, scale);\n\n    let fn = this.path.toFunction();\n    fn(ctx);\n    ctx.fill();\n\n    ctx.restore();\n  }\n}\n","import BBox from './BBox';\n\nconst SVG_COMMANDS = {\n  moveTo: 'M',\n  lineTo: 'L',\n  quadraticCurveTo: 'Q',\n  bezierCurveTo: 'C',\n  closePath: 'Z'\n};\n\n/**\n * Path objects are returned by glyphs and represent the actual\n * vector outlines for each glyph in the font. Paths can be converted\n * to SVG path data strings, or to functions that can be applied to\n * render the path to a graphics context.\n */\nexport default class Path {\n  constructor() {\n    this.commands = [];\n    this._bbox = null;\n    this._cbox = null;\n  }\n\n  /**\n   * Compiles the path to a JavaScript function that can be applied with\n   * a graphics context in order to render the path.\n   * @return {string}\n   */\n  toFunction() {\n    return ctx => {\n      this.commands.forEach(c => {\n        return ctx[c.command].apply(ctx, c.args)\n      })\n    };\n  }\n\n  /**\n   * Converts the path to an SVG path data string\n   * @return {string}\n   */\n  toSVG() {\n    let cmds = this.commands.map(c => {\n      let args = c.args.map(arg => Math.round(arg * 100) / 100);\n      return `${SVG_COMMANDS[c.command]}${args.join(' ')}`;\n    });\n\n    return cmds.join('');\n  }\n\n  /**\n   * Gets the \"control box\" of a path.\n   * This is like the bounding box, but it includes all points including\n   * control points of bezier segments and is much faster to compute than\n   * the real bounding box.\n   * @type {BBox}\n   */\n  get cbox() {\n    if (!this._cbox) {\n      let cbox = new BBox;\n      for (let command of this.commands) {\n        for (let i = 0; i < command.args.length; i += 2) {\n          cbox.addPoint(command.args[i], command.args[i + 1]);\n        }\n      }\n\n      this._cbox = Object.freeze(cbox);\n    }\n\n    return this._cbox;\n  }\n\n  /**\n   * Gets the exact bounding box of the path by evaluating curve segments.\n   * Slower to compute than the control box, but more accurate.\n   * @type {BBox}\n   */\n  get bbox() {\n    if (this._bbox) {\n      return this._bbox;\n    }\n\n    let bbox = new BBox;\n    let cx = 0, cy = 0;\n\n    let f = t => (\n      Math.pow(1 - t, 3) * p0[i]\n        + 3 * Math.pow(1 - t, 2) * t * p1[i]\n        + 3 * (1 - t) * Math.pow(t, 2) * p2[i]\n        + Math.pow(t, 3) * p3[i]\n    );\n\n    for (let c of this.commands) {\n      switch (c.command) {\n        case 'moveTo':\n        case 'lineTo':\n          let [x, y] = c.args;\n          bbox.addPoint(x, y);\n          cx = x;\n          cy = y;\n          break;\n\n        case 'quadraticCurveTo':\n        case 'bezierCurveTo':\n          if (c.command === 'quadraticCurveTo') {\n            // http://fontforge.org/bezier.html\n            var [qp1x, qp1y, p3x, p3y] = c.args;\n            var cp1x = cx + 2 / 3 * (qp1x - cx);    // CP1 = QP0 + 2/3 * (QP1-QP0)\n            var cp1y = cy + 2 / 3 * (qp1y - cy);\n            var cp2x = p3x + 2 / 3 * (qp1x - p3x);  // CP2 = QP2 + 2/3 * (QP1-QP2)\n            var cp2y = p3y + 2 / 3 * (qp1y - p3y);\n          } else {\n            var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;\n          }\n\n          // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n          bbox.addPoint(p3x, p3y);\n\n          var p0 = [cx, cy];\n          var p1 = [cp1x, cp1y];\n          var p2 = [cp2x, cp2y];\n          var p3 = [p3x, p3y];\n\n          for (var i = 0; i <= 1; i++) {\n            let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n            let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n            c = 3 * p1[i] - 3 * p0[i];\n\n            if (a === 0) {\n              if (b === 0) {\n                continue;\n              }\n\n              let t = -c / b;\n              if (0 < t && t < 1) {\n                if (i === 0) {\n                  bbox.addPoint(f(t), bbox.maxY);\n                } else if (i === 1) {\n                  bbox.addPoint(bbox.maxX, f(t));\n                }\n              }\n\n              continue;\n            }\n\n            let b2ac = Math.pow(b, 2) - 4 * c * a;\n            if (b2ac < 0) {\n              continue;\n            }\n\n            let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n              if (i === 0) {\n                bbox.addPoint(f(t1), bbox.maxY);\n              } else if (i === 1) {\n                bbox.addPoint(bbox.maxX, f(t1));\n              }\n            }\n\n            let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n              if (i === 0) {\n                bbox.addPoint(f(t2), bbox.maxY);\n              } else if (i === 1) {\n                bbox.addPoint(bbox.maxX, f(t2));\n              }\n            }\n          }\n\n          cx = p3x;\n          cy = p3y;\n          break;\n      }\n    }\n\n    return this._bbox = Object.freeze(bbox);\n  }\n\n  /**\n   * Applies a mapping function to each point in the path.\n   * @param {function} fn\n   * @return {Path}\n   */\n  mapPoints(fn) {\n    let path = new Path;\n\n    for (let c of this.commands) {\n      let args = [];\n      for (let i = 0; i < c.args.length; i += 2) {\n        let [x, y] = fn(c.args[i], c.args[i + 1]);\n        args.push(x, y);\n      }\n\n      path[c.command](...args);\n    }\n\n    return path;\n  }\n\n  /**\n   * Transforms the path by the given matrix.\n   */\n  transform(m0, m1, m2, m3, m4, m5) {\n    return this.mapPoints((x, y) => {\n      const tx = m0 * x + m2 * y + m4;\n      const ty = m1 * x + m3 * y + m5;\n      return [tx, ty];\n    });\n  }\n\n  /**\n   * Translates the path by the given offset.\n   */\n  translate(x, y) {\n    return this.transform(1, 0, 0, 1, x, y);\n  }\n\n  /**\n   * Rotates the path by the given angle (in radians).\n   */\n  rotate(angle) {\n    let cos = Math.cos(angle);\n    let sin = Math.sin(angle);\n    return this.transform(cos, sin, -sin, cos, 0, 0);\n  }\n\n  /**\n   * Scales the path.\n   */\n  scale(scaleX, scaleY = scaleX) {\n    return this.transform(scaleX, 0, 0, scaleY, 0, 0);\n  }\n}\n\nfor (let command of ['moveTo', 'lineTo', 'quadraticCurveTo', 'bezierCurveTo', 'closePath']) {\n  Path.prototype[command] = function(...args) {\n    this._bbox = this._cbox = null;\n    this.commands.push({\n      command,\n      args\n    });\n\n    return this;\n  };\n}\n","export default [\n  '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',\n  'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',\n  'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',\n  'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n  'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',\n  'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',\n  'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',\n  'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',\n  'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',\n  'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',\n  'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',\n  'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',\n  'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',\n  'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',\n  'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',\n  'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',\n  'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',\n  'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',\n  'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',\n  'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',\n  'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',\n  'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',\n  'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',\n  'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'\n];\n","import Glyph from './Glyph';\nimport Path from './Path';\n\n/**\n * Represents an OpenType PostScript glyph, in the Compact Font Format.\n */\nexport default class CFFGlyph extends Glyph {\n  type = 'CFF';\n\n  _getName() {\n    if (this._font.CFF2) {\n      return super._getName();\n    }\n\n    return this._font['CFF '].getGlyphName(this.id);\n  }\n\n  bias(s) {\n    if (s.length < 1240) {\n      return 107;\n    } else if (s.length < 33900) {\n      return 1131;\n    } else {\n      return 32768;\n    }\n  }\n\n  _getPath() {\n    let cff = this._font.CFF2 || this._font['CFF '];\n    let { stream } = cff;\n    let str = cff.topDict.CharStrings[this.id];\n    let end = str.offset + str.length;\n    stream.pos = str.offset;\n\n    let path = new Path;\n    let stack = [];\n    let trans = [];\n\n    let width = null;\n    let nStems = 0;\n    let x = 0, y = 0;\n    let usedGsubrs;\n    let usedSubrs;\n    let open = false;\n\n    this._usedGsubrs = usedGsubrs = {};\n    this._usedSubrs = usedSubrs = {};\n\n    let gsubrs = cff.globalSubrIndex || [];\n    let gsubrsBias = this.bias(gsubrs);\n\n    let privateDict = cff.privateDictForGlyph(this.id) || {};\n    let subrs = privateDict.Subrs || [];\n    let subrsBias = this.bias(subrs);\n\n    let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;\n    let vsindex = privateDict.vsindex;\n    let variationProcessor = this._font._variationProcessor;\n\n    function checkWidth() {\n      if (width == null) {\n        width = stack.shift() + privateDict.nominalWidthX;\n      }\n    }\n\n    function parseStems() {\n      if (stack.length % 2 !== 0) {\n        checkWidth();\n      }\n\n      nStems += stack.length >> 1;\n      return stack.length = 0;\n    }\n\n    function moveTo(x, y) {\n      if (open) {\n        path.closePath();\n      }\n\n      path.moveTo(x, y);\n      open = true;\n    }\n\n    let parse = function () {\n      while (stream.pos < end) {\n        let op = stream.readUInt8();\n        if (op < 32) {\n          let index, subr, phase;\n          switch (op) {\n            case 1:  // hstem\n            case 3:  // vstem\n            case 18: // hstemhm\n            case 23: // vstemhm\n              parseStems();\n              break;\n\n            case 4: // vmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 5: // rlineto\n              while (stack.length >= 2) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n              break;\n\n            case 6: // hlineto\n            case 7: // vlineto\n              phase = op === 6;\n              while (stack.length >= 1) {\n                if (phase) {\n                  x += stack.shift();\n                } else {\n                  y += stack.shift();\n                }\n\n                path.lineTo(x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 8: // rrcurveto\n              while (stack.length > 0) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 10: // callsubr\n              index = stack.pop() + subrsBias;\n              subr = subrs[index];\n              if (subr) {\n                usedSubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 11: // return\n              if (cff.version >= 2) {\n                break;\n              }\n              return;\n\n            case 14: // endchar\n              if (cff.version >= 2) {\n                break;\n              }\n\n              if (stack.length > 0) {\n                checkWidth();\n              }\n\n              if (open) {\n                path.closePath();\n                open = false;\n              }\n              break;\n\n            case 15: { // vsindex\n              if (cff.version < 2) {\n                throw new Error('vsindex operator not supported in CFF v1');\n              }\n\n              vsindex = stack.pop();\n              break;\n            }\n\n            case 16: { // blend\n              if (cff.version < 2) {\n                throw new Error('blend operator not supported in CFF v1');\n              }\n\n              if (!variationProcessor) {\n                throw new Error('blend operator in non-variation font');\n              }\n\n              let blendVector = variationProcessor.getBlendVector(vstore, vsindex);\n              let numBlends = stack.pop();\n              let numOperands = numBlends * blendVector.length;\n              let delta = stack.length - numOperands;\n              let base = delta - numBlends;\n\n              for (let i = 0; i < numBlends; i++) {\n                let sum = stack[base + i];\n                for (let j = 0; j < blendVector.length; j++) {\n                  sum += blendVector[j] * stack[delta++];\n                }\n\n                stack[base + i] = sum;\n              }\n\n              while (numOperands--) {\n                stack.pop();\n              }\n\n              break;\n            }\n\n            case 19: // hintmask\n            case 20: // cntrmask\n              parseStems();\n              stream.pos += (nStems + 7) >> 3;\n              break;\n\n            case 21: // rmoveto\n              if (stack.length > 2) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 22: // hmoveto\n              if (stack.length > 1) {\n                checkWidth();\n              }\n\n              x += stack.shift();\n              moveTo(x, y);\n              break;\n\n            case 24: // rcurveline\n              while (stack.length >= 8) {\n                var c1x = x + stack.shift();\n                var c1y = y + stack.shift();\n                var c2x = c1x + stack.shift();\n                var c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n\n              x += stack.shift();\n              y += stack.shift();\n              path.lineTo(x, y);\n              break;\n\n            case 25: // rlinecurve\n              while (stack.length >= 8) {\n                x += stack.shift();\n                y += stack.shift();\n                path.lineTo(x, y);\n              }\n\n              var c1x = x + stack.shift();\n              var c1y = y + stack.shift();\n              var c2x = c1x + stack.shift();\n              var c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n              y = c2y + stack.shift();\n              path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              break;\n\n            case 26: // vvcurveto\n              if (stack.length % 2) {\n                x += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x;\n                c1y = y + stack.shift();\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x;\n                y = c2y + stack.shift();\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 27: // hhcurveto\n              if (stack.length % 2) {\n                y += stack.shift();\n              }\n\n              while (stack.length >= 4) {\n                c1x = x + stack.shift();\n                c1y = y;\n                c2x = c1x + stack.shift();\n                c2y = c1y + stack.shift();\n                x = c2x + stack.shift();\n                y = c2y;\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n              }\n              break;\n\n            case 28: // shortint\n              stack.push(stream.readInt16BE());\n              break;\n\n            case 29: // callgsubr\n              index = stack.pop() + gsubrsBias;\n              subr = gsubrs[index];\n              if (subr) {\n                usedGsubrs[index] = true;\n                var p = stream.pos;\n                var e = end;\n                stream.pos = subr.offset;\n                end = subr.offset + subr.length;\n                parse();\n                stream.pos = p;\n                end = e;\n              }\n              break;\n\n            case 30: // vhcurveto\n            case 31: // hvcurveto\n              phase = op === 31;\n              while (stack.length >= 4) {\n                if (phase) {\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  y = c2y + stack.shift();\n                  x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                } else {\n                  c1x = x;\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  x = c2x + stack.shift();\n                  y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                }\n\n                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);\n                phase = !phase;\n              }\n              break;\n\n            case 12:\n              op = stream.readUInt8();\n              switch (op) {\n                case 3: // and\n                  let a = stack.pop();\n                  let b = stack.pop();\n                  stack.push(a && b ? 1 : 0);\n                  break;\n\n                case 4: // or\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a || b ? 1 : 0);\n                  break;\n\n                case 5: // not\n                  a = stack.pop();\n                  stack.push(a ? 0 : 1);\n                  break;\n\n                case 9: // abs\n                  a = stack.pop();\n                  stack.push(Math.abs(a));\n                  break;\n\n                case 10: // add\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a + b);\n                  break;\n\n                case 11: // sub\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a - b);\n                  break;\n\n                case 12: // div\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a / b);\n                  break;\n\n                case 14: // neg\n                  a = stack.pop();\n                  stack.push(-a);\n                  break;\n\n                case 15: // eq\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a === b ? 1 : 0);\n                  break;\n\n                case 18: // drop\n                  stack.pop();\n                  break;\n\n                case 20: // put\n                  let val = stack.pop();\n                  let idx = stack.pop();\n                  trans[idx] = val;\n                  break;\n\n                case 21: // get\n                  idx = stack.pop();\n                  stack.push(trans[idx] || 0);\n                  break;\n\n                case 22: // ifelse\n                  let s1 = stack.pop();\n                  let s2 = stack.pop();\n                  let v1 = stack.pop();\n                  let v2 = stack.pop();\n                  stack.push(v1 <= v2 ? s1 : s2);\n                  break;\n\n                case 23: // random\n                  stack.push(Math.random());\n                  break;\n\n                case 24: // mul\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(a * b);\n                  break;\n\n                case 26: // sqrt\n                  a = stack.pop();\n                  stack.push(Math.sqrt(a));\n                  break;\n\n                case 27: // dup\n                  a = stack.pop();\n                  stack.push(a, a);\n                  break;\n\n                case 28: // exch\n                  a = stack.pop();\n                  b = stack.pop();\n                  stack.push(b, a);\n                  break;\n\n                case 29: // index\n                  idx = stack.pop();\n                  if (idx < 0) {\n                    idx = 0;\n                  } else if (idx > stack.length - 1) {\n                    idx = stack.length - 1;\n                  }\n\n                  stack.push(stack[idx]);\n                  break;\n\n                case 30: // roll\n                  let n = stack.pop();\n                  let j = stack.pop();\n\n                  if (j >= 0) {\n                    while (j > 0) {\n                      var t = stack[n - 1];\n                      for (let i = n - 2; i >= 0; i--) {\n                        stack[i + 1] = stack[i];\n                      }\n\n                      stack[0] = t;\n                      j--;\n                    }\n                  } else {\n                    while (j < 0) {\n                      var t = stack[0];\n                      for (let i = 0; i <= n; i++) {\n                        stack[i] = stack[i + 1];\n                      }\n\n                      stack[n - 1] = t;\n                      j++;\n                    }\n                  }\n                  break;\n\n                case 34: // hflex\n                  c1x = x + stack.shift();\n                  c1y = y;\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  let c3x = c2x + stack.shift();\n                  let c3y = c2y;\n                  let c4x = c3x + stack.shift();\n                  let c4y = c3y;\n                  let c5x = c4x + stack.shift();\n                  let c5y = c4y;\n                  let c6x = c5x + stack.shift();\n                  let c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 35: // flex\n                  let pts = [];\n\n                  for (let i = 0; i <= 5; i++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  stack.shift(); // fd\n                  break;\n\n                case 36: // hflex1\n                  c1x = x + stack.shift();\n                  c1y = y + stack.shift();\n                  c2x = c1x + stack.shift();\n                  c2y = c1y + stack.shift();\n                  c3x = c2x + stack.shift();\n                  c3y = c2y;\n                  c4x = c3x + stack.shift();\n                  c4y = c3y;\n                  c5x = c4x + stack.shift();\n                  c5y = c4y + stack.shift();\n                  c6x = c5x + stack.shift();\n                  c6y = c5y;\n                  x = c6x;\n                  y = c6y;\n\n                  path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);\n                  path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);\n                  break;\n\n                case 37: // flex1\n                  let startx = x;\n                  let starty = y;\n\n                  pts = [];\n                  for (let i = 0; i <= 4; i++) {\n                    x += stack.shift();\n                    y += stack.shift();\n                    pts.push(x, y);\n                  }\n\n                  if (Math.abs(x - startx) > Math.abs(y - starty)) { // horizontal\n                    x += stack.shift();\n                    y = starty;\n                  } else {\n                    x = startx;\n                    y += stack.shift();\n                  }\n\n                  pts.push(x, y);\n                  path.bezierCurveTo(...pts.slice(0, 6));\n                  path.bezierCurveTo(...pts.slice(6));\n                  break;\n\n                default:\n                  throw new Error(`Unknown op: 12 ${op}`);\n              }\n              break;\n\n            default:\n              throw new Error(`Unknown op: ${op}`);\n          }\n\n        } else if (op < 247) {\n          stack.push(op - 139);\n        } else if (op < 251) {\n          var b1 = stream.readUInt8();\n          stack.push((op - 247) * 256 + b1 + 108);\n        } else if (op < 255) {\n          var b1 = stream.readUInt8();\n          stack.push(-(op - 251) * 256 - b1 - 108);\n        } else {\n          stack.push(stream.readInt32BE() / 65536);\n        }\n      }\n    };\n\n    parse();\n\n    if (open) {\n      path.closePath();\n    }\n\n    return path;\n  }\n}\n","import TTFGlyph from './TTFGlyph';\nimport r from 'restructure';\n\nlet SBIXImage = new r.Struct({\n  originX: r.uint16,\n  originY: r.uint16,\n  type: new r.String(4),\n  data: new r.Buffer(t => t.parent.buflen - t._currentOffset)\n});\n\n/**\n * Represents a color (e.g. emoji) glyph in Apple's SBIX format.\n */\nexport default class SBIXGlyph extends TTFGlyph {\n  type = 'SBIX';\n\n  /**\n   * Returns an object representing a glyph image at the given point size.\n   * The object has a data property with a Buffer containing the actual image data,\n   * along with the image type, and origin.\n   *\n   * @param {number} size\n   * @return {object}\n   */\n  getImageForSize(size) {\n    for (let i = 0; i < this._font.sbix.imageTables.length; i++) {\n      var table = this._font.sbix.imageTables[i];\n      if (table.ppem >= size) { break; }\n    }\n\n    let offsets = table.imageOffsets;\n    let start = offsets[this.id];\n    let end = offsets[this.id + 1];\n\n    if (start === end) {\n      return null;\n    }\n\n    this._font.stream.pos = start;\n    return SBIXImage.decode(this._font.stream, {buflen: end - start});\n  }\n\n  render(ctx, size) {\n    let img = this.getImageForSize(size);\n    if (img != null) {\n      let scale = size / this._font.unitsPerEm;\n      ctx.image(img.data, {height: size, x: img.originX, y: (this.bbox.minY - img.originY) * scale});\n    }\n\n    if (this._font.sbix.flags.renderOutlines) {\n      super.render(ctx, size);\n    }\n  }\n}\n","import Glyph from './Glyph';\nimport BBox from './BBox';\n\nclass COLRLayer {\n  constructor(glyph, color) {\n    this.glyph = glyph;\n    this.color = color;\n  }\n}\n\n/**\n * Represents a color (e.g. emoji) glyph in Microsoft's COLR format.\n * Each glyph in this format contain a list of colored layers, each\n * of which  is another vector glyph.\n */\nexport default class COLRGlyph extends Glyph {\n  type = 'COLR';\n\n  _getBBox() {\n    let bbox = new BBox;\n    for (let i = 0; i < this.layers.length; i++) {\n      let layer = this.layers[i];\n      let b = layer.glyph.bbox;\n      bbox.addPoint(b.minX, b.minY);\n      bbox.addPoint(b.maxX, b.maxY);\n    }\n\n    return bbox;\n  }\n\n  /**\n   * Returns an array of objects containing the glyph and color for\n   * each layer in the composite color glyph.\n   * @type {object[]}\n   */\n  get layers() {\n    let cpal = this._font.CPAL;\n    let colr = this._font.COLR;\n    let low = 0;\n    let high = colr.baseGlyphRecord.length - 1;\n\n    while (low <= high) {\n      let mid = (low + high) >> 1;\n      var rec = colr.baseGlyphRecord[mid];\n\n      if (this.id < rec.gid) {\n        high = mid - 1;\n      } else if (this.id > rec.gid) {\n        low = mid + 1;\n      } else {\n        var baseLayer = rec;\n        break;\n      }\n    }\n\n    // if base glyph not found in COLR table,\n    // default to normal glyph from glyf or CFF\n    if (baseLayer == null) {\n      var g = this._font._getBaseGlyph(this.id);\n      var color = {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 255\n      };\n\n      return [new COLRLayer(g, color)];\n    }\n\n    // otherwise, return an array of all the layers\n    let layers = [];\n    for (let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++) {\n      var rec = colr.layerRecords[i];\n      var color = cpal.colorRecords[rec.paletteIndex];\n      var g = this._font._getBaseGlyph(rec.gid);\n      layers.push(new COLRLayer(g, color));\n    }\n\n    return layers;\n  }\n\n  render(ctx, size) {\n    for (let {glyph, color} of this.layers) {\n      ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);\n      glyph.render(ctx, size);\n    }\n\n    return;\n  }\n}\n","const TUPLES_SHARE_POINT_NUMBERS = 0x8000;\nconst TUPLE_COUNT_MASK           = 0x0fff;\nconst EMBEDDED_TUPLE_COORD       = 0x8000;\nconst INTERMEDIATE_TUPLE         = 0x4000;\nconst PRIVATE_POINT_NUMBERS      = 0x2000;\nconst TUPLE_INDEX_MASK           = 0x0fff;\nconst POINTS_ARE_WORDS           = 0x80;\nconst POINT_RUN_COUNT_MASK       = 0x7f;\nconst DELTAS_ARE_ZERO            = 0x80;\nconst DELTAS_ARE_WORDS           = 0x40;\nconst DELTA_RUN_COUNT_MASK       = 0x3f;\n\n/**\n * This class is transforms TrueType glyphs according to the data from\n * the Apple Advanced Typography variation tables (fvar, gvar, and avar).\n * These tables allow infinite adjustments to glyph weight, width, slant,\n * and optical size without the designer needing to specify every exact style.\n *\n * Apple's documentation for these tables is not great, so thanks to the\n * Freetype project for figuring much of this out.\n *\n * @private\n */\nexport default class GlyphVariationProcessor {\n  constructor(font, coords) {\n    this.font = font;\n    this.normalizedCoords = this.normalizeCoords(coords);\n    this.blendVectors = new Map;\n  }\n\n  normalizeCoords(coords) {\n    // the default mapping is linear along each axis, in two segments:\n    // from the minValue to defaultValue, and from defaultValue to maxValue.\n    let normalized = [];\n    for (var i = 0; i < this.font.fvar.axis.length; i++) {\n      let axis = this.font.fvar.axis[i];\n      if (coords[i] < axis.defaultValue) {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));\n      } else {\n        normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));\n      }\n    }\n\n    // if there is an avar table, the normalized value is calculated\n    // by interpolating between the two nearest mapped values.\n    if (this.font.avar) {\n      for (var i = 0; i < this.font.avar.segment.length; i++) {\n        let segment = this.font.avar.segment[i];\n        for (let j = 0; j < segment.correspondence.length; j++) {\n          let pair = segment.correspondence[j];\n          if (j >= 1 && normalized[i] < pair.fromCoord) {\n            let prev = segment.correspondence[j - 1];\n            normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) /\n              (pair.fromCoord - prev.fromCoord + Number.EPSILON) +\n              prev.toCoord;\n\n            break;\n          }\n        }\n      }\n    }\n\n    return normalized;\n  }\n\n  transformPoints(gid, glyphPoints) {\n    if (!this.font.fvar || !this.font.gvar) { return; }\n\n    let { gvar } = this.font;\n    if (gid >= gvar.glyphCount) { return; }\n\n    let offset = gvar.offsets[gid];\n    if (offset === gvar.offsets[gid + 1]) { return; }\n\n    // Read the gvar data for this glyph\n    let { stream } = this.font;\n    stream.pos = offset;\n    if (stream.pos >= stream.length) {\n      return;\n    }\n\n    let tupleCount = stream.readUInt16BE();\n    let offsetToData = offset + stream.readUInt16BE();\n\n    if (tupleCount & TUPLES_SHARE_POINT_NUMBERS) {\n      var here = stream.pos;\n      stream.pos = offsetToData;\n      var sharedPoints = this.decodePoints();\n      offsetToData = stream.pos;\n      stream.pos = here;\n    }\n\n    let origPoints = glyphPoints.map(pt => pt.copy());\n\n    tupleCount &= TUPLE_COUNT_MASK;\n    for (let i = 0; i < tupleCount; i++) {\n      let tupleDataSize = stream.readUInt16BE();\n      let tupleIndex = stream.readUInt16BE();\n\n      if (tupleIndex & EMBEDDED_TUPLE_COORD) {\n        var tupleCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) {\n          tupleCoords.push(stream.readInt16BE() / 16384);\n        }\n\n      } else {\n        if ((tupleIndex & TUPLE_INDEX_MASK) >= gvar.globalCoordCount) {\n          throw new Error('Invalid gvar table');\n        }\n\n        var tupleCoords = gvar.globalCoords[tupleIndex & TUPLE_INDEX_MASK];\n      }\n\n      if (tupleIndex & INTERMEDIATE_TUPLE) {\n        var startCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) {\n          startCoords.push(stream.readInt16BE() / 16384);\n        }\n\n        var endCoords = [];\n        for (let a = 0; a < gvar.axisCount; a++) {\n          endCoords.push(stream.readInt16BE() / 16384);\n        }\n      }\n\n      // Get the factor at which to apply this tuple\n      let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);\n      if (factor === 0) {\n        offsetToData += tupleDataSize;\n        continue;\n      }\n\n      var here = stream.pos;\n      stream.pos = offsetToData;\n\n      if (tupleIndex & PRIVATE_POINT_NUMBERS) {\n        var points = this.decodePoints();\n      } else {\n        var points = sharedPoints;\n      }\n\n      // points.length = 0 means there are deltas for all points\n      let nPoints = points.length === 0 ? glyphPoints.length : points.length;\n      let xDeltas = this.decodeDeltas(nPoints);\n      let yDeltas = this.decodeDeltas(nPoints);\n\n      if (points.length === 0) { // all points\n        for (let i = 0; i < glyphPoints.length; i++) {\n          var point = glyphPoints[i];\n          point.x += Math.round(xDeltas[i] * factor);\n          point.y += Math.round(yDeltas[i] * factor);\n        }\n      } else {\n        let outPoints = origPoints.map(pt => pt.copy());\n        let hasDelta = glyphPoints.map(() => false);\n\n        for (let i = 0; i < points.length; i++) {\n          let idx = points[i];\n          if (idx < glyphPoints.length) {\n            let point = outPoints[idx];\n            hasDelta[idx] = true;\n\n            point.x += Math.round(xDeltas[i] * factor);\n            point.y += Math.round(yDeltas[i] * factor);\n          }\n        }\n\n        this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);\n\n        for (let i = 0; i < glyphPoints.length; i++) {\n          let deltaX = outPoints[i].x - origPoints[i].x;\n          let deltaY = outPoints[i].y - origPoints[i].y;\n\n          glyphPoints[i].x += deltaX;\n          glyphPoints[i].y += deltaY;\n        }\n      }\n\n      offsetToData += tupleDataSize;\n      stream.pos = here;\n    }\n  }\n\n  decodePoints() {\n    let stream = this.font.stream;\n    let count = stream.readUInt8();\n\n    if (count & POINTS_ARE_WORDS) {\n      count = (count & POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();\n    }\n\n    let points = new Uint16Array(count);\n    let i = 0;\n    let point = 0;\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & POINT_RUN_COUNT_MASK) + 1;\n      let fn = run & POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;\n\n      for (let j = 0; j < runCount && i < count; j++) {\n        point += fn.call(stream);\n        points[i++] = point;\n      }\n    }\n\n    return points;\n  }\n\n  decodeDeltas(count) {\n    let stream = this.font.stream;\n    let i = 0;\n    let deltas = new Int16Array(count);\n\n    while (i < count) {\n      let run = stream.readUInt8();\n      let runCount = (run & DELTA_RUN_COUNT_MASK) + 1;\n\n      if (run & DELTAS_ARE_ZERO) {\n        i += runCount;\n\n      } else {\n        let fn = run & DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;\n        for (let j = 0; j < runCount && i < count; j++) {\n          deltas[i++] = fn.call(stream);\n        }\n      }\n    }\n\n    return deltas;\n  }\n\n  tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {\n    let normalized = this.normalizedCoords;\n    let { gvar } = this.font;\n    let factor = 1;\n\n    for (let i = 0; i < gvar.axisCount; i++) {\n      if (tupleCoords[i] === 0) {\n        continue;\n      }\n\n      if (normalized[i] === 0) {\n        return 0;\n      }\n\n      if ((tupleIndex & INTERMEDIATE_TUPLE) === 0) {\n        if ((normalized[i] < Math.min(0, tupleCoords[i])) ||\n            (normalized[i] > Math.max(0, tupleCoords[i]))) {\n          return 0;\n        }\n\n        factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);\n      } else {\n        if ((normalized[i] < startCoords[i]) ||\n            (normalized[i] > endCoords[i])) {\n          return 0;\n\n        } else if (normalized[i] < tupleCoords[i]) {\n          factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);\n\n        } else {\n          factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);\n        }\n      }\n    }\n\n    return factor;\n  }\n\n  // Interpolates points without delta values.\n  // Needed for the Ø and Q glyphs in Skia.\n  // Algorithm from Freetype.\n  interpolateMissingDeltas(points, inPoints, hasDelta) {\n    if (points.length === 0) {\n      return;\n    }\n\n    let point = 0;\n    while (point < points.length) {\n      let firstPoint = point;\n\n      // find the end point of the contour\n      let endPoint = point;\n      let pt = points[endPoint];\n      while (!pt.endContour) {\n        pt = points[++endPoint];\n      }\n\n      // find the first point that has a delta\n      while (point <= endPoint && !hasDelta[point]) {\n        point++;\n      }\n\n      if (point > endPoint) {\n        continue;\n      }\n\n      let firstDelta = point;\n      let curDelta = point;\n      point++;\n\n      while (point <= endPoint) {\n        // find the next point with a delta, and interpolate intermediate points\n        if (hasDelta[point]) {\n          this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);\n          curDelta = point;\n        }\n\n        point++;\n      }\n\n      // shift contour if we only have a single delta\n      if (curDelta === firstDelta) {\n        this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);\n      } else {\n        // otherwise, handle the remaining points at the end and beginning of the contour\n        this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);\n\n        if (firstDelta > 0) {\n          this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);\n        }\n      }\n\n      point = endPoint + 1;\n    }\n  }\n\n  deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {\n    if (p1 > p2) {\n      return;\n    }\n\n    let iterable = ['x', 'y'];\n    for (let i = 0; i < iterable.length; i++) {\n      let k = iterable[i];\n      if (inPoints[ref1][k] > inPoints[ref2][k]) {\n        var p = ref1;\n        ref1 = ref2;\n        ref2 = p;\n      }\n\n      let in1 = inPoints[ref1][k];\n      let in2 = inPoints[ref2][k];\n      let out1 = outPoints[ref1][k];\n      let out2 = outPoints[ref2][k];\n\n      // If the reference points have the same coordinate but different\n      // delta, inferred delta is zero.  Otherwise interpolate.\n      if (in1 !== in2 || out1 === out2) {\n        let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);\n\n        for (let p = p1; p <= p2; p++) {\n          let out = inPoints[p][k];\n\n          if (out <= in1) {\n            out += out1 - in1;\n          } else if (out >= in2) {\n            out += out2 - in2;\n          } else {\n            out = out1 + (out - in1) * scale;\n          }\n\n          outPoints[p][k] = out;\n        }\n      }\n    }\n  }\n\n  deltaShift(p1, p2, ref, inPoints, outPoints) {\n    let deltaX = outPoints[ref].x - inPoints[ref].x;\n    let deltaY = outPoints[ref].y - inPoints[ref].y;\n\n    if (deltaX === 0 && deltaY === 0) {\n      return;\n    }\n\n    for (let p = p1; p <= p2; p++) {\n      if (p !== ref) {\n        outPoints[p].x += deltaX;\n        outPoints[p].y += deltaY;\n      }\n    }\n  }\n\n  getAdvanceAdjustment(gid, table) {\n    let outerIndex, innerIndex;\n\n    if (table.advanceWidthMapping) {\n      let idx = gid;\n      if (idx >= table.advanceWidthMapping.mapCount) {\n        idx = table.advanceWidthMapping.mapCount - 1;\n      }\n\n      let entryFormat = table.advanceWidthMapping.entryFormat;\n      ({outerIndex, innerIndex} = table.advanceWidthMapping.mapData[idx]);\n    } else {\n      outerIndex = 0;\n      innerIndex = gid;\n    }\n\n    return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);\n  }\n\n  // See pseudo code from `Font Variations Overview'\n  // in the OpenType specification.\n  getDelta(itemStore, outerIndex, innerIndex) {\n    if (outerIndex >= itemStore.itemVariationData.length) {\n      return 0;\n    }\n\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (innerIndex >= varData.deltaSets.length) {\n      return 0;\n    }\n\n    let deltaSet = varData.deltaSets[innerIndex];\n    let blendVector = this.getBlendVector(itemStore, outerIndex);\n    let netAdjustment = 0;\n\n    for (let master = 0; master < varData.regionIndexCount; master++) {\n      netAdjustment += deltaSet.deltas[master] * blendVector[master];\n    }\n\n    return netAdjustment;\n  }\n\n  getBlendVector(itemStore, outerIndex) {\n    let varData = itemStore.itemVariationData[outerIndex];\n    if (this.blendVectors.has(varData)) {\n      return this.blendVectors.get(varData);\n    }\n\n    let normalizedCoords = this.normalizedCoords;\n    let blendVector = [];\n\n    // outer loop steps through master designs to be blended\n    for (let master = 0; master < varData.regionIndexCount; master++) {\n      let scalar = 1;\n      let regionIndex = varData.regionIndexes[master];\n      let axes = itemStore.variationRegionList.variationRegions[regionIndex];\n\n      // inner loop steps through axes in this region\n      for (let j = 0; j < axes.length; j++) {\n        let axis = axes[j];\n        let axisScalar;\n\n        // compute the scalar contribution of this axis\n        // ignore invalid ranges\n        if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) {\n          axisScalar = 1;\n\n        } else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) {\n          axisScalar = 1;\n\n        // peak of 0 means ignore this axis\n        } else if (axis.peakCoord === 0) {\n          axisScalar = 1;\n\n        // ignore this region if coords are out of range\n        } else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) {\n          axisScalar = 0;\n\n        // calculate a proportional factor\n        } else {\n          if (normalizedCoords[j] === axis.peakCoord) {\n            axisScalar = 1;\n          } else if (normalizedCoords[j] < axis.peakCoord) {\n            axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) /\n              (axis.peakCoord - axis.startCoord + Number.EPSILON);\n          } else {\n            axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) /\n              (axis.endCoord - axis.peakCoord + Number.EPSILON);\n          }\n        }\n\n        // take product of all the axis scalars\n        scalar *= axisScalar;\n      }\n\n      blendVector[master] = scalar;\n    }\n\n    this.blendVectors.set(varData, blendVector);\n    return blendVector;\n  }\n}\n","import cloneDeep from 'clone';\nimport Subset from './Subset';\nimport Directory from '../tables/directory';\nimport Tables from '../tables';\nimport TTFGlyphEncoder from '../glyph/TTFGlyphEncoder';\n\nexport default class TTFSubset extends Subset {\n  constructor(font) {\n    super(font);\n    this.glyphEncoder = new TTFGlyphEncoder;\n  }\n\n  _addGlyph(gid) {\n    let glyph = this.font.getGlyph(gid);\n    let glyf = glyph._decode();\n\n    // get the offset to the glyph from the loca table\n    let curOffset = this.font.loca.offsets[gid];\n    let nextOffset = this.font.loca.offsets[gid + 1];\n\n    let stream = this.font._getTableStream('glyf');\n    stream.pos += curOffset;\n\n    let buffer = stream.readBuffer(nextOffset - curOffset);\n\n    // if it is a compound glyph, include its components\n    if (glyf && glyf.numberOfContours < 0) {\n      buffer = Buffer.from(buffer);\n      for (let component of glyf.components) {\n        gid = this.includeGlyph(component.glyphID);\n        buffer.writeUInt16BE(gid, component.pos);\n      }\n    } else if (glyf && this.font._variationProcessor) {\n      // If this is a TrueType variation glyph, re-encode the path\n      buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);\n    }\n\n    this.glyf.push(buffer);\n    this.loca.offsets.push(this.offset);\n\n    this.hmtx.metrics.push({\n      advance: glyph.advanceWidth,\n      bearing: glyph._getMetrics().leftBearing\n    });\n\n    this.offset += buffer.length;\n    return this.glyf.length - 1;\n  }\n\n  encode(stream) {\n    // tables required by PDF spec:\n    //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm\n    //\n    // additional tables required for standalone fonts:\n    //   name, cmap, OS/2, post\n\n    this.glyf = [];\n    this.offset = 0;\n    this.loca = {\n      offsets: [],\n      version: this.font.loca.version\n    };\n\n    this.hmtx = {\n      metrics: [],\n      bearings: []\n    };\n\n    // include all the glyphs\n    // not using a for loop because we need to support adding more\n    // glyphs to the array as we go, and CoffeeScript caches the length.\n    let i = 0;\n    while (i < this.glyphs.length) {\n      this._addGlyph(this.glyphs[i++]);\n    }\n\n    let maxp = cloneDeep(this.font.maxp);\n    maxp.numGlyphs = this.glyf.length;\n\n    this.loca.offsets.push(this.offset);\n\n    let head = cloneDeep(this.font.head);\n    head.indexToLocFormat = this.loca.version;\n\n    let hhea = cloneDeep(this.font.hhea);\n    hhea.numberOfMetrics = this.hmtx.metrics.length;\n\n    // map = []\n    // for index in [0...256]\n    //     if index < @numGlyphs\n    //         map[index] = index\n    //     else\n    //         map[index] = 0\n    //\n    // cmapTable =\n    //     version: 0\n    //     length: 262\n    //     language: 0\n    //     codeMap: map\n    //\n    // cmap =\n    //     version: 0\n    //     numSubtables: 1\n    //     tables: [\n    //         platformID: 1\n    //         encodingID: 0\n    //         table: cmapTable\n    //     ]\n\n    // TODO: subset prep, cvt, fpgm?\n    Directory.encode(stream, {\n      tables: {\n        head,\n        hhea,\n        loca: this.loca,\n        maxp,\n        'cvt ': this.font['cvt '],\n        prep: this.font.prep,\n        glyf: this.glyf,\n        hmtx: this.hmtx,\n        fpgm: this.font.fpgm\n\n        // name: clone @font.name\n        // 'OS/2': clone @font['OS/2']\n        // post: clone @font.post\n        // cmap: cmap\n      }\n    });\n  }\n}\n","import r from 'restructure';\n\nconst resolved = Promise.resolve();\n\nexport default class Subset {\n  constructor(font) {\n    this.font = font;\n    this.glyphs = [];\n    this.mapping = {};\n\n    // always include the missing glyph\n    this.includeGlyph(0);\n  }\n\n  includeGlyph(glyph) {\n    if (typeof glyph === 'object') {\n      glyph = glyph.id;\n    }\n\n    if (this.mapping[glyph] == null) {\n      this.glyphs.push(glyph);\n      this.mapping[glyph] = this.glyphs.length - 1;\n    }\n\n    return this.mapping[glyph];\n  }\n\n  encodeStream() {\n    let s = new r.EncodeStream();\n\n    resolved.then(() => {\n      this.encode(s);\n      return s.end();\n    });\n\n    return s;\n  }\n}\n","import r from 'restructure';\n\n// Flags for simple glyphs\nconst ON_CURVE        = 1 << 0;\nconst X_SHORT_VECTOR  = 1 << 1;\nconst Y_SHORT_VECTOR  = 1 << 2;\nconst REPEAT          = 1 << 3;\nconst SAME_X          = 1 << 4;\nconst SAME_Y          = 1 << 5;\n\nclass Point {\n  static size(val) {\n    return val >= 0 && val <= 255 ? 1 : 2;\n  }\n  \n  static encode(stream, value) {\n    if (value >= 0 && value <= 255) {\n      stream.writeUInt8(value);\n    } else {\n      stream.writeInt16BE(value);\n    }\n  }\n}\n\nlet Glyf = new r.Struct({\n  numberOfContours: r.int16, // if negative, this is a composite glyph\n  xMin: r.int16,\n  yMin: r.int16,\n  xMax: r.int16,\n  yMax: r.int16,\n  endPtsOfContours: new r.Array(r.uint16, 'numberOfContours'),\n  instructions: new r.Array(r.uint8, r.uint16),\n  flags: new r.Array(r.uint8, 0),\n  xPoints: new r.Array(Point, 0),\n  yPoints: new r.Array(Point, 0)\n});\n\n/**\n * Encodes TrueType glyph outlines\n */\nexport default class TTFGlyphEncoder {\n  encodeSimple(path, instructions = []) {\n    let endPtsOfContours = [];\n    let xPoints = [];\n    let yPoints = [];\n    let flags = [];\n    let same = 0;\n    let lastX = 0, lastY = 0, lastFlag = 0;\n    let pointCount = 0;\n    \n    for (let i = 0; i < path.commands.length; i++) {\n      let c = path.commands[i];\n      \n      for (let j = 0; j < c.args.length; j += 2) {\n        let x = c.args[j];\n        let y = c.args[j + 1];\n        let flag = 0;\n        \n        // If the ending point of a quadratic curve is the midpoint\n        // between the control point and the control point of the next\n        // quadratic curve, we can omit the ending point.\n        if (c.command === 'quadraticCurveTo' && j === 2) {\n          let next = path.commands[i + 1];\n          if (next && next.command === 'quadraticCurveTo') {\n            let midX = (lastX + next.args[0]) / 2;\n            let midY = (lastY + next.args[1]) / 2;\n            \n            if (x === midX && y === midY) {\n              continue;\n            }\n          }\n        }\n        \n        // All points except control points are on curve.\n        if (!(c.command === 'quadraticCurveTo' && j === 0)) {\n          flag |= ON_CURVE;\n        }\n        \n        flag = this._encodePoint(x, lastX, xPoints, flag, X_SHORT_VECTOR, SAME_X);\n        flag = this._encodePoint(y, lastY, yPoints, flag, Y_SHORT_VECTOR, SAME_Y);\n        \n        if (flag === lastFlag && same < 255) {\n          flags[flags.length - 1] |= REPEAT;\n          same++;\n        } else {\n          if (same > 0) {\n            flags.push(same);\n            same = 0;\n          }\n      \n          flags.push(flag);\n          lastFlag = flag;\n        }\n        \n        lastX = x;\n        lastY = y;\n        pointCount++;\n      }\n  \n      if (c.command === 'closePath') {\n        endPtsOfContours.push(pointCount - 1);\n      }\n    }\n\n    // Close the path if the last command didn't already\n    if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== 'closePath') {\n      endPtsOfContours.push(pointCount - 1);\n    }\n    \n    let bbox = path.bbox;\n    let glyf = {\n      numberOfContours: endPtsOfContours.length,\n      xMin: bbox.minX,\n      yMin: bbox.minY,\n      xMax: bbox.maxX,\n      yMax: bbox.maxY,\n      endPtsOfContours: endPtsOfContours,\n      instructions: instructions,\n      flags: flags,\n      xPoints: xPoints,\n      yPoints: yPoints\n    };\n    \n    let size = Glyf.size(glyf);\n    let tail = 4 - (size % 4);\n    \n    let stream = new r.EncodeStream(size + tail);\n    Glyf.encode(stream, glyf);\n    \n    // Align to 4-byte length\n    if (tail !== 0) {\n      stream.fill(0, tail);\n    }\n    \n    return stream.buffer;\n  }\n  \n  _encodePoint(value, last, points, flag, shortFlag, sameFlag) {\n    let diff = value - last;\n    \n    if (value === last) {\n      flag |= sameFlag;\n    } else {\n      if (-255 <= diff && diff <= 255) {\n        flag |= shortFlag;\n        if (diff < 0) {\n          diff = -diff;\n        } else {\n          flag |= sameFlag;\n        }\n      }\n      \n      points.push(diff);\n    }\n    \n    return flag;\n  }\n}\n","import Subset from './Subset';\nimport CFFTop from '../cff/CFFTop';\nimport CFFPrivateDict from '../cff/CFFPrivateDict';\nimport standardStrings from '../cff/CFFStandardStrings';\n\nexport default class CFFSubset extends Subset {\n  constructor(font) {\n    super(font);\n\n    this.cff = this.font['CFF '];\n    if (!this.cff) {\n      throw new Error('Not a CFF Font');\n    }\n  }\n\n  subsetCharstrings() {\n    this.charstrings = [];\n    let gsubrs = {};\n\n    for (let gid of this.glyphs) {\n      this.charstrings.push(this.cff.getCharString(gid));\n\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n\n      for (let subr in glyph._usedGsubrs) {\n        gsubrs[subr] = true;\n      }\n    }\n\n    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);\n  }\n\n  subsetSubrs(subrs, used) {\n    let res = [];\n    for (let i = 0; i < subrs.length; i++) {\n      let subr = subrs[i];\n      if (used[i]) {\n        this.cff.stream.pos = subr.offset;\n        res.push(this.cff.stream.readBuffer(subr.length));\n      } else {\n        res.push(Buffer.from([11])); // return\n      }\n    }\n\n    return res;\n  }\n\n  subsetFontdict(topDict) {\n    topDict.FDArray = [];\n    topDict.FDSelect = {\n      version: 0,\n      fds: []\n    };\n\n    let used_fds = {};\n    let used_subrs = [];\n    let fd_select = {};\n    for (let gid of this.glyphs) {\n      let fd = this.cff.fdForGlyph(gid);\n      if (fd == null) {\n        continue;\n      }\n\n      if (!used_fds[fd]) {\n        topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));\n        used_subrs.push({});\n        fd_select[fd] = topDict.FDArray.length - 1;\n      }\n\n      used_fds[fd] = true;\n      topDict.FDSelect.fds.push(fd_select[fd]);\n\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n      for (let subr in glyph._usedSubrs) {\n        used_subrs[fd_select[fd]][subr] = true;\n      }\n    }\n\n    for (let i = 0; i < topDict.FDArray.length; i++) {\n      let dict = topDict.FDArray[i];\n      delete dict.FontName;\n      if (dict.Private && dict.Private.Subrs) {\n        dict.Private = Object.assign({}, dict.Private);\n        dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);\n      }\n    }\n\n    return;\n  }\n\n  createCIDFontdict(topDict) {\n    let used_subrs = {};\n    for (let gid of this.glyphs) {\n      let glyph = this.font.getGlyph(gid);\n      let path = glyph.path; // this causes the glyph to be parsed\n\n      for (let subr in glyph._usedSubrs) {\n        used_subrs[subr] = true;\n      }\n    }\n\n    let privateDict = Object.assign({}, this.cff.topDict.Private);\n    if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) {\n      privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);\n    }\n\n    topDict.FDArray = [{ Private: privateDict }];\n    return topDict.FDSelect = {\n      version: 3,\n      nRanges: 1,\n      ranges: [{ first: 0, fd: 0 }],\n      sentinel: this.charstrings.length\n    };\n  }\n\n  addString(string) {\n    if (!string) {\n      return null;\n    }\n\n    if (!this.strings) {\n      this.strings = [];\n    }\n\n    this.strings.push(string);\n    return standardStrings.length + this.strings.length - 1;\n  }\n\n  encode(stream) {\n    this.subsetCharstrings();\n\n    let charset = {\n      version: this.charstrings.length > 255 ? 2 : 1,\n      ranges: [{ first: 1, nLeft: this.charstrings.length - 2 }]\n    };\n\n    let topDict = Object.assign({}, this.cff.topDict);\n    topDict.Private = null;\n    topDict.charset = charset;\n    topDict.Encoding = null;\n    topDict.CharStrings = this.charstrings;\n\n    for (let key of ['version', 'Notice', 'Copyright', 'FullName', 'FamilyName', 'Weight', 'PostScript', 'BaseFontName', 'FontName']) {\n      topDict[key] = this.addString(this.cff.string(topDict[key]));\n    }\n\n    topDict.ROS = [this.addString('Adobe'), this.addString('Identity'), 0];\n    topDict.CIDCount = this.charstrings.length;\n\n    if (this.cff.isCIDFont) {\n      this.subsetFontdict(topDict);\n    } else {\n      this.createCIDFontdict(topDict);\n    }\n\n    let top = {\n      version: 1,\n      hdrSize: this.cff.hdrSize,\n      offSize: 4,\n      header: this.cff.header,\n      nameIndex: [this.cff.postscriptName],\n      topDictIndex: [topDict],\n      stringIndex: this.strings,\n      globalSubrIndex: this.gsubrs\n    };\n\n    CFFTop.encode(stream, top);\n  }\n}\n","import TTFFont from './TTFFont';\nimport WOFFDirectory from './tables/WOFFDirectory';\nimport tables from './tables';\nimport inflate from 'tiny-inflate';\nimport r from 'restructure';\n\nexport default class WOFFFont extends TTFFont {\n  type = 'WOFF';\n\n  static probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOFF';\n  }\n\n  _decodeDirectory() {\n    this.directory = WOFFDirectory.decode(this.stream, { _startOffset: 0 });\n  }\n\n  _getTableStream(tag) {\n    let table = this.directory.tables[tag];\n    if (table) {\n      this.stream.pos = table.offset;\n\n      if (table.compLength < table.length) {\n        this.stream.pos += 2; // skip deflate header\n        let outBuffer = Buffer.alloc(table.length);\n        let buf = inflate(this.stream.readBuffer(table.compLength - 2), outBuffer);\n        return new r.DecodeStream(buf);\n      } else {\n        return this.stream;\n      }\n    }\n\n    return null;\n  }\n}\n","import r from 'restructure';\nimport tables from './';\n\nlet WOFFDirectoryEntry = new r.Struct({\n  tag:          new r.String(4),\n  offset:       new r.Pointer(r.uint32, 'void', {type: 'global'}),\n  compLength:   r.uint32,\n  length:       r.uint32,\n  origChecksum: r.uint32\n});\n\nlet WOFFDirectory = new r.Struct({\n  tag:            new r.String(4), // should be 'wOFF'\n  flavor:         r.uint32,\n  length:         r.uint32,\n  numTables:      r.uint16,\n  reserved:       new r.Reserved(r.uint16),\n  totalSfntSize:  r.uint32,\n  majorVersion:   r.uint16,\n  minorVersion:   r.uint16,\n  metaOffset:     r.uint32,\n  metaLength:     r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset:     r.uint32,\n  privLength:     r.uint32,\n  tables:         new r.Array(WOFFDirectoryEntry, 'numTables')\n});\n\nWOFFDirectory.process = function() {\n  let tables = {};\n  for (let table of this.tables) {\n    tables[table.tag] = table;\n  }\n\n  this.tables = tables;\n};\n\nexport default WOFFDirectory;\n","import r from 'restructure';\nimport brotli from 'brotli/decompress.js';\nimport TTFFont from './TTFFont';\nimport TTFGlyph, { Point } from './glyph/TTFGlyph';\nimport WOFF2Glyph from './glyph/WOFF2Glyph';\nimport WOFF2Directory from './tables/WOFF2Directory';\n\n/**\n * Subclass of TTFFont that represents a TTF/OTF font compressed by WOFF2\n * See spec here: http://www.w3.org/TR/WOFF2/\n */\nexport default class WOFF2Font extends TTFFont {\n  type = 'WOFF2';\n\n  static probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'wOF2';\n  }\n\n  _decodeDirectory() {\n    this.directory = WOFF2Directory.decode(this.stream);\n    this._dataPos = this.stream.pos;\n  }\n\n  _decompress() {\n    // decompress data and setup table offsets if we haven't already\n    if (!this._decompressed) {\n      this.stream.pos = this._dataPos;\n      let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);\n\n      let decompressedSize = 0;\n      for (let tag in this.directory.tables) {\n        let entry = this.directory.tables[tag];\n        entry.offset = decompressedSize;\n        decompressedSize += (entry.transformLength != null) ? entry.transformLength : entry.length;\n      }\n\n      let decompressed = brotli(buffer, decompressedSize);\n      if (!decompressed) {\n        throw new Error('Error decoding compressed data in WOFF2');\n      }\n\n      this.stream = new r.DecodeStream(Buffer.from(decompressed));\n      this._decompressed = true;\n    }\n  }\n\n  _decodeTable(table) {\n    this._decompress();\n    return super._decodeTable(table);\n  }\n\n  // Override this method to get a glyph and return our\n  // custom subclass if there is a glyf table.\n  _getBaseGlyph(glyph, characters = []) {\n    if (!this._glyphs[glyph]) {\n      if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {\n        if (!this._transformedGlyphs) { this._transformGlyfTable(); }\n        return this._glyphs[glyph] = new WOFF2Glyph(glyph, characters, this);\n\n      } else {\n        return super._getBaseGlyph(glyph, characters);\n      }\n    }\n  }\n\n  _transformGlyfTable() {\n    this._decompress();\n    this.stream.pos = this.directory.tables.glyf.offset;\n    let table = GlyfTable.decode(this.stream);\n    let glyphs = [];\n\n    for (let index = 0; index < table.numGlyphs; index++) {\n      let glyph = {};\n      let nContours = table.nContours.readInt16BE();\n      glyph.numberOfContours = nContours;\n\n      if (nContours > 0) { // simple glyph\n        let nPoints = [];\n        let totalPoints = 0;\n\n        for (let i = 0; i < nContours; i++) {\n          let r = read255UInt16(table.nPoints);\n          totalPoints += r;\n          nPoints.push(totalPoints);\n        }\n\n        glyph.points = decodeTriplet(table.flags, table.glyphs, totalPoints);\n        for (let i = 0; i < nContours; i++) {\n          glyph.points[nPoints[i] - 1].endContour = true;\n        }\n\n        var instructionSize = read255UInt16(table.glyphs);\n\n      } else if (nContours < 0) { // composite glyph\n        let haveInstructions = TTFGlyph.prototype._decodeComposite.call({ _font: this }, glyph, table.composites);\n        if (haveInstructions) {\n          var instructionSize = read255UInt16(table.glyphs);\n        }\n      }\n\n      glyphs.push(glyph);\n    }\n\n    this._transformedGlyphs = glyphs;\n  }\n}\n\n// Special class that accepts a length and returns a sub-stream for that data\nclass Substream {\n  constructor(length) {\n    this.length = length;\n    this._buf = new r.Buffer(length);\n  }\n\n  decode(stream, parent) {\n    return new r.DecodeStream(this._buf.decode(stream, parent));\n  }\n}\n\n// This struct represents the entire glyf table\nlet GlyfTable = new r.Struct({\n  version: r.uint32,\n  numGlyphs: r.uint16,\n  indexFormat: r.uint16,\n  nContourStreamSize: r.uint32,\n  nPointsStreamSize: r.uint32,\n  flagStreamSize: r.uint32,\n  glyphStreamSize: r.uint32,\n  compositeStreamSize: r.uint32,\n  bboxStreamSize: r.uint32,\n  instructionStreamSize: r.uint32,\n  nContours: new Substream('nContourStreamSize'),\n  nPoints: new Substream('nPointsStreamSize'),\n  flags: new Substream('flagStreamSize'),\n  glyphs: new Substream('glyphStreamSize'),\n  composites: new Substream('compositeStreamSize'),\n  bboxes: new Substream('bboxStreamSize'),\n  instructions: new Substream('instructionStreamSize')\n});\n\nconst WORD_CODE = 253;\nconst ONE_MORE_BYTE_CODE2 = 254;\nconst ONE_MORE_BYTE_CODE1 = 255;\nconst LOWEST_U_CODE = 253;\n\nfunction read255UInt16(stream) {\n  let code = stream.readUInt8();\n\n  if (code === WORD_CODE) {\n    return stream.readUInt16BE();\n  }\n\n  if (code === ONE_MORE_BYTE_CODE1) {\n    return stream.readUInt8() + LOWEST_U_CODE;\n  }\n\n  if (code === ONE_MORE_BYTE_CODE2) {\n    return stream.readUInt8() + LOWEST_U_CODE * 2;\n  }\n\n  return code;\n}\n\nfunction withSign(flag, baseval) {\n  return flag & 1 ? baseval : -baseval;\n}\n\nfunction decodeTriplet(flags, glyphs, nPoints) {\n  let y;\n  let x = y = 0;\n  let res = [];\n\n  for (let i = 0; i < nPoints; i++) {\n    let dx = 0, dy = 0;\n    let flag = flags.readUInt8();\n    let onCurve = !(flag >> 7);\n    flag &= 0x7f;\n\n    if (flag < 10) {\n      dx = 0;\n      dy = withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());\n\n    } else if (flag < 20) {\n      dx = withSign(flag, (((flag - 10) & 14) << 7) + glyphs.readUInt8());\n      dy = 0;\n\n    } else if (flag < 84) {\n      var b0 = flag - 20;\n      var b1 = glyphs.readUInt8();\n      dx = withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));\n      dy = withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));\n\n    } else if (flag < 120) {\n      var b0 = flag - 84;\n      dx = withSign(flag, 1 + ((b0 / 12) << 8) + glyphs.readUInt8());\n      dy = withSign(flag >> 1, 1 + (((b0 % 12) >> 2) << 8) + glyphs.readUInt8());\n\n    } else if (flag < 124) {\n      var b1 = glyphs.readUInt8();\n      let b2 = glyphs.readUInt8();\n      dx = withSign(flag, (b1 << 4) + (b2 >> 4));\n      dy = withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());\n\n    } else {\n      dx = withSign(flag, glyphs.readUInt16BE());\n      dy = withSign(flag >> 1, glyphs.readUInt16BE());\n    }\n\n    x += dx;\n    y += dy;\n    res.push(new Point(onCurve, false, x, y));\n  }\n\n  return res;\n}\n","import TTFGlyph from './TTFGlyph';\n\n/**\n * Represents a TrueType glyph in the WOFF2 format, which compresses glyphs differently.\n */\nexport default class WOFF2Glyph extends TTFGlyph {\n  type = 'WOFF2';\n\n  _decode() {\n    // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.\n    return this._font._transformedGlyphs[this.id];\n  }\n\n  _getCBox() {\n    return this.path.bbox;\n  }\n}\n","import r from 'restructure';\n\nconst Base128 = {\n  decode(stream) {\n    let result = 0;\n    let iterable = [0, 1, 2, 3, 4];\n    for (let j = 0; j < iterable.length; j++) {\n      let i = iterable[j];\n      let code = stream.readUInt8();\n\n      // If any of the top seven bits are set then we're about to overflow.\n      if (result & 0xe0000000) {\n        throw new Error('Overflow');\n      }\n\n      result = (result << 7) | (code & 0x7f);\n      if ((code & 0x80) === 0) {\n        return result;\n      }\n    }\n\n    throw new Error('Bad base 128 number');\n  }\n};\n\nlet knownTags = [\n  'cmap', 'head', 'hhea', 'hmtx', 'maxp', 'name', 'OS/2', 'post', 'cvt ',\n  'fpgm', 'glyf', 'loca', 'prep', 'CFF ', 'VORG', 'EBDT', 'EBLC', 'gasp',\n  'hdmx', 'kern', 'LTSH', 'PCLT', 'VDMX', 'vhea', 'vmtx', 'BASE', 'GDEF',\n  'GPOS', 'GSUB', 'EBSC', 'JSTF', 'MATH', 'CBDT', 'CBLC', 'COLR', 'CPAL',\n  'SVG ', 'sbix', 'acnt', 'avar', 'bdat', 'bloc', 'bsln', 'cvar', 'fdsc',\n  'feat', 'fmtx', 'fvar', 'gvar', 'hsty', 'just', 'lcar', 'mort', 'morx',\n  'opbd', 'prop', 'trak', 'Zapf', 'Silf', 'Glat', 'Gloc', 'Feat', 'Sill'\n];\n\nlet WOFF2DirectoryEntry = new r.Struct({\n  flags: r.uint8,\n  customTag: new r.Optional(new r.String(4), t => (t.flags & 0x3f) === 0x3f),\n  tag: t => t.customTag || knownTags[t.flags & 0x3f],// || (() => { throw new Error(`Bad tag: ${flags & 0x3f}`); })(); },\n  length: Base128,\n  transformVersion: t => (t.flags >>> 6) & 0x03,\n  transformed: t => (t.tag === 'glyf' || t.tag === 'loca') ? t.transformVersion === 0 : t.transformVersion !== 0,\n  transformLength: new r.Optional(Base128, t => t.transformed)\n});\n\nlet WOFF2Directory = new r.Struct({\n  tag: new r.String(4), // should be 'wOF2'\n  flavor: r.uint32,\n  length: r.uint32,\n  numTables: r.uint16,\n  reserved: new r.Reserved(r.uint16),\n  totalSfntSize: r.uint32,\n  totalCompressedSize: r.uint32,\n  majorVersion: r.uint16,\n  minorVersion: r.uint16,\n  metaOffset: r.uint32,\n  metaLength: r.uint32,\n  metaOrigLength: r.uint32,\n  privOffset: r.uint32,\n  privLength: r.uint32,\n  tables: new r.Array(WOFF2DirectoryEntry, 'numTables')\n});\n\nWOFF2Directory.process = function() {\n  let tables = {};\n  for (let i = 0; i < this.tables.length; i++) {\n    let table = this.tables[i];\n    tables[table.tag] = table;\n  }\n\n  return this.tables = tables;\n};\n\nexport default WOFF2Directory;\n","import r from 'restructure';\nimport TTFFont from './TTFFont';\nimport Directory from './tables/directory';\nimport tables from './tables';\n\nlet TTCHeader = new r.VersionedStruct(r.uint32, {\n  0x00010000: {\n    numFonts:   r.uint32,\n    offsets:    new r.Array(r.uint32, 'numFonts')\n  },\n  0x00020000: {\n    numFonts:   r.uint32,\n    offsets:    new r.Array(r.uint32, 'numFonts'),\n    dsigTag:    r.uint32,\n    dsigLength: r.uint32,\n    dsigOffset: r.uint32\n  }\n});\n\nexport default class TrueTypeCollection {\n  type = 'TTC';\n\n  static probe(buffer) {\n    return buffer.toString('ascii', 0, 4) === 'ttcf';\n  }\n\n  constructor(stream) {\n    this.stream = stream;\n    if (stream.readString(4) !== 'ttcf') {\n      throw new Error('Not a TrueType collection');\n    }\n\n    this.header = TTCHeader.decode(stream);\n  }\n\n  getFont(name) {\n    for (let offset of this.header.offsets) {\n      let stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      let font = new TTFFont(stream);\n      if ((Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name)) || font.postscriptName === name)\n        return font;\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    let fonts = [];\n    for (let offset of this.header.offsets) {\n      let stream = new r.DecodeStream(this.stream.buffer);\n      stream.pos = offset;\n      fonts.push(new TTFFont(stream));\n    }\n\n    return fonts;\n  }\n}\n","import r from 'restructure';\nimport TTFFont from './TTFFont';\n\nlet DFontName = new r.String(r.uint8);\nlet DFontData = new r.Struct({\n  len: r.uint32,\n  buf: new r.Buffer('len')\n});\n\nlet Ref = new r.Struct({\n  id: r.uint16,\n  nameOffset: r.int16,\n  attr: r.uint8,\n  dataOffset: r.uint24,\n  handle: r.uint32\n});\n\nlet Type = new r.Struct({\n  name: new r.String(4),\n  maxTypeIndex: r.uint16,\n  refList: new r.Pointer(r.uint16, new r.Array(Ref, t => t.maxTypeIndex + 1), { type: 'parent' })\n});\n\nlet TypeList = new r.Struct({\n  length: r.uint16,\n  types: new r.Array(Type, t => t.length + 1)\n});\n\nlet DFontMap = new r.Struct({\n  reserved: new r.Reserved(r.uint8, 24),\n  typeList: new r.Pointer(r.uint16, TypeList),\n  nameListOffset: new r.Pointer(r.uint16, 'void')\n});\n\nlet DFontHeader = new r.Struct({\n  dataOffset: r.uint32,\n  map: new r.Pointer(r.uint32, DFontMap),\n  dataLength: r.uint32,\n  mapLength: r.uint32\n});\n\nexport default class DFont {\n  type = 'DFont';\n\n  static probe(buffer) {\n    let stream = new r.DecodeStream(buffer);\n\n    try {\n      var header = DFontHeader.decode(stream);\n    } catch (e) {\n      return false;\n    }\n\n    for (let type of header.map.typeList.types) {\n      if (type.name === 'sfnt') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  constructor(stream) {\n    this.stream = stream;\n    this.header = DFontHeader.decode(this.stream);\n\n    for (let type of this.header.map.typeList.types) {\n      for (let ref of type.refList) {\n        if (ref.nameOffset >= 0) {\n          this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;\n          ref.name = DFontName.decode(this.stream);\n        } else {\n          ref.name = null;\n        }\n      }\n\n      if (type.name === 'sfnt') {\n        this.sfnt = type;\n      }\n    }\n  }\n\n  getFont(name) {\n    if (!this.sfnt) {\n      return null;\n    }\n\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      let font = new TTFFont(stream);\n      if ((Buffer.isBuffer(font.postscriptName) && font.postscriptName.equals(name)) || font.postscriptName === name)\n        return font;\n    }\n\n    return null;\n  }\n\n  get fonts() {\n    let fonts = [];\n    for (let ref of this.sfnt.refList) {\n      let pos = this.header.dataOffset + ref.dataOffset + 4;\n      let stream = new r.DecodeStream(this.stream.buffer.slice(pos));\n      fonts.push(new TTFFont(stream));\n    }\n\n    return fonts;\n  }\n}\n"],"mappings":"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AAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,SAAS;EAAG,EAAE,EAAE,SAAS;EAAG,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,SAAS;EAAG,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,SAAS;EAAG,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,YAAY;EACjE,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,EAAE,EAAE,IAAI;EAAQ,GAAG,EAAE,IAAI;EACzD,EAAE,EAAE,IAAI;EAAQ,EAAE,E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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}