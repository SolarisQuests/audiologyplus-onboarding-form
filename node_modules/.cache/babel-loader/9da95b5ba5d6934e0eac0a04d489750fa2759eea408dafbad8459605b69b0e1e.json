{"ast":null,"code":"/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.inflection = factory();\n  }\n})(this, function () {\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = ['equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep', 'moose', 'deer', 'news'];\n\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n  var plural_rules = [\n  // do not replace if its already a plural word\n  [new RegExp('(m)en$', 'gi')], [new RegExp('(pe)ople$', 'gi')], [new RegExp('(child)ren$', 'gi')], [new RegExp('([ti])a$', 'gi')], [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi')], [new RegExp('(hive)s$', 'gi')], [new RegExp('(tive)s$', 'gi')], [new RegExp('(curve)s$', 'gi')], [new RegExp('([lr])ves$', 'gi')], [new RegExp('([^fo])ves$', 'gi')], [new RegExp('([^aeiouy]|qu)ies$', 'gi')], [new RegExp('(s)eries$', 'gi')], [new RegExp('(m)ovies$', 'gi')], [new RegExp('(x|ch|ss|sh)es$', 'gi')], [new RegExp('([m|l])ice$', 'gi')], [new RegExp('(bus)es$', 'gi')], [new RegExp('(o)es$', 'gi')], [new RegExp('(shoe)s$', 'gi')], [new RegExp('(cris|ax|test)es$', 'gi')], [new RegExp('(octop|vir)i$', 'gi')], [new RegExp('(alias|status)es$', 'gi')], [new RegExp('^(ox)en', 'gi')], [new RegExp('(vert|ind)ices$', 'gi')], [new RegExp('(matr)ices$', 'gi')], [new RegExp('(quiz)zes$', 'gi')],\n  // original rule\n  [new RegExp('(m)an$', 'gi'), '$1en'], [new RegExp('(pe)rson$', 'gi'), '$1ople'], [new RegExp('(child)$', 'gi'), '$1ren'], [new RegExp('^(ox)$', 'gi'), '$1en'], [new RegExp('(ax|test)is$', 'gi'), '$1es'], [new RegExp('(octop|vir)us$', 'gi'), '$1i'], [new RegExp('(alias|status)$', 'gi'), '$1es'], [new RegExp('(bu)s$', 'gi'), '$1ses'], [new RegExp('(buffal|tomat|potat)o$', 'gi'), '$1oes'], [new RegExp('([ti])um$', 'gi'), '$1a'], [new RegExp('sis$', 'gi'), 'ses'], [new RegExp('(?:([^f])fe|([lr])f)$', 'gi'), '$1$2ves'], [new RegExp('(hive)$', 'gi'), '$1s'], [new RegExp('([^aeiouy]|qu)y$', 'gi'), '$1ies'], [new RegExp('(x|ch|ss|sh)$', 'gi'), '$1es'], [new RegExp('(matr|vert|ind)ix|ex$', 'gi'), '$1ices'], [new RegExp('([m|l])ouse$', 'gi'), '$1ice'], [new RegExp('(quiz)$', 'gi'), '$1zes'], [new RegExp('s$', 'gi'), 's'], [new RegExp('$', 'gi'), 's']];\n\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n  var singular_rules = [\n  // do not replace if its already a singular word\n  [new RegExp('(m)an$', 'gi')], [new RegExp('(pe)rson$', 'gi')], [new RegExp('(child)$', 'gi')], [new RegExp('^(ox)$', 'gi')], [new RegExp('(ax|test)is$', 'gi')], [new RegExp('(octop|vir)us$', 'gi')], [new RegExp('(alias|status)$', 'gi')], [new RegExp('(bu)s$', 'gi')], [new RegExp('(buffal|tomat|potat)o$', 'gi')], [new RegExp('([ti])um$', 'gi')], [new RegExp('sis$', 'gi')], [new RegExp('(?:([^f])fe|([lr])f)$', 'gi')], [new RegExp('(hive)$', 'gi')], [new RegExp('([^aeiouy]|qu)y$', 'gi')], [new RegExp('(x|ch|ss|sh)$', 'gi')], [new RegExp('(matr|vert|ind)ix|ex$', 'gi')], [new RegExp('([m|l])ouse$', 'gi')], [new RegExp('(quiz)$', 'gi')],\n  // original rule\n  [new RegExp('(m)en$', 'gi'), '$1an'], [new RegExp('(pe)ople$', 'gi'), '$1rson'], [new RegExp('(child)ren$', 'gi'), '$1'], [new RegExp('([ti])a$', 'gi'), '$1um'], [new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'), '$1$2sis'], [new RegExp('(hive)s$', 'gi'), '$1'], [new RegExp('(tive)s$', 'gi'), '$1'], [new RegExp('(curve)s$', 'gi'), '$1'], [new RegExp('([lr])ves$', 'gi'), '$1f'], [new RegExp('([^fo])ves$', 'gi'), '$1fe'], [new RegExp('(m)ovies$', 'gi'), '$1ovie'], [new RegExp('([^aeiouy]|qu)ies$', 'gi'), '$1y'], [new RegExp('(s)eries$', 'gi'), '$1eries'], [new RegExp('(x|ch|ss|sh)es$', 'gi'), '$1'], [new RegExp('([m|l])ice$', 'gi'), '$1ouse'], [new RegExp('(bus)es$', 'gi'), '$1'], [new RegExp('(o)es$', 'gi'), '$1'], [new RegExp('(shoe)s$', 'gi'), '$1'], [new RegExp('(cris|ax|test)es$', 'gi'), '$1is'], [new RegExp('(octop|vir)i$', 'gi'), '$1us'], [new RegExp('(alias|status)es$', 'gi'), '$1'], [new RegExp('^(ox)en', 'gi'), '$1'], [new RegExp('(vert|ind)ices$', 'gi'), '$1ex'], [new RegExp('(matr)ices$', 'gi'), '$1ix'], [new RegExp('(quiz)zes$', 'gi'), '$1'], [new RegExp('ss$', 'gi'), 'ss'], [new RegExp('s$', 'gi'), '']];\n\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n  var non_titlecased_words = ['and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'];\n\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n  var id_suffix = new RegExp('(_ids|_id)$', 'g');\n  var underbar = new RegExp('_', 'g');\n  var space_or_underbar = new RegExp('[\\ _]', 'g');\n  var uppercase = new RegExp('([A-Z])', 'g');\n  var underbar_prefix = new RegExp('^_');\n  var inflector = {\n    /**\n     * A helper method that applies rules based replacement to a String.\n     * @private\n     * @function\n     * @param {String} str String to modify and return based on the passed rules.\n     * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n     * @param {Array: [String]} skip Strings to skip if they match\n     * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n     * @returns {String} Return passed String modified by passed rules.\n     * @example\n     *\n     *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n     */\n    _apply_rules: function (str, rules, skip, override) {\n      if (override) {\n        str = override;\n      } else {\n        var ignore = inflector.indexOf(skip, str.toLowerCase()) > -1;\n        if (!ignore) {\n          var i = 0;\n          var j = rules.length;\n          for (; i < j; i++) {\n            if (str.match(rules[i][0])) {\n              if (rules[i][1] !== undefined) {\n                str = str.replace(rules[i][0], rules[i][1]);\n              }\n              break;\n            }\n          }\n        }\n      }\n      return str;\n    },\n    /**\n     * This lets us detect if an Array contains a given element.\n     * @public\n     * @function\n     * @param {Array} arr The subject array.\n     * @param {Object} item Object to locate in the Array.\n     * @param {Number} from_index Starts checking from this position in the Array.(optional)\n     * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n     * @returns {Number} Return index position in the Array of the passed item.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n     *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n     */\n    indexOf: function (arr, item, from_index, compare_func) {\n      if (!from_index) {\n        from_index = -1;\n      }\n      var index = -1;\n      var i = from_index;\n      var j = arr.length;\n      for (; i < j; i++) {\n        if (arr[i] === item || compare_func && compare_func(arr[i], item)) {\n          index = i;\n          break;\n        }\n      }\n      return index;\n    },\n    /**\n     * This function adds pluralization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} plural Overrides normal output with said String.(optional)\n     * @returns {String} Singular English language nouns are returned in plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.pluralize( 'person' ); // === 'people'\n     *     inflection.pluralize( 'octopus' ); // === 'octopi'\n     *     inflection.pluralize( 'Hat' ); // === 'Hats'\n     *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n     */\n    pluralize: function (str, plural) {\n      return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n    },\n    /**\n     * This function adds singularization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} singular Overrides normal output with said String.(optional)\n     * @returns {String} Plural English language nouns are returned in singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.singularize( 'people' ); // === 'person'\n     *     inflection.singularize( 'octopi' ); // === 'octopus'\n     *     inflection.singularize( 'Hats' ); // === 'Hat'\n     *     inflection.singularize( 'guys', 'person' ); // === 'person'\n     */\n    singularize: function (str, singular) {\n      return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n    },\n    /**\n     * This function adds camelization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in camel case.\n     *                  additionally '/' is translated to '::'\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n     *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n     */\n    camelize: function (str, low_first_letter) {\n      var str_path = str.split('/');\n      var i = 0;\n      var j = str_path.length;\n      var str_arr, init_x, k, l, first;\n      for (; i < j; i++) {\n        str_arr = str_path[i].split('_');\n        k = 0;\n        l = str_arr.length;\n        for (; k < l; k++) {\n          if (k !== 0) {\n            str_arr[k] = str_arr[k].toLowerCase();\n          }\n          first = str_arr[k].charAt(0);\n          first = low_first_letter && i === 0 && k === 0 ? first.toLowerCase() : first.toUpperCase();\n          str_arr[k] = first + str_arr[k].substring(1);\n        }\n        str_path[i] = str_arr.join('');\n      }\n      return str_path.join('::');\n    },\n    /**\n     * This function adds underscore support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n     *                  Passing true will return as entered.\n     * @returns {String} Camel cased words are returned as lower cased and underscored.\n     *                  additionally '::' is translated to '/'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'MP', true ); // === 'MP'\n     */\n    underscore: function (str, all_upper_case) {\n      if (all_upper_case && str === str.toUpperCase()) return str;\n      var str_path = str.split('::');\n      var i = 0;\n      var j = str_path.length;\n      for (; i < j; i++) {\n        str_path[i] = str_path[i].replace(uppercase, '_$1');\n        str_path[i] = str_path[i].replace(underbar_prefix, '');\n      }\n      return str_path.join('/').toLowerCase();\n    },\n    /**\n     * This function adds humanize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in humanized form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n     *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n     */\n    humanize: function (str, low_first_letter) {\n      str = str.toLowerCase();\n      str = str.replace(id_suffix, '');\n      str = str.replace(underbar, ' ');\n      if (!low_first_letter) {\n        str = inflector.capitalize(str);\n      }\n      return str;\n    },\n    /**\n     * This function adds capitalization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} All characters will be lower case and the first will be upper.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n     *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n     */\n    capitalize: function (str) {\n      str = str.toLowerCase();\n      return str.substring(0, 1).toUpperCase() + str.substring(1);\n    },\n    /**\n     * This function adds dasherization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Replaces all spaces or underbars with dashes.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n     *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n     */\n    dasherize: function (str) {\n      return str.replace(space_or_underbar, '-');\n    },\n    /**\n     * This function adds titleize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Capitalizes words as you would for a book title.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n     *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n     */\n    titleize: function (str) {\n      str = str.toLowerCase().replace(underbar, ' ');\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n      var d, k, l;\n      for (; i < j; i++) {\n        d = str_arr[i].split('-');\n        k = 0;\n        l = d.length;\n        for (; k < l; k++) {\n          if (inflector.indexOf(non_titlecased_words, d[k].toLowerCase()) < 0) {\n            d[k] = inflector.capitalize(d[k]);\n          }\n        }\n        str_arr[i] = d.join('-');\n      }\n      str = str_arr.join(' ');\n      str = str.substring(0, 1).toUpperCase() + str.substring(1);\n      return str;\n    },\n    /**\n     * This function adds demodulize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Removes module names leaving only class names.(Ruby style)\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n     */\n    demodulize: function (str) {\n      var str_arr = str.split('::');\n      return str_arr[str_arr.length - 1];\n    },\n    /**\n     * This function adds tableize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return camel cased words into their underscored plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n     */\n    tableize: function (str) {\n      str = inflector.underscore(str);\n      str = inflector.pluralize(str);\n      return str;\n    },\n    /**\n     * This function adds classification support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n     */\n    classify: function (str) {\n      str = inflector.camelize(str);\n      str = inflector.singularize(str);\n      return str;\n    },\n    /**\n     * This function adds foreign key support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                   you can pass true to skip it.(optional)\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n     *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n     */\n    foreign_key: function (str, drop_id_ubar) {\n      str = inflector.demodulize(str);\n      str = inflector.underscore(str) + (drop_id_ubar ? '' : '_') + 'id';\n      return str;\n    },\n    /**\n     * This function adds ordinalize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return all found numbers their sequence like '22nd'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n     */\n    ordinalize: function (str) {\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n      for (; i < j; i++) {\n        var k = parseInt(str_arr[i], 10);\n        if (!isNaN(k)) {\n          var ltd = str_arr[i].substring(str_arr[i].length - 2);\n          var ld = str_arr[i].substring(str_arr[i].length - 1);\n          var suf = 'th';\n          if (ltd != '11' && ltd != '12' && ltd != '13') {\n            if (ld === '1') {\n              suf = 'st';\n            } else if (ld === '2') {\n              suf = 'nd';\n            } else if (ld === '3') {\n              suf = 'rd';\n            }\n          }\n          str_arr[i] += suf;\n        }\n      }\n      return str_arr.join(' ');\n    },\n    /**\n     * This function performs multiple inflection methods on a string\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Array} arr An array of inflection methods.\n     * @returns {String}\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n     */\n    transform: function (str, arr) {\n      var i = 0;\n      var j = arr.length;\n      for (; i < j; i++) {\n        var method = arr[i];\n        if (this.hasOwnProperty(method)) {\n          str = this[method](str);\n        }\n      }\n      return str;\n    }\n  };\n\n  /**\n   * @public\n   */\n  inflector.version = '1.3.8';\n  return inflector;\n});","map":{"version":3,"names":["root","factory","define","amd","exports","module","inflection","uncountable_words","plural_rules","RegExp","singular_rules","non_titlecased_words","id_suffix","underbar","space_or_underbar","uppercase","underbar_prefix","inflector","_apply_rules","str","rules","skip","override","ignore","indexOf","toLowerCase","i","j","length","match","undefined","replace","arr","item","from_index","compare_func","index","pluralize","plural","singularize","singular","camelize","low_first_letter","str_path","split","str_arr","init_x","k","l","first","charAt","toUpperCase","substring","join","underscore","all_upper_case","humanize","capitalize","dasherize","titleize","d","demodulize","tableize","classify","foreign_key","drop_id_ubar","ordinalize","parseInt","isNaN","ltd","ld","suf","transform","method","hasOwnProperty","version"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/path-proxy/node_modules/inflection/lib/inflection.js"],"sourcesContent":["/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n\n( function ( root, factory ){\n  if( typeof define === 'function' && define.amd ){\n    define([], factory );\n  }else if( typeof exports === 'object' ){\n    module.exports = factory();\n  }else{\n    root.inflection = factory();\n  }\n}( this, function (){\n\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [\n    'equipment', 'information', 'rice', 'money', 'species',\n    'series', 'fish', 'sheep', 'moose', 'deer', 'news'\n  ];\n\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n  var plural_rules = [\n\n    // do not replace if its already a plural word\n    [ new RegExp( '(m)en$',      'gi' )],\n    [ new RegExp( '(pe)ople$',   'gi' )],\n    [ new RegExp( '(child)ren$', 'gi' )],\n    [ new RegExp( '([ti])a$',    'gi' )],\n    [ new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' )],\n    [ new RegExp( '(hive)s$',           'gi' )],\n    [ new RegExp( '(tive)s$',           'gi' )],\n    [ new RegExp( '(curve)s$',          'gi' )],\n    [ new RegExp( '([lr])ves$',         'gi' )],\n    [ new RegExp( '([^fo])ves$',        'gi' )],\n    [ new RegExp( '([^aeiouy]|qu)ies$', 'gi' )],\n    [ new RegExp( '(s)eries$',          'gi' )],\n    [ new RegExp( '(m)ovies$',          'gi' )],\n    [ new RegExp( '(x|ch|ss|sh)es$',    'gi' )],\n    [ new RegExp( '([m|l])ice$',        'gi' )],\n    [ new RegExp( '(bus)es$',           'gi' )],\n    [ new RegExp( '(o)es$',             'gi' )],\n    [ new RegExp( '(shoe)s$',           'gi' )],\n    [ new RegExp( '(cris|ax|test)es$',  'gi' )],\n    [ new RegExp( '(octop|vir)i$',      'gi' )],\n    [ new RegExp( '(alias|status)es$',  'gi' )],\n    [ new RegExp( '^(ox)en',            'gi' )],\n    [ new RegExp( '(vert|ind)ices$',    'gi' )],\n    [ new RegExp( '(matr)ices$',        'gi' )],\n    [ new RegExp( '(quiz)zes$',         'gi' )],\n\n    // original rule\n    [ new RegExp( '(m)an$', 'gi' ),                 '$1en' ],\n    [ new RegExp( '(pe)rson$', 'gi' ),              '$1ople' ],\n    [ new RegExp( '(child)$', 'gi' ),               '$1ren' ],\n    [ new RegExp( '^(ox)$', 'gi' ),                 '$1en' ],\n    [ new RegExp( '(ax|test)is$', 'gi' ),           '$1es' ],\n    [ new RegExp( '(octop|vir)us$', 'gi' ),         '$1i' ],\n    [ new RegExp( '(alias|status)$', 'gi' ),        '$1es' ],\n    [ new RegExp( '(bu)s$', 'gi' ),                 '$1ses' ],\n    [ new RegExp( '(buffal|tomat|potat)o$', 'gi' ), '$1oes' ],\n    [ new RegExp( '([ti])um$', 'gi' ),              '$1a' ],\n    [ new RegExp( 'sis$', 'gi' ),                   'ses' ],\n    [ new RegExp( '(?:([^f])fe|([lr])f)$', 'gi' ),  '$1$2ves' ],\n    [ new RegExp( '(hive)$', 'gi' ),                '$1s' ],\n    [ new RegExp( '([^aeiouy]|qu)y$', 'gi' ),       '$1ies' ],\n    [ new RegExp( '(x|ch|ss|sh)$', 'gi' ),          '$1es' ],\n    [ new RegExp( '(matr|vert|ind)ix|ex$', 'gi' ),  '$1ices' ],\n    [ new RegExp( '([m|l])ouse$', 'gi' ),           '$1ice' ],\n    [ new RegExp( '(quiz)$', 'gi' ),                '$1zes' ],\n\n    [ new RegExp( 's$', 'gi' ), 's' ],\n    [ new RegExp( '$', 'gi' ),  's' ]\n  ];\n\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n  var singular_rules = [\n\n    // do not replace if its already a singular word\n    [ new RegExp( '(m)an$',                 'gi' )],\n    [ new RegExp( '(pe)rson$',              'gi' )],\n    [ new RegExp( '(child)$',               'gi' )],\n    [ new RegExp( '^(ox)$',                 'gi' )],\n    [ new RegExp( '(ax|test)is$',           'gi' )],\n    [ new RegExp( '(octop|vir)us$',         'gi' )],\n    [ new RegExp( '(alias|status)$',        'gi' )],\n    [ new RegExp( '(bu)s$',                 'gi' )],\n    [ new RegExp( '(buffal|tomat|potat)o$', 'gi' )],\n    [ new RegExp( '([ti])um$',              'gi' )],\n    [ new RegExp( 'sis$',                   'gi' )],\n    [ new RegExp( '(?:([^f])fe|([lr])f)$',  'gi' )],\n    [ new RegExp( '(hive)$',                'gi' )],\n    [ new RegExp( '([^aeiouy]|qu)y$',       'gi' )],\n    [ new RegExp( '(x|ch|ss|sh)$',          'gi' )],\n    [ new RegExp( '(matr|vert|ind)ix|ex$',  'gi' )],\n    [ new RegExp( '([m|l])ouse$',           'gi' )],\n    [ new RegExp( '(quiz)$',                'gi' )],\n\n    // original rule\n    [ new RegExp( '(m)en$', 'gi' ),                                                       '$1an' ],\n    [ new RegExp( '(pe)ople$', 'gi' ),                                                    '$1rson' ],\n    [ new RegExp( '(child)ren$', 'gi' ),                                                  '$1' ],\n    [ new RegExp( '([ti])a$', 'gi' ),                                                     '$1um' ],\n    [ new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ), '$1$2sis' ],\n    [ new RegExp( '(hive)s$', 'gi' ),                                                     '$1' ],\n    [ new RegExp( '(tive)s$', 'gi' ),                                                     '$1' ],\n    [ new RegExp( '(curve)s$', 'gi' ),                                                    '$1' ],\n    [ new RegExp( '([lr])ves$', 'gi' ),                                                   '$1f' ],\n    [ new RegExp( '([^fo])ves$', 'gi' ),                                                  '$1fe' ],\n    [ new RegExp( '(m)ovies$', 'gi' ),                                                    '$1ovie' ],\n    [ new RegExp( '([^aeiouy]|qu)ies$', 'gi' ),                                           '$1y' ],\n    [ new RegExp( '(s)eries$', 'gi' ),                                                    '$1eries' ],\n    [ new RegExp( '(x|ch|ss|sh)es$', 'gi' ),                                              '$1' ],\n    [ new RegExp( '([m|l])ice$', 'gi' ),                                                  '$1ouse' ],\n    [ new RegExp( '(bus)es$', 'gi' ),                                                     '$1' ],\n    [ new RegExp( '(o)es$', 'gi' ),                                                       '$1' ],\n    [ new RegExp( '(shoe)s$', 'gi' ),                                                     '$1' ],\n    [ new RegExp( '(cris|ax|test)es$', 'gi' ),                                            '$1is' ],\n    [ new RegExp( '(octop|vir)i$', 'gi' ),                                                '$1us' ],\n    [ new RegExp( '(alias|status)es$', 'gi' ),                                            '$1' ],\n    [ new RegExp( '^(ox)en', 'gi' ),                                                      '$1' ],\n    [ new RegExp( '(vert|ind)ices$', 'gi' ),                                              '$1ex' ],\n    [ new RegExp( '(matr)ices$', 'gi' ),                                                  '$1ix' ],\n    [ new RegExp( '(quiz)zes$', 'gi' ),                                                   '$1' ],\n    [ new RegExp( 'ss$', 'gi' ),                                                          'ss' ],\n    [ new RegExp( 's$', 'gi' ),                                                           '' ]\n  ];\n\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n  var non_titlecased_words = [\n    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',\n    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'\n  ];\n\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );\n  var underbar          = new RegExp( '_', 'g' );\n  var space_or_underbar = new RegExp( '[\\ _]', 'g' );\n  var uppercase         = new RegExp( '([A-Z])', 'g' );\n  var underbar_prefix   = new RegExp( '^_' );\n\n  var inflector = {\n\n  /**\n   * A helper method that applies rules based replacement to a String.\n   * @private\n   * @function\n   * @param {String} str String to modify and return based on the passed rules.\n   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n   * @param {Array: [String]} skip Strings to skip if they match\n   * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n   * @returns {String} Return passed String modified by passed rules.\n   * @example\n   *\n   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n   */\n    _apply_rules : function ( str, rules, skip, override ){\n      if( override ){\n        str = override;\n      }else{\n        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );\n\n        if( !ignore ){\n          var i = 0;\n          var j = rules.length;\n\n          for( ; i < j; i++ ){\n            if( str.match( rules[ i ][ 0 ])){\n              if( rules[ i ][ 1 ] !== undefined ){\n                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This lets us detect if an Array contains a given element.\n   * @public\n   * @function\n   * @param {Array} arr The subject array.\n   * @param {Object} item Object to locate in the Array.\n   * @param {Number} from_index Starts checking from this position in the Array.(optional)\n   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n   * @returns {Number} Return index position in the Array of the passed item.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n   */\n    indexOf : function ( arr, item, from_index, compare_func ){\n      if( !from_index ){\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i     = from_index;\n      var j     = arr.length;\n\n      for( ; i < j; i++ ){\n        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n\n\n  /**\n   * This function adds pluralization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} Singular English language nouns are returned in plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.pluralize( 'person' ); // === 'people'\n   *     inflection.pluralize( 'octopus' ); // === 'octopi'\n   *     inflection.pluralize( 'Hat' ); // === 'Hats'\n   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n   */\n    pluralize : function ( str, plural ){\n      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n    },\n\n\n\n  /**\n   * This function adds singularization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @returns {String} Plural English language nouns are returned in singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.singularize( 'people' ); // === 'person'\n   *     inflection.singularize( 'octopi' ); // === 'octopus'\n   *     inflection.singularize( 'Hats' ); // === 'Hat'\n   *     inflection.singularize( 'guys', 'person' ); // === 'person'\n   */\n    singularize : function ( str, singular ){\n      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n    },\n\n\n\n  /**\n   * This function adds camelization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in camel case.\n   *                  additionally '/' is translated to '::'\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n   */\n    camelize : function ( str, low_first_letter ){\n      var str_path = str.split( '/' );\n      var i        = 0;\n      var j        = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for( ; i < j; i++ ){\n        str_arr = str_path[ i ].split( '_' );\n        k       = 0;\n        l       = str_arr.length;\n\n        for( ; k < l; k++ ){\n          if( k !== 0 ){\n            str_arr[ k ] = str_arr[ k ].toLowerCase();\n          }\n\n          first = str_arr[ k ].charAt( 0 );\n          first = low_first_letter && i === 0 && k === 0\n            ? first.toLowerCase() : first.toUpperCase();\n          str_arr[ k ] = first + str_arr[ k ].substring( 1 );\n        }\n\n        str_path[ i ] = str_arr.join( '' );\n      }\n\n      return str_path.join( '::' );\n    },\n\n\n\n  /**\n   * This function adds underscore support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n   *                  Passing true will return as entered.\n   * @returns {String} Camel cased words are returned as lower cased and underscored.\n   *                  additionally '::' is translated to '/'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'MP', true ); // === 'MP'\n   */\n    underscore : function ( str, all_upper_case ){\n      if( all_upper_case && str === str.toUpperCase()) return str;\n\n      var str_path = str.split( '::' );\n      var i        = 0;\n      var j        = str_path.length;\n\n      for( ; i < j; i++ ){\n        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );\n        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );\n      }\n\n      return str_path.join( '/' ).toLowerCase();\n    },\n\n\n\n  /**\n   * This function adds humanize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in humanized form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n   *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n   */\n    humanize : function ( str, low_first_letter ){\n      str = str.toLowerCase();\n      str = str.replace( id_suffix, '' );\n      str = str.replace( underbar, ' ' );\n\n      if( !low_first_letter ){\n        str = inflector.capitalize( str );\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds capitalization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} All characters will be lower case and the first will be upper.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n   */\n    capitalize : function ( str ){\n      str = str.toLowerCase();\n\n      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n    },\n\n\n\n  /**\n   * This function adds dasherization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Replaces all spaces or underbars with dashes.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n   */\n    dasherize : function ( str ){\n      return str.replace( space_or_underbar, '-' );\n    },\n\n\n\n  /**\n   * This function adds titleize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Capitalizes words as you would for a book title.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n   */\n    titleize : function ( str ){\n      str         = str.toLowerCase().replace( underbar, ' ' );\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n      var d, k, l;\n\n      for( ; i < j; i++ ){\n        d = str_arr[ i ].split( '-' );\n        k = 0;\n        l = d.length;\n\n        for( ; k < l; k++){\n          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){\n            d[ k ] = inflector.capitalize( d[ k ]);\n          }\n        }\n\n        str_arr[ i ] = d.join( '-' );\n      }\n\n      str = str_arr.join( ' ' );\n      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds demodulize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Removes module names leaving only class names.(Ruby style)\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n   */\n    demodulize : function ( str ){\n      var str_arr = str.split( '::' );\n\n      return str_arr[ str_arr.length - 1 ];\n    },\n\n\n\n  /**\n   * This function adds tableize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return camel cased words into their underscored plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n   */\n    tableize : function ( str ){\n      str = inflector.underscore( str );\n      str = inflector.pluralize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds classification support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n   */\n    classify : function ( str ){\n      str = inflector.camelize( str );\n      str = inflector.singularize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds foreign key support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */\n    foreign_key : function ( str, drop_id_ubar ){\n      str = inflector.demodulize( str );\n      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds ordinalize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return all found numbers their sequence like '22nd'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n   */\n    ordinalize : function ( str ){\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n\n      for( ; i < j; i++ ){\n        var k = parseInt( str_arr[ i ], 10 );\n\n        if( !isNaN( k )){\n          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );\n          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );\n          var suf = 'th';\n\n          if( ltd != '11' && ltd != '12' && ltd != '13' ){\n            if( ld === '1' ){\n              suf = 'st';\n            }else if( ld === '2' ){\n              suf = 'nd';\n            }else if( ld === '3' ){\n              suf = 'rd';\n            }\n          }\n\n          str_arr[ i ] += suf;\n        }\n      }\n\n      return str_arr.join( ' ' );\n    },\n\n  /**\n   * This function performs multiple inflection methods on a string\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Array} arr An array of inflection methods.\n   * @returns {String}\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n   */\n    transform : function ( str, arr ){\n      var i = 0;\n      var j = arr.length;\n\n      for( ;i < j; i++ ){\n        var method = arr[ i ];\n\n        if( this.hasOwnProperty( method )){\n          str = this[ method ]( str );\n        }\n      }\n\n      return str;\n    }\n  };\n\n/**\n * @public\n */\n  inflector.version = '1.3.8';\n\n  return inflector;\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}