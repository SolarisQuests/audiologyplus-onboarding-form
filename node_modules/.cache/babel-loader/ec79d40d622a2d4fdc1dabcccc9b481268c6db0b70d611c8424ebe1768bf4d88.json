{"ast":null,"code":"'use strict';\n\n/**\n * Module exports.\n */\nmodule.exports = exports = PacProxyAgent;\n\n/**\n * Supported \"protocols\". Delegates out to the `get-uri` module.\n */\n\nvar getUri = require('get-uri');\nObject.defineProperty(exports, 'protocols', {\n  enumerable: true,\n  configurable: true,\n  get: function () {\n    return Object.keys(getUri.protocols);\n  }\n});\n\n/**\n * Module dependencies.\n */\n\nvar net = require('net');\nvar tls = require('tls');\nvar crypto = require('crypto');\nvar parse = require('url').parse;\nvar format = require('url').format;\nvar Agent = require('agent-base');\nvar HttpProxyAgent = require('http-proxy-agent');\nvar HttpsProxyAgent = require('https-proxy-agent');\nvar SocksProxyAgent = require('socks-proxy-agent');\nvar PacResolver = require('pac-resolver');\nvar getRawBody = require('raw-body');\nvar inherits = require('util').inherits;\nvar debug = require('debug')('pac-proxy-agent');\n\n/**\n * The `PacProxyAgent` class.\n *\n * A few different \"protocol\" modes are supported (supported protocols are\n * backed by the `get-uri` module):\n *\n *   - \"pac+data\", \"data\" - refers to an embedded \"data:\" URI\n *   - \"pac+file\", \"file\" - refers to a local file\n *   - \"pac+ftp\", \"ftp\" - refers to a file located on an FTP server\n *   - \"pac+http\", \"http\" - refers to an HTTP endpoint\n *   - \"pac+https\", \"https\" - refers to an HTTPS endpoint\n *\n * @api public\n */\n\nfunction PacProxyAgent(uri, opts) {\n  if (!(this instanceof PacProxyAgent)) return new PacProxyAgent(uri, opts);\n\n  // was an options object passed in first?\n  if ('object' === typeof uri) {\n    opts = uri;\n\n    // result of a url.parse() call?\n    if (opts.href) {\n      if (opts.path && !opts.pathname) {\n        opts.pathname = opts.path;\n      }\n      opts.slashes = true;\n      uri = format(opts);\n    } else {\n      uri = opts.uri;\n    }\n  }\n  if (!opts) opts = {};\n  if (!uri) throw new Error('a PAC file URI must be specified!');\n  debug('creating PacProxyAgent with URI %o and options %o', uri, opts);\n  Agent.call(this, connect);\n\n  // strip the \"pac+\" prefix\n  this.uri = uri.replace(/^pac\\+/i, '');\n  this.sandbox = opts.sandbox;\n  this.proxy = opts;\n  this.cache = this._resolver = null;\n}\ninherits(PacProxyAgent, Agent);\n\n/**\n * Loads the PAC proxy file from the source if necessary, and returns\n * a generated `FindProxyForURL()` resolver function to use.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\nPacProxyAgent.prototype.loadResolver = function (fn) {\n  var self = this;\n\n  // kick things off by attempting to (re)load the contents of the PAC file URI\n  this.loadPacFile(onpacfile);\n\n  // loadPacFile() callback function\n  function onpacfile(err, code) {\n    if (err) {\n      if ('ENOTMODIFIED' == err.code) {\n        debug('got ENOTMODIFIED response, reusing previous proxy resolver');\n        fn(null, self._resolver);\n      } else {\n        fn(err);\n      }\n      return;\n    }\n\n    // create a sha1 hash of the JS code\n    var hash = crypto.createHash('sha1').update(code).digest('hex');\n    if (self._resolver && self._resolver.hash == hash) {\n      debug('same sha1 hash for code - contents have not changed, reusing previous proxy resolver');\n      fn(null, self._resolver);\n      return;\n    }\n\n    // cache the resolver\n    debug('creating new proxy resolver instance');\n    self._resolver = new PacResolver(code, {\n      filename: self.uri,\n      sandbox: self.sandbox\n    });\n\n    // store that sha1 hash on the resolver instance\n    // for future comparison purposes\n    self._resolver.hash = hash;\n    fn(null, self._resolver);\n  }\n};\n\n/**\n * Loads the contents of the PAC proxy file.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\nPacProxyAgent.prototype.loadPacFile = function (fn) {\n  debug('loading PAC file: %o', this.uri);\n  var self = this;\n\n  // delegate out to the `get-uri` module\n  var opts = {};\n  if (this.cache) {\n    opts.cache = this.cache;\n  }\n  getUri(this.uri, opts, onstream);\n  function onstream(err, rs) {\n    if (err) return fn(err);\n    debug('got stream.Readable instance for URI');\n    self.cache = rs;\n    getRawBody(rs, 'utf8', onbuffer);\n  }\n  function onbuffer(err, buf) {\n    if (err) return fn(err);\n    debug('read %o byte PAC file from URI', buf.length);\n    fn(null, buf);\n  }\n};\n\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\nfunction connect(req, opts, fn) {\n  var url;\n  var host;\n  var self = this;\n  var secure = Boolean(opts.secureEndpoint);\n\n  // first we need get a generated FindProxyForURL() function,\n  // either cached or retreived from the source\n  this.loadResolver(onresolver);\n\n  // `loadResolver()` callback function\n  function onresolver(err, FindProxyForURL) {\n    if (err) return fn(err);\n\n    // calculate the `url` parameter\n    var defaultPort = secure ? 443 : 80;\n    var path = req.path;\n    var firstQuestion = path.indexOf('?');\n    var search;\n    if (-1 != firstQuestion) {\n      search = path.substring(firstQuestion);\n      path = path.substring(0, firstQuestion);\n    }\n    url = format(Object.assign({}, opts, {\n      protocol: secure ? 'https:' : 'http:',\n      pathname: path,\n      search: search,\n      // need to use `hostname` instead of `host` otherwise `port` is ignored\n      hostname: opts.host,\n      host: null,\n      // set `port` to null when it is the protocol default port (80 / 443)\n      port: defaultPort == opts.port ? null : opts.port\n    }));\n\n    // calculate the `host` parameter\n    host = parse(url).hostname;\n    debug('url: %o, host: %o', url, host);\n    FindProxyForURL(url, host, onproxy);\n  }\n\n  // `FindProxyForURL()` callback function\n  function onproxy(err, proxy) {\n    if (err) return fn(err);\n\n    // default to \"DIRECT\" if a falsey value was returned (or nothing)\n    if (!proxy) proxy = 'DIRECT';\n    var proxies = String(proxy).trim().split(/\\s*;\\s*/g).filter(Boolean);\n\n    // XXX: right now, only the first proxy specified will be used\n    var first = proxies[0];\n    debug('using proxy: %o', first);\n    var agent;\n    var parts = first.split(/\\s+/);\n    var type = parts[0];\n    if ('DIRECT' == type) {\n      // direct connection to the destination endpoint\n      var socket;\n      if (secure) {\n        socket = tls.connect(opts);\n      } else {\n        socket = net.connect(opts);\n      }\n      return fn(null, socket);\n    } else if ('SOCKS' == type) {\n      // use a SOCKS proxy\n      agent = new SocksProxyAgent('socks://' + parts[1]);\n    } else if ('PROXY' == type || 'HTTPS' == type) {\n      // use an HTTP or HTTPS proxy\n      // http://dev.chromium.org/developers/design-documents/secure-web-proxy\n      var proxyURL = ('HTTPS' === type ? 'https' : 'http') + '://' + parts[1];\n      var proxy = Object.assign({}, self.proxy, parse(proxyURL));\n      if (secure) {\n        agent = new HttpsProxyAgent(proxy);\n      } else {\n        agent = new HttpProxyAgent(proxy);\n      }\n    } else {\n      throw new Error('Unknown proxy type: ' + type);\n    }\n    if (agent) agent.callback(req, opts, fn);\n  }\n}","map":{"version":3,"names":["module","exports","PacProxyAgent","getUri","require","Object","defineProperty","enumerable","configurable","get","keys","protocols","net","tls","crypto","parse","format","Agent","HttpProxyAgent","HttpsProxyAgent","SocksProxyAgent","PacResolver","getRawBody","inherits","debug","uri","opts","href","path","pathname","slashes","Error","call","connect","replace","sandbox","proxy","cache","_resolver","prototype","loadResolver","fn","self","loadPacFile","onpacfile","err","code","hash","createHash","update","digest","filename","onstream","rs","onbuffer","buf","length","req","url","host","secure","Boolean","secureEndpoint","onresolver","FindProxyForURL","defaultPort","firstQuestion","indexOf","search","substring","assign","protocol","hostname","port","onproxy","proxies","String","trim","split","filter","first","agent","parts","type","socket","proxyURL","callback"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pac-proxy-agent/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = PacProxyAgent;\n\n/**\n * Supported \"protocols\". Delegates out to the `get-uri` module.\n */\n\nvar getUri = require('get-uri');\nObject.defineProperty(exports, 'protocols', {\n  enumerable: true,\n  configurable: true,\n  get: function () { return Object.keys(getUri.protocols); }\n});\n\n/**\n * Module dependencies.\n */\n\nvar net = require('net');\nvar tls = require('tls');\nvar crypto = require('crypto');\nvar parse = require('url').parse;\nvar format = require('url').format;\nvar Agent = require('agent-base');\nvar HttpProxyAgent = require('http-proxy-agent');\nvar HttpsProxyAgent = require('https-proxy-agent');\nvar SocksProxyAgent = require('socks-proxy-agent');\nvar PacResolver = require('pac-resolver');\nvar getRawBody = require('raw-body');\nvar inherits = require('util').inherits;\nvar debug = require('debug')('pac-proxy-agent');\n\n/**\n * The `PacProxyAgent` class.\n *\n * A few different \"protocol\" modes are supported (supported protocols are\n * backed by the `get-uri` module):\n *\n *   - \"pac+data\", \"data\" - refers to an embedded \"data:\" URI\n *   - \"pac+file\", \"file\" - refers to a local file\n *   - \"pac+ftp\", \"ftp\" - refers to a file located on an FTP server\n *   - \"pac+http\", \"http\" - refers to an HTTP endpoint\n *   - \"pac+https\", \"https\" - refers to an HTTPS endpoint\n *\n * @api public\n */\n\nfunction PacProxyAgent (uri, opts) {\n  if (!(this instanceof PacProxyAgent)) return new PacProxyAgent(uri, opts);\n\n  // was an options object passed in first?\n  if ('object' === typeof uri) {\n    opts = uri;\n\n    // result of a url.parse() call?\n    if (opts.href) {\n      if (opts.path && !opts.pathname) {\n        opts.pathname = opts.path;\n      }\n      opts.slashes = true;\n      uri = format(opts);\n    } else {\n      uri = opts.uri;\n    }\n  }\n  if (!opts) opts = {};\n\n  if (!uri) throw new Error('a PAC file URI must be specified!');\n  debug('creating PacProxyAgent with URI %o and options %o', uri, opts);\n\n  Agent.call(this, connect);\n\n  // strip the \"pac+\" prefix\n  this.uri = uri.replace(/^pac\\+/i, '');\n\n  this.sandbox = opts.sandbox;\n\n  this.proxy = opts;\n\n  this.cache = this._resolver = null;\n}\ninherits(PacProxyAgent, Agent);\n\n/**\n * Loads the PAC proxy file from the source if necessary, and returns\n * a generated `FindProxyForURL()` resolver function to use.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\nPacProxyAgent.prototype.loadResolver = function (fn) {\n  var self = this;\n\n  // kick things off by attempting to (re)load the contents of the PAC file URI\n  this.loadPacFile(onpacfile);\n\n  // loadPacFile() callback function\n  function onpacfile (err, code) {\n    if (err) {\n      if ('ENOTMODIFIED' == err.code) {\n        debug('got ENOTMODIFIED response, reusing previous proxy resolver');\n        fn(null, self._resolver);\n      } else {\n        fn(err);\n      }\n      return;\n    }\n\n    // create a sha1 hash of the JS code\n    var hash = crypto.createHash('sha1').update(code).digest('hex');\n\n    if (self._resolver && self._resolver.hash == hash) {\n      debug('same sha1 hash for code - contents have not changed, reusing previous proxy resolver');\n      fn(null, self._resolver);\n      return;\n    }\n\n    // cache the resolver\n    debug('creating new proxy resolver instance');\n    self._resolver = new PacResolver(code, {\n      filename: self.uri,\n      sandbox: self.sandbox\n    });\n\n    // store that sha1 hash on the resolver instance\n    // for future comparison purposes\n    self._resolver.hash = hash;\n\n    fn(null, self._resolver);\n  }\n};\n\n/**\n * Loads the contents of the PAC proxy file.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\nPacProxyAgent.prototype.loadPacFile = function (fn) {\n  debug('loading PAC file: %o', this.uri);\n  var self = this;\n\n  // delegate out to the `get-uri` module\n  var opts = {};\n  if (this.cache) {\n    opts.cache = this.cache;\n  }\n  getUri(this.uri, opts, onstream);\n\n  function onstream (err, rs) {\n    if (err) return fn(err);\n    debug('got stream.Readable instance for URI');\n    self.cache = rs;\n    getRawBody(rs, 'utf8', onbuffer);\n  }\n\n  function onbuffer (err, buf) {\n    if (err) return fn(err);\n    debug('read %o byte PAC file from URI', buf.length);\n    fn(null, buf);\n  }\n};\n\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\nfunction connect (req, opts, fn) {\n  var url;\n  var host;\n  var self = this;\n  var secure = Boolean(opts.secureEndpoint);\n\n  // first we need get a generated FindProxyForURL() function,\n  // either cached or retreived from the source\n  this.loadResolver(onresolver);\n\n  // `loadResolver()` callback function\n  function onresolver (err, FindProxyForURL) {\n    if (err) return fn(err);\n\n    // calculate the `url` parameter\n    var defaultPort = secure ? 443 : 80;\n    var path = req.path;\n    var firstQuestion = path.indexOf('?');\n    var search;\n    if (-1 != firstQuestion) {\n      search = path.substring(firstQuestion);\n      path = path.substring(0, firstQuestion);\n    }\n    url = format(Object.assign({}, opts, {\n      protocol: secure ? 'https:' : 'http:',\n      pathname: path,\n      search: search,\n\n      // need to use `hostname` instead of `host` otherwise `port` is ignored\n      hostname: opts.host,\n      host: null,\n\n      // set `port` to null when it is the protocol default port (80 / 443)\n      port: defaultPort == opts.port ? null : opts.port\n    }));\n\n    // calculate the `host` parameter\n    host = parse(url).hostname;\n\n    debug('url: %o, host: %o', url, host);\n    FindProxyForURL(url, host, onproxy);\n  }\n\n  // `FindProxyForURL()` callback function\n  function onproxy (err, proxy) {\n    if (err) return fn(err);\n\n    // default to \"DIRECT\" if a falsey value was returned (or nothing)\n    if (!proxy) proxy = 'DIRECT';\n\n    var proxies = String(proxy).trim().split(/\\s*;\\s*/g).filter(Boolean);\n\n    // XXX: right now, only the first proxy specified will be used\n    var first = proxies[0];\n    debug('using proxy: %o', first);\n\n    var agent;\n    var parts = first.split(/\\s+/);\n    var type = parts[0];\n\n    if ('DIRECT' == type) {\n      // direct connection to the destination endpoint\n      var socket;\n      if (secure) {\n        socket = tls.connect(opts);\n      } else {\n        socket = net.connect(opts);\n      }\n      return fn(null, socket);\n    } else if ('SOCKS' == type) {\n      // use a SOCKS proxy\n      agent = new SocksProxyAgent('socks://' + parts[1]);\n    } else if ('PROXY' == type || 'HTTPS' == type) {\n      // use an HTTP or HTTPS proxy\n      // http://dev.chromium.org/developers/design-documents/secure-web-proxy\n      var proxyURL = ('HTTPS' === type ? 'https' : 'http') + '://' + parts[1];\n      var proxy = Object.assign({}, self.proxy, parse(proxyURL));\n      if (secure) {\n        agent = new HttpsProxyAgent(proxy);\n      } else {\n        agent = new HttpProxyAgent(proxy);\n      }\n    } else {\n      throw new Error('Unknown proxy type: ' + type);\n    }\n    if (agent) agent.callback(req, opts, fn);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}