{"ast":null,"code":"const https = require('https');\nconst http = require('http');\nconst ProxyAgent = require('proxy-agent');\nconst qs = require('querystring');\nconst fs = require('fs');\nconst Readable = require('stream').Readable;\nconst FormData = require('form-data');\nconst Attachment = require('./attachment');\nconst retry = require('async').retry;\nconst promisifyCall = require('promisify-call');\nconst debug = require('debug')('mailgun-js');\nfunction isOk(i) {\n  return typeof i !== 'undefined' && i !== null;\n}\nfunction getDataValue(key, input) {\n  if (isSpecialParam(key) && typeof input === 'object') {\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return input.toString();\n  }\n  return input;\n}\nfunction isSpecialParam(paramKey) {\n  const key = paramKey.toLowerCase();\n  return key === 'vars' || key === 'members' || key === 'recipient-variables' || key.indexOf('v:') === 0;\n}\nfunction isMultiUnsubsribe(path, data) {\n  return path.indexOf('/unsubscribes') && data && Array.isArray(data);\n}\nfunction prepareData(data) {\n  const params = {};\n  for (const key in data) {\n    if (key !== 'attachment' && key !== 'inline' && isOk(data[key])) {\n      const value = getDataValue(key, data[key]);\n      if (isOk(value)) {\n        params[key] = value;\n      }\n    } else {\n      params[key] = data[key];\n    }\n  }\n  return params;\n}\nclass Request {\n  constructor(options) {\n    this.host = options.host;\n    this.protocol = options.protocol;\n    this.port = options.port;\n    this.endpoint = options.endpoint;\n    this.auth = options.auth;\n    this.proxy = options.proxy;\n    this.timeout = options.timeout;\n    this.retry = options.retry || 1;\n    this.testMode = options.testMode;\n    this.testModeLogger = typeof options.testModeLogger === 'function' ? options.testModeLogger : this.defaultTestModeLogger;\n  }\n  _request(method, resource, data, fn) {\n    let path = ''.concat(this.endpoint, resource);\n    const params = prepareData(data);\n    this.payload = '';\n    const isMIME = path.indexOf('/messages.mime') >= 0;\n    this.headers = {};\n    if (method === 'GET' || method === 'DELETE') {\n      this.payload = qs.stringify(params);\n      if (this.payload) path = path.concat('?', this.payload);\n    } else {\n      if (isMIME) {\n        this.headers['Content-Type'] = 'multipart/form-data';\n      } else if (method === 'POST' && isMultiUnsubsribe(path, data)) {\n        this.headers['Content-Type'] = 'application/json';\n      } else {\n        this.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      }\n      if (params && (params.attachment || params.inline || isMIME && params.message)) {\n        this.prepareFormData(params);\n      } else {\n        if (method === 'POST' && isMultiUnsubsribe(path, data)) {\n          this.payload = JSON.stringify(data);\n        } else {\n          this.payload = qs.stringify(params);\n        }\n        if (this.payload) {\n          this.headers['Content-Length'] = Buffer.byteLength(this.payload);\n        } else {\n          this.headers['Content-Length'] = 0;\n        }\n      }\n    }\n\n    // check for MIME is true in case of messages GET\n    if (method === 'GET' && path.indexOf('/messages') >= 0 && params && params.MIME === true) {\n      this.headers.Accept = 'message/rfc2822';\n    }\n    debug('%s %s', method, path);\n    const opts = {\n      'hostname': this.host,\n      'port': this.port,\n      'protocol': this.protocol,\n      path,\n      method,\n      'headers': this.headers,\n      'auth': this.auth,\n      'agent': false,\n      'timeout': this.timeout\n    };\n    if (this.proxy) {\n      opts.agent = new ProxyAgent(this.proxy);\n    }\n    if (this.testMode) {\n      this.testModeLogger(opts, this.payload, this.form);\n      return fn();\n    }\n    if (typeof this.retry === 'object' || this.retry > 1) {\n      retry(this.retry, retryCb => {\n        this.callback = retryCb;\n        this.performRequest(opts);\n      }, fn);\n    } else {\n      this.callback = fn;\n      this.performRequest(opts);\n    }\n  }\n  request(method, resource, data, fn) {\n    if (typeof data === 'function' && !fn) {\n      fn = data;\n      data = {};\n    }\n    if (!data) {\n      data = {};\n    }\n    return promisifyCall(this, this._request, method, resource, data, fn);\n  }\n  prepareFormData(data) {\n    this.form = new FormData();\n    for (const key in data) {\n      if ({}.hasOwnProperty.call(data, key)) {\n        const obj = data[key];\n        if (isOk(obj)) {\n          if (key === 'attachment' || key === 'inline') {\n            if (Array.isArray(obj)) {\n              for (let i = 0; i < obj.length; i++) {\n                this.handleAttachmentObject(key, obj[i]);\n              }\n            } else {\n              this.handleAttachmentObject(key, obj);\n            }\n          } else if (key === 'message') {\n            this.handleMimeObject(key, obj);\n          } else if (Array.isArray(obj)) {\n            obj.forEach(element => {\n              if (isOk(element)) {\n                const value = getDataValue(key, element);\n                if (isOk(value)) {\n                  this.form.append(key, value);\n                }\n              }\n            });\n          } else {\n            const value = getDataValue(key, obj);\n            if (isOk(value)) {\n              this.form.append(key, value);\n            }\n          }\n        }\n      }\n    }\n    this.headers = this.form.getHeaders();\n  }\n  handleMimeObject(key, obj) {\n    if (typeof obj === 'string') {\n      if (fs.existsSync(obj) && fs.statSync(obj).isFile()) {\n        this.form.append('message', fs.createReadStream(obj));\n      } else {\n        this.form.append('message', Buffer.from(obj), {\n          'filename': 'message.mime',\n          'contentType': 'message/rfc822',\n          'knownLength': obj.length\n        });\n      }\n    } else if (obj instanceof Readable) {\n      this.form.append('message', obj);\n    }\n  }\n  handleAttachmentObject(key, obj) {\n    if (!this.form) this.form = new FormData();\n    if (Buffer.isBuffer(obj)) {\n      debug('appending buffer to form data. key: %s', key);\n      this.form.append(key, obj, {\n        'filename': 'file'\n      });\n    } else if (typeof obj === 'string') {\n      debug('appending stream to form data. key: %s obj: %s', key, obj);\n      this.form.append(key, fs.createReadStream(obj));\n    } else if (typeof obj === 'object' && obj.readable === true) {\n      debug('appending readable stream to form data. key: %s obj: %s', key, obj);\n      this.form.append(key, obj);\n    } else if (typeof obj === 'object' && obj instanceof Attachment) {\n      const attachmentType = obj.getType();\n      if (attachmentType === 'path') {\n        debug('appending attachment stream to form data. key: %s data: %s filename: %s', key, obj.data, obj.filename);\n        this.form.append(key, fs.createReadStream(obj.data), {\n          'filename': obj.filename || 'attached file'\n        });\n      } else if (attachmentType === 'buffer') {\n        debug('appending attachment buffer to form data. key: %s filename: %s', key, obj.filename);\n        const formOpts = {\n          'filename': obj.filename || 'attached file'\n        };\n        if (obj.contentType) {\n          formOpts.contentType = obj.contentType;\n        }\n        if (obj.knownLength) {\n          formOpts.knownLength = obj.knownLength;\n        }\n        this.form.append(key, obj.data, formOpts);\n      } else if (attachmentType === 'stream') {\n        if (obj.knownLength && !obj.contentType || !obj.knownLength && obj.contentType) {\n          debug('missing content type or length for attachment stream. key: %s', key);\n        } else {\n          debug('appending attachment stream to form data. key: %s', key);\n\n          // add all known options\n          let formOpts = {};\n          if (obj.filename) {\n            formOpts.filename = obj.filename;\n          }\n          if (obj.contentType) {\n            formOpts.contentType = obj.contentType;\n          }\n          if (obj.knownLength) {\n            formOpts.knownLength = obj.knownLength;\n          }\n          this.form.append(key, obj.data, formOpts);\n        }\n      }\n    } else {\n      debug('unknown attachment type. key: %s', key);\n    }\n  }\n  handleResponse(res) {\n    let chunks = '';\n    let error;\n    res.on('data', chunk => {\n      chunks += chunk;\n    });\n    res.on('error', err => {\n      error = err;\n    });\n    res.on('end', () => {\n      let body;\n      debug('response status code: %s content type: %s error: %s', res.statusCode, res.headers['content-type'], error);\n\n      // FIXME: An ugly hack to overcome invalid response type in mailgun api (see http://bit.ly/1eF30fU).\n      // We skip content-type validation for 'campaings' endpoint assuming it is JSON.\n      const skipContentTypeCheck = res.req && res.req.path && res.req.path.match(/\\/campaigns/);\n      const isJSON = res.headers['content-type'] && res.headers['content-type'].indexOf('application/json') >= 0;\n      if (chunks && !error && (skipContentTypeCheck || isJSON)) {\n        try {\n          body = JSON.parse(chunks);\n        } catch (e) {\n          error = e;\n        }\n      }\n      if (process.env.DEBUG_MAILGUN_FORCE_RETRY) {\n        error = new Error('Force retry error');\n        delete process.env.DEBUG_MAILGUN_FORCE_RETRY;\n      }\n      if (!error && res.statusCode !== 200) {\n        let msg = body || chunks || res.statusMessage;\n        if (body) {\n          msg = body.message || body.response;\n        }\n        error = new Error(msg);\n        error.statusCode = res.statusCode;\n      }\n      return this.callback(error, body);\n    });\n  }\n  performRequest(options) {\n    const method = options.method;\n    if (this.form && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      let alreadyHandled = false;\n      this.form.submit(options, (err, res) => {\n        if (alreadyHandled) {\n          return;\n        }\n        alreadyHandled = true;\n        if (err) {\n          return this.callback(err);\n        }\n        return this.handleResponse(res);\n      });\n    } else {\n      let req;\n      if (options.protocol === 'http:') {\n        req = http.request(options, res => {\n          return this.handleResponse(res);\n        });\n      } else {\n        req = https.request(options, res => {\n          return this.handleResponse(res);\n        });\n      }\n      if (options.timeout) {\n        req.setTimeout(options.timeout, () => {\n          // timeout occurs\n          req.abort();\n        });\n      }\n      req.on('error', e => {\n        return this.callback(e);\n      });\n      if (this.payload && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n        req.write(this.payload);\n      }\n      req.end();\n    }\n  }\n  defaultTestModeLogger(httpOptions, payload, formData) {\n    const testlog = debug.enabled ? debug : console.log;\n    testlog('options: %o', httpOptions);\n    testlog('payload: %o', payload);\n    testlog('form: %o', formData);\n  }\n}\nmodule.exports = Request;","map":{"version":3,"names":["https","require","http","ProxyAgent","qs","fs","Readable","FormData","Attachment","retry","promisifyCall","debug","isOk","i","getDataValue","key","input","isSpecialParam","JSON","stringify","toString","paramKey","toLowerCase","indexOf","isMultiUnsubsribe","path","data","Array","isArray","prepareData","params","value","Request","constructor","options","host","protocol","port","endpoint","auth","proxy","timeout","testMode","testModeLogger","defaultTestModeLogger","_request","method","resource","fn","concat","payload","isMIME","headers","attachment","inline","message","prepareFormData","Buffer","byteLength","MIME","Accept","opts","agent","form","retryCb","callback","performRequest","request","hasOwnProperty","call","obj","length","handleAttachmentObject","handleMimeObject","forEach","element","append","getHeaders","existsSync","statSync","isFile","createReadStream","from","isBuffer","readable","attachmentType","getType","filename","formOpts","contentType","knownLength","handleResponse","res","chunks","error","on","chunk","err","body","statusCode","skipContentTypeCheck","req","match","isJSON","parse","e","process","env","DEBUG_MAILGUN_FORCE_RETRY","Error","msg","statusMessage","response","alreadyHandled","submit","setTimeout","abort","write","end","httpOptions","formData","testlog","enabled","console","log","module","exports"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/mailgun-js/lib/request.js"],"sourcesContent":["const https = require('https')\nconst http = require('http')\nconst ProxyAgent = require('proxy-agent')\nconst qs = require('querystring')\nconst fs = require('fs')\nconst Readable = require('stream').Readable\nconst FormData = require('form-data')\nconst Attachment = require('./attachment')\nconst retry = require('async').retry\nconst promisifyCall = require('promisify-call')\n\nconst debug = require('debug')('mailgun-js')\n\nfunction isOk (i) {\n  return typeof i !== 'undefined' && i !== null\n}\n\nfunction getDataValue (key, input) {\n  if (isSpecialParam(key) && (typeof input === 'object')) {\n    return JSON.stringify(input)\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return input.toString()\n  }\n\n  return input\n}\n\nfunction isSpecialParam (paramKey) {\n  const key = paramKey.toLowerCase()\n\n  return ((key === 'vars' || key === 'members' || key === 'recipient-variables') || (key.indexOf('v:') === 0))\n}\n\nfunction isMultiUnsubsribe (path, data) {\n  return path.indexOf('/unsubscribes') && data && Array.isArray(data)\n}\n\nfunction prepareData (data) {\n  const params = {}\n\n  for (const key in data) {\n    if (key !== 'attachment' && key !== 'inline' && isOk(data[key])) {\n      const value = getDataValue(key, data[key])\n\n      if (isOk(value)) {\n        params[key] = value\n      }\n    } else {\n      params[key] = data[key]\n    }\n  }\n\n  return params\n}\n\nclass Request {\n  constructor (options) {\n    this.host = options.host\n    this.protocol = options.protocol\n    this.port = options.port\n    this.endpoint = options.endpoint\n    this.auth = options.auth\n    this.proxy = options.proxy\n    this.timeout = options.timeout\n    this.retry = options.retry || 1\n    this.testMode = options.testMode\n    this.testModeLogger = typeof options.testModeLogger === 'function'\n      ? options.testModeLogger : this.defaultTestModeLogger\n  }\n\n  _request (method, resource, data, fn) {\n    let path = ''.concat(this.endpoint, resource)\n\n    const params = prepareData(data)\n\n    this.payload = ''\n\n    const isMIME = path.indexOf('/messages.mime') >= 0\n\n    this.headers = {}\n    if (method === 'GET' || method === 'DELETE') {\n      this.payload = qs.stringify(params)\n      if (this.payload) path = path.concat('?', this.payload)\n    } else {\n      if (isMIME) {\n        this.headers['Content-Type'] = 'multipart/form-data'\n      } else if (method === 'POST' && isMultiUnsubsribe(path, data)) {\n        this.headers['Content-Type'] = 'application/json'\n      } else {\n        this.headers['Content-Type'] = 'application/x-www-form-urlencoded'\n      }\n\n      if (params && (params.attachment || params.inline || (isMIME && params.message))) {\n        this.prepareFormData(params)\n      } else {\n        if (method === 'POST' && isMultiUnsubsribe(path, data)) {\n          this.payload = JSON.stringify(data)\n        } else {\n          this.payload = qs.stringify(params)\n        }\n\n        if (this.payload) {\n          this.headers['Content-Length'] = Buffer.byteLength(this.payload)\n        } else {\n          this.headers['Content-Length'] = 0\n        }\n      }\n    }\n\n    // check for MIME is true in case of messages GET\n    if (method === 'GET' &&\n      path.indexOf('/messages') >= 0 &&\n      params && params.MIME === true) {\n      this.headers.Accept = 'message/rfc2822'\n    }\n\n    debug('%s %s', method, path)\n\n    const opts = {\n      'hostname': this.host,\n      'port': this.port,\n      'protocol': this.protocol,\n      path,\n      method,\n      'headers': this.headers,\n      'auth': this.auth,\n      'agent': false,\n      'timeout': this.timeout\n    }\n\n    if (this.proxy) {\n      opts.agent = new ProxyAgent(this.proxy)\n    }\n\n    if (this.testMode) {\n      this.testModeLogger(opts, this.payload, this.form)\n      return fn()\n    }\n\n    if (typeof this.retry === 'object' || this.retry > 1) {\n      retry(this.retry, (retryCb) => {\n        this.callback = retryCb\n        this.performRequest(opts)\n      }, fn)\n    } else {\n      this.callback = fn\n      this.performRequest(opts)\n    }\n  }\n\n  request (method, resource, data, fn) {\n    if (typeof data === 'function' && !fn) {\n      fn = data\n      data = {}\n    }\n\n    if (!data) {\n      data = {}\n    }\n\n    return promisifyCall(this, this._request, method, resource, data, fn)\n  }\n\n  prepareFormData (data) {\n    this.form = new FormData()\n\n    for (const key in data) {\n      if ({}.hasOwnProperty.call(data, key)) {\n        const obj = data[key]\n\n        if (isOk(obj)) {\n          if (key === 'attachment' || key === 'inline') {\n            if (Array.isArray(obj)) {\n              for (let i = 0; i < obj.length; i++) {\n                this.handleAttachmentObject(key, obj[i])\n              }\n            } else {\n              this.handleAttachmentObject(key, obj)\n            }\n          } else if (key === 'message') {\n            this.handleMimeObject(key, obj)\n          } else if (Array.isArray(obj)) {\n            obj.forEach((element) => {\n              if (isOk(element)) {\n                const value = getDataValue(key, element)\n\n                if (isOk(value)) {\n                  this.form.append(key, value)\n                }\n              }\n            })\n          } else {\n            const value = getDataValue(key, obj)\n\n            if (isOk(value)) {\n              this.form.append(key, value)\n            }\n          }\n        }\n      }\n    }\n\n    this.headers = this.form.getHeaders()\n  }\n\n  handleMimeObject (key, obj) {\n    if (typeof obj === 'string') {\n      if (fs.existsSync(obj) && fs.statSync(obj).isFile()) {\n        this.form.append('message', fs.createReadStream(obj))\n      } else {\n        this.form.append('message', Buffer.from(obj), {\n          'filename': 'message.mime',\n          'contentType': 'message/rfc822',\n          'knownLength': obj.length\n        })\n      }\n    } else if (obj instanceof Readable) {\n      this.form.append('message', obj)\n    }\n  }\n\n  handleAttachmentObject (key, obj) {\n    if (!this.form) this.form = new FormData()\n\n    if (Buffer.isBuffer(obj)) {\n      debug('appending buffer to form data. key: %s', key)\n      this.form.append(key, obj, {\n        'filename': 'file'\n      })\n    } else if (typeof obj === 'string') {\n      debug('appending stream to form data. key: %s obj: %s', key, obj)\n      this.form.append(key, fs.createReadStream(obj))\n    } else if ((typeof obj === 'object') && (obj.readable === true)) {\n      debug('appending readable stream to form data. key: %s obj: %s', key, obj)\n      this.form.append(key, obj)\n    } else if ((typeof obj === 'object') && (obj instanceof Attachment)) {\n      const attachmentType = obj.getType()\n\n      if (attachmentType === 'path') {\n        debug('appending attachment stream to form data. key: %s data: %s filename: %s', key, obj.data, obj.filename)\n        this.form.append(key, fs.createReadStream(obj.data), {\n          'filename': obj.filename || 'attached file'\n        })\n      } else if (attachmentType === 'buffer') {\n        debug('appending attachment buffer to form data. key: %s filename: %s', key, obj.filename)\n        const formOpts = {\n          'filename': obj.filename || 'attached file'\n        }\n\n        if (obj.contentType) {\n          formOpts.contentType = obj.contentType\n        }\n\n        if (obj.knownLength) {\n          formOpts.knownLength = obj.knownLength\n        }\n\n        this.form.append(key, obj.data, formOpts)\n      } else if (attachmentType === 'stream') {\n        if ((obj.knownLength && !obj.contentType) || (!obj.knownLength && obj.contentType)) {\n          debug('missing content type or length for attachment stream. key: %s', key)\n        } else {\n          debug('appending attachment stream to form data. key: %s', key)\n\n          // add all known options\n          let formOpts = {}\n          if (obj.filename) {\n            formOpts.filename = obj.filename\n          }\n          if (obj.contentType) {\n            formOpts.contentType = obj.contentType\n          }\n          if (obj.knownLength) {\n            formOpts.knownLength = obj.knownLength\n          }\n\n          this.form.append(key, obj.data, formOpts)\n        }\n      }\n    } else {\n      debug('unknown attachment type. key: %s', key)\n    }\n  }\n\n  handleResponse (res) {\n    let chunks = ''\n    let error\n\n    res.on('data', (chunk) => {\n      chunks += chunk\n    })\n\n    res.on('error', (err) => {\n      error = err\n    })\n\n    res.on('end', () => {\n      let body\n\n      debug('response status code: %s content type: %s error: %s', res.statusCode, res.headers['content-type'], error)\n\n      // FIXME: An ugly hack to overcome invalid response type in mailgun api (see http://bit.ly/1eF30fU).\n      // We skip content-type validation for 'campaings' endpoint assuming it is JSON.\n      const skipContentTypeCheck = res.req && res.req.path && res.req.path.match(/\\/campaigns/)\n      const isJSON = res.headers['content-type'] && res.headers['content-type'].indexOf('application/json') >= 0\n\n      if (chunks && !error && (skipContentTypeCheck || isJSON)) {\n        try {\n          body = JSON.parse(chunks)\n        } catch (e) {\n          error = e\n        }\n      }\n\n      if (process.env.DEBUG_MAILGUN_FORCE_RETRY) {\n        error = new Error('Force retry error')\n        delete process.env.DEBUG_MAILGUN_FORCE_RETRY\n      }\n\n      if (!error && res.statusCode !== 200) {\n        let msg = body || chunks || res.statusMessage\n\n        if (body) {\n          msg = body.message || body.response\n        }\n\n        error = new Error(msg)\n        error.statusCode = res.statusCode\n      }\n\n      return this.callback(error, body)\n    })\n  }\n\n  performRequest (options) {\n    const method = options.method\n\n    if (this.form && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n      let alreadyHandled = false\n      this.form.submit(options, (err, res) => {\n        if (alreadyHandled) {\n          return\n        }\n        alreadyHandled = true\n\n        if (err) {\n          return this.callback(err)\n        }\n\n        return this.handleResponse(res)\n      })\n    } else {\n      let req\n\n      if (options.protocol === 'http:') {\n        req = http.request(options, (res) => {\n          return this.handleResponse(res)\n        })\n      } else {\n        req = https.request(options, (res) => {\n          return this.handleResponse(res)\n        })\n      }\n\n      if (options.timeout) {\n        req.setTimeout(options.timeout, () => {\n          // timeout occurs\n          req.abort()\n        })\n      }\n\n      req.on('error', (e) => {\n        return this.callback(e)\n      })\n\n      if (this.payload && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n        req.write(this.payload)\n      }\n\n      req.end()\n    }\n  }\n\n  defaultTestModeLogger (httpOptions, payload, formData) {\n    const testlog = debug.enabled ? debug : console.log\n    testlog('options: %o', httpOptions)\n    testlog('payload: %o', payload)\n    testlog('form: %o', formData)\n  }\n}\n\nmodule.exports = Request\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}