{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar net = require('net');\nvar ip = require('ip');\n\n/**\n * Module exports.\n */\n\nmodule.exports = myIpAddress;\nmyIpAddress.async = true;\n\n/**\n * Returns the IP address of the host that the Navigator is running on, as\n * a string in the dot-separated integer format.\n *\n * Example:\n *\n * ``` js\n * myIpAddress()\n *   // would return the string \"198.95.249.79\" if you were running the\n *   // Navigator on that host.\n * ```\n *\n * @return {String} external IP address\n */\n\nfunction myIpAddress(fn) {\n  // 8.8.8.8:53 is \"Google Public DNS\":\n  // https://developers.google.com/speed/public-dns/\n  var socket = net.connect({\n    host: '8.8.8.8',\n    port: 53\n  });\n  socket.once('error', function (err) {\n    // if we fail to access Google DNS (as in firewall blocks access), \n    // fallback to querying IP locally\n    fn(null, ip.address());\n  });\n  socket.once('connect', function () {\n    socket.removeListener('error', fn);\n    var ip = socket.address().address;\n    socket.destroy();\n    fn(null, ip);\n  });\n}","map":{"version":3,"names":["net","require","ip","module","exports","myIpAddress","async","fn","socket","connect","host","port","once","err","address","removeListener","destroy"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/pac-resolver/myIpAddress.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar net = require('net');\nvar ip = require('ip');\n\n/**\n * Module exports.\n */\n\nmodule.exports = myIpAddress;\n\nmyIpAddress.async = true;\n\n/**\n * Returns the IP address of the host that the Navigator is running on, as\n * a string in the dot-separated integer format.\n *\n * Example:\n *\n * ``` js\n * myIpAddress()\n *   // would return the string \"198.95.249.79\" if you were running the\n *   // Navigator on that host.\n * ```\n *\n * @return {String} external IP address\n */\n\nfunction myIpAddress (fn) {\n  // 8.8.8.8:53 is \"Google Public DNS\":\n  // https://developers.google.com/speed/public-dns/\n  var socket = net.connect({ host: '8.8.8.8', port: 53 });\n  socket.once('error', function(err) {\n    // if we fail to access Google DNS (as in firewall blocks access), \n    // fallback to querying IP locally\n    fn(null, ip.address());\n  });\n  socket.once('connect', function () {\n    socket.removeListener('error', fn);\n    var ip = socket.address().address;\n    socket.destroy();\n    fn(null, ip);\n  });\n}\n"],"mappings":"AACA;AACA;AACA;;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AACxB,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;;AAEtB;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAGC,WAAW;AAE5BA,WAAW,CAACC,KAAK,GAAG,IAAI;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASD,WAAWA,CAAEE,EAAE,EAAE;EACxB;EACA;EACA,IAAIC,MAAM,GAAGR,GAAG,CAACS,OAAO,CAAC;IAAEC,IAAI,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAG,CAAC,CAAC;EACvDH,MAAM,CAACI,IAAI,CAAC,OAAO,EAAE,UAASC,GAAG,EAAE;IACjC;IACA;IACAN,EAAE,CAAC,IAAI,EAAEL,EAAE,CAACY,OAAO,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC;EACFN,MAAM,CAACI,IAAI,CAAC,SAAS,EAAE,YAAY;IACjCJ,MAAM,CAACO,cAAc,CAAC,OAAO,EAAER,EAAE,CAAC;IAClC,IAAIL,EAAE,GAAGM,MAAM,CAACM,OAAO,CAAC,CAAC,CAACA,OAAO;IACjCN,MAAM,CAACQ,OAAO,CAAC,CAAC;IAChBT,EAAE,CAAC,IAAI,EAAEL,EAAE,CAAC;EACd,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}