{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  /* istanbul ignore next */\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);\n  /* istanbul ignore next */else if (typeof exports === 'object') exports[\"esprima\"] = factory();else root[\"esprima\"] = factory();\n})(this, function () {\n  return /******/function (modules) {\n    // webpackBootstrap\n    /******/ // The module cache\n    /******/\n    var installedModules = {};\n\n    /******/ // The require function\n    /******/\n    function __webpack_require__(moduleId) {\n      /******/ // Check if module is in cache\n      /* istanbul ignore if */\n      /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports;\n\n      /******/ // Create a new module (and put it into the cache)\n      /******/\n      var module = installedModules[moduleId] = {\n        /******/exports: {},\n        /******/id: moduleId,\n        /******/loaded: false\n        /******/\n      };\n\n      /******/ // Execute the module function\n      /******/\n      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n      /******/ // Flag the module as loaded\n      /******/\n      module.loaded = true;\n\n      /******/ // Return the exports of the module\n      /******/\n      return module.exports;\n      /******/\n    }\n\n    /******/ // expose the modules object (__webpack_modules__)\n    /******/\n    __webpack_require__.m = modules;\n\n    /******/ // expose the module cache\n    /******/\n    __webpack_require__.c = installedModules;\n\n    /******/ // __webpack_public_path__\n    /******/\n    __webpack_require__.p = \"\";\n\n    /******/ // Load entry module and return exports\n    /******/\n    return __webpack_require__(0);\n    /******/\n  }\n  /************************************************************************/\n  /******/([/* 0 */\n  /***/function (module, exports, __webpack_require__) {\n    /*\n      Copyright JS Foundation and other contributors, https://js.foundation/\n    \t  Redistribution and use in source and binary forms, with or without\n      modification, are permitted provided that the following conditions are met:\n    \t    * Redistributions of source code must retain the above copyright\n          notice, this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n    \t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n    */\n    \"use strict\";\n\n    var comment_handler_1 = __webpack_require__(1);\n    var parser_1 = __webpack_require__(3);\n    var jsx_parser_1 = __webpack_require__(11);\n    var tokenizer_1 = __webpack_require__(15);\n    function parse(code, options, delegate) {\n      var commentHandler = null;\n      var proxyDelegate = function (node, metadata) {\n        if (delegate) {\n          delegate(node, metadata);\n        }\n        if (commentHandler) {\n          commentHandler.visit(node, metadata);\n        }\n      };\n      var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;\n      var collectComment = false;\n      if (options) {\n        collectComment = typeof options.comment === 'boolean' && options.comment;\n        var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;\n        if (collectComment || attachComment) {\n          commentHandler = new comment_handler_1.CommentHandler();\n          commentHandler.attach = attachComment;\n          options.comment = true;\n          parserDelegate = proxyDelegate;\n        }\n      }\n      var parser;\n      if (options && typeof options.jsx === 'boolean' && options.jsx) {\n        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n      } else {\n        parser = new parser_1.Parser(code, options, parserDelegate);\n      }\n      var ast = parser.parseProgram();\n      if (collectComment) {\n        ast.comments = commentHandler.comments;\n      }\n      if (parser.config.tokens) {\n        ast.tokens = parser.tokens;\n      }\n      if (parser.config.tolerant) {\n        ast.errors = parser.errorHandler.errors;\n      }\n      return ast;\n    }\n    exports.parse = parse;\n    function tokenize(code, options, delegate) {\n      var tokenizer = new tokenizer_1.Tokenizer(code, options);\n      var tokens;\n      tokens = [];\n      try {\n        while (true) {\n          var token = tokenizer.getNextToken();\n          if (!token) {\n            break;\n          }\n          if (delegate) {\n            token = delegate(token);\n          }\n          tokens.push(token);\n        }\n      } catch (e) {\n        tokenizer.errorHandler.tolerate(e);\n      }\n      if (tokenizer.errorHandler.tolerant) {\n        tokens.errors = tokenizer.errors();\n      }\n      return tokens;\n    }\n    exports.tokenize = tokenize;\n    var syntax_1 = __webpack_require__(2);\n    exports.Syntax = syntax_1.Syntax;\n    // Sync with *.json manifests.\n    exports.version = '3.1.3';\n\n    /***/\n  }, /* 1 */\n  /***/function (module, exports, __webpack_require__) {\n    \"use strict\";\n\n    var syntax_1 = __webpack_require__(2);\n    var CommentHandler = function () {\n      function CommentHandler() {\n        this.attach = false;\n        this.comments = [];\n        this.stack = [];\n        this.leading = [];\n        this.trailing = [];\n      }\n      CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n        //  innnerComments for properties empty block\n        //  `function a() {/** comments **\\/}`\n        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n          var innerComments = [];\n          for (var i = this.leading.length - 1; i >= 0; --i) {\n            var entry = this.leading[i];\n            if (metadata.end.offset >= entry.start) {\n              innerComments.unshift(entry.comment);\n              this.leading.splice(i, 1);\n              this.trailing.splice(i, 1);\n            }\n          }\n          if (innerComments.length) {\n            node.innerComments = innerComments;\n          }\n        }\n      };\n      CommentHandler.prototype.findTrailingComments = function (node, metadata) {\n        var trailingComments = [];\n        if (this.trailing.length > 0) {\n          for (var i = this.trailing.length - 1; i >= 0; --i) {\n            var entry_1 = this.trailing[i];\n            if (entry_1.start >= metadata.end.offset) {\n              trailingComments.unshift(entry_1.comment);\n            }\n          }\n          this.trailing.length = 0;\n          return trailingComments;\n        }\n        var entry = this.stack[this.stack.length - 1];\n        if (entry && entry.node.trailingComments) {\n          var firstComment = entry.node.trailingComments[0];\n          if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n            trailingComments = entry.node.trailingComments;\n            delete entry.node.trailingComments;\n          }\n        }\n        return trailingComments;\n      };\n      CommentHandler.prototype.findLeadingComments = function (node, metadata) {\n        var leadingComments = [];\n        var target;\n        while (this.stack.length > 0) {\n          var entry = this.stack[this.stack.length - 1];\n          if (entry && entry.start >= metadata.start.offset) {\n            target = this.stack.pop().node;\n          } else {\n            break;\n          }\n        }\n        if (target) {\n          var count = target.leadingComments ? target.leadingComments.length : 0;\n          for (var i = count - 1; i >= 0; --i) {\n            var comment = target.leadingComments[i];\n            if (comment.range[1] <= metadata.start.offset) {\n              leadingComments.unshift(comment);\n              target.leadingComments.splice(i, 1);\n            }\n          }\n          if (target.leadingComments && target.leadingComments.length === 0) {\n            delete target.leadingComments;\n          }\n          return leadingComments;\n        }\n        for (var i = this.leading.length - 1; i >= 0; --i) {\n          var entry = this.leading[i];\n          if (entry.start <= metadata.start.offset) {\n            leadingComments.unshift(entry.comment);\n            this.leading.splice(i, 1);\n          }\n        }\n        return leadingComments;\n      };\n      CommentHandler.prototype.visitNode = function (node, metadata) {\n        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n          return;\n        }\n        this.insertInnerComments(node, metadata);\n        var trailingComments = this.findTrailingComments(node, metadata);\n        var leadingComments = this.findLeadingComments(node, metadata);\n        if (leadingComments.length > 0) {\n          node.leadingComments = leadingComments;\n        }\n        if (trailingComments.length > 0) {\n          node.trailingComments = trailingComments;\n        }\n        this.stack.push({\n          node: node,\n          start: metadata.start.offset\n        });\n      };\n      CommentHandler.prototype.visitComment = function (node, metadata) {\n        var type = node.type[0] === 'L' ? 'Line' : 'Block';\n        var comment = {\n          type: type,\n          value: node.value\n        };\n        if (node.range) {\n          comment.range = node.range;\n        }\n        if (node.loc) {\n          comment.loc = node.loc;\n        }\n        this.comments.push(comment);\n        if (this.attach) {\n          var entry = {\n            comment: {\n              type: type,\n              value: node.value,\n              range: [metadata.start.offset, metadata.end.offset]\n            },\n            start: metadata.start.offset\n          };\n          if (node.loc) {\n            entry.comment.loc = node.loc;\n          }\n          node.type = type;\n          this.leading.push(entry);\n          this.trailing.push(entry);\n        }\n      };\n      CommentHandler.prototype.visit = function (node, metadata) {\n        if (node.type === 'LineComment') {\n          this.visitComment(node, metadata);\n        } else if (node.type === 'BlockComment') {\n          this.visitComment(node, metadata);\n        } else if (this.attach) {\n          this.visitNode(node, metadata);\n        }\n      };\n      return CommentHandler;\n    }();\n    exports.CommentHandler = CommentHandler;\n\n    /***/\n  }, /* 2 */\n  /***/function (module, exports) {\n    \"use strict\";\n\n    exports.Syntax = {\n      AssignmentExpression: 'AssignmentExpression',\n      AssignmentPattern: 'AssignmentPattern',\n      ArrayExpression: 'ArrayExpression',\n      ArrayPattern: 'ArrayPattern',\n      ArrowFunctionExpression: 'ArrowFunctionExpression',\n      BlockStatement: 'BlockStatement',\n      BinaryExpression: 'BinaryExpression',\n      BreakStatement: 'BreakStatement',\n      CallExpression: 'CallExpression',\n      CatchClause: 'CatchClause',\n      ClassBody: 'ClassBody',\n      ClassDeclaration: 'ClassDeclaration',\n      ClassExpression: 'ClassExpression',\n      ConditionalExpression: 'ConditionalExpression',\n      ContinueStatement: 'ContinueStatement',\n      DoWhileStatement: 'DoWhileStatement',\n      DebuggerStatement: 'DebuggerStatement',\n      EmptyStatement: 'EmptyStatement',\n      ExportAllDeclaration: 'ExportAllDeclaration',\n      ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n      ExportNamedDeclaration: 'ExportNamedDeclaration',\n      ExportSpecifier: 'ExportSpecifier',\n      ExpressionStatement: 'ExpressionStatement',\n      ForStatement: 'ForStatement',\n      ForOfStatement: 'ForOfStatement',\n      ForInStatement: 'ForInStatement',\n      FunctionDeclaration: 'FunctionDeclaration',\n      FunctionExpression: 'FunctionExpression',\n      Identifier: 'Identifier',\n      IfStatement: 'IfStatement',\n      ImportDeclaration: 'ImportDeclaration',\n      ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n      ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n      ImportSpecifier: 'ImportSpecifier',\n      Literal: 'Literal',\n      LabeledStatement: 'LabeledStatement',\n      LogicalExpression: 'LogicalExpression',\n      MemberExpression: 'MemberExpression',\n      MetaProperty: 'MetaProperty',\n      MethodDefinition: 'MethodDefinition',\n      NewExpression: 'NewExpression',\n      ObjectExpression: 'ObjectExpression',\n      ObjectPattern: 'ObjectPattern',\n      Program: 'Program',\n      Property: 'Property',\n      RestElement: 'RestElement',\n      ReturnStatement: 'ReturnStatement',\n      SequenceExpression: 'SequenceExpression',\n      SpreadElement: 'SpreadElement',\n      Super: 'Super',\n      SwitchCase: 'SwitchCase',\n      SwitchStatement: 'SwitchStatement',\n      TaggedTemplateExpression: 'TaggedTemplateExpression',\n      TemplateElement: 'TemplateElement',\n      TemplateLiteral: 'TemplateLiteral',\n      ThisExpression: 'ThisExpression',\n      ThrowStatement: 'ThrowStatement',\n      TryStatement: 'TryStatement',\n      UnaryExpression: 'UnaryExpression',\n      UpdateExpression: 'UpdateExpression',\n      VariableDeclaration: 'VariableDeclaration',\n      VariableDeclarator: 'VariableDeclarator',\n      WhileStatement: 'WhileStatement',\n      WithStatement: 'WithStatement',\n      YieldExpression: 'YieldExpression'\n    };\n\n    /***/\n  }, /* 3 */\n  /***/function (module, exports, __webpack_require__) {\n    \"use strict\";\n\n    var assert_1 = __webpack_require__(4);\n    var messages_1 = __webpack_require__(5);\n    var error_handler_1 = __webpack_require__(6);\n    var token_1 = __webpack_require__(7);\n    var scanner_1 = __webpack_require__(8);\n    var syntax_1 = __webpack_require__(2);\n    var Node = __webpack_require__(10);\n    var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n    var Parser = function () {\n      function Parser(code, options, delegate) {\n        if (options === void 0) {\n          options = {};\n        }\n        this.config = {\n          range: typeof options.range === 'boolean' && options.range,\n          loc: typeof options.loc === 'boolean' && options.loc,\n          source: null,\n          tokens: typeof options.tokens === 'boolean' && options.tokens,\n          comment: typeof options.comment === 'boolean' && options.comment,\n          tolerant: typeof options.tolerant === 'boolean' && options.tolerant\n        };\n        if (this.config.loc && options.source && options.source !== null) {\n          this.config.source = String(options.source);\n        }\n        this.delegate = delegate;\n        this.errorHandler = new error_handler_1.ErrorHandler();\n        this.errorHandler.tolerant = this.config.tolerant;\n        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n        this.scanner.trackComment = this.config.comment;\n        this.operatorPrecedence = {\n          ')': 0,\n          ';': 0,\n          ',': 0,\n          '=': 0,\n          ']': 0,\n          '||': 1,\n          '&&': 2,\n          '|': 3,\n          '^': 4,\n          '&': 5,\n          '==': 6,\n          '!=': 6,\n          '===': 6,\n          '!==': 6,\n          '<': 7,\n          '>': 7,\n          '<=': 7,\n          '>=': 7,\n          '<<': 8,\n          '>>': 8,\n          '>>>': 8,\n          '+': 9,\n          '-': 9,\n          '*': 11,\n          '/': 11,\n          '%': 11\n        };\n        this.sourceType = options && options.sourceType === 'module' ? 'module' : 'script';\n        this.lookahead = null;\n        this.hasLineTerminator = false;\n        this.context = {\n          allowIn: true,\n          allowYield: true,\n          firstCoverInitializedNameError: null,\n          isAssignmentTarget: false,\n          isBindingElement: false,\n          inFunctionBody: false,\n          inIteration: false,\n          inSwitch: false,\n          labelSet: {},\n          strict: this.sourceType === 'module'\n        };\n        this.tokens = [];\n        this.startMarker = {\n          index: 0,\n          lineNumber: this.scanner.lineNumber,\n          lineStart: 0\n        };\n        this.lastMarker = {\n          index: 0,\n          lineNumber: this.scanner.lineNumber,\n          lineStart: 0\n        };\n        this.nextToken();\n        this.lastMarker = {\n          index: this.scanner.index,\n          lineNumber: this.scanner.lineNumber,\n          lineStart: this.scanner.lineStart\n        };\n      }\n      Parser.prototype.throwError = function (messageFormat) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n          values[_i - 1] = arguments[_i];\n        }\n        var args = Array.prototype.slice.call(arguments, 1);\n        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n          assert_1.assert(idx < args.length, 'Message reference must be in range');\n          return args[idx];\n        });\n        var index = this.lastMarker.index;\n        var line = this.lastMarker.lineNumber;\n        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n        throw this.errorHandler.createError(index, line, column, msg);\n      };\n      Parser.prototype.tolerateError = function (messageFormat) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n          values[_i - 1] = arguments[_i];\n        }\n        var args = Array.prototype.slice.call(arguments, 1);\n        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n          assert_1.assert(idx < args.length, 'Message reference must be in range');\n          return args[idx];\n        });\n        var index = this.lastMarker.index;\n        var line = this.scanner.lineNumber;\n        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n        this.errorHandler.tolerateError(index, line, column, msg);\n      };\n      // Throw an exception because of the token.\n      Parser.prototype.unexpectedTokenError = function (token, message) {\n        var msg = message || messages_1.Messages.UnexpectedToken;\n        var value;\n        if (token) {\n          if (!message) {\n            msg = token.type === token_1.Token.EOF ? messages_1.Messages.UnexpectedEOS : token.type === token_1.Token.Identifier ? messages_1.Messages.UnexpectedIdentifier : token.type === token_1.Token.NumericLiteral ? messages_1.Messages.UnexpectedNumber : token.type === token_1.Token.StringLiteral ? messages_1.Messages.UnexpectedString : token.type === token_1.Token.Template ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;\n            if (token.type === token_1.Token.Keyword) {\n              if (this.scanner.isFutureReservedWord(token.value)) {\n                msg = messages_1.Messages.UnexpectedReserved;\n              } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n                msg = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n          value = token.type === token_1.Token.Template ? token.value.raw : token.value;\n        } else {\n          value = 'ILLEGAL';\n        }\n        msg = msg.replace('%0', value);\n        if (token && typeof token.lineNumber === 'number') {\n          var index = token.start;\n          var line = token.lineNumber;\n          var column = token.start - this.lastMarker.lineStart + 1;\n          return this.errorHandler.createError(index, line, column, msg);\n        } else {\n          var index = this.lastMarker.index;\n          var line = this.lastMarker.lineNumber;\n          var column = index - this.lastMarker.lineStart + 1;\n          return this.errorHandler.createError(index, line, column, msg);\n        }\n      };\n      Parser.prototype.throwUnexpectedToken = function (token, message) {\n        throw this.unexpectedTokenError(token, message);\n      };\n      Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n      };\n      Parser.prototype.collectComments = function () {\n        if (!this.config.comment) {\n          this.scanner.scanComments();\n        } else {\n          var comments = this.scanner.scanComments();\n          if (comments.length > 0 && this.delegate) {\n            for (var i = 0; i < comments.length; ++i) {\n              var e = comments[i];\n              var node = void 0;\n              node = {\n                type: e.multiLine ? 'BlockComment' : 'LineComment',\n                value: this.scanner.source.slice(e.slice[0], e.slice[1])\n              };\n              if (this.config.range) {\n                node.range = e.range;\n              }\n              if (this.config.loc) {\n                node.loc = e.loc;\n              }\n              var metadata = {\n                start: {\n                  line: e.loc.start.line,\n                  column: e.loc.start.column,\n                  offset: e.range[0]\n                },\n                end: {\n                  line: e.loc.end.line,\n                  column: e.loc.end.column,\n                  offset: e.range[1]\n                }\n              };\n              this.delegate(node, metadata);\n            }\n          }\n        }\n      };\n      // From internal representation to an external structure\n      Parser.prototype.getTokenRaw = function (token) {\n        return this.scanner.source.slice(token.start, token.end);\n      };\n      Parser.prototype.convertToken = function (token) {\n        var t;\n        t = {\n          type: token_1.TokenName[token.type],\n          value: this.getTokenRaw(token)\n        };\n        if (this.config.range) {\n          t.range = [token.start, token.end];\n        }\n        if (this.config.loc) {\n          t.loc = {\n            start: {\n              line: this.startMarker.lineNumber,\n              column: this.startMarker.index - this.startMarker.lineStart\n            },\n            end: {\n              line: this.scanner.lineNumber,\n              column: this.scanner.index - this.scanner.lineStart\n            }\n          };\n        }\n        if (token.regex) {\n          t.regex = token.regex;\n        }\n        return t;\n      };\n      Parser.prototype.nextToken = function () {\n        var token = this.lookahead;\n        this.lastMarker.index = this.scanner.index;\n        this.lastMarker.lineNumber = this.scanner.lineNumber;\n        this.lastMarker.lineStart = this.scanner.lineStart;\n        this.collectComments();\n        this.startMarker.index = this.scanner.index;\n        this.startMarker.lineNumber = this.scanner.lineNumber;\n        this.startMarker.lineStart = this.scanner.lineStart;\n        var next;\n        next = this.scanner.lex();\n        this.hasLineTerminator = token && next ? token.lineNumber !== next.lineNumber : false;\n        if (next && this.context.strict && next.type === token_1.Token.Identifier) {\n          if (this.scanner.isStrictModeReservedWord(next.value)) {\n            next.type = token_1.Token.Keyword;\n          }\n        }\n        this.lookahead = next;\n        if (this.config.tokens && next.type !== token_1.Token.EOF) {\n          this.tokens.push(this.convertToken(next));\n        }\n        return token;\n      };\n      Parser.prototype.nextRegexToken = function () {\n        this.collectComments();\n        var token = this.scanner.scanRegExp();\n        if (this.config.tokens) {\n          // Pop the previous token, '/' or '/='\n          // This is added from the lookahead token.\n          this.tokens.pop();\n          this.tokens.push(this.convertToken(token));\n        }\n        // Prime the next lookahead.\n        this.lookahead = token;\n        this.nextToken();\n        return token;\n      };\n      Parser.prototype.createNode = function () {\n        return {\n          index: this.startMarker.index,\n          line: this.startMarker.lineNumber,\n          column: this.startMarker.index - this.startMarker.lineStart\n        };\n      };\n      Parser.prototype.startNode = function (token) {\n        return {\n          index: token.start,\n          line: token.lineNumber,\n          column: token.start - token.lineStart\n        };\n      };\n      Parser.prototype.finalize = function (meta, node) {\n        if (this.config.range) {\n          node.range = [meta.index, this.lastMarker.index];\n        }\n        if (this.config.loc) {\n          node.loc = {\n            start: {\n              line: meta.line,\n              column: meta.column\n            },\n            end: {\n              line: this.lastMarker.lineNumber,\n              column: this.lastMarker.index - this.lastMarker.lineStart\n            }\n          };\n          if (this.config.source) {\n            node.loc.source = this.config.source;\n          }\n        }\n        if (this.delegate) {\n          var metadata = {\n            start: {\n              line: meta.line,\n              column: meta.column,\n              offset: meta.index\n            },\n            end: {\n              line: this.lastMarker.lineNumber,\n              column: this.lastMarker.index - this.lastMarker.lineStart,\n              offset: this.lastMarker.index\n            }\n          };\n          this.delegate(node, metadata);\n        }\n        return node;\n      };\n      // Expect the next token to match the specified punctuator.\n      // If not, an exception will be thrown.\n      Parser.prototype.expect = function (value) {\n        var token = this.nextToken();\n        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n          this.throwUnexpectedToken(token);\n        }\n      };\n      // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n      Parser.prototype.expectCommaSeparator = function () {\n        if (this.config.tolerant) {\n          var token = this.lookahead;\n          if (token.type === token_1.Token.Punctuator && token.value === ',') {\n            this.nextToken();\n          } else if (token.type === token_1.Token.Punctuator && token.value === ';') {\n            this.nextToken();\n            this.tolerateUnexpectedToken(token);\n          } else {\n            this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n          }\n        } else {\n          this.expect(',');\n        }\n      };\n      // Expect the next token to match the specified keyword.\n      // If not, an exception will be thrown.\n      Parser.prototype.expectKeyword = function (keyword) {\n        var token = this.nextToken();\n        if (token.type !== token_1.Token.Keyword || token.value !== keyword) {\n          this.throwUnexpectedToken(token);\n        }\n      };\n      // Return true if the next token matches the specified punctuator.\n      Parser.prototype.match = function (value) {\n        return this.lookahead.type === token_1.Token.Punctuator && this.lookahead.value === value;\n      };\n      // Return true if the next token matches the specified keyword\n      Parser.prototype.matchKeyword = function (keyword) {\n        return this.lookahead.type === token_1.Token.Keyword && this.lookahead.value === keyword;\n      };\n      // Return true if the next token matches the specified contextual keyword\n      // (where an identifier is sometimes a keyword depending on the context)\n      Parser.prototype.matchContextualKeyword = function (keyword) {\n        return this.lookahead.type === token_1.Token.Identifier && this.lookahead.value === keyword;\n      };\n      // Return true if the next token is an assignment operator\n      Parser.prototype.matchAssign = function () {\n        if (this.lookahead.type !== token_1.Token.Punctuator) {\n          return false;\n        }\n        var op = this.lookahead.value;\n        return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';\n      };\n      // Cover grammar support.\n      //\n      // When an assignment expression position starts with an left parenthesis, the determination of the type\n      // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n      // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n      //\n      // There are three productions that can be parsed in a parentheses pair that needs to be determined\n      // after the outermost pair is closed. They are:\n      //\n      //   1. AssignmentExpression\n      //   2. BindingElements\n      //   3. AssignmentTargets\n      //\n      // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n      // binding element or assignment target.\n      //\n      // The three productions have the relationship:\n      //\n      //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n      //\n      // with a single exception that CoverInitializedName when used directly in an Expression, generates\n      // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n      // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n      //\n      // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n      // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n      // the CoverInitializedName check is conducted.\n      //\n      // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n      // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n      // pattern. The CoverInitializedName check is deferred.\n      Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n        var previousIsBindingElement = this.context.isBindingElement;\n        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n        this.context.isBindingElement = true;\n        this.context.isAssignmentTarget = true;\n        this.context.firstCoverInitializedNameError = null;\n        var result = parseFunction.call(this);\n        if (this.context.firstCoverInitializedNameError !== null) {\n          this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n        }\n        this.context.isBindingElement = previousIsBindingElement;\n        this.context.isAssignmentTarget = previousIsAssignmentTarget;\n        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n        return result;\n      };\n      Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n        var previousIsBindingElement = this.context.isBindingElement;\n        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n        this.context.isBindingElement = true;\n        this.context.isAssignmentTarget = true;\n        this.context.firstCoverInitializedNameError = null;\n        var result = parseFunction.call(this);\n        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n        return result;\n      };\n      Parser.prototype.consumeSemicolon = function () {\n        if (this.match(';')) {\n          this.nextToken();\n        } else if (!this.hasLineTerminator) {\n          if (this.lookahead.type !== token_1.Token.EOF && !this.match('}')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n          this.lastMarker.index = this.startMarker.index;\n          this.lastMarker.lineNumber = this.startMarker.lineNumber;\n          this.lastMarker.lineStart = this.startMarker.lineStart;\n        }\n      };\n      // ECMA-262 12.2 Primary Expressions\n      Parser.prototype.parsePrimaryExpression = function () {\n        var node = this.createNode();\n        var expr;\n        var value, token, raw;\n        switch (this.lookahead.type) {\n          case token_1.Token.Identifier:\n            if (this.sourceType === 'module' && this.lookahead.value === 'await') {\n              this.tolerateUnexpectedToken(this.lookahead);\n            }\n            expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n            break;\n          case token_1.Token.NumericLiteral:\n          case token_1.Token.StringLiteral:\n            if (this.context.strict && this.lookahead.octal) {\n              this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n            }\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            token = this.nextToken();\n            raw = this.getTokenRaw(token);\n            expr = this.finalize(node, new Node.Literal(token.value, raw));\n            break;\n          case token_1.Token.BooleanLiteral:\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            token = this.nextToken();\n            token.value = token.value === 'true';\n            raw = this.getTokenRaw(token);\n            expr = this.finalize(node, new Node.Literal(token.value, raw));\n            break;\n          case token_1.Token.NullLiteral:\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            token = this.nextToken();\n            token.value = null;\n            raw = this.getTokenRaw(token);\n            expr = this.finalize(node, new Node.Literal(token.value, raw));\n            break;\n          case token_1.Token.Template:\n            expr = this.parseTemplateLiteral();\n            break;\n          case token_1.Token.Punctuator:\n            value = this.lookahead.value;\n            switch (value) {\n              case '(':\n                this.context.isBindingElement = false;\n                expr = this.inheritCoverGrammar(this.parseGroupExpression);\n                break;\n              case '[':\n                expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n                break;\n              case '{':\n                expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n                break;\n              case '/':\n              case '/=':\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                this.scanner.index = this.startMarker.index;\n                token = this.nextRegexToken();\n                raw = this.getTokenRaw(token);\n                expr = this.finalize(node, new Node.RegexLiteral(token.value, raw, token.regex));\n                break;\n              default:\n                this.throwUnexpectedToken(this.nextToken());\n            }\n            break;\n          case token_1.Token.Keyword:\n            if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n              expr = this.parseIdentifierName();\n            } else if (!this.context.strict && this.matchKeyword('let')) {\n              expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n            } else {\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              if (this.matchKeyword('function')) {\n                expr = this.parseFunctionExpression();\n              } else if (this.matchKeyword('this')) {\n                this.nextToken();\n                expr = this.finalize(node, new Node.ThisExpression());\n              } else if (this.matchKeyword('class')) {\n                expr = this.parseClassExpression();\n              } else {\n                this.throwUnexpectedToken(this.nextToken());\n              }\n            }\n            break;\n          default:\n            this.throwUnexpectedToken(this.nextToken());\n        }\n        return expr;\n      };\n      // ECMA-262 12.2.5 Array Initializer\n      Parser.prototype.parseSpreadElement = function () {\n        var node = this.createNode();\n        this.expect('...');\n        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n        return this.finalize(node, new Node.SpreadElement(arg));\n      };\n      Parser.prototype.parseArrayInitializer = function () {\n        var node = this.createNode();\n        var elements = [];\n        this.expect('[');\n        while (!this.match(']')) {\n          if (this.match(',')) {\n            this.nextToken();\n            elements.push(null);\n          } else if (this.match('...')) {\n            var element = this.parseSpreadElement();\n            if (!this.match(']')) {\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              this.expect(',');\n            }\n            elements.push(element);\n          } else {\n            elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n            if (!this.match(']')) {\n              this.expect(',');\n            }\n          }\n        }\n        this.expect(']');\n        return this.finalize(node, new Node.ArrayExpression(elements));\n      };\n      // ECMA-262 12.2.6 Object Initializer\n      Parser.prototype.parsePropertyMethod = function (params) {\n        this.context.isAssignmentTarget = false;\n        this.context.isBindingElement = false;\n        var previousStrict = this.context.strict;\n        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n        if (this.context.strict && params.firstRestricted) {\n          this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n        }\n        if (this.context.strict && params.stricted) {\n          this.tolerateUnexpectedToken(params.stricted, params.message);\n        }\n        this.context.strict = previousStrict;\n        return body;\n      };\n      Parser.prototype.parsePropertyMethodFunction = function () {\n        var isGenerator = false;\n        var node = this.createNode();\n        var previousAllowYield = this.context.allowYield;\n        this.context.allowYield = false;\n        var params = this.parseFormalParameters();\n        var method = this.parsePropertyMethod(params);\n        this.context.allowYield = previousAllowYield;\n        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n      };\n      Parser.prototype.parseObjectPropertyKey = function () {\n        var node = this.createNode();\n        var token = this.nextToken();\n        var key = null;\n        switch (token.type) {\n          case token_1.Token.StringLiteral:\n          case token_1.Token.NumericLiteral:\n            if (this.context.strict && token.octal) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n            }\n            var raw = this.getTokenRaw(token);\n            key = this.finalize(node, new Node.Literal(token.value, raw));\n            break;\n          case token_1.Token.Identifier:\n          case token_1.Token.BooleanLiteral:\n          case token_1.Token.NullLiteral:\n          case token_1.Token.Keyword:\n            key = this.finalize(node, new Node.Identifier(token.value));\n            break;\n          case token_1.Token.Punctuator:\n            if (token.value === '[') {\n              key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n              this.expect(']');\n            } else {\n              this.throwUnexpectedToken(token);\n            }\n            break;\n          default:\n            this.throwUnexpectedToken(token);\n        }\n        return key;\n      };\n      Parser.prototype.isPropertyKey = function (key, value) {\n        return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;\n      };\n      Parser.prototype.parseObjectProperty = function (hasProto) {\n        var node = this.createNode();\n        var token = this.lookahead;\n        var kind;\n        var key;\n        var value;\n        var computed = false;\n        var method = false;\n        var shorthand = false;\n        if (token.type === token_1.Token.Identifier) {\n          this.nextToken();\n          key = this.finalize(node, new Node.Identifier(token.value));\n        } else if (this.match('*')) {\n          this.nextToken();\n        } else {\n          computed = this.match('[');\n          key = this.parseObjectPropertyKey();\n        }\n        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n        if (token.type === token_1.Token.Identifier && token.value === 'get' && lookaheadPropertyKey) {\n          kind = 'get';\n          computed = this.match('[');\n          key = this.parseObjectPropertyKey();\n          this.context.allowYield = false;\n          value = this.parseGetterMethod();\n        } else if (token.type === token_1.Token.Identifier && token.value === 'set' && lookaheadPropertyKey) {\n          kind = 'set';\n          computed = this.match('[');\n          key = this.parseObjectPropertyKey();\n          value = this.parseSetterMethod();\n        } else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n          kind = 'init';\n          computed = this.match('[');\n          key = this.parseObjectPropertyKey();\n          value = this.parseGeneratorMethod();\n          method = true;\n        } else {\n          if (!key) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n          kind = 'init';\n          if (this.match(':')) {\n            if (!computed && this.isPropertyKey(key, '__proto__')) {\n              if (hasProto.value) {\n                this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n              }\n              hasProto.value = true;\n            }\n            this.nextToken();\n            value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n          } else if (this.match('(')) {\n            value = this.parsePropertyMethodFunction();\n            method = true;\n          } else if (token.type === token_1.Token.Identifier) {\n            var id = this.finalize(node, new Node.Identifier(token.value));\n            if (this.match('=')) {\n              this.context.firstCoverInitializedNameError = this.lookahead;\n              this.nextToken();\n              shorthand = true;\n              var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n              value = this.finalize(node, new Node.AssignmentPattern(id, init));\n            } else {\n              shorthand = true;\n              value = id;\n            }\n          } else {\n            this.throwUnexpectedToken(this.nextToken());\n          }\n        }\n        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n      };\n      Parser.prototype.parseObjectInitializer = function () {\n        var node = this.createNode();\n        this.expect('{');\n        var properties = [];\n        var hasProto = {\n          value: false\n        };\n        while (!this.match('}')) {\n          properties.push(this.parseObjectProperty(hasProto));\n          if (!this.match('}')) {\n            this.expectCommaSeparator();\n          }\n        }\n        this.expect('}');\n        return this.finalize(node, new Node.ObjectExpression(properties));\n      };\n      // ECMA-262 12.2.9 Template Literals\n      Parser.prototype.parseTemplateHead = function () {\n        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n        var node = this.createNode();\n        var token = this.nextToken();\n        var value = {\n          raw: token.value.raw,\n          cooked: token.value.cooked\n        };\n        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n      };\n      Parser.prototype.parseTemplateElement = function () {\n        if (this.lookahead.type !== token_1.Token.Template) {\n          this.throwUnexpectedToken();\n        }\n        var node = this.createNode();\n        var token = this.nextToken();\n        var value = {\n          raw: token.value.raw,\n          cooked: token.value.cooked\n        };\n        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n      };\n      Parser.prototype.parseTemplateLiteral = function () {\n        var node = this.createNode();\n        var expressions = [];\n        var quasis = [];\n        var quasi = this.parseTemplateHead();\n        quasis.push(quasi);\n        while (!quasi.tail) {\n          expressions.push(this.parseExpression());\n          quasi = this.parseTemplateElement();\n          quasis.push(quasi);\n        }\n        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n      };\n      // ECMA-262 12.2.10 The Grouping Operator\n      Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n        switch (expr.type) {\n          case syntax_1.Syntax.Identifier:\n          case syntax_1.Syntax.MemberExpression:\n          case syntax_1.Syntax.RestElement:\n          case syntax_1.Syntax.AssignmentPattern:\n            break;\n          case syntax_1.Syntax.SpreadElement:\n            expr.type = syntax_1.Syntax.RestElement;\n            this.reinterpretExpressionAsPattern(expr.argument);\n            break;\n          case syntax_1.Syntax.ArrayExpression:\n            expr.type = syntax_1.Syntax.ArrayPattern;\n            for (var i = 0; i < expr.elements.length; i++) {\n              if (expr.elements[i] !== null) {\n                this.reinterpretExpressionAsPattern(expr.elements[i]);\n              }\n            }\n            break;\n          case syntax_1.Syntax.ObjectExpression:\n            expr.type = syntax_1.Syntax.ObjectPattern;\n            for (var i = 0; i < expr.properties.length; i++) {\n              this.reinterpretExpressionAsPattern(expr.properties[i].value);\n            }\n            break;\n          case syntax_1.Syntax.AssignmentExpression:\n            expr.type = syntax_1.Syntax.AssignmentPattern;\n            delete expr.operator;\n            this.reinterpretExpressionAsPattern(expr.left);\n            break;\n          default:\n            // Allow other node type for tolerant parsing.\n            break;\n        }\n      };\n      Parser.prototype.parseGroupExpression = function () {\n        var expr;\n        this.expect('(');\n        if (this.match(')')) {\n          this.nextToken();\n          if (!this.match('=>')) {\n            this.expect('=>');\n          }\n          expr = {\n            type: ArrowParameterPlaceHolder,\n            params: []\n          };\n        } else {\n          var startToken = this.lookahead;\n          var params = [];\n          if (this.match('...')) {\n            expr = this.parseRestElement(params);\n            this.expect(')');\n            if (!this.match('=>')) {\n              this.expect('=>');\n            }\n            expr = {\n              type: ArrowParameterPlaceHolder,\n              params: [expr]\n            };\n          } else {\n            var arrow = false;\n            this.context.isBindingElement = true;\n            expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n            if (this.match(',')) {\n              var expressions = [];\n              this.context.isAssignmentTarget = false;\n              expressions.push(expr);\n              while (this.startMarker.index < this.scanner.length) {\n                if (!this.match(',')) {\n                  break;\n                }\n                this.nextToken();\n                if (this.match('...')) {\n                  if (!this.context.isBindingElement) {\n                    this.throwUnexpectedToken(this.lookahead);\n                  }\n                  expressions.push(this.parseRestElement(params));\n                  this.expect(')');\n                  if (!this.match('=>')) {\n                    this.expect('=>');\n                  }\n                  this.context.isBindingElement = false;\n                  for (var i = 0; i < expressions.length; i++) {\n                    this.reinterpretExpressionAsPattern(expressions[i]);\n                  }\n                  arrow = true;\n                  expr = {\n                    type: ArrowParameterPlaceHolder,\n                    params: expressions\n                  };\n                } else {\n                  expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n                }\n                if (arrow) {\n                  break;\n                }\n              }\n              if (!arrow) {\n                expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n              }\n            }\n            if (!arrow) {\n              this.expect(')');\n              if (this.match('=>')) {\n                if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n                  arrow = true;\n                  expr = {\n                    type: ArrowParameterPlaceHolder,\n                    params: [expr]\n                  };\n                }\n                if (!arrow) {\n                  if (!this.context.isBindingElement) {\n                    this.throwUnexpectedToken(this.lookahead);\n                  }\n                  if (expr.type === syntax_1.Syntax.SequenceExpression) {\n                    for (var i = 0; i < expr.expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expr.expressions[i]);\n                    }\n                  } else {\n                    this.reinterpretExpressionAsPattern(expr);\n                  }\n                  var params_1 = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];\n                  expr = {\n                    type: ArrowParameterPlaceHolder,\n                    params: params_1\n                  };\n                }\n              }\n              this.context.isBindingElement = false;\n            }\n          }\n        }\n        return expr;\n      };\n      // ECMA-262 12.3 Left-Hand-Side Expressions\n      Parser.prototype.parseArguments = function () {\n        this.expect('(');\n        var args = [];\n        if (!this.match(')')) {\n          while (true) {\n            var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);\n            args.push(expr);\n            if (this.match(')')) {\n              break;\n            }\n            this.expectCommaSeparator();\n          }\n        }\n        this.expect(')');\n        return args;\n      };\n      Parser.prototype.isIdentifierName = function (token) {\n        return token.type === token_1.Token.Identifier || token.type === token_1.Token.Keyword || token.type === token_1.Token.BooleanLiteral || token.type === token_1.Token.NullLiteral;\n      };\n      Parser.prototype.parseIdentifierName = function () {\n        var node = this.createNode();\n        var token = this.nextToken();\n        if (!this.isIdentifierName(token)) {\n          this.throwUnexpectedToken(token);\n        }\n        return this.finalize(node, new Node.Identifier(token.value));\n      };\n      Parser.prototype.parseNewExpression = function () {\n        var node = this.createNode();\n        var id = this.parseIdentifierName();\n        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n        var expr;\n        if (this.match('.')) {\n          this.nextToken();\n          if (this.lookahead.type === token_1.Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {\n            var property = this.parseIdentifierName();\n            expr = new Node.MetaProperty(id, property);\n          } else {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n        } else {\n          var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n          var args = this.match('(') ? this.parseArguments() : [];\n          expr = new Node.NewExpression(callee, args);\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n        }\n        return this.finalize(node, expr);\n      };\n      Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n        var startToken = this.lookahead;\n        var previousAllowIn = this.context.allowIn;\n        this.context.allowIn = true;\n        var expr;\n        if (this.matchKeyword('super') && this.context.inFunctionBody) {\n          expr = this.createNode();\n          this.nextToken();\n          expr = this.finalize(expr, new Node.Super());\n          if (!this.match('(') && !this.match('.') && !this.match('[')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n        } else {\n          expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n        }\n        while (true) {\n          if (this.match('.')) {\n            this.context.isBindingElement = false;\n            this.context.isAssignmentTarget = true;\n            this.expect('.');\n            var property = this.parseIdentifierName();\n            expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n          } else if (this.match('(')) {\n            this.context.isBindingElement = false;\n            this.context.isAssignmentTarget = false;\n            var args = this.parseArguments();\n            expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n          } else if (this.match('[')) {\n            this.context.isBindingElement = false;\n            this.context.isAssignmentTarget = true;\n            this.expect('[');\n            var property = this.isolateCoverGrammar(this.parseExpression);\n            this.expect(']');\n            expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n          } else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n            var quasi = this.parseTemplateLiteral();\n            expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n          } else {\n            break;\n          }\n        }\n        this.context.allowIn = previousAllowIn;\n        return expr;\n      };\n      Parser.prototype.parseSuper = function () {\n        var node = this.createNode();\n        this.expectKeyword('super');\n        if (!this.match('[') && !this.match('.')) {\n          this.throwUnexpectedToken(this.lookahead);\n        }\n        return this.finalize(node, new Node.Super());\n      };\n      Parser.prototype.parseLeftHandSideExpression = function () {\n        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n        var node = this.startNode(this.lookahead);\n        var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n        while (true) {\n          if (this.match('[')) {\n            this.context.isBindingElement = false;\n            this.context.isAssignmentTarget = true;\n            this.expect('[');\n            var property = this.isolateCoverGrammar(this.parseExpression);\n            this.expect(']');\n            expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n          } else if (this.match('.')) {\n            this.context.isBindingElement = false;\n            this.context.isAssignmentTarget = true;\n            this.expect('.');\n            var property = this.parseIdentifierName();\n            expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n          } else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n            var quasi = this.parseTemplateLiteral();\n            expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n          } else {\n            break;\n          }\n        }\n        return expr;\n      };\n      // ECMA-262 12.4 Update Expressions\n      Parser.prototype.parseUpdateExpression = function () {\n        var expr;\n        var startToken = this.lookahead;\n        if (this.match('++') || this.match('--')) {\n          var node = this.startNode(startToken);\n          var token = this.nextToken();\n          expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n          if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n            this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n          }\n          if (!this.context.isAssignmentTarget) {\n            this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n          }\n          var prefix = true;\n          expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n        } else {\n          expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          if (!this.hasLineTerminator && this.lookahead.type === token_1.Token.Punctuator) {\n            if (this.match('++') || this.match('--')) {\n              if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n                this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n              }\n              if (!this.context.isAssignmentTarget) {\n                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n              }\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              var operator = this.nextToken().value;\n              var prefix = false;\n              expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n            }\n          }\n        }\n        return expr;\n      };\n      // ECMA-262 12.5 Unary Operators\n      Parser.prototype.parseUnaryExpression = function () {\n        var expr;\n        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n          var node = this.startNode(this.lookahead);\n          var token = this.nextToken();\n          expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n          expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n          if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n            this.tolerateError(messages_1.Messages.StrictDelete);\n          }\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n        } else {\n          expr = this.parseUpdateExpression();\n        }\n        return expr;\n      };\n      Parser.prototype.parseExponentiationExpression = function () {\n        var startToken = this.lookahead;\n        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n          this.nextToken();\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n          var left = expr;\n          var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n          expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n        }\n        return expr;\n      };\n      // ECMA-262 12.6 Exponentiation Operators\n      // ECMA-262 12.7 Multiplicative Operators\n      // ECMA-262 12.8 Additive Operators\n      // ECMA-262 12.9 Bitwise Shift Operators\n      // ECMA-262 12.10 Relational Operators\n      // ECMA-262 12.11 Equality Operators\n      // ECMA-262 12.12 Binary Bitwise Operators\n      // ECMA-262 12.13 Binary Logical Operators\n      Parser.prototype.binaryPrecedence = function (token) {\n        var op = token.value;\n        var precedence;\n        if (token.type === token_1.Token.Punctuator) {\n          precedence = this.operatorPrecedence[op] || 0;\n        } else if (token.type === token_1.Token.Keyword) {\n          precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;\n        } else {\n          precedence = 0;\n        }\n        return precedence;\n      };\n      Parser.prototype.parseBinaryExpression = function () {\n        var startToken = this.lookahead;\n        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n        var token = this.lookahead;\n        var prec = this.binaryPrecedence(token);\n        if (prec > 0) {\n          this.nextToken();\n          token.prec = prec;\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n          var markers = [startToken, this.lookahead];\n          var left = expr;\n          var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n          var stack = [left, token, right];\n          while (true) {\n            prec = this.binaryPrecedence(this.lookahead);\n            if (prec <= 0) {\n              break;\n            }\n            // Reduce: make a binary expression from the three topmost entries.\n            while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n              right = stack.pop();\n              var operator = stack.pop().value;\n              left = stack.pop();\n              markers.pop();\n              var node = this.startNode(markers[markers.length - 1]);\n              stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n            }\n            // Shift.\n            token = this.nextToken();\n            token.prec = prec;\n            stack.push(token);\n            markers.push(this.lookahead);\n            stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n          }\n          // Final reduce to clean-up the stack.\n          var i = stack.length - 1;\n          expr = stack[i];\n          markers.pop();\n          while (i > 1) {\n            var node = this.startNode(markers.pop());\n            expr = this.finalize(node, new Node.BinaryExpression(stack[i - 1].value, stack[i - 2], expr));\n            i -= 2;\n          }\n        }\n        return expr;\n      };\n      // ECMA-262 12.14 Conditional Operator\n      Parser.prototype.parseConditionalExpression = function () {\n        var startToken = this.lookahead;\n        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n        if (this.match('?')) {\n          this.nextToken();\n          var previousAllowIn = this.context.allowIn;\n          this.context.allowIn = true;\n          var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          this.context.allowIn = previousAllowIn;\n          this.expect(':');\n          var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n        }\n        return expr;\n      };\n      // ECMA-262 12.15 Assignment Operators\n      Parser.prototype.checkPatternParam = function (options, param) {\n        switch (param.type) {\n          case syntax_1.Syntax.Identifier:\n            this.validateParam(options, param, param.name);\n            break;\n          case syntax_1.Syntax.RestElement:\n            this.checkPatternParam(options, param.argument);\n            break;\n          case syntax_1.Syntax.AssignmentPattern:\n            this.checkPatternParam(options, param.left);\n            break;\n          case syntax_1.Syntax.ArrayPattern:\n            for (var i = 0; i < param.elements.length; i++) {\n              if (param.elements[i] !== null) {\n                this.checkPatternParam(options, param.elements[i]);\n              }\n            }\n            break;\n          case syntax_1.Syntax.YieldExpression:\n            break;\n          default:\n            assert_1.assert(param.type === syntax_1.Syntax.ObjectPattern, 'Invalid type');\n            for (var i = 0; i < param.properties.length; i++) {\n              this.checkPatternParam(options, param.properties[i].value);\n            }\n            break;\n        }\n      };\n      Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n        var params = [expr];\n        var options;\n        switch (expr.type) {\n          case syntax_1.Syntax.Identifier:\n            break;\n          case ArrowParameterPlaceHolder:\n            params = expr.params;\n            break;\n          default:\n            return null;\n        }\n        options = {\n          paramSet: {}\n        };\n        for (var i = 0; i < params.length; ++i) {\n          var param = params[i];\n          if (param.type === syntax_1.Syntax.AssignmentPattern) {\n            if (param.right.type === syntax_1.Syntax.YieldExpression) {\n              if (param.right.argument) {\n                this.throwUnexpectedToken(this.lookahead);\n              }\n              param.right.type = syntax_1.Syntax.Identifier;\n              param.right.name = 'yield';\n              delete param.right.argument;\n              delete param.right.delegate;\n            }\n          }\n          this.checkPatternParam(options, param);\n          params[i] = param;\n        }\n        if (this.context.strict || !this.context.allowYield) {\n          for (var i = 0; i < params.length; ++i) {\n            var param = params[i];\n            if (param.type === syntax_1.Syntax.YieldExpression) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          }\n        }\n        if (options.message === messages_1.Messages.StrictParamDupe) {\n          var token = this.context.strict ? options.stricted : options.firstRestricted;\n          this.throwUnexpectedToken(token, options.message);\n        }\n        return {\n          params: params,\n          stricted: options.stricted,\n          firstRestricted: options.firstRestricted,\n          message: options.message\n        };\n      };\n      Parser.prototype.parseAssignmentExpression = function () {\n        var expr;\n        if (!this.context.allowYield && this.matchKeyword('yield')) {\n          expr = this.parseYieldExpression();\n        } else {\n          var startToken = this.lookahead;\n          var token = startToken;\n          expr = this.parseConditionalExpression();\n          if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n            // ECMA-262 14.2 Arrow Function Definitions\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var list = this.reinterpretAsCoverFormalsList(expr);\n            if (list) {\n              if (this.hasLineTerminator) {\n                this.tolerateUnexpectedToken(this.lookahead);\n              }\n              this.context.firstCoverInitializedNameError = null;\n              var previousStrict = this.context.strict;\n              var previousAllowYield = this.context.allowYield;\n              this.context.allowYield = true;\n              var node = this.startNode(startToken);\n              this.expect('=>');\n              var body = this.match('{') ? this.parseFunctionSourceElements() : this.isolateCoverGrammar(this.parseAssignmentExpression);\n              var expression = body.type !== syntax_1.Syntax.BlockStatement;\n              if (this.context.strict && list.firstRestricted) {\n                this.throwUnexpectedToken(list.firstRestricted, list.message);\n              }\n              if (this.context.strict && list.stricted) {\n                this.tolerateUnexpectedToken(list.stricted, list.message);\n              }\n              expr = this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n              this.context.strict = previousStrict;\n              this.context.allowYield = previousAllowYield;\n            }\n          } else {\n            if (this.matchAssign()) {\n              if (!this.context.isAssignmentTarget) {\n                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n              }\n              if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n                var id = expr;\n                if (this.scanner.isRestrictedWord(id.name)) {\n                  this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n                }\n                if (this.scanner.isStrictModeReservedWord(id.name)) {\n                  this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n                }\n              }\n              if (!this.match('=')) {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n              } else {\n                this.reinterpretExpressionAsPattern(expr);\n              }\n              token = this.nextToken();\n              var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n              expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(token.value, expr, right));\n              this.context.firstCoverInitializedNameError = null;\n            }\n          }\n        }\n        return expr;\n      };\n      // ECMA-262 12.16 Comma Operator\n      Parser.prototype.parseExpression = function () {\n        var startToken = this.lookahead;\n        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n        if (this.match(',')) {\n          var expressions = [];\n          expressions.push(expr);\n          while (this.startMarker.index < this.scanner.length) {\n            if (!this.match(',')) {\n              break;\n            }\n            this.nextToken();\n            expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n          }\n          expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n        }\n        return expr;\n      };\n      // ECMA-262 13.2 Block\n      Parser.prototype.parseStatementListItem = function () {\n        var statement = null;\n        this.context.isAssignmentTarget = true;\n        this.context.isBindingElement = true;\n        if (this.lookahead.type === token_1.Token.Keyword) {\n          switch (this.lookahead.value) {\n            case 'export':\n              if (this.sourceType !== 'module') {\n                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n              }\n              statement = this.parseExportDeclaration();\n              break;\n            case 'import':\n              if (this.sourceType !== 'module') {\n                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n              }\n              statement = this.parseImportDeclaration();\n              break;\n            case 'const':\n              statement = this.parseLexicalDeclaration({\n                inFor: false\n              });\n              break;\n            case 'function':\n              statement = this.parseFunctionDeclaration();\n              break;\n            case 'class':\n              statement = this.parseClassDeclaration();\n              break;\n            case 'let':\n              statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({\n                inFor: false\n              }) : this.parseStatement();\n              break;\n            default:\n              statement = this.parseStatement();\n              break;\n          }\n        } else {\n          statement = this.parseStatement();\n        }\n        return statement;\n      };\n      Parser.prototype.parseBlock = function () {\n        var node = this.createNode();\n        this.expect('{');\n        var block = [];\n        while (true) {\n          if (this.match('}')) {\n            break;\n          }\n          block.push(this.parseStatementListItem());\n        }\n        this.expect('}');\n        return this.finalize(node, new Node.BlockStatement(block));\n      };\n      // ECMA-262 13.3.1 Let and Const Declarations\n      Parser.prototype.parseLexicalBinding = function (kind, options) {\n        var node = this.createNode();\n        var params = [];\n        var id = this.parsePattern(params, kind);\n        // ECMA-262 12.2.1\n        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n          if (this.scanner.isRestrictedWord(id.name)) {\n            this.tolerateError(messages_1.Messages.StrictVarName);\n          }\n        }\n        var init = null;\n        if (kind === 'const') {\n          if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n            this.expect('=');\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          }\n        } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {\n          this.expect('=');\n          init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n        }\n        return this.finalize(node, new Node.VariableDeclarator(id, init));\n      };\n      Parser.prototype.parseBindingList = function (kind, options) {\n        var list = [this.parseLexicalBinding(kind, options)];\n        while (this.match(',')) {\n          this.nextToken();\n          list.push(this.parseLexicalBinding(kind, options));\n        }\n        return list;\n      };\n      Parser.prototype.isLexicalDeclaration = function () {\n        var previousIndex = this.scanner.index;\n        var previousLineNumber = this.scanner.lineNumber;\n        var previousLineStart = this.scanner.lineStart;\n        this.collectComments();\n        var next = this.scanner.lex();\n        this.scanner.index = previousIndex;\n        this.scanner.lineNumber = previousLineNumber;\n        this.scanner.lineStart = previousLineStart;\n        return next.type === token_1.Token.Identifier || next.type === token_1.Token.Punctuator && next.value === '[' || next.type === token_1.Token.Punctuator && next.value === '{' || next.type === token_1.Token.Keyword && next.value === 'let' || next.type === token_1.Token.Keyword && next.value === 'yield';\n      };\n      Parser.prototype.parseLexicalDeclaration = function (options) {\n        var node = this.createNode();\n        var kind = this.nextToken().value;\n        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n        var declarations = this.parseBindingList(kind, options);\n        this.consumeSemicolon();\n        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n      };\n      // ECMA-262 13.3.3 Destructuring Binding Patterns\n      Parser.prototype.parseBindingRestElement = function (params, kind) {\n        var node = this.createNode();\n        this.expect('...');\n        var arg = this.parsePattern(params, kind);\n        return this.finalize(node, new Node.RestElement(arg));\n      };\n      Parser.prototype.parseArrayPattern = function (params, kind) {\n        var node = this.createNode();\n        this.expect('[');\n        var elements = [];\n        while (!this.match(']')) {\n          if (this.match(',')) {\n            this.nextToken();\n            elements.push(null);\n          } else {\n            if (this.match('...')) {\n              elements.push(this.parseBindingRestElement(params, kind));\n              break;\n            } else {\n              elements.push(this.parsePatternWithDefault(params, kind));\n            }\n            if (!this.match(']')) {\n              this.expect(',');\n            }\n          }\n        }\n        this.expect(']');\n        return this.finalize(node, new Node.ArrayPattern(elements));\n      };\n      Parser.prototype.parsePropertyPattern = function (params, kind) {\n        var node = this.createNode();\n        var computed = false;\n        var shorthand = false;\n        var method = false;\n        var key;\n        var value;\n        if (this.lookahead.type === token_1.Token.Identifier) {\n          var keyToken = this.lookahead;\n          key = this.parseVariableIdentifier();\n          var init = this.finalize(node, new Node.Identifier(keyToken.value));\n          if (this.match('=')) {\n            params.push(keyToken);\n            shorthand = true;\n            this.nextToken();\n            var expr = this.parseAssignmentExpression();\n            value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n          } else if (!this.match(':')) {\n            params.push(keyToken);\n            shorthand = true;\n            value = init;\n          } else {\n            this.expect(':');\n            value = this.parsePatternWithDefault(params, kind);\n          }\n        } else {\n          computed = this.match('[');\n          key = this.parseObjectPropertyKey();\n          this.expect(':');\n          value = this.parsePatternWithDefault(params, kind);\n        }\n        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n      };\n      Parser.prototype.parseObjectPattern = function (params, kind) {\n        var node = this.createNode();\n        var properties = [];\n        this.expect('{');\n        while (!this.match('}')) {\n          properties.push(this.parsePropertyPattern(params, kind));\n          if (!this.match('}')) {\n            this.expect(',');\n          }\n        }\n        this.expect('}');\n        return this.finalize(node, new Node.ObjectPattern(properties));\n      };\n      Parser.prototype.parsePattern = function (params, kind) {\n        var pattern;\n        if (this.match('[')) {\n          pattern = this.parseArrayPattern(params, kind);\n        } else if (this.match('{')) {\n          pattern = this.parseObjectPattern(params, kind);\n        } else {\n          if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n            this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.UnexpectedToken);\n          }\n          params.push(this.lookahead);\n          pattern = this.parseVariableIdentifier(kind);\n        }\n        return pattern;\n      };\n      Parser.prototype.parsePatternWithDefault = function (params, kind) {\n        var startToken = this.lookahead;\n        var pattern = this.parsePattern(params, kind);\n        if (this.match('=')) {\n          this.nextToken();\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          this.context.allowYield = previousAllowYield;\n          pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n        }\n        return pattern;\n      };\n      // ECMA-262 13.3.2 Variable Statement\n      Parser.prototype.parseVariableIdentifier = function (kind) {\n        var node = this.createNode();\n        var token = this.nextToken();\n        if (token.type === token_1.Token.Keyword && token.value === 'yield') {\n          if (this.context.strict) {\n            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n          }\n          if (!this.context.allowYield) {\n            this.throwUnexpectedToken(token);\n          }\n        } else if (token.type !== token_1.Token.Identifier) {\n          if (this.context.strict && token.type === token_1.Token.Keyword && this.scanner.isStrictModeReservedWord(token.value)) {\n            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n          } else {\n            if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n              this.throwUnexpectedToken(token);\n            }\n          }\n        } else if (this.sourceType === 'module' && token.type === token_1.Token.Identifier && token.value === 'await') {\n          this.tolerateUnexpectedToken(token);\n        }\n        return this.finalize(node, new Node.Identifier(token.value));\n      };\n      Parser.prototype.parseVariableDeclaration = function (options) {\n        var node = this.createNode();\n        var params = [];\n        var id = this.parsePattern(params, 'var');\n        // ECMA-262 12.2.1\n        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n          if (this.scanner.isRestrictedWord(id.name)) {\n            this.tolerateError(messages_1.Messages.StrictVarName);\n          }\n        }\n        var init = null;\n        if (this.match('=')) {\n          this.nextToken();\n          init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n        } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n          this.expect('=');\n        }\n        return this.finalize(node, new Node.VariableDeclarator(id, init));\n      };\n      Parser.prototype.parseVariableDeclarationList = function (options) {\n        var opt = {\n          inFor: options.inFor\n        };\n        var list = [];\n        list.push(this.parseVariableDeclaration(opt));\n        while (this.match(',')) {\n          this.nextToken();\n          list.push(this.parseVariableDeclaration(opt));\n        }\n        return list;\n      };\n      Parser.prototype.parseVariableStatement = function () {\n        var node = this.createNode();\n        this.expectKeyword('var');\n        var declarations = this.parseVariableDeclarationList({\n          inFor: false\n        });\n        this.consumeSemicolon();\n        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n      };\n      // ECMA-262 13.4 Empty Statement\n      Parser.prototype.parseEmptyStatement = function () {\n        var node = this.createNode();\n        this.expect(';');\n        return this.finalize(node, new Node.EmptyStatement());\n      };\n      // ECMA-262 13.5 Expression Statement\n      Parser.prototype.parseExpressionStatement = function () {\n        var node = this.createNode();\n        var expr = this.parseExpression();\n        this.consumeSemicolon();\n        return this.finalize(node, new Node.ExpressionStatement(expr));\n      };\n      // ECMA-262 13.6 If statement\n      Parser.prototype.parseIfStatement = function () {\n        var node = this.createNode();\n        var consequent;\n        var alternate = null;\n        this.expectKeyword('if');\n        this.expect('(');\n        var test = this.parseExpression();\n        if (!this.match(')') && this.config.tolerant) {\n          this.tolerateUnexpectedToken(this.nextToken());\n          consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n        } else {\n          this.expect(')');\n          consequent = this.parseStatement();\n          if (this.matchKeyword('else')) {\n            this.nextToken();\n            alternate = this.parseStatement();\n          }\n        }\n        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n      };\n      // ECMA-262 13.7.2 The do-while Statement\n      Parser.prototype.parseDoWhileStatement = function () {\n        var node = this.createNode();\n        this.expectKeyword('do');\n        var previousInIteration = this.context.inIteration;\n        this.context.inIteration = true;\n        var body = this.parseStatement();\n        this.context.inIteration = previousInIteration;\n        this.expectKeyword('while');\n        this.expect('(');\n        var test = this.parseExpression();\n        this.expect(')');\n        if (this.match(';')) {\n          this.nextToken();\n        }\n        return this.finalize(node, new Node.DoWhileStatement(body, test));\n      };\n      // ECMA-262 13.7.3 The while Statement\n      Parser.prototype.parseWhileStatement = function () {\n        var node = this.createNode();\n        var body;\n        this.expectKeyword('while');\n        this.expect('(');\n        var test = this.parseExpression();\n        if (!this.match(')') && this.config.tolerant) {\n          this.tolerateUnexpectedToken(this.nextToken());\n          body = this.finalize(this.createNode(), new Node.EmptyStatement());\n        } else {\n          this.expect(')');\n          var previousInIteration = this.context.inIteration;\n          this.context.inIteration = true;\n          body = this.parseStatement();\n          this.context.inIteration = previousInIteration;\n        }\n        return this.finalize(node, new Node.WhileStatement(test, body));\n      };\n      // ECMA-262 13.7.4 The for Statement\n      // ECMA-262 13.7.5 The for-in and for-of Statements\n      Parser.prototype.parseForStatement = function () {\n        var init = null;\n        var test = null;\n        var update = null;\n        var forIn = true;\n        var left, right;\n        var node = this.createNode();\n        this.expectKeyword('for');\n        this.expect('(');\n        if (this.match(';')) {\n          this.nextToken();\n        } else {\n          if (this.matchKeyword('var')) {\n            init = this.createNode();\n            this.nextToken();\n            var previousAllowIn = this.context.allowIn;\n            this.context.allowIn = false;\n            var declarations = this.parseVariableDeclarationList({\n              inFor: true\n            });\n            this.context.allowIn = previousAllowIn;\n            if (declarations.length === 1 && this.matchKeyword('in')) {\n              var decl = declarations[0];\n              if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n                this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n              }\n              init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n              this.nextToken();\n              left = init;\n              right = this.parseExpression();\n              init = null;\n            } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n              init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n              this.nextToken();\n              left = init;\n              right = this.parseAssignmentExpression();\n              init = null;\n              forIn = false;\n            } else {\n              init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n              this.expect(';');\n            }\n          } else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n            init = this.createNode();\n            var kind = this.nextToken().value;\n            if (!this.context.strict && this.lookahead.value === 'in') {\n              init = this.finalize(init, new Node.Identifier(kind));\n              this.nextToken();\n              left = init;\n              right = this.parseExpression();\n              init = null;\n            } else {\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              var declarations = this.parseBindingList(kind, {\n                inFor: true\n              });\n              this.context.allowIn = previousAllowIn;\n              if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                this.nextToken();\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                this.consumeSemicolon();\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n              }\n            }\n          } else {\n            var initStartToken = this.lookahead;\n            var previousAllowIn = this.context.allowIn;\n            this.context.allowIn = false;\n            init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowIn = previousAllowIn;\n            if (this.matchKeyword('in')) {\n              if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n              }\n              this.nextToken();\n              this.reinterpretExpressionAsPattern(init);\n              left = init;\n              right = this.parseExpression();\n              init = null;\n            } else if (this.matchContextualKeyword('of')) {\n              if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n              }\n              this.nextToken();\n              this.reinterpretExpressionAsPattern(init);\n              left = init;\n              right = this.parseAssignmentExpression();\n              init = null;\n              forIn = false;\n            } else {\n              if (this.match(',')) {\n                var initSeq = [init];\n                while (this.match(',')) {\n                  this.nextToken();\n                  initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n                }\n                init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n              }\n              this.expect(';');\n            }\n          }\n        }\n        if (typeof left === 'undefined') {\n          if (!this.match(';')) {\n            test = this.parseExpression();\n          }\n          this.expect(';');\n          if (!this.match(')')) {\n            update = this.parseExpression();\n          }\n        }\n        var body;\n        if (!this.match(')') && this.config.tolerant) {\n          this.tolerateUnexpectedToken(this.nextToken());\n          body = this.finalize(this.createNode(), new Node.EmptyStatement());\n        } else {\n          this.expect(')');\n          var previousInIteration = this.context.inIteration;\n          this.context.inIteration = true;\n          body = this.isolateCoverGrammar(this.parseStatement);\n          this.context.inIteration = previousInIteration;\n        }\n        return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));\n      };\n      // ECMA-262 13.8 The continue statement\n      Parser.prototype.parseContinueStatement = function () {\n        var node = this.createNode();\n        this.expectKeyword('continue');\n        var label = null;\n        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n          label = this.parseVariableIdentifier();\n          var key = '$' + label.name;\n          if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n            this.throwError(messages_1.Messages.UnknownLabel, label.name);\n          }\n        }\n        this.consumeSemicolon();\n        if (label === null && !this.context.inIteration) {\n          this.throwError(messages_1.Messages.IllegalContinue);\n        }\n        return this.finalize(node, new Node.ContinueStatement(label));\n      };\n      // ECMA-262 13.9 The break statement\n      Parser.prototype.parseBreakStatement = function () {\n        var node = this.createNode();\n        this.expectKeyword('break');\n        var label = null;\n        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n          label = this.parseVariableIdentifier();\n          var key = '$' + label.name;\n          if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n            this.throwError(messages_1.Messages.UnknownLabel, label.name);\n          }\n        }\n        this.consumeSemicolon();\n        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n          this.throwError(messages_1.Messages.IllegalBreak);\n        }\n        return this.finalize(node, new Node.BreakStatement(label));\n      };\n      // ECMA-262 13.10 The return statement\n      Parser.prototype.parseReturnStatement = function () {\n        if (!this.context.inFunctionBody) {\n          this.tolerateError(messages_1.Messages.IllegalReturn);\n        }\n        var node = this.createNode();\n        this.expectKeyword('return');\n        var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== token_1.Token.EOF;\n        var argument = hasArgument ? this.parseExpression() : null;\n        this.consumeSemicolon();\n        return this.finalize(node, new Node.ReturnStatement(argument));\n      };\n      // ECMA-262 13.11 The with statement\n      Parser.prototype.parseWithStatement = function () {\n        if (this.context.strict) {\n          this.tolerateError(messages_1.Messages.StrictModeWith);\n        }\n        var node = this.createNode();\n        this.expectKeyword('with');\n        this.expect('(');\n        var object = this.parseExpression();\n        this.expect(')');\n        var body = this.parseStatement();\n        return this.finalize(node, new Node.WithStatement(object, body));\n      };\n      // ECMA-262 13.12 The switch statement\n      Parser.prototype.parseSwitchCase = function () {\n        var node = this.createNode();\n        var test;\n        if (this.matchKeyword('default')) {\n          this.nextToken();\n          test = null;\n        } else {\n          this.expectKeyword('case');\n          test = this.parseExpression();\n        }\n        this.expect(':');\n        var consequent = [];\n        while (true) {\n          if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n            break;\n          }\n          consequent.push(this.parseStatementListItem());\n        }\n        return this.finalize(node, new Node.SwitchCase(test, consequent));\n      };\n      Parser.prototype.parseSwitchStatement = function () {\n        var node = this.createNode();\n        this.expectKeyword('switch');\n        this.expect('(');\n        var discriminant = this.parseExpression();\n        this.expect(')');\n        var previousInSwitch = this.context.inSwitch;\n        this.context.inSwitch = true;\n        var cases = [];\n        var defaultFound = false;\n        this.expect('{');\n        while (true) {\n          if (this.match('}')) {\n            break;\n          }\n          var clause = this.parseSwitchCase();\n          if (clause.test === null) {\n            if (defaultFound) {\n              this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n            }\n            defaultFound = true;\n          }\n          cases.push(clause);\n        }\n        this.expect('}');\n        this.context.inSwitch = previousInSwitch;\n        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n      };\n      // ECMA-262 13.13 Labelled Statements\n      Parser.prototype.parseLabelledStatement = function () {\n        var node = this.createNode();\n        var expr = this.parseExpression();\n        var statement;\n        if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {\n          this.nextToken();\n          var id = expr;\n          var key = '$' + id.name;\n          if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n            this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n          }\n          this.context.labelSet[key] = true;\n          var labeledBody = this.parseStatement();\n          delete this.context.labelSet[key];\n          statement = new Node.LabeledStatement(id, labeledBody);\n        } else {\n          this.consumeSemicolon();\n          statement = new Node.ExpressionStatement(expr);\n        }\n        return this.finalize(node, statement);\n      };\n      // ECMA-262 13.14 The throw statement\n      Parser.prototype.parseThrowStatement = function () {\n        var node = this.createNode();\n        this.expectKeyword('throw');\n        if (this.hasLineTerminator) {\n          this.throwError(messages_1.Messages.NewlineAfterThrow);\n        }\n        var argument = this.parseExpression();\n        this.consumeSemicolon();\n        return this.finalize(node, new Node.ThrowStatement(argument));\n      };\n      // ECMA-262 13.15 The try statement\n      Parser.prototype.parseCatchClause = function () {\n        var node = this.createNode();\n        this.expectKeyword('catch');\n        this.expect('(');\n        if (this.match(')')) {\n          this.throwUnexpectedToken(this.lookahead);\n        }\n        var params = [];\n        var param = this.parsePattern(params);\n        var paramMap = {};\n        for (var i = 0; i < params.length; i++) {\n          var key = '$' + params[i].value;\n          if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n            this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n          }\n          paramMap[key] = true;\n        }\n        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n          if (this.scanner.isRestrictedWord(param.name)) {\n            this.tolerateError(messages_1.Messages.StrictCatchVariable);\n          }\n        }\n        this.expect(')');\n        var body = this.parseBlock();\n        return this.finalize(node, new Node.CatchClause(param, body));\n      };\n      Parser.prototype.parseFinallyClause = function () {\n        this.expectKeyword('finally');\n        return this.parseBlock();\n      };\n      Parser.prototype.parseTryStatement = function () {\n        var node = this.createNode();\n        this.expectKeyword('try');\n        var block = this.parseBlock();\n        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n        if (!handler && !finalizer) {\n          this.throwError(messages_1.Messages.NoCatchOrFinally);\n        }\n        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n      };\n      // ECMA-262 13.16 The debugger statement\n      Parser.prototype.parseDebuggerStatement = function () {\n        var node = this.createNode();\n        this.expectKeyword('debugger');\n        this.consumeSemicolon();\n        return this.finalize(node, new Node.DebuggerStatement());\n      };\n      // ECMA-262 13 Statements\n      Parser.prototype.parseStatement = function () {\n        var statement = null;\n        switch (this.lookahead.type) {\n          case token_1.Token.BooleanLiteral:\n          case token_1.Token.NullLiteral:\n          case token_1.Token.NumericLiteral:\n          case token_1.Token.StringLiteral:\n          case token_1.Token.Template:\n          case token_1.Token.RegularExpression:\n            statement = this.parseExpressionStatement();\n            break;\n          case token_1.Token.Punctuator:\n            var value = this.lookahead.value;\n            if (value === '{') {\n              statement = this.parseBlock();\n            } else if (value === '(') {\n              statement = this.parseExpressionStatement();\n            } else if (value === ';') {\n              statement = this.parseEmptyStatement();\n            } else {\n              statement = this.parseExpressionStatement();\n            }\n            break;\n          case token_1.Token.Identifier:\n            statement = this.parseLabelledStatement();\n            break;\n          case token_1.Token.Keyword:\n            switch (this.lookahead.value) {\n              case 'break':\n                statement = this.parseBreakStatement();\n                break;\n              case 'continue':\n                statement = this.parseContinueStatement();\n                break;\n              case 'debugger':\n                statement = this.parseDebuggerStatement();\n                break;\n              case 'do':\n                statement = this.parseDoWhileStatement();\n                break;\n              case 'for':\n                statement = this.parseForStatement();\n                break;\n              case 'function':\n                statement = this.parseFunctionDeclaration();\n                break;\n              case 'if':\n                statement = this.parseIfStatement();\n                break;\n              case 'return':\n                statement = this.parseReturnStatement();\n                break;\n              case 'switch':\n                statement = this.parseSwitchStatement();\n                break;\n              case 'throw':\n                statement = this.parseThrowStatement();\n                break;\n              case 'try':\n                statement = this.parseTryStatement();\n                break;\n              case 'var':\n                statement = this.parseVariableStatement();\n                break;\n              case 'while':\n                statement = this.parseWhileStatement();\n                break;\n              case 'with':\n                statement = this.parseWithStatement();\n                break;\n              default:\n                statement = this.parseExpressionStatement();\n                break;\n            }\n            break;\n          default:\n            this.throwUnexpectedToken(this.lookahead);\n        }\n        return statement;\n      };\n      // ECMA-262 14.1 Function Definition\n      Parser.prototype.parseFunctionSourceElements = function () {\n        var node = this.createNode();\n        this.expect('{');\n        var body = this.parseDirectivePrologues();\n        var previousLabelSet = this.context.labelSet;\n        var previousInIteration = this.context.inIteration;\n        var previousInSwitch = this.context.inSwitch;\n        var previousInFunctionBody = this.context.inFunctionBody;\n        this.context.labelSet = {};\n        this.context.inIteration = false;\n        this.context.inSwitch = false;\n        this.context.inFunctionBody = true;\n        while (this.startMarker.index < this.scanner.length) {\n          if (this.match('}')) {\n            break;\n          }\n          body.push(this.parseStatementListItem());\n        }\n        this.expect('}');\n        this.context.labelSet = previousLabelSet;\n        this.context.inIteration = previousInIteration;\n        this.context.inSwitch = previousInSwitch;\n        this.context.inFunctionBody = previousInFunctionBody;\n        return this.finalize(node, new Node.BlockStatement(body));\n      };\n      Parser.prototype.validateParam = function (options, param, name) {\n        var key = '$' + name;\n        if (this.context.strict) {\n          if (this.scanner.isRestrictedWord(name)) {\n            options.stricted = param;\n            options.message = messages_1.Messages.StrictParamName;\n          }\n          if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n            options.stricted = param;\n            options.message = messages_1.Messages.StrictParamDupe;\n          }\n        } else if (!options.firstRestricted) {\n          if (this.scanner.isRestrictedWord(name)) {\n            options.firstRestricted = param;\n            options.message = messages_1.Messages.StrictParamName;\n          } else if (this.scanner.isStrictModeReservedWord(name)) {\n            options.firstRestricted = param;\n            options.message = messages_1.Messages.StrictReservedWord;\n          } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n            options.stricted = param;\n            options.message = messages_1.Messages.StrictParamDupe;\n          }\n        }\n        /* istanbul ignore next */\n        if (typeof Object.defineProperty === 'function') {\n          Object.defineProperty(options.paramSet, key, {\n            value: true,\n            enumerable: true,\n            writable: true,\n            configurable: true\n          });\n        } else {\n          options.paramSet[key] = true;\n        }\n      };\n      Parser.prototype.parseRestElement = function (params) {\n        var node = this.createNode();\n        this.expect('...');\n        var arg = this.parsePattern(params);\n        if (this.match('=')) {\n          this.throwError(messages_1.Messages.DefaultRestParameter);\n        }\n        if (!this.match(')')) {\n          this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n        }\n        return this.finalize(node, new Node.RestElement(arg));\n      };\n      Parser.prototype.parseFormalParameter = function (options) {\n        var params = [];\n        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n        for (var i = 0; i < params.length; i++) {\n          this.validateParam(options, params[i], params[i].value);\n        }\n        options.params.push(param);\n        return !this.match(')');\n      };\n      Parser.prototype.parseFormalParameters = function (firstRestricted) {\n        var options;\n        options = {\n          params: [],\n          firstRestricted: firstRestricted\n        };\n        this.expect('(');\n        if (!this.match(')')) {\n          options.paramSet = {};\n          while (this.startMarker.index < this.scanner.length) {\n            if (!this.parseFormalParameter(options)) {\n              break;\n            }\n            this.expect(',');\n          }\n        }\n        this.expect(')');\n        return {\n          params: options.params,\n          stricted: options.stricted,\n          firstRestricted: options.firstRestricted,\n          message: options.message\n        };\n      };\n      Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n        var node = this.createNode();\n        this.expectKeyword('function');\n        var isGenerator = this.match('*');\n        if (isGenerator) {\n          this.nextToken();\n        }\n        var message;\n        var id = null;\n        var firstRestricted = null;\n        if (!identifierIsOptional || !this.match('(')) {\n          var token = this.lookahead;\n          id = this.parseVariableIdentifier();\n          if (this.context.strict) {\n            if (this.scanner.isRestrictedWord(token.value)) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n            }\n          } else {\n            if (this.scanner.isRestrictedWord(token.value)) {\n              firstRestricted = token;\n              message = messages_1.Messages.StrictFunctionName;\n            } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n              firstRestricted = token;\n              message = messages_1.Messages.StrictReservedWord;\n            }\n          }\n        }\n        var previousAllowYield = this.context.allowYield;\n        this.context.allowYield = !isGenerator;\n        var formalParameters = this.parseFormalParameters(firstRestricted);\n        var params = formalParameters.params;\n        var stricted = formalParameters.stricted;\n        firstRestricted = formalParameters.firstRestricted;\n        if (formalParameters.message) {\n          message = formalParameters.message;\n        }\n        var previousStrict = this.context.strict;\n        var body = this.parseFunctionSourceElements();\n        if (this.context.strict && firstRestricted) {\n          this.throwUnexpectedToken(firstRestricted, message);\n        }\n        if (this.context.strict && stricted) {\n          this.tolerateUnexpectedToken(stricted, message);\n        }\n        this.context.strict = previousStrict;\n        this.context.allowYield = previousAllowYield;\n        return this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n      };\n      Parser.prototype.parseFunctionExpression = function () {\n        var node = this.createNode();\n        this.expectKeyword('function');\n        var isGenerator = this.match('*');\n        if (isGenerator) {\n          this.nextToken();\n        }\n        var message;\n        var id = null;\n        var firstRestricted;\n        var previousAllowYield = this.context.allowYield;\n        this.context.allowYield = !isGenerator;\n        if (!this.match('(')) {\n          var token = this.lookahead;\n          id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();\n          if (this.context.strict) {\n            if (this.scanner.isRestrictedWord(token.value)) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n            }\n          } else {\n            if (this.scanner.isRestrictedWord(token.value)) {\n              firstRestricted = token;\n              message = messages_1.Messages.StrictFunctionName;\n            } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n              firstRestricted = token;\n              message = messages_1.Messages.StrictReservedWord;\n            }\n          }\n        }\n        var formalParameters = this.parseFormalParameters(firstRestricted);\n        var params = formalParameters.params;\n        var stricted = formalParameters.stricted;\n        firstRestricted = formalParameters.firstRestricted;\n        if (formalParameters.message) {\n          message = formalParameters.message;\n        }\n        var previousStrict = this.context.strict;\n        var body = this.parseFunctionSourceElements();\n        if (this.context.strict && firstRestricted) {\n          this.throwUnexpectedToken(firstRestricted, message);\n        }\n        if (this.context.strict && stricted) {\n          this.tolerateUnexpectedToken(stricted, message);\n        }\n        this.context.strict = previousStrict;\n        this.context.allowYield = previousAllowYield;\n        return this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n      };\n      // ECMA-262 14.1.1 Directive Prologues\n      Parser.prototype.parseDirective = function () {\n        var token = this.lookahead;\n        var directive = null;\n        var node = this.createNode();\n        var expr = this.parseExpression();\n        if (expr.type === syntax_1.Syntax.Literal) {\n          directive = this.getTokenRaw(token).slice(1, -1);\n        }\n        this.consumeSemicolon();\n        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n      };\n      Parser.prototype.parseDirectivePrologues = function () {\n        var firstRestricted = null;\n        var body = [];\n        while (true) {\n          var token = this.lookahead;\n          if (token.type !== token_1.Token.StringLiteral) {\n            break;\n          }\n          var statement = this.parseDirective();\n          body.push(statement);\n          var directive = statement.directive;\n          if (typeof directive !== 'string') {\n            break;\n          }\n          if (directive === 'use strict') {\n            this.context.strict = true;\n            if (firstRestricted) {\n              this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n            }\n          } else {\n            if (!firstRestricted && token.octal) {\n              firstRestricted = token;\n            }\n          }\n        }\n        return body;\n      };\n      // ECMA-262 14.3 Method Definitions\n      Parser.prototype.qualifiedPropertyName = function (token) {\n        switch (token.type) {\n          case token_1.Token.Identifier:\n          case token_1.Token.StringLiteral:\n          case token_1.Token.BooleanLiteral:\n          case token_1.Token.NullLiteral:\n          case token_1.Token.NumericLiteral:\n          case token_1.Token.Keyword:\n            return true;\n          case token_1.Token.Punctuator:\n            return token.value === '[';\n        }\n        return false;\n      };\n      Parser.prototype.parseGetterMethod = function () {\n        var node = this.createNode();\n        this.expect('(');\n        this.expect(')');\n        var isGenerator = false;\n        var params = {\n          params: [],\n          stricted: null,\n          firstRestricted: null,\n          message: null\n        };\n        var previousAllowYield = this.context.allowYield;\n        this.context.allowYield = false;\n        var method = this.parsePropertyMethod(params);\n        this.context.allowYield = previousAllowYield;\n        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n      };\n      Parser.prototype.parseSetterMethod = function () {\n        var node = this.createNode();\n        var options = {\n          params: [],\n          firstRestricted: null,\n          paramSet: {}\n        };\n        var isGenerator = false;\n        var previousAllowYield = this.context.allowYield;\n        this.context.allowYield = false;\n        this.expect('(');\n        if (this.match(')')) {\n          this.tolerateUnexpectedToken(this.lookahead);\n        } else {\n          this.parseFormalParameter(options);\n        }\n        this.expect(')');\n        var method = this.parsePropertyMethod(options);\n        this.context.allowYield = previousAllowYield;\n        return this.finalize(node, new Node.FunctionExpression(null, options.params, method, isGenerator));\n      };\n      Parser.prototype.parseGeneratorMethod = function () {\n        var node = this.createNode();\n        var isGenerator = true;\n        var previousAllowYield = this.context.allowYield;\n        this.context.allowYield = true;\n        var params = this.parseFormalParameters();\n        this.context.allowYield = false;\n        var method = this.parsePropertyMethod(params);\n        this.context.allowYield = previousAllowYield;\n        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n      };\n      // ECMA-262 14.4 Generator Function Definitions\n      Parser.prototype.isStartOfExpression = function () {\n        var start = true;\n        var value = this.lookahead.value;\n        switch (this.lookahead.type) {\n          case token_1.Token.Punctuator:\n            start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal\n            break;\n          case token_1.Token.Keyword:\n            start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';\n            break;\n          default:\n            break;\n        }\n        return start;\n      };\n      Parser.prototype.parseYieldExpression = function () {\n        var node = this.createNode();\n        this.expectKeyword('yield');\n        var argument = null;\n        var delegate = false;\n        if (!this.hasLineTerminator) {\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = false;\n          delegate = this.match('*');\n          if (delegate) {\n            this.nextToken();\n            argument = this.parseAssignmentExpression();\n          } else if (this.isStartOfExpression()) {\n            argument = this.parseAssignmentExpression();\n          }\n          this.context.allowYield = previousAllowYield;\n        }\n        return this.finalize(node, new Node.YieldExpression(argument, delegate));\n      };\n      // ECMA-262 14.5 Class Definitions\n      Parser.prototype.parseClassElement = function (hasConstructor) {\n        var token = this.lookahead;\n        var node = this.createNode();\n        var kind;\n        var key;\n        var value;\n        var computed = false;\n        var method = false;\n        var isStatic = false;\n        if (this.match('*')) {\n          this.nextToken();\n        } else {\n          computed = this.match('[');\n          key = this.parseObjectPropertyKey();\n          var id = key;\n          if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n            token = this.lookahead;\n            isStatic = true;\n            computed = this.match('[');\n            if (this.match('*')) {\n              this.nextToken();\n            } else {\n              key = this.parseObjectPropertyKey();\n            }\n          }\n        }\n        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n        if (token.type === token_1.Token.Identifier) {\n          if (token.value === 'get' && lookaheadPropertyKey) {\n            kind = 'get';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.context.allowYield = false;\n            value = this.parseGetterMethod();\n          } else if (token.value === 'set' && lookaheadPropertyKey) {\n            kind = 'set';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseSetterMethod();\n          }\n        } else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n          kind = 'init';\n          computed = this.match('[');\n          key = this.parseObjectPropertyKey();\n          value = this.parseGeneratorMethod();\n          method = true;\n        }\n        if (!kind && key && this.match('(')) {\n          kind = 'init';\n          value = this.parsePropertyMethodFunction();\n          method = true;\n        }\n        if (!kind) {\n          this.throwUnexpectedToken(this.lookahead);\n        }\n        if (kind === 'init') {\n          kind = 'method';\n        }\n        if (!computed) {\n          if (isStatic && this.isPropertyKey(key, 'prototype')) {\n            this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n          }\n          if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n            if (kind !== 'method' || !method || value.generator) {\n              this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n            }\n            if (hasConstructor.value) {\n              this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n            } else {\n              hasConstructor.value = true;\n            }\n            kind = 'constructor';\n          }\n        }\n        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n      };\n      Parser.prototype.parseClassElementList = function () {\n        var body = [];\n        var hasConstructor = {\n          value: false\n        };\n        this.expect('{');\n        while (!this.match('}')) {\n          if (this.match(';')) {\n            this.nextToken();\n          } else {\n            body.push(this.parseClassElement(hasConstructor));\n          }\n        }\n        this.expect('}');\n        return body;\n      };\n      Parser.prototype.parseClassBody = function () {\n        var node = this.createNode();\n        var elementList = this.parseClassElementList();\n        return this.finalize(node, new Node.ClassBody(elementList));\n      };\n      Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n        var node = this.createNode();\n        var previousStrict = this.context.strict;\n        this.context.strict = true;\n        this.expectKeyword('class');\n        var id = identifierIsOptional && this.lookahead.type !== token_1.Token.Identifier ? null : this.parseVariableIdentifier();\n        var superClass = null;\n        if (this.matchKeyword('extends')) {\n          this.nextToken();\n          superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n        }\n        var classBody = this.parseClassBody();\n        this.context.strict = previousStrict;\n        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n      };\n      Parser.prototype.parseClassExpression = function () {\n        var node = this.createNode();\n        var previousStrict = this.context.strict;\n        this.context.strict = true;\n        this.expectKeyword('class');\n        var id = this.lookahead.type === token_1.Token.Identifier ? this.parseVariableIdentifier() : null;\n        var superClass = null;\n        if (this.matchKeyword('extends')) {\n          this.nextToken();\n          superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n        }\n        var classBody = this.parseClassBody();\n        this.context.strict = previousStrict;\n        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n      };\n      // ECMA-262 15.1 Scripts\n      // ECMA-262 15.2 Modules\n      Parser.prototype.parseProgram = function () {\n        var node = this.createNode();\n        var body = this.parseDirectivePrologues();\n        while (this.startMarker.index < this.scanner.length) {\n          body.push(this.parseStatementListItem());\n        }\n        return this.finalize(node, new Node.Program(body, this.sourceType));\n      };\n      // ECMA-262 15.2.2 Imports\n      Parser.prototype.parseModuleSpecifier = function () {\n        var node = this.createNode();\n        if (this.lookahead.type !== token_1.Token.StringLiteral) {\n          this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n        }\n        var token = this.nextToken();\n        var raw = this.getTokenRaw(token);\n        return this.finalize(node, new Node.Literal(token.value, raw));\n      };\n      // import {<foo as bar>} ...;\n      Parser.prototype.parseImportSpecifier = function () {\n        var node = this.createNode();\n        var imported;\n        var local;\n        if (this.lookahead.type === token_1.Token.Identifier) {\n          imported = this.parseVariableIdentifier();\n          local = imported;\n          if (this.matchContextualKeyword('as')) {\n            this.nextToken();\n            local = this.parseVariableIdentifier();\n          }\n        } else {\n          imported = this.parseIdentifierName();\n          local = imported;\n          if (this.matchContextualKeyword('as')) {\n            this.nextToken();\n            local = this.parseVariableIdentifier();\n          } else {\n            this.throwUnexpectedToken(this.nextToken());\n          }\n        }\n        return this.finalize(node, new Node.ImportSpecifier(local, imported));\n      };\n      // {foo, bar as bas}\n      Parser.prototype.parseNamedImports = function () {\n        this.expect('{');\n        var specifiers = [];\n        while (!this.match('}')) {\n          specifiers.push(this.parseImportSpecifier());\n          if (!this.match('}')) {\n            this.expect(',');\n          }\n        }\n        this.expect('}');\n        return specifiers;\n      };\n      // import <foo> ...;\n      Parser.prototype.parseImportDefaultSpecifier = function () {\n        var node = this.createNode();\n        var local = this.parseIdentifierName();\n        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n      };\n      // import <* as foo> ...;\n      Parser.prototype.parseImportNamespaceSpecifier = function () {\n        var node = this.createNode();\n        this.expect('*');\n        if (!this.matchContextualKeyword('as')) {\n          this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n        }\n        this.nextToken();\n        var local = this.parseIdentifierName();\n        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n      };\n      Parser.prototype.parseImportDeclaration = function () {\n        if (this.context.inFunctionBody) {\n          this.throwError(messages_1.Messages.IllegalImportDeclaration);\n        }\n        var node = this.createNode();\n        this.expectKeyword('import');\n        var src;\n        var specifiers = [];\n        if (this.lookahead.type === token_1.Token.StringLiteral) {\n          // import 'foo';\n          src = this.parseModuleSpecifier();\n        } else {\n          if (this.match('{')) {\n            // import {bar}\n            specifiers = specifiers.concat(this.parseNamedImports());\n          } else if (this.match('*')) {\n            // import * as foo\n            specifiers.push(this.parseImportNamespaceSpecifier());\n          } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n            // import foo\n            specifiers.push(this.parseImportDefaultSpecifier());\n            if (this.match(',')) {\n              this.nextToken();\n              if (this.match('*')) {\n                // import foo, * as foo\n                specifiers.push(this.parseImportNamespaceSpecifier());\n              } else if (this.match('{')) {\n                // import foo, {bar}\n                specifiers = specifiers.concat(this.parseNamedImports());\n              } else {\n                this.throwUnexpectedToken(this.lookahead);\n              }\n            }\n          } else {\n            this.throwUnexpectedToken(this.nextToken());\n          }\n          if (!this.matchContextualKeyword('from')) {\n            var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n            this.throwError(message, this.lookahead.value);\n          }\n          this.nextToken();\n          src = this.parseModuleSpecifier();\n        }\n        this.consumeSemicolon();\n        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n      };\n      // ECMA-262 15.2.3 Exports\n      Parser.prototype.parseExportSpecifier = function () {\n        var node = this.createNode();\n        var local = this.parseIdentifierName();\n        var exported = local;\n        if (this.matchContextualKeyword('as')) {\n          this.nextToken();\n          exported = this.parseIdentifierName();\n        }\n        return this.finalize(node, new Node.ExportSpecifier(local, exported));\n      };\n      Parser.prototype.parseExportDeclaration = function () {\n        if (this.context.inFunctionBody) {\n          this.throwError(messages_1.Messages.IllegalExportDeclaration);\n        }\n        var node = this.createNode();\n        this.expectKeyword('export');\n        var exportDeclaration;\n        if (this.matchKeyword('default')) {\n          // export default ...\n          this.nextToken();\n          if (this.matchKeyword('function')) {\n            // export default function foo () {}\n            // export default function () {}\n            var declaration = this.parseFunctionDeclaration(true);\n            exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n          } else if (this.matchKeyword('class')) {\n            // export default class foo {}\n            var declaration = this.parseClassDeclaration(true);\n            exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n          } else {\n            if (this.matchContextualKeyword('from')) {\n              this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n            }\n            // export default {};\n            // export default [];\n            // export default (1 + 2);\n            var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n            this.consumeSemicolon();\n            exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n          }\n        } else if (this.match('*')) {\n          // export * from 'foo';\n          this.nextToken();\n          if (!this.matchContextualKeyword('from')) {\n            var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n            this.throwError(message, this.lookahead.value);\n          }\n          this.nextToken();\n          var src = this.parseModuleSpecifier();\n          this.consumeSemicolon();\n          exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n        } else if (this.lookahead.type === token_1.Token.Keyword) {\n          // export var f = 1;\n          var declaration = void 0;\n          switch (this.lookahead.value) {\n            case 'let':\n            case 'const':\n              declaration = this.parseLexicalDeclaration({\n                inFor: false\n              });\n              break;\n            case 'var':\n            case 'class':\n            case 'function':\n              declaration = this.parseStatementListItem();\n              break;\n            default:\n              this.throwUnexpectedToken(this.lookahead);\n          }\n          exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n        } else {\n          var specifiers = [];\n          var source = null;\n          var isExportFromIdentifier = false;\n          this.expect('{');\n          while (!this.match('}')) {\n            isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n            specifiers.push(this.parseExportSpecifier());\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n          this.expect('}');\n          if (this.matchContextualKeyword('from')) {\n            // export {default} from 'foo';\n            // export {foo} from 'foo';\n            this.nextToken();\n            source = this.parseModuleSpecifier();\n            this.consumeSemicolon();\n          } else if (isExportFromIdentifier) {\n            // export {default}; // missing fromClause\n            var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n            this.throwError(message, this.lookahead.value);\n          } else {\n            // export {foo};\n            this.consumeSemicolon();\n          }\n          exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n        }\n        return exportDeclaration;\n      };\n      return Parser;\n    }();\n    exports.Parser = Parser;\n\n    /***/\n  }, /* 4 */\n  /***/function (module, exports) {\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n    \"use strict\";\n\n    function assert(condition, message) {\n      /* istanbul ignore if */\n      if (!condition) {\n        throw new Error('ASSERT: ' + message);\n      }\n    }\n    exports.assert = assert;\n\n    /***/\n  }, /* 5 */\n  /***/function (module, exports) {\n    \"use strict\";\n\n    // Error messages should be identical to V8.\n    exports.Messages = {\n      UnexpectedToken: 'Unexpected token %0',\n      UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n      UnexpectedNumber: 'Unexpected number',\n      UnexpectedString: 'Unexpected string',\n      UnexpectedIdentifier: 'Unexpected identifier',\n      UnexpectedReserved: 'Unexpected reserved word',\n      UnexpectedTemplate: 'Unexpected quasi %0',\n      UnexpectedEOS: 'Unexpected end of input',\n      NewlineAfterThrow: 'Illegal newline after throw',\n      InvalidRegExp: 'Invalid regular expression',\n      UnterminatedRegExp: 'Invalid regular expression: missing /',\n      InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n      InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n      InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n      MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n      NoCatchOrFinally: 'Missing catch or finally after try',\n      UnknownLabel: 'Undefined label \\'%0\\'',\n      Redeclaration: '%0 \\'%1\\' has already been declared',\n      IllegalContinue: 'Illegal continue statement',\n      IllegalBreak: 'Illegal break statement',\n      IllegalReturn: 'Illegal return statement',\n      StrictModeWith: 'Strict mode code may not include a with statement',\n      StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n      StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n      StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n      StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n      StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n      StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n      StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n      StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n      StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n      StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n      StrictReservedWord: 'Use of future reserved word in strict mode',\n      TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n      ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n      DefaultRestParameter: 'Unexpected token =',\n      DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n      ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n      DuplicateConstructor: 'A class may only have one constructor',\n      StaticPrototype: 'Classes may not have static property named prototype',\n      MissingFromClause: 'Unexpected token',\n      NoAsAfterImportNamespace: 'Unexpected token',\n      InvalidModuleSpecifier: 'Unexpected token',\n      IllegalImportDeclaration: 'Unexpected token',\n      IllegalExportDeclaration: 'Unexpected token',\n      DuplicateBinding: 'Duplicate binding %0',\n      ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer'\n    };\n\n    /***/\n  }, /* 6 */\n  /***/function (module, exports) {\n    \"use strict\";\n\n    var ErrorHandler = function () {\n      function ErrorHandler() {\n        this.errors = [];\n        this.tolerant = false;\n      }\n      ;\n      ErrorHandler.prototype.recordError = function (error) {\n        this.errors.push(error);\n      };\n      ;\n      ErrorHandler.prototype.tolerate = function (error) {\n        if (this.tolerant) {\n          this.recordError(error);\n        } else {\n          throw error;\n        }\n      };\n      ;\n      ErrorHandler.prototype.constructError = function (msg, column) {\n        var error = new Error(msg);\n        try {\n          throw error;\n        } catch (base) {\n          /* istanbul ignore else */\n          if (Object.create && Object.defineProperty) {\n            error = Object.create(base);\n            Object.defineProperty(error, 'column', {\n              value: column\n            });\n          }\n        } finally {\n          return error;\n        }\n      };\n      ;\n      ErrorHandler.prototype.createError = function (index, line, col, description) {\n        var msg = 'Line ' + line + ': ' + description;\n        var error = this.constructError(msg, col);\n        error.index = index;\n        error.lineNumber = line;\n        error.description = description;\n        return error;\n      };\n      ;\n      ErrorHandler.prototype.throwError = function (index, line, col, description) {\n        throw this.createError(index, line, col, description);\n      };\n      ;\n      ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n        var error = this.createError(index, line, col, description);\n        if (this.tolerant) {\n          this.recordError(error);\n        } else {\n          throw error;\n        }\n      };\n      ;\n      return ErrorHandler;\n    }();\n    exports.ErrorHandler = ErrorHandler;\n\n    /***/\n  }, /* 7 */\n  /***/function (module, exports) {\n    \"use strict\";\n\n    (function (Token) {\n      Token[Token[\"BooleanLiteral\"] = 1] = \"BooleanLiteral\";\n      Token[Token[\"EOF\"] = 2] = \"EOF\";\n      Token[Token[\"Identifier\"] = 3] = \"Identifier\";\n      Token[Token[\"Keyword\"] = 4] = \"Keyword\";\n      Token[Token[\"NullLiteral\"] = 5] = \"NullLiteral\";\n      Token[Token[\"NumericLiteral\"] = 6] = \"NumericLiteral\";\n      Token[Token[\"Punctuator\"] = 7] = \"Punctuator\";\n      Token[Token[\"StringLiteral\"] = 8] = \"StringLiteral\";\n      Token[Token[\"RegularExpression\"] = 9] = \"RegularExpression\";\n      Token[Token[\"Template\"] = 10] = \"Template\";\n    })(exports.Token || (exports.Token = {}));\n    var Token = exports.Token;\n    ;\n    exports.TokenName = {};\n    exports.TokenName[Token.BooleanLiteral] = 'Boolean';\n    exports.TokenName[Token.EOF] = '<end>';\n    exports.TokenName[Token.Identifier] = 'Identifier';\n    exports.TokenName[Token.Keyword] = 'Keyword';\n    exports.TokenName[Token.NullLiteral] = 'Null';\n    exports.TokenName[Token.NumericLiteral] = 'Numeric';\n    exports.TokenName[Token.Punctuator] = 'Punctuator';\n    exports.TokenName[Token.StringLiteral] = 'String';\n    exports.TokenName[Token.RegularExpression] = 'RegularExpression';\n    exports.TokenName[Token.Template] = 'Template';\n\n    /***/\n  }, /* 8 */\n  /***/function (module, exports, __webpack_require__) {\n    \"use strict\";\n\n    var assert_1 = __webpack_require__(4);\n    var messages_1 = __webpack_require__(5);\n    var character_1 = __webpack_require__(9);\n    var token_1 = __webpack_require__(7);\n    function hexValue(ch) {\n      return '0123456789abcdef'.indexOf(ch.toLowerCase());\n    }\n    function octalValue(ch) {\n      return '01234567'.indexOf(ch);\n    }\n    var Scanner = function () {\n      function Scanner(code, handler) {\n        this.source = code;\n        this.errorHandler = handler;\n        this.trackComment = false;\n        this.length = code.length;\n        this.index = 0;\n        this.lineNumber = code.length > 0 ? 1 : 0;\n        this.lineStart = 0;\n        this.curlyStack = [];\n      }\n      ;\n      Scanner.prototype.eof = function () {\n        return this.index >= this.length;\n      };\n      ;\n      Scanner.prototype.throwUnexpectedToken = function (message) {\n        if (message === void 0) {\n          message = messages_1.Messages.UnexpectedTokenIllegal;\n        }\n        this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n      };\n      ;\n      Scanner.prototype.tolerateUnexpectedToken = function () {\n        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, messages_1.Messages.UnexpectedTokenIllegal);\n      };\n      ;\n      // ECMA-262 11.4 Comments\n      Scanner.prototype.skipSingleLineComment = function (offset) {\n        var comments;\n        var start, loc;\n        if (this.trackComment) {\n          comments = [];\n          start = this.index - offset;\n          loc = {\n            start: {\n              line: this.lineNumber,\n              column: this.index - this.lineStart - offset\n            },\n            end: {}\n          };\n        }\n        while (!this.eof()) {\n          var ch = this.source.charCodeAt(this.index);\n          ++this.index;\n          if (character_1.Character.isLineTerminator(ch)) {\n            if (this.trackComment) {\n              loc.end = {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - 1\n              };\n              var entry = {\n                multiLine: false,\n                slice: [start + offset, this.index - 1],\n                range: [start, this.index - 1],\n                loc: loc\n              };\n              comments.push(entry);\n            }\n            if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n              ++this.index;\n            }\n            ++this.lineNumber;\n            this.lineStart = this.index;\n            return comments;\n          }\n        }\n        if (this.trackComment) {\n          loc.end = {\n            line: this.lineNumber,\n            column: this.index - this.lineStart\n          };\n          var entry = {\n            multiLine: false,\n            slice: [start + offset, this.index],\n            range: [start, this.index],\n            loc: loc\n          };\n          comments.push(entry);\n        }\n        return comments;\n      };\n      ;\n      Scanner.prototype.skipMultiLineComment = function () {\n        var comments;\n        var start, loc;\n        if (this.trackComment) {\n          comments = [];\n          start = this.index - 2;\n          loc = {\n            start: {\n              line: this.lineNumber,\n              column: this.index - this.lineStart - 2\n            },\n            end: {}\n          };\n        }\n        while (!this.eof()) {\n          var ch = this.source.charCodeAt(this.index);\n          if (character_1.Character.isLineTerminator(ch)) {\n            if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n              ++this.index;\n            }\n            ++this.lineNumber;\n            ++this.index;\n            this.lineStart = this.index;\n          } else if (ch === 0x2A) {\n            // Block comment ends with '*/'.\n            if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n              this.index += 2;\n              if (this.trackComment) {\n                loc.end = {\n                  line: this.lineNumber,\n                  column: this.index - this.lineStart\n                };\n                var entry = {\n                  multiLine: true,\n                  slice: [start + 2, this.index - 2],\n                  range: [start, this.index],\n                  loc: loc\n                };\n                comments.push(entry);\n              }\n              return comments;\n            }\n            ++this.index;\n          } else {\n            ++this.index;\n          }\n        }\n        // Ran off the end of the file - the whole thing is a comment\n        if (this.trackComment) {\n          loc.end = {\n            line: this.lineNumber,\n            column: this.index - this.lineStart\n          };\n          var entry = {\n            multiLine: true,\n            slice: [start + 2, this.index],\n            range: [start, this.index],\n            loc: loc\n          };\n          comments.push(entry);\n        }\n        this.tolerateUnexpectedToken();\n        return comments;\n      };\n      ;\n      Scanner.prototype.scanComments = function () {\n        var comments;\n        if (this.trackComment) {\n          comments = [];\n        }\n        var start = this.index === 0;\n        while (!this.eof()) {\n          var ch = this.source.charCodeAt(this.index);\n          if (character_1.Character.isWhiteSpace(ch)) {\n            ++this.index;\n          } else if (character_1.Character.isLineTerminator(ch)) {\n            ++this.index;\n            if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n              ++this.index;\n            }\n            ++this.lineNumber;\n            this.lineStart = this.index;\n            start = true;\n          } else if (ch === 0x2F) {\n            ch = this.source.charCodeAt(this.index + 1);\n            if (ch === 0x2F) {\n              this.index += 2;\n              var comment = this.skipSingleLineComment(2);\n              if (this.trackComment) {\n                comments = comments.concat(comment);\n              }\n              start = true;\n            } else if (ch === 0x2A) {\n              this.index += 2;\n              var comment = this.skipMultiLineComment();\n              if (this.trackComment) {\n                comments = comments.concat(comment);\n              }\n            } else {\n              break;\n            }\n          } else if (start && ch === 0x2D) {\n            // U+003E is '>'\n            if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {\n              // '-->' is a single-line comment\n              this.index += 3;\n              var comment = this.skipSingleLineComment(3);\n              if (this.trackComment) {\n                comments = comments.concat(comment);\n              }\n            } else {\n              break;\n            }\n          } else if (ch === 0x3C) {\n            if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n              this.index += 4; // `<!--`\n              var comment = this.skipSingleLineComment(4);\n              if (this.trackComment) {\n                comments = comments.concat(comment);\n              }\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        }\n        return comments;\n      };\n      ;\n      // ECMA-262 11.6.2.2 Future Reserved Words\n      Scanner.prototype.isFutureReservedWord = function (id) {\n        switch (id) {\n          case 'enum':\n          case 'export':\n          case 'import':\n          case 'super':\n            return true;\n          default:\n            return false;\n        }\n      };\n      ;\n      Scanner.prototype.isStrictModeReservedWord = function (id) {\n        switch (id) {\n          case 'implements':\n          case 'interface':\n          case 'package':\n          case 'private':\n          case 'protected':\n          case 'public':\n          case 'static':\n          case 'yield':\n          case 'let':\n            return true;\n          default:\n            return false;\n        }\n      };\n      ;\n      Scanner.prototype.isRestrictedWord = function (id) {\n        return id === 'eval' || id === 'arguments';\n      };\n      ;\n      // ECMA-262 11.6.2.1 Keywords\n      Scanner.prototype.isKeyword = function (id) {\n        switch (id.length) {\n          case 2:\n            return id === 'if' || id === 'in' || id === 'do';\n          case 3:\n            return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';\n          case 4:\n            return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';\n          case 5:\n            return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';\n          case 6:\n            return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';\n          case 7:\n            return id === 'default' || id === 'finally' || id === 'extends';\n          case 8:\n            return id === 'function' || id === 'continue' || id === 'debugger';\n          case 10:\n            return id === 'instanceof';\n          default:\n            return false;\n        }\n      };\n      ;\n      Scanner.prototype.codePointAt = function (i) {\n        var cp = this.source.charCodeAt(i);\n        if (cp >= 0xD800 && cp <= 0xDBFF) {\n          var second = this.source.charCodeAt(i + 1);\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            var first = cp;\n            cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n          }\n        }\n        return cp;\n      };\n      ;\n      Scanner.prototype.scanHexEscape = function (prefix) {\n        var len = prefix === 'u' ? 4 : 2;\n        var code = 0;\n        for (var i = 0; i < len; ++i) {\n          if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n            code = code * 16 + hexValue(this.source[this.index++]);\n          } else {\n            return '';\n          }\n        }\n        return String.fromCharCode(code);\n      };\n      ;\n      Scanner.prototype.scanUnicodeCodePointEscape = function () {\n        var ch = this.source[this.index];\n        var code = 0;\n        // At least, one hex digit is required.\n        if (ch === '}') {\n          this.throwUnexpectedToken();\n        }\n        while (!this.eof()) {\n          ch = this.source[this.index++];\n          if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n            break;\n          }\n          code = code * 16 + hexValue(ch);\n        }\n        if (code > 0x10FFFF || ch !== '}') {\n          this.throwUnexpectedToken();\n        }\n        return character_1.Character.fromCodePoint(code);\n      };\n      ;\n      Scanner.prototype.getIdentifier = function () {\n        var start = this.index++;\n        while (!this.eof()) {\n          var ch = this.source.charCodeAt(this.index);\n          if (ch === 0x5C) {\n            // Blackslash (U+005C) marks Unicode escape sequence.\n            this.index = start;\n            return this.getComplexIdentifier();\n          } else if (ch >= 0xD800 && ch < 0xDFFF) {\n            // Need to handle surrogate pairs.\n            this.index = start;\n            return this.getComplexIdentifier();\n          }\n          if (character_1.Character.isIdentifierPart(ch)) {\n            ++this.index;\n          } else {\n            break;\n          }\n        }\n        return this.source.slice(start, this.index);\n      };\n      ;\n      Scanner.prototype.getComplexIdentifier = function () {\n        var cp = this.codePointAt(this.index);\n        var id = character_1.Character.fromCodePoint(cp);\n        this.index += id.length;\n        // '\\u' (U+005C, U+0075) denotes an escaped character.\n        var ch;\n        if (cp === 0x5C) {\n          if (this.source.charCodeAt(this.index) !== 0x75) {\n            this.throwUnexpectedToken();\n          }\n          ++this.index;\n          if (this.source[this.index] === '{') {\n            ++this.index;\n            ch = this.scanUnicodeCodePointEscape();\n          } else {\n            ch = this.scanHexEscape('u');\n            cp = ch.charCodeAt(0);\n            if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierStart(cp)) {\n              this.throwUnexpectedToken();\n            }\n          }\n          id = ch;\n        }\n        while (!this.eof()) {\n          cp = this.codePointAt(this.index);\n          if (!character_1.Character.isIdentifierPart(cp)) {\n            break;\n          }\n          ch = character_1.Character.fromCodePoint(cp);\n          id += ch;\n          this.index += ch.length;\n          // '\\u' (U+005C, U+0075) denotes an escaped character.\n          if (cp === 0x5C) {\n            id = id.substr(0, id.length - 1);\n            if (this.source.charCodeAt(this.index) !== 0x75) {\n              this.throwUnexpectedToken();\n            }\n            ++this.index;\n            if (this.source[this.index] === '{') {\n              ++this.index;\n              ch = this.scanUnicodeCodePointEscape();\n            } else {\n              ch = this.scanHexEscape('u');\n              cp = ch.charCodeAt(0);\n              if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierPart(cp)) {\n                this.throwUnexpectedToken();\n              }\n            }\n            id += ch;\n          }\n        }\n        return id;\n      };\n      ;\n      Scanner.prototype.octalToDecimal = function (ch) {\n        // \\0 is not octal escape sequence\n        var octal = ch !== '0';\n        var code = octalValue(ch);\n        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n          octal = true;\n          code = code * 8 + octalValue(this.source[this.index++]);\n          // 3 digits are only allowed when string starts\n          // with 0, 1, 2, 3\n          if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n            code = code * 8 + octalValue(this.source[this.index++]);\n          }\n        }\n        return {\n          code: code,\n          octal: octal\n        };\n      };\n      ;\n      // ECMA-262 11.6 Names and Keywords\n      Scanner.prototype.scanIdentifier = function () {\n        var type;\n        var start = this.index;\n        // Backslash (U+005C) starts an escaped character.\n        var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier();\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n          type = token_1.Token.Identifier;\n        } else if (this.isKeyword(id)) {\n          type = token_1.Token.Keyword;\n        } else if (id === 'null') {\n          type = token_1.Token.NullLiteral;\n        } else if (id === 'true' || id === 'false') {\n          type = token_1.Token.BooleanLiteral;\n        } else {\n          type = token_1.Token.Identifier;\n        }\n        return {\n          type: type,\n          value: id,\n          lineNumber: this.lineNumber,\n          lineStart: this.lineStart,\n          start: start,\n          end: this.index\n        };\n      };\n      ;\n      // ECMA-262 11.7 Punctuators\n      Scanner.prototype.scanPunctuator = function () {\n        var token = {\n          type: token_1.Token.Punctuator,\n          value: '',\n          lineNumber: this.lineNumber,\n          lineStart: this.lineStart,\n          start: this.index,\n          end: this.index\n        };\n        // Check for most common single-character punctuators.\n        var str = this.source[this.index];\n        switch (str) {\n          case '(':\n          case '{':\n            if (str === '{') {\n              this.curlyStack.push('{');\n            }\n            ++this.index;\n            break;\n          case '.':\n            ++this.index;\n            if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n              // Spread operator: ...\n              this.index += 2;\n              str = '...';\n            }\n            break;\n          case '}':\n            ++this.index;\n            this.curlyStack.pop();\n            break;\n          case ')':\n          case ';':\n          case ',':\n          case '[':\n          case ']':\n          case ':':\n          case '?':\n          case '~':\n            ++this.index;\n            break;\n          default:\n            // 4-character punctuator.\n            str = this.source.substr(this.index, 4);\n            if (str === '>>>=') {\n              this.index += 4;\n            } else {\n              // 3-character punctuators.\n              str = str.substr(0, 3);\n              if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {\n                this.index += 3;\n              } else {\n                // 2-character punctuators.\n                str = str.substr(0, 2);\n                if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {\n                  this.index += 2;\n                } else {\n                  // 1-character punctuators.\n                  str = this.source[this.index];\n                  if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n                    ++this.index;\n                  }\n                }\n              }\n            }\n        }\n        if (this.index === token.start) {\n          this.throwUnexpectedToken();\n        }\n        token.end = this.index;\n        token.value = str;\n        return token;\n      };\n      ;\n      // ECMA-262 11.8.3 Numeric Literals\n      Scanner.prototype.scanHexLiteral = function (start) {\n        var number = '';\n        while (!this.eof()) {\n          if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n            break;\n          }\n          number += this.source[this.index++];\n        }\n        if (number.length === 0) {\n          this.throwUnexpectedToken();\n        }\n        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n          this.throwUnexpectedToken();\n        }\n        return {\n          type: token_1.Token.NumericLiteral,\n          value: parseInt('0x' + number, 16),\n          lineNumber: this.lineNumber,\n          lineStart: this.lineStart,\n          start: start,\n          end: this.index\n        };\n      };\n      ;\n      Scanner.prototype.scanBinaryLiteral = function (start) {\n        var number = '';\n        var ch;\n        while (!this.eof()) {\n          ch = this.source[this.index];\n          if (ch !== '0' && ch !== '1') {\n            break;\n          }\n          number += this.source[this.index++];\n        }\n        if (number.length === 0) {\n          // only 0b or 0B\n          this.throwUnexpectedToken();\n        }\n        if (!this.eof()) {\n          ch = this.source.charCodeAt(this.index);\n          /* istanbul ignore else */\n          if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n            this.throwUnexpectedToken();\n          }\n        }\n        return {\n          type: token_1.Token.NumericLiteral,\n          value: parseInt(number, 2),\n          lineNumber: this.lineNumber,\n          lineStart: this.lineStart,\n          start: start,\n          end: this.index\n        };\n      };\n      ;\n      Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n        var number = '';\n        var octal = false;\n        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n          octal = true;\n          number = '0' + this.source[this.index++];\n        } else {\n          ++this.index;\n        }\n        while (!this.eof()) {\n          if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n            break;\n          }\n          number += this.source[this.index++];\n        }\n        if (!octal && number.length === 0) {\n          // only 0o or 0O\n          this.throwUnexpectedToken();\n        }\n        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n          this.throwUnexpectedToken();\n        }\n        return {\n          type: token_1.Token.NumericLiteral,\n          value: parseInt(number, 8),\n          octal: octal,\n          lineNumber: this.lineNumber,\n          lineStart: this.lineStart,\n          start: start,\n          end: this.index\n        };\n      };\n      ;\n      Scanner.prototype.isImplicitOctalLiteral = function () {\n        // Implicit octal, unless there is a non-octal digit.\n        // (Annex B.1.1 on Numeric Literals)\n        for (var i = this.index + 1; i < this.length; ++i) {\n          var ch = this.source[i];\n          if (ch === '8' || ch === '9') {\n            return false;\n          }\n          if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n            return true;\n          }\n        }\n        return true;\n      };\n      ;\n      Scanner.prototype.scanNumericLiteral = function () {\n        var start = this.index;\n        var ch = this.source[start];\n        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\n        var number = '';\n        if (ch !== '.') {\n          number = this.source[this.index++];\n          ch = this.source[this.index];\n          // Hex number starts with '0x'.\n          // Octal number starts with '0'.\n          // Octal number in ES6 starts with '0o'.\n          // Binary number in ES6 starts with '0b'.\n          if (number === '0') {\n            if (ch === 'x' || ch === 'X') {\n              ++this.index;\n              return this.scanHexLiteral(start);\n            }\n            if (ch === 'b' || ch === 'B') {\n              ++this.index;\n              return this.scanBinaryLiteral(start);\n            }\n            if (ch === 'o' || ch === 'O') {\n              return this.scanOctalLiteral(ch, start);\n            }\n            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n              if (this.isImplicitOctalLiteral()) {\n                return this.scanOctalLiteral(ch, start);\n              }\n            }\n          }\n          while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n            number += this.source[this.index++];\n          }\n          ch = this.source[this.index];\n        }\n        if (ch === '.') {\n          number += this.source[this.index++];\n          while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n            number += this.source[this.index++];\n          }\n          ch = this.source[this.index];\n        }\n        if (ch === 'e' || ch === 'E') {\n          number += this.source[this.index++];\n          ch = this.source[this.index];\n          if (ch === '+' || ch === '-') {\n            number += this.source[this.index++];\n          }\n          if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              number += this.source[this.index++];\n            }\n          } else {\n            this.throwUnexpectedToken();\n          }\n        }\n        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n          this.throwUnexpectedToken();\n        }\n        return {\n          type: token_1.Token.NumericLiteral,\n          value: parseFloat(number),\n          lineNumber: this.lineNumber,\n          lineStart: this.lineStart,\n          start: start,\n          end: this.index\n        };\n      };\n      ;\n      // ECMA-262 11.8.4 String Literals\n      Scanner.prototype.scanStringLiteral = function () {\n        var start = this.index;\n        var quote = this.source[start];\n        assert_1.assert(quote === '\\'' || quote === '\"', 'String literal must starts with a quote');\n        ++this.index;\n        var octal = false;\n        var str = '';\n        while (!this.eof()) {\n          var ch = this.source[this.index++];\n          if (ch === quote) {\n            quote = '';\n            break;\n          } else if (ch === '\\\\') {\n            ch = this.source[this.index++];\n            if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              switch (ch) {\n                case 'u':\n                case 'x':\n                  if (this.source[this.index] === '{') {\n                    ++this.index;\n                    str += this.scanUnicodeCodePointEscape();\n                  } else {\n                    var unescaped = this.scanHexEscape(ch);\n                    if (!unescaped) {\n                      this.throwUnexpectedToken();\n                    }\n                    str += unescaped;\n                  }\n                  break;\n                case 'n':\n                  str += '\\n';\n                  break;\n                case 'r':\n                  str += '\\r';\n                  break;\n                case 't':\n                  str += '\\t';\n                  break;\n                case 'b':\n                  str += '\\b';\n                  break;\n                case 'f':\n                  str += '\\f';\n                  break;\n                case 'v':\n                  str += '\\x0B';\n                  break;\n                case '8':\n                case '9':\n                  str += ch;\n                  this.tolerateUnexpectedToken();\n                  break;\n                default:\n                  if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                    var octToDec = this.octalToDecimal(ch);\n                    octal = octToDec.octal || octal;\n                    str += String.fromCharCode(octToDec.code);\n                  } else {\n                    str += ch;\n                  }\n                  break;\n              }\n            } else {\n              ++this.lineNumber;\n              if (ch === '\\r' && this.source[this.index] === '\\n') {\n                ++this.index;\n              }\n              this.lineStart = this.index;\n            }\n          } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n            break;\n          } else {\n            str += ch;\n          }\n        }\n        if (quote !== '') {\n          this.index = start;\n          this.throwUnexpectedToken();\n        }\n        return {\n          type: token_1.Token.StringLiteral,\n          value: str,\n          octal: octal,\n          lineNumber: this.lineNumber,\n          lineStart: this.lineStart,\n          start: start,\n          end: this.index\n        };\n      };\n      ;\n      // ECMA-262 11.8.6 Template Literal Lexical Components\n      Scanner.prototype.scanTemplate = function () {\n        var cooked = '';\n        var terminated = false;\n        var start = this.index;\n        var head = this.source[start] === '`';\n        var tail = false;\n        var rawOffset = 2;\n        ++this.index;\n        while (!this.eof()) {\n          var ch = this.source[this.index++];\n          if (ch === '`') {\n            rawOffset = 1;\n            tail = true;\n            terminated = true;\n            break;\n          } else if (ch === '$') {\n            if (this.source[this.index] === '{') {\n              this.curlyStack.push('${');\n              ++this.index;\n              terminated = true;\n              break;\n            }\n            cooked += ch;\n          } else if (ch === '\\\\') {\n            ch = this.source[this.index++];\n            if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              switch (ch) {\n                case 'n':\n                  cooked += '\\n';\n                  break;\n                case 'r':\n                  cooked += '\\r';\n                  break;\n                case 't':\n                  cooked += '\\t';\n                  break;\n                case 'u':\n                case 'x':\n                  if (this.source[this.index] === '{') {\n                    ++this.index;\n                    cooked += this.scanUnicodeCodePointEscape();\n                  } else {\n                    var restore = this.index;\n                    var unescaped = this.scanHexEscape(ch);\n                    if (unescaped) {\n                      cooked += unescaped;\n                    } else {\n                      this.index = restore;\n                      cooked += ch;\n                    }\n                  }\n                  break;\n                case 'b':\n                  cooked += '\\b';\n                  break;\n                case 'f':\n                  cooked += '\\f';\n                  break;\n                case 'v':\n                  cooked += '\\v';\n                  break;\n                default:\n                  if (ch === '0') {\n                    if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                      // Illegal: \\01 \\02 and so on\n                      this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                    }\n                    cooked += '\\0';\n                  } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                    // Illegal: \\1 \\2\n                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                  } else {\n                    cooked += ch;\n                  }\n                  break;\n              }\n            } else {\n              ++this.lineNumber;\n              if (ch === '\\r' && this.source[this.index] === '\\n') {\n                ++this.index;\n              }\n              this.lineStart = this.index;\n            }\n          } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n            ++this.lineNumber;\n            if (ch === '\\r' && this.source[this.index] === '\\n') {\n              ++this.index;\n            }\n            this.lineStart = this.index;\n            cooked += '\\n';\n          } else {\n            cooked += ch;\n          }\n        }\n        if (!terminated) {\n          this.throwUnexpectedToken();\n        }\n        if (!head) {\n          this.curlyStack.pop();\n        }\n        return {\n          type: token_1.Token.Template,\n          value: {\n            cooked: cooked,\n            raw: this.source.slice(start + 1, this.index - rawOffset)\n          },\n          head: head,\n          tail: tail,\n          lineNumber: this.lineNumber,\n          lineStart: this.lineStart,\n          start: start,\n          end: this.index\n        };\n      };\n      ;\n      // ECMA-262 11.8.5 Regular Expression Literals\n      Scanner.prototype.testRegExp = function (pattern, flags) {\n        // The BMP character to use as a replacement for astral symbols when\n        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n        // approximation.\n        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n        // pattern that would not be detected by this substitution.\n        var astralSubstitute = '\\uFFFF';\n        var tmp = pattern;\n        var self = this;\n        if (flags.indexOf('u') >= 0) {\n          tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n            var codePoint = parseInt($1 || $2, 16);\n            if (codePoint > 0x10FFFF) {\n              self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n            }\n            if (codePoint <= 0xFFFF) {\n              return String.fromCharCode(codePoint);\n            }\n            return astralSubstitute;\n          }).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n        }\n        // First, detect invalid regular expressions.\n        try {\n          RegExp(tmp);\n        } catch (e) {\n          this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n        }\n        // Return a regular expression object for this pattern-flag pair, or\n        // `null` in case the current environment doesn't support the flags it\n        // uses.\n        try {\n          return new RegExp(pattern, flags);\n        } catch (exception) {\n          /* istanbul ignore next */\n          return null;\n        }\n      };\n      ;\n      Scanner.prototype.scanRegExpBody = function () {\n        var ch = this.source[this.index];\n        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n        var str = this.source[this.index++];\n        var classMarker = false;\n        var terminated = false;\n        while (!this.eof()) {\n          ch = this.source[this.index++];\n          str += ch;\n          if (ch === '\\\\') {\n            ch = this.source[this.index++];\n            // ECMA-262 7.8.5\n            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n            }\n            str += ch;\n          } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n          } else if (classMarker) {\n            if (ch === ']') {\n              classMarker = false;\n            }\n          } else {\n            if (ch === '/') {\n              terminated = true;\n              break;\n            } else if (ch === '[') {\n              classMarker = true;\n            }\n          }\n        }\n        if (!terminated) {\n          this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n        }\n        // Exclude leading and trailing slash.\n        var body = str.substr(1, str.length - 2);\n        return {\n          value: body,\n          literal: str\n        };\n      };\n      ;\n      Scanner.prototype.scanRegExpFlags = function () {\n        var str = '';\n        var flags = '';\n        while (!this.eof()) {\n          var ch = this.source[this.index];\n          if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n            break;\n          }\n          ++this.index;\n          if (ch === '\\\\' && !this.eof()) {\n            ch = this.source[this.index];\n            if (ch === 'u') {\n              ++this.index;\n              var restore = this.index;\n              ch = this.scanHexEscape('u');\n              if (ch) {\n                flags += ch;\n                for (str += '\\\\u'; restore < this.index; ++restore) {\n                  str += this.source[restore];\n                }\n              } else {\n                this.index = restore;\n                flags += 'u';\n                str += '\\\\u';\n              }\n              this.tolerateUnexpectedToken();\n            } else {\n              str += '\\\\';\n              this.tolerateUnexpectedToken();\n            }\n          } else {\n            flags += ch;\n            str += ch;\n          }\n        }\n        return {\n          value: flags,\n          literal: str\n        };\n      };\n      ;\n      Scanner.prototype.scanRegExp = function () {\n        var start = this.index;\n        var body = this.scanRegExpBody();\n        var flags = this.scanRegExpFlags();\n        var value = this.testRegExp(body.value, flags.value);\n        return {\n          type: token_1.Token.RegularExpression,\n          value: value,\n          literal: body.literal + flags.literal,\n          regex: {\n            pattern: body.value,\n            flags: flags.value\n          },\n          lineNumber: this.lineNumber,\n          lineStart: this.lineStart,\n          start: start,\n          end: this.index\n        };\n      };\n      ;\n      Scanner.prototype.lex = function () {\n        if (this.eof()) {\n          return {\n            type: token_1.Token.EOF,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: this.index,\n            end: this.index\n          };\n        }\n        var cp = this.source.charCodeAt(this.index);\n        if (character_1.Character.isIdentifierStart(cp)) {\n          return this.scanIdentifier();\n        }\n        // Very common: ( and ) and ;\n        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n          return this.scanPunctuator();\n        }\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\n        if (cp === 0x27 || cp === 0x22) {\n          return this.scanStringLiteral();\n        }\n        // Dot (.) U+002E can also start a floating-point number, hence the need\n        // to check the next character.\n        if (cp === 0x2E) {\n          if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n            return this.scanNumericLiteral();\n          }\n          return this.scanPunctuator();\n        }\n        if (character_1.Character.isDecimalDigit(cp)) {\n          return this.scanNumericLiteral();\n        }\n        // Template literals start with ` (U+0060) for template head\n        // or } (U+007D) for template middle or template tail.\n        if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {\n          return this.scanTemplate();\n        }\n        // Possible identifier start in a surrogate pair.\n        if (cp >= 0xD800 && cp < 0xDFFF) {\n          if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n            return this.scanIdentifier();\n          }\n        }\n        return this.scanPunctuator();\n      };\n      ;\n      return Scanner;\n    }();\n    exports.Scanner = Scanner;\n\n    /***/\n  }, /* 9 */\n  /***/function (module, exports) {\n    \"use strict\";\n\n    // See also tools/generate-unicode-regex.js.\n    var Regex = {\n      // Unicode v8.0.0 NonAsciiIdentifierStart:\n      NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n      // Unicode v8.0.0 NonAsciiIdentifierPart:\n      NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n    };\n    exports.Character = {\n      fromCodePoint: function (cp) {\n        return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));\n      },\n      // ECMA-262 11.2 White Space\n      isWhiteSpace: function (cp) {\n        return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;\n      },\n      // ECMA-262 11.3 Line Terminators\n      isLineTerminator: function (cp) {\n        return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;\n      },\n      // ECMA-262 11.6 Identifier Names and Identifiers\n      isIdentifierStart: function (cp) {\n        return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));\n      },\n      isIdentifierPart: function (cp) {\n        return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));\n      },\n      // ECMA-262 11.8.3 Numeric Literals\n      isDecimalDigit: function (cp) {\n        return cp >= 0x30 && cp <= 0x39; // 0..9\n      },\n      isHexDigit: function (cp) {\n        return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f\n      },\n      isOctalDigit: function (cp) {\n        return cp >= 0x30 && cp <= 0x37; // 0..7\n      }\n    };\n\n    /***/\n  }, /* 10 */\n  /***/function (module, exports, __webpack_require__) {\n    \"use strict\";\n\n    var syntax_1 = __webpack_require__(2);\n    var ArrayExpression = function () {\n      function ArrayExpression(elements) {\n        this.type = syntax_1.Syntax.ArrayExpression;\n        this.elements = elements;\n      }\n      return ArrayExpression;\n    }();\n    exports.ArrayExpression = ArrayExpression;\n    var ArrayPattern = function () {\n      function ArrayPattern(elements) {\n        this.type = syntax_1.Syntax.ArrayPattern;\n        this.elements = elements;\n      }\n      return ArrayPattern;\n    }();\n    exports.ArrayPattern = ArrayPattern;\n    var ArrowFunctionExpression = function () {\n      function ArrowFunctionExpression(params, body, expression) {\n        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n        this.id = null;\n        this.params = params;\n        this.body = body;\n        this.generator = false;\n        this.expression = expression;\n      }\n      return ArrowFunctionExpression;\n    }();\n    exports.ArrowFunctionExpression = ArrowFunctionExpression;\n    var AssignmentExpression = function () {\n      function AssignmentExpression(operator, left, right) {\n        this.type = syntax_1.Syntax.AssignmentExpression;\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n      }\n      return AssignmentExpression;\n    }();\n    exports.AssignmentExpression = AssignmentExpression;\n    var AssignmentPattern = function () {\n      function AssignmentPattern(left, right) {\n        this.type = syntax_1.Syntax.AssignmentPattern;\n        this.left = left;\n        this.right = right;\n      }\n      return AssignmentPattern;\n    }();\n    exports.AssignmentPattern = AssignmentPattern;\n    var BinaryExpression = function () {\n      function BinaryExpression(operator, left, right) {\n        var logical = operator === '||' || operator === '&&';\n        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n        this.operator = operator;\n        this.left = left;\n        this.right = right;\n      }\n      return BinaryExpression;\n    }();\n    exports.BinaryExpression = BinaryExpression;\n    var BlockStatement = function () {\n      function BlockStatement(body) {\n        this.type = syntax_1.Syntax.BlockStatement;\n        this.body = body;\n      }\n      return BlockStatement;\n    }();\n    exports.BlockStatement = BlockStatement;\n    var BreakStatement = function () {\n      function BreakStatement(label) {\n        this.type = syntax_1.Syntax.BreakStatement;\n        this.label = label;\n      }\n      return BreakStatement;\n    }();\n    exports.BreakStatement = BreakStatement;\n    var CallExpression = function () {\n      function CallExpression(callee, args) {\n        this.type = syntax_1.Syntax.CallExpression;\n        this.callee = callee;\n        this.arguments = args;\n      }\n      return CallExpression;\n    }();\n    exports.CallExpression = CallExpression;\n    var CatchClause = function () {\n      function CatchClause(param, body) {\n        this.type = syntax_1.Syntax.CatchClause;\n        this.param = param;\n        this.body = body;\n      }\n      return CatchClause;\n    }();\n    exports.CatchClause = CatchClause;\n    var ClassBody = function () {\n      function ClassBody(body) {\n        this.type = syntax_1.Syntax.ClassBody;\n        this.body = body;\n      }\n      return ClassBody;\n    }();\n    exports.ClassBody = ClassBody;\n    var ClassDeclaration = function () {\n      function ClassDeclaration(id, superClass, body) {\n        this.type = syntax_1.Syntax.ClassDeclaration;\n        this.id = id;\n        this.superClass = superClass;\n        this.body = body;\n      }\n      return ClassDeclaration;\n    }();\n    exports.ClassDeclaration = ClassDeclaration;\n    var ClassExpression = function () {\n      function ClassExpression(id, superClass, body) {\n        this.type = syntax_1.Syntax.ClassExpression;\n        this.id = id;\n        this.superClass = superClass;\n        this.body = body;\n      }\n      return ClassExpression;\n    }();\n    exports.ClassExpression = ClassExpression;\n    var ComputedMemberExpression = function () {\n      function ComputedMemberExpression(object, property) {\n        this.type = syntax_1.Syntax.MemberExpression;\n        this.computed = true;\n        this.object = object;\n        this.property = property;\n      }\n      return ComputedMemberExpression;\n    }();\n    exports.ComputedMemberExpression = ComputedMemberExpression;\n    var ConditionalExpression = function () {\n      function ConditionalExpression(test, consequent, alternate) {\n        this.type = syntax_1.Syntax.ConditionalExpression;\n        this.test = test;\n        this.consequent = consequent;\n        this.alternate = alternate;\n      }\n      return ConditionalExpression;\n    }();\n    exports.ConditionalExpression = ConditionalExpression;\n    var ContinueStatement = function () {\n      function ContinueStatement(label) {\n        this.type = syntax_1.Syntax.ContinueStatement;\n        this.label = label;\n      }\n      return ContinueStatement;\n    }();\n    exports.ContinueStatement = ContinueStatement;\n    var DebuggerStatement = function () {\n      function DebuggerStatement() {\n        this.type = syntax_1.Syntax.DebuggerStatement;\n      }\n      return DebuggerStatement;\n    }();\n    exports.DebuggerStatement = DebuggerStatement;\n    var Directive = function () {\n      function Directive(expression, directive) {\n        this.type = syntax_1.Syntax.ExpressionStatement;\n        this.expression = expression;\n        this.directive = directive;\n      }\n      return Directive;\n    }();\n    exports.Directive = Directive;\n    var DoWhileStatement = function () {\n      function DoWhileStatement(body, test) {\n        this.type = syntax_1.Syntax.DoWhileStatement;\n        this.body = body;\n        this.test = test;\n      }\n      return DoWhileStatement;\n    }();\n    exports.DoWhileStatement = DoWhileStatement;\n    var EmptyStatement = function () {\n      function EmptyStatement() {\n        this.type = syntax_1.Syntax.EmptyStatement;\n      }\n      return EmptyStatement;\n    }();\n    exports.EmptyStatement = EmptyStatement;\n    var ExportAllDeclaration = function () {\n      function ExportAllDeclaration(source) {\n        this.type = syntax_1.Syntax.ExportAllDeclaration;\n        this.source = source;\n      }\n      return ExportAllDeclaration;\n    }();\n    exports.ExportAllDeclaration = ExportAllDeclaration;\n    var ExportDefaultDeclaration = function () {\n      function ExportDefaultDeclaration(declaration) {\n        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n        this.declaration = declaration;\n      }\n      return ExportDefaultDeclaration;\n    }();\n    exports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n    var ExportNamedDeclaration = function () {\n      function ExportNamedDeclaration(declaration, specifiers, source) {\n        this.type = syntax_1.Syntax.ExportNamedDeclaration;\n        this.declaration = declaration;\n        this.specifiers = specifiers;\n        this.source = source;\n      }\n      return ExportNamedDeclaration;\n    }();\n    exports.ExportNamedDeclaration = ExportNamedDeclaration;\n    var ExportSpecifier = function () {\n      function ExportSpecifier(local, exported) {\n        this.type = syntax_1.Syntax.ExportSpecifier;\n        this.exported = exported;\n        this.local = local;\n      }\n      return ExportSpecifier;\n    }();\n    exports.ExportSpecifier = ExportSpecifier;\n    var ExpressionStatement = function () {\n      function ExpressionStatement(expression) {\n        this.type = syntax_1.Syntax.ExpressionStatement;\n        this.expression = expression;\n      }\n      return ExpressionStatement;\n    }();\n    exports.ExpressionStatement = ExpressionStatement;\n    var ForInStatement = function () {\n      function ForInStatement(left, right, body) {\n        this.type = syntax_1.Syntax.ForInStatement;\n        this.left = left;\n        this.right = right;\n        this.body = body;\n        this.each = false;\n      }\n      return ForInStatement;\n    }();\n    exports.ForInStatement = ForInStatement;\n    var ForOfStatement = function () {\n      function ForOfStatement(left, right, body) {\n        this.type = syntax_1.Syntax.ForOfStatement;\n        this.left = left;\n        this.right = right;\n        this.body = body;\n      }\n      return ForOfStatement;\n    }();\n    exports.ForOfStatement = ForOfStatement;\n    var ForStatement = function () {\n      function ForStatement(init, test, update, body) {\n        this.type = syntax_1.Syntax.ForStatement;\n        this.init = init;\n        this.test = test;\n        this.update = update;\n        this.body = body;\n      }\n      return ForStatement;\n    }();\n    exports.ForStatement = ForStatement;\n    var FunctionDeclaration = function () {\n      function FunctionDeclaration(id, params, body, generator) {\n        this.type = syntax_1.Syntax.FunctionDeclaration;\n        this.id = id;\n        this.params = params;\n        this.body = body;\n        this.generator = generator;\n        this.expression = false;\n      }\n      return FunctionDeclaration;\n    }();\n    exports.FunctionDeclaration = FunctionDeclaration;\n    var FunctionExpression = function () {\n      function FunctionExpression(id, params, body, generator) {\n        this.type = syntax_1.Syntax.FunctionExpression;\n        this.id = id;\n        this.params = params;\n        this.body = body;\n        this.generator = generator;\n        this.expression = false;\n      }\n      return FunctionExpression;\n    }();\n    exports.FunctionExpression = FunctionExpression;\n    var Identifier = function () {\n      function Identifier(name) {\n        this.type = syntax_1.Syntax.Identifier;\n        this.name = name;\n      }\n      return Identifier;\n    }();\n    exports.Identifier = Identifier;\n    var IfStatement = function () {\n      function IfStatement(test, consequent, alternate) {\n        this.type = syntax_1.Syntax.IfStatement;\n        this.test = test;\n        this.consequent = consequent;\n        this.alternate = alternate;\n      }\n      return IfStatement;\n    }();\n    exports.IfStatement = IfStatement;\n    var ImportDeclaration = function () {\n      function ImportDeclaration(specifiers, source) {\n        this.type = syntax_1.Syntax.ImportDeclaration;\n        this.specifiers = specifiers;\n        this.source = source;\n      }\n      return ImportDeclaration;\n    }();\n    exports.ImportDeclaration = ImportDeclaration;\n    var ImportDefaultSpecifier = function () {\n      function ImportDefaultSpecifier(local) {\n        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n        this.local = local;\n      }\n      return ImportDefaultSpecifier;\n    }();\n    exports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n    var ImportNamespaceSpecifier = function () {\n      function ImportNamespaceSpecifier(local) {\n        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n        this.local = local;\n      }\n      return ImportNamespaceSpecifier;\n    }();\n    exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n    var ImportSpecifier = function () {\n      function ImportSpecifier(local, imported) {\n        this.type = syntax_1.Syntax.ImportSpecifier;\n        this.local = local;\n        this.imported = imported;\n      }\n      return ImportSpecifier;\n    }();\n    exports.ImportSpecifier = ImportSpecifier;\n    var LabeledStatement = function () {\n      function LabeledStatement(label, body) {\n        this.type = syntax_1.Syntax.LabeledStatement;\n        this.label = label;\n        this.body = body;\n      }\n      return LabeledStatement;\n    }();\n    exports.LabeledStatement = LabeledStatement;\n    var Literal = function () {\n      function Literal(value, raw) {\n        this.type = syntax_1.Syntax.Literal;\n        this.value = value;\n        this.raw = raw;\n      }\n      return Literal;\n    }();\n    exports.Literal = Literal;\n    var MetaProperty = function () {\n      function MetaProperty(meta, property) {\n        this.type = syntax_1.Syntax.MetaProperty;\n        this.meta = meta;\n        this.property = property;\n      }\n      return MetaProperty;\n    }();\n    exports.MetaProperty = MetaProperty;\n    var MethodDefinition = function () {\n      function MethodDefinition(key, computed, value, kind, isStatic) {\n        this.type = syntax_1.Syntax.MethodDefinition;\n        this.key = key;\n        this.computed = computed;\n        this.value = value;\n        this.kind = kind;\n        this.static = isStatic;\n      }\n      return MethodDefinition;\n    }();\n    exports.MethodDefinition = MethodDefinition;\n    var NewExpression = function () {\n      function NewExpression(callee, args) {\n        this.type = syntax_1.Syntax.NewExpression;\n        this.callee = callee;\n        this.arguments = args;\n      }\n      return NewExpression;\n    }();\n    exports.NewExpression = NewExpression;\n    var ObjectExpression = function () {\n      function ObjectExpression(properties) {\n        this.type = syntax_1.Syntax.ObjectExpression;\n        this.properties = properties;\n      }\n      return ObjectExpression;\n    }();\n    exports.ObjectExpression = ObjectExpression;\n    var ObjectPattern = function () {\n      function ObjectPattern(properties) {\n        this.type = syntax_1.Syntax.ObjectPattern;\n        this.properties = properties;\n      }\n      return ObjectPattern;\n    }();\n    exports.ObjectPattern = ObjectPattern;\n    var Program = function () {\n      function Program(body, sourceType) {\n        this.type = syntax_1.Syntax.Program;\n        this.body = body;\n        this.sourceType = sourceType;\n      }\n      return Program;\n    }();\n    exports.Program = Program;\n    var Property = function () {\n      function Property(kind, key, computed, value, method, shorthand) {\n        this.type = syntax_1.Syntax.Property;\n        this.key = key;\n        this.computed = computed;\n        this.value = value;\n        this.kind = kind;\n        this.method = method;\n        this.shorthand = shorthand;\n      }\n      return Property;\n    }();\n    exports.Property = Property;\n    var RegexLiteral = function () {\n      function RegexLiteral(value, raw, regex) {\n        this.type = syntax_1.Syntax.Literal;\n        this.value = value;\n        this.raw = raw;\n        this.regex = regex;\n      }\n      return RegexLiteral;\n    }();\n    exports.RegexLiteral = RegexLiteral;\n    var RestElement = function () {\n      function RestElement(argument) {\n        this.type = syntax_1.Syntax.RestElement;\n        this.argument = argument;\n      }\n      return RestElement;\n    }();\n    exports.RestElement = RestElement;\n    var ReturnStatement = function () {\n      function ReturnStatement(argument) {\n        this.type = syntax_1.Syntax.ReturnStatement;\n        this.argument = argument;\n      }\n      return ReturnStatement;\n    }();\n    exports.ReturnStatement = ReturnStatement;\n    var SequenceExpression = function () {\n      function SequenceExpression(expressions) {\n        this.type = syntax_1.Syntax.SequenceExpression;\n        this.expressions = expressions;\n      }\n      return SequenceExpression;\n    }();\n    exports.SequenceExpression = SequenceExpression;\n    var SpreadElement = function () {\n      function SpreadElement(argument) {\n        this.type = syntax_1.Syntax.SpreadElement;\n        this.argument = argument;\n      }\n      return SpreadElement;\n    }();\n    exports.SpreadElement = SpreadElement;\n    var StaticMemberExpression = function () {\n      function StaticMemberExpression(object, property) {\n        this.type = syntax_1.Syntax.MemberExpression;\n        this.computed = false;\n        this.object = object;\n        this.property = property;\n      }\n      return StaticMemberExpression;\n    }();\n    exports.StaticMemberExpression = StaticMemberExpression;\n    var Super = function () {\n      function Super() {\n        this.type = syntax_1.Syntax.Super;\n      }\n      return Super;\n    }();\n    exports.Super = Super;\n    var SwitchCase = function () {\n      function SwitchCase(test, consequent) {\n        this.type = syntax_1.Syntax.SwitchCase;\n        this.test = test;\n        this.consequent = consequent;\n      }\n      return SwitchCase;\n    }();\n    exports.SwitchCase = SwitchCase;\n    var SwitchStatement = function () {\n      function SwitchStatement(discriminant, cases) {\n        this.type = syntax_1.Syntax.SwitchStatement;\n        this.discriminant = discriminant;\n        this.cases = cases;\n      }\n      return SwitchStatement;\n    }();\n    exports.SwitchStatement = SwitchStatement;\n    var TaggedTemplateExpression = function () {\n      function TaggedTemplateExpression(tag, quasi) {\n        this.type = syntax_1.Syntax.TaggedTemplateExpression;\n        this.tag = tag;\n        this.quasi = quasi;\n      }\n      return TaggedTemplateExpression;\n    }();\n    exports.TaggedTemplateExpression = TaggedTemplateExpression;\n    var TemplateElement = function () {\n      function TemplateElement(value, tail) {\n        this.type = syntax_1.Syntax.TemplateElement;\n        this.value = value;\n        this.tail = tail;\n      }\n      return TemplateElement;\n    }();\n    exports.TemplateElement = TemplateElement;\n    var TemplateLiteral = function () {\n      function TemplateLiteral(quasis, expressions) {\n        this.type = syntax_1.Syntax.TemplateLiteral;\n        this.quasis = quasis;\n        this.expressions = expressions;\n      }\n      return TemplateLiteral;\n    }();\n    exports.TemplateLiteral = TemplateLiteral;\n    var ThisExpression = function () {\n      function ThisExpression() {\n        this.type = syntax_1.Syntax.ThisExpression;\n      }\n      return ThisExpression;\n    }();\n    exports.ThisExpression = ThisExpression;\n    var ThrowStatement = function () {\n      function ThrowStatement(argument) {\n        this.type = syntax_1.Syntax.ThrowStatement;\n        this.argument = argument;\n      }\n      return ThrowStatement;\n    }();\n    exports.ThrowStatement = ThrowStatement;\n    var TryStatement = function () {\n      function TryStatement(block, handler, finalizer) {\n        this.type = syntax_1.Syntax.TryStatement;\n        this.block = block;\n        this.handler = handler;\n        this.finalizer = finalizer;\n      }\n      return TryStatement;\n    }();\n    exports.TryStatement = TryStatement;\n    var UnaryExpression = function () {\n      function UnaryExpression(operator, argument) {\n        this.type = syntax_1.Syntax.UnaryExpression;\n        this.operator = operator;\n        this.argument = argument;\n        this.prefix = true;\n      }\n      return UnaryExpression;\n    }();\n    exports.UnaryExpression = UnaryExpression;\n    var UpdateExpression = function () {\n      function UpdateExpression(operator, argument, prefix) {\n        this.type = syntax_1.Syntax.UpdateExpression;\n        this.operator = operator;\n        this.argument = argument;\n        this.prefix = prefix;\n      }\n      return UpdateExpression;\n    }();\n    exports.UpdateExpression = UpdateExpression;\n    var VariableDeclaration = function () {\n      function VariableDeclaration(declarations, kind) {\n        this.type = syntax_1.Syntax.VariableDeclaration;\n        this.declarations = declarations;\n        this.kind = kind;\n      }\n      return VariableDeclaration;\n    }();\n    exports.VariableDeclaration = VariableDeclaration;\n    var VariableDeclarator = function () {\n      function VariableDeclarator(id, init) {\n        this.type = syntax_1.Syntax.VariableDeclarator;\n        this.id = id;\n        this.init = init;\n      }\n      return VariableDeclarator;\n    }();\n    exports.VariableDeclarator = VariableDeclarator;\n    var WhileStatement = function () {\n      function WhileStatement(test, body) {\n        this.type = syntax_1.Syntax.WhileStatement;\n        this.test = test;\n        this.body = body;\n      }\n      return WhileStatement;\n    }();\n    exports.WhileStatement = WhileStatement;\n    var WithStatement = function () {\n      function WithStatement(object, body) {\n        this.type = syntax_1.Syntax.WithStatement;\n        this.object = object;\n        this.body = body;\n      }\n      return WithStatement;\n    }();\n    exports.WithStatement = WithStatement;\n    var YieldExpression = function () {\n      function YieldExpression(argument, delegate) {\n        this.type = syntax_1.Syntax.YieldExpression;\n        this.argument = argument;\n        this.delegate = delegate;\n      }\n      return YieldExpression;\n    }();\n    exports.YieldExpression = YieldExpression;\n\n    /***/\n  }, /* 11 */\n  /***/function (module, exports, __webpack_require__) {\n    \"use strict\";\n\n    /* istanbul ignore next */\n    var __extends = this && this.__extends || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n      function __() {\n        this.constructor = d;\n      }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var character_1 = __webpack_require__(9);\n    var token_1 = __webpack_require__(7);\n    var parser_1 = __webpack_require__(3);\n    var xhtml_entities_1 = __webpack_require__(12);\n    var jsx_syntax_1 = __webpack_require__(13);\n    var Node = __webpack_require__(10);\n    var JSXNode = __webpack_require__(14);\n    var JSXToken;\n    (function (JSXToken) {\n      JSXToken[JSXToken[\"Identifier\"] = 100] = \"Identifier\";\n      JSXToken[JSXToken[\"Text\"] = 101] = \"Text\";\n    })(JSXToken || (JSXToken = {}));\n    token_1.TokenName[JSXToken.Identifier] = 'JSXIdentifier';\n    token_1.TokenName[JSXToken.Text] = 'JSXText';\n    // Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n    function getQualifiedElementName(elementName) {\n      var qualifiedName;\n      switch (elementName.type) {\n        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n          var id = elementName;\n          qualifiedName = id.name;\n          break;\n        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n          var ns = elementName;\n          qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);\n          break;\n        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n          var expr = elementName;\n          qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);\n          break;\n      }\n      return qualifiedName;\n    }\n    var JSXParser = function (_super) {\n      __extends(JSXParser, _super);\n      function JSXParser(code, options, delegate) {\n        _super.call(this, code, options, delegate);\n      }\n      JSXParser.prototype.parsePrimaryExpression = function () {\n        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n      };\n      JSXParser.prototype.startJSX = function () {\n        // Unwind the scanner before the lookahead token.\n        this.scanner.index = this.startMarker.index;\n        this.scanner.lineNumber = this.startMarker.lineNumber;\n        this.scanner.lineStart = this.startMarker.lineStart;\n      };\n      JSXParser.prototype.finishJSX = function () {\n        // Prime the next lookahead.\n        this.nextToken();\n      };\n      JSXParser.prototype.reenterJSX = function () {\n        this.startJSX();\n        this.expectJSX('}');\n        // Pop the closing '}' added from the lookahead.\n        if (this.config.tokens) {\n          this.tokens.pop();\n        }\n      };\n      JSXParser.prototype.createJSXNode = function () {\n        this.collectComments();\n        return {\n          index: this.scanner.index,\n          line: this.scanner.lineNumber,\n          column: this.scanner.index - this.scanner.lineStart\n        };\n      };\n      JSXParser.prototype.createJSXChildNode = function () {\n        return {\n          index: this.scanner.index,\n          line: this.scanner.lineNumber,\n          column: this.scanner.index - this.scanner.lineStart\n        };\n      };\n      JSXParser.prototype.scanXHTMLEntity = function (quote) {\n        var result = '&';\n        var valid = true;\n        var terminated = false;\n        var numeric = false;\n        var hex = false;\n        while (!this.scanner.eof() && valid && !terminated) {\n          var ch = this.scanner.source[this.scanner.index];\n          if (ch === quote) {\n            break;\n          }\n          terminated = ch === ';';\n          result += ch;\n          ++this.scanner.index;\n          if (!terminated) {\n            switch (result.length) {\n              case 2:\n                // e.g. '&#123;'\n                numeric = ch === '#';\n                break;\n              case 3:\n                if (numeric) {\n                  // e.g. '&#x41;'\n                  hex = ch === 'x';\n                  valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n                  numeric = numeric && !hex;\n                }\n                break;\n              default:\n                valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n                valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n                break;\n            }\n          }\n        }\n        if (valid && terminated && result.length > 2) {\n          // e.g. '&#x41;' becomes just '#x41'\n          var str = result.substr(1, result.length - 2);\n          if (numeric && str.length > 1) {\n            result = String.fromCharCode(parseInt(str.substr(1), 10));\n          } else if (hex && str.length > 2) {\n            result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n          } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n            result = xhtml_entities_1.XHTMLEntities[str];\n          }\n        }\n        return result;\n      };\n      // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n      JSXParser.prototype.lexJSX = function () {\n        var cp = this.scanner.source.charCodeAt(this.scanner.index);\n        // < > / : = { }\n        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n          var value = this.scanner.source[this.scanner.index++];\n          return {\n            type: token_1.Token.Punctuator,\n            value: value,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: this.scanner.index - 1,\n            end: this.scanner.index\n          };\n        }\n        // \" '\n        if (cp === 34 || cp === 39) {\n          var start = this.scanner.index;\n          var quote = this.scanner.source[this.scanner.index++];\n          var str = '';\n          while (!this.scanner.eof()) {\n            var ch = this.scanner.source[this.scanner.index++];\n            if (ch === quote) {\n              break;\n            } else if (ch === '&') {\n              str += this.scanXHTMLEntity(quote);\n            } else {\n              str += ch;\n            }\n          }\n          return {\n            type: token_1.Token.StringLiteral,\n            value: str,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: start,\n            end: this.scanner.index\n          };\n        }\n        // ... or .\n        if (cp === 46) {\n          var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n          var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n          var value = n1 === 46 && n2 === 46 ? '...' : '.';\n          var start = this.scanner.index;\n          this.scanner.index += value.length;\n          return {\n            type: token_1.Token.Punctuator,\n            value: value,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: start,\n            end: this.scanner.index\n          };\n        }\n        // `\n        if (cp === 96) {\n          // Only placeholder, since it will be rescanned as a real assignment expression.\n          return {\n            type: token_1.Token.Template,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: this.scanner.index,\n            end: this.scanner.index\n          };\n        }\n        // Identifer can not contain backslash (char code 92).\n        if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {\n          var start = this.scanner.index;\n          ++this.scanner.index;\n          while (!this.scanner.eof()) {\n            var ch = this.scanner.source.charCodeAt(this.scanner.index);\n            if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {\n              ++this.scanner.index;\n            } else if (ch === 45) {\n              // Hyphen (char code 45) can be part of an identifier.\n              ++this.scanner.index;\n            } else {\n              break;\n            }\n          }\n          var id = this.scanner.source.slice(start, this.scanner.index);\n          return {\n            type: JSXToken.Identifier,\n            value: id,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: start,\n            end: this.scanner.index\n          };\n        }\n        this.scanner.throwUnexpectedToken();\n      };\n      JSXParser.prototype.nextJSXToken = function () {\n        this.collectComments();\n        this.startMarker.index = this.scanner.index;\n        this.startMarker.lineNumber = this.scanner.lineNumber;\n        this.startMarker.lineStart = this.scanner.lineStart;\n        var token = this.lexJSX();\n        this.lastMarker.index = this.scanner.index;\n        this.lastMarker.lineNumber = this.scanner.lineNumber;\n        this.lastMarker.lineStart = this.scanner.lineStart;\n        if (this.config.tokens) {\n          this.tokens.push(this.convertToken(token));\n        }\n        return token;\n      };\n      JSXParser.prototype.nextJSXText = function () {\n        this.startMarker.index = this.scanner.index;\n        this.startMarker.lineNumber = this.scanner.lineNumber;\n        this.startMarker.lineStart = this.scanner.lineStart;\n        var start = this.scanner.index;\n        var text = '';\n        while (!this.scanner.eof()) {\n          var ch = this.scanner.source[this.scanner.index];\n          if (ch === '{' || ch === '<') {\n            break;\n          }\n          ++this.scanner.index;\n          text += ch;\n          if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n            ++this.scanner.lineNumber;\n            if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n              ++this.scanner.index;\n            }\n            this.scanner.lineStart = this.scanner.index;\n          }\n        }\n        this.lastMarker.index = this.scanner.index;\n        this.lastMarker.lineNumber = this.scanner.lineNumber;\n        this.lastMarker.lineStart = this.scanner.lineStart;\n        var token = {\n          type: JSXToken.Text,\n          value: text,\n          lineNumber: this.scanner.lineNumber,\n          lineStart: this.scanner.lineStart,\n          start: start,\n          end: this.scanner.index\n        };\n        if (text.length > 0 && this.config.tokens) {\n          this.tokens.push(this.convertToken(token));\n        }\n        return token;\n      };\n      JSXParser.prototype.peekJSXToken = function () {\n        var previousIndex = this.scanner.index;\n        var previousLineNumber = this.scanner.lineNumber;\n        var previousLineStart = this.scanner.lineStart;\n        this.scanner.scanComments();\n        var next = this.lexJSX();\n        this.scanner.index = previousIndex;\n        this.scanner.lineNumber = previousLineNumber;\n        this.scanner.lineStart = previousLineStart;\n        return next;\n      };\n      // Expect the next JSX token to match the specified punctuator.\n      // If not, an exception will be thrown.\n      JSXParser.prototype.expectJSX = function (value) {\n        var token = this.nextJSXToken();\n        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n          this.throwUnexpectedToken(token);\n        }\n      };\n      // Return true if the next JSX token matches the specified punctuator.\n      JSXParser.prototype.matchJSX = function (value) {\n        var next = this.peekJSXToken();\n        return next.type === token_1.Token.Punctuator && next.value === value;\n      };\n      JSXParser.prototype.parseJSXIdentifier = function () {\n        var node = this.createJSXNode();\n        var token = this.nextJSXToken();\n        if (token.type !== JSXToken.Identifier) {\n          this.throwUnexpectedToken(token);\n        }\n        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n      };\n      JSXParser.prototype.parseJSXElementName = function () {\n        var node = this.createJSXNode();\n        var elementName = this.parseJSXIdentifier();\n        if (this.matchJSX(':')) {\n          var namespace = elementName;\n          this.expectJSX(':');\n          var name_1 = this.parseJSXIdentifier();\n          elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n        } else if (this.matchJSX('.')) {\n          while (this.matchJSX('.')) {\n            var object = elementName;\n            this.expectJSX('.');\n            var property = this.parseJSXIdentifier();\n            elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n          }\n        }\n        return elementName;\n      };\n      JSXParser.prototype.parseJSXAttributeName = function () {\n        var node = this.createJSXNode();\n        var attributeName;\n        var identifier = this.parseJSXIdentifier();\n        if (this.matchJSX(':')) {\n          var namespace = identifier;\n          this.expectJSX(':');\n          var name_2 = this.parseJSXIdentifier();\n          attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n        } else {\n          attributeName = identifier;\n        }\n        return attributeName;\n      };\n      JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n        var node = this.createJSXNode();\n        var token = this.nextJSXToken();\n        if (token.type !== token_1.Token.StringLiteral) {\n          this.throwUnexpectedToken(token);\n        }\n        var raw = this.getTokenRaw(token);\n        return this.finalize(node, new Node.Literal(token.value, raw));\n      };\n      JSXParser.prototype.parseJSXExpressionAttribute = function () {\n        var node = this.createJSXNode();\n        this.expectJSX('{');\n        this.finishJSX();\n        if (this.match('}')) {\n          this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n        }\n        var expression = this.parseAssignmentExpression();\n        this.reenterJSX();\n        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n      };\n      JSXParser.prototype.parseJSXAttributeValue = function () {\n        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n      };\n      JSXParser.prototype.parseJSXNameValueAttribute = function () {\n        var node = this.createJSXNode();\n        var name = this.parseJSXAttributeName();\n        var value = null;\n        if (this.matchJSX('=')) {\n          this.expectJSX('=');\n          value = this.parseJSXAttributeValue();\n        }\n        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n      };\n      JSXParser.prototype.parseJSXSpreadAttribute = function () {\n        var node = this.createJSXNode();\n        this.expectJSX('{');\n        this.expectJSX('...');\n        this.finishJSX();\n        var argument = this.parseAssignmentExpression();\n        this.reenterJSX();\n        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n      };\n      JSXParser.prototype.parseJSXAttributes = function () {\n        var attributes = [];\n        while (!this.matchJSX('/') && !this.matchJSX('>')) {\n          var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();\n          attributes.push(attribute);\n        }\n        return attributes;\n      };\n      JSXParser.prototype.parseJSXOpeningElement = function () {\n        var node = this.createJSXNode();\n        this.expectJSX('<');\n        var name = this.parseJSXElementName();\n        var attributes = this.parseJSXAttributes();\n        var selfClosing = this.matchJSX('/');\n        if (selfClosing) {\n          this.expectJSX('/');\n        }\n        this.expectJSX('>');\n        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n      };\n      JSXParser.prototype.parseJSXBoundaryElement = function () {\n        var node = this.createJSXNode();\n        this.expectJSX('<');\n        if (this.matchJSX('/')) {\n          this.expectJSX('/');\n          var name_3 = this.parseJSXElementName();\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n        }\n        var name = this.parseJSXElementName();\n        var attributes = this.parseJSXAttributes();\n        var selfClosing = this.matchJSX('/');\n        if (selfClosing) {\n          this.expectJSX('/');\n        }\n        this.expectJSX('>');\n        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n      };\n      JSXParser.prototype.parseJSXEmptyExpression = function () {\n        var node = this.createJSXChildNode();\n        this.collectComments();\n        this.lastMarker.index = this.scanner.index;\n        this.lastMarker.lineNumber = this.scanner.lineNumber;\n        this.lastMarker.lineStart = this.scanner.lineStart;\n        return this.finalize(node, new JSXNode.JSXEmptyExpression());\n      };\n      JSXParser.prototype.parseJSXExpressionContainer = function () {\n        var node = this.createJSXNode();\n        this.expectJSX('{');\n        var expression;\n        if (this.matchJSX('}')) {\n          expression = this.parseJSXEmptyExpression();\n          this.expectJSX('}');\n        } else {\n          this.finishJSX();\n          expression = this.parseAssignmentExpression();\n          this.reenterJSX();\n        }\n        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n      };\n      JSXParser.prototype.parseJSXChildren = function () {\n        var children = [];\n        while (!this.scanner.eof()) {\n          var node = this.createJSXChildNode();\n          var token = this.nextJSXText();\n          if (token.start < token.end) {\n            var raw = this.getTokenRaw(token);\n            var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n            children.push(child);\n          }\n          if (this.scanner.source[this.scanner.index] === '{') {\n            var container = this.parseJSXExpressionContainer();\n            children.push(container);\n          } else {\n            break;\n          }\n        }\n        return children;\n      };\n      JSXParser.prototype.parseComplexJSXElement = function (el) {\n        var stack = [];\n        while (!this.scanner.eof()) {\n          el.children = el.children.concat(this.parseJSXChildren());\n          var node = this.createJSXChildNode();\n          var element = this.parseJSXBoundaryElement();\n          if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n            var opening = element;\n            if (opening.selfClosing) {\n              var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n              el.children.push(child);\n            } else {\n              stack.push(el);\n              el = {\n                node: node,\n                opening: opening,\n                closing: null,\n                children: []\n              };\n            }\n          }\n          if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n            el.closing = element;\n            var open_1 = getQualifiedElementName(el.opening.name);\n            var close_1 = getQualifiedElementName(el.closing.name);\n            if (open_1 !== close_1) {\n              this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n            }\n            if (stack.length > 0) {\n              var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n              el = stack.pop();\n              el.children.push(child);\n            } else {\n              break;\n            }\n          }\n        }\n        return el;\n      };\n      JSXParser.prototype.parseJSXElement = function () {\n        var node = this.createJSXNode();\n        var opening = this.parseJSXOpeningElement();\n        var children = [];\n        var closing = null;\n        if (!opening.selfClosing) {\n          var el = this.parseComplexJSXElement({\n            node: node,\n            opening: opening,\n            closing: closing,\n            children: children\n          });\n          children = el.children;\n          closing = el.closing;\n        }\n        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n      };\n      JSXParser.prototype.parseJSXRoot = function () {\n        // Pop the opening '<' added from the lookahead.\n        if (this.config.tokens) {\n          this.tokens.pop();\n        }\n        this.startJSX();\n        var element = this.parseJSXElement();\n        this.finishJSX();\n        return element;\n      };\n      return JSXParser;\n    }(parser_1.Parser);\n    exports.JSXParser = JSXParser;\n\n    /***/\n  }, /* 12 */\n  /***/function (module, exports) {\n    // Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n    \"use strict\";\n\n    exports.XHTMLEntities = {\n      quot: '\\u0022',\n      amp: '\\u0026',\n      apos: '\\u0027',\n      gt: '\\u003E',\n      nbsp: '\\u00A0',\n      iexcl: '\\u00A1',\n      cent: '\\u00A2',\n      pound: '\\u00A3',\n      curren: '\\u00A4',\n      yen: '\\u00A5',\n      brvbar: '\\u00A6',\n      sect: '\\u00A7',\n      uml: '\\u00A8',\n      copy: '\\u00A9',\n      ordf: '\\u00AA',\n      laquo: '\\u00AB',\n      not: '\\u00AC',\n      shy: '\\u00AD',\n      reg: '\\u00AE',\n      macr: '\\u00AF',\n      deg: '\\u00B0',\n      plusmn: '\\u00B1',\n      sup2: '\\u00B2',\n      sup3: '\\u00B3',\n      acute: '\\u00B4',\n      micro: '\\u00B5',\n      para: '\\u00B6',\n      middot: '\\u00B7',\n      cedil: '\\u00B8',\n      sup1: '\\u00B9',\n      ordm: '\\u00BA',\n      raquo: '\\u00BB',\n      frac14: '\\u00BC',\n      frac12: '\\u00BD',\n      frac34: '\\u00BE',\n      iquest: '\\u00BF',\n      Agrave: '\\u00C0',\n      Aacute: '\\u00C1',\n      Acirc: '\\u00C2',\n      Atilde: '\\u00C3',\n      Auml: '\\u00C4',\n      Aring: '\\u00C5',\n      AElig: '\\u00C6',\n      Ccedil: '\\u00C7',\n      Egrave: '\\u00C8',\n      Eacute: '\\u00C9',\n      Ecirc: '\\u00CA',\n      Euml: '\\u00CB',\n      Igrave: '\\u00CC',\n      Iacute: '\\u00CD',\n      Icirc: '\\u00CE',\n      Iuml: '\\u00CF',\n      ETH: '\\u00D0',\n      Ntilde: '\\u00D1',\n      Ograve: '\\u00D2',\n      Oacute: '\\u00D3',\n      Ocirc: '\\u00D4',\n      Otilde: '\\u00D5',\n      Ouml: '\\u00D6',\n      times: '\\u00D7',\n      Oslash: '\\u00D8',\n      Ugrave: '\\u00D9',\n      Uacute: '\\u00DA',\n      Ucirc: '\\u00DB',\n      Uuml: '\\u00DC',\n      Yacute: '\\u00DD',\n      THORN: '\\u00DE',\n      szlig: '\\u00DF',\n      agrave: '\\u00E0',\n      aacute: '\\u00E1',\n      acirc: '\\u00E2',\n      atilde: '\\u00E3',\n      auml: '\\u00E4',\n      aring: '\\u00E5',\n      aelig: '\\u00E6',\n      ccedil: '\\u00E7',\n      egrave: '\\u00E8',\n      eacute: '\\u00E9',\n      ecirc: '\\u00EA',\n      euml: '\\u00EB',\n      igrave: '\\u00EC',\n      iacute: '\\u00ED',\n      icirc: '\\u00EE',\n      iuml: '\\u00EF',\n      eth: '\\u00F0',\n      ntilde: '\\u00F1',\n      ograve: '\\u00F2',\n      oacute: '\\u00F3',\n      ocirc: '\\u00F4',\n      otilde: '\\u00F5',\n      ouml: '\\u00F6',\n      divide: '\\u00F7',\n      oslash: '\\u00F8',\n      ugrave: '\\u00F9',\n      uacute: '\\u00FA',\n      ucirc: '\\u00FB',\n      uuml: '\\u00FC',\n      yacute: '\\u00FD',\n      thorn: '\\u00FE',\n      yuml: '\\u00FF',\n      OElig: '\\u0152',\n      oelig: '\\u0153',\n      Scaron: '\\u0160',\n      scaron: '\\u0161',\n      Yuml: '\\u0178',\n      fnof: '\\u0192',\n      circ: '\\u02C6',\n      tilde: '\\u02DC',\n      Alpha: '\\u0391',\n      Beta: '\\u0392',\n      Gamma: '\\u0393',\n      Delta: '\\u0394',\n      Epsilon: '\\u0395',\n      Zeta: '\\u0396',\n      Eta: '\\u0397',\n      Theta: '\\u0398',\n      Iota: '\\u0399',\n      Kappa: '\\u039A',\n      Lambda: '\\u039B',\n      Mu: '\\u039C',\n      Nu: '\\u039D',\n      Xi: '\\u039E',\n      Omicron: '\\u039F',\n      Pi: '\\u03A0',\n      Rho: '\\u03A1',\n      Sigma: '\\u03A3',\n      Tau: '\\u03A4',\n      Upsilon: '\\u03A5',\n      Phi: '\\u03A6',\n      Chi: '\\u03A7',\n      Psi: '\\u03A8',\n      Omega: '\\u03A9',\n      alpha: '\\u03B1',\n      beta: '\\u03B2',\n      gamma: '\\u03B3',\n      delta: '\\u03B4',\n      epsilon: '\\u03B5',\n      zeta: '\\u03B6',\n      eta: '\\u03B7',\n      theta: '\\u03B8',\n      iota: '\\u03B9',\n      kappa: '\\u03BA',\n      lambda: '\\u03BB',\n      mu: '\\u03BC',\n      nu: '\\u03BD',\n      xi: '\\u03BE',\n      omicron: '\\u03BF',\n      pi: '\\u03C0',\n      rho: '\\u03C1',\n      sigmaf: '\\u03C2',\n      sigma: '\\u03C3',\n      tau: '\\u03C4',\n      upsilon: '\\u03C5',\n      phi: '\\u03C6',\n      chi: '\\u03C7',\n      psi: '\\u03C8',\n      omega: '\\u03C9',\n      thetasym: '\\u03D1',\n      upsih: '\\u03D2',\n      piv: '\\u03D6',\n      ensp: '\\u2002',\n      emsp: '\\u2003',\n      thinsp: '\\u2009',\n      zwnj: '\\u200C',\n      zwj: '\\u200D',\n      lrm: '\\u200E',\n      rlm: '\\u200F',\n      ndash: '\\u2013',\n      mdash: '\\u2014',\n      lsquo: '\\u2018',\n      rsquo: '\\u2019',\n      sbquo: '\\u201A',\n      ldquo: '\\u201C',\n      rdquo: '\\u201D',\n      bdquo: '\\u201E',\n      dagger: '\\u2020',\n      Dagger: '\\u2021',\n      bull: '\\u2022',\n      hellip: '\\u2026',\n      permil: '\\u2030',\n      prime: '\\u2032',\n      Prime: '\\u2033',\n      lsaquo: '\\u2039',\n      rsaquo: '\\u203A',\n      oline: '\\u203E',\n      frasl: '\\u2044',\n      euro: '\\u20AC',\n      image: '\\u2111',\n      weierp: '\\u2118',\n      real: '\\u211C',\n      trade: '\\u2122',\n      alefsym: '\\u2135',\n      larr: '\\u2190',\n      uarr: '\\u2191',\n      rarr: '\\u2192',\n      darr: '\\u2193',\n      harr: '\\u2194',\n      crarr: '\\u21B5',\n      lArr: '\\u21D0',\n      uArr: '\\u21D1',\n      rArr: '\\u21D2',\n      dArr: '\\u21D3',\n      hArr: '\\u21D4',\n      forall: '\\u2200',\n      part: '\\u2202',\n      exist: '\\u2203',\n      empty: '\\u2205',\n      nabla: '\\u2207',\n      isin: '\\u2208',\n      notin: '\\u2209',\n      ni: '\\u220B',\n      prod: '\\u220F',\n      sum: '\\u2211',\n      minus: '\\u2212',\n      lowast: '\\u2217',\n      radic: '\\u221A',\n      prop: '\\u221D',\n      infin: '\\u221E',\n      ang: '\\u2220',\n      and: '\\u2227',\n      or: '\\u2228',\n      cap: '\\u2229',\n      cup: '\\u222A',\n      int: '\\u222B',\n      there4: '\\u2234',\n      sim: '\\u223C',\n      cong: '\\u2245',\n      asymp: '\\u2248',\n      ne: '\\u2260',\n      equiv: '\\u2261',\n      le: '\\u2264',\n      ge: '\\u2265',\n      sub: '\\u2282',\n      sup: '\\u2283',\n      nsub: '\\u2284',\n      sube: '\\u2286',\n      supe: '\\u2287',\n      oplus: '\\u2295',\n      otimes: '\\u2297',\n      perp: '\\u22A5',\n      sdot: '\\u22C5',\n      lceil: '\\u2308',\n      rceil: '\\u2309',\n      lfloor: '\\u230A',\n      rfloor: '\\u230B',\n      loz: '\\u25CA',\n      spades: '\\u2660',\n      clubs: '\\u2663',\n      hearts: '\\u2665',\n      diams: '\\u2666',\n      lang: '\\u27E8',\n      rang: '\\u27E9'\n    };\n\n    /***/\n  }, /* 13 */\n  /***/function (module, exports) {\n    \"use strict\";\n\n    exports.JSXSyntax = {\n      JSXAttribute: 'JSXAttribute',\n      JSXClosingElement: 'JSXClosingElement',\n      JSXElement: 'JSXElement',\n      JSXEmptyExpression: 'JSXEmptyExpression',\n      JSXExpressionContainer: 'JSXExpressionContainer',\n      JSXIdentifier: 'JSXIdentifier',\n      JSXMemberExpression: 'JSXMemberExpression',\n      JSXNamespacedName: 'JSXNamespacedName',\n      JSXOpeningElement: 'JSXOpeningElement',\n      JSXSpreadAttribute: 'JSXSpreadAttribute',\n      JSXText: 'JSXText'\n    };\n\n    /***/\n  }, /* 14 */\n  /***/function (module, exports, __webpack_require__) {\n    \"use strict\";\n\n    var jsx_syntax_1 = __webpack_require__(13);\n    var JSXClosingElement = function () {\n      function JSXClosingElement(name) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n        this.name = name;\n      }\n      return JSXClosingElement;\n    }();\n    exports.JSXClosingElement = JSXClosingElement;\n    var JSXElement = function () {\n      function JSXElement(openingElement, children, closingElement) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n        this.openingElement = openingElement;\n        this.children = children;\n        this.closingElement = closingElement;\n      }\n      return JSXElement;\n    }();\n    exports.JSXElement = JSXElement;\n    var JSXEmptyExpression = function () {\n      function JSXEmptyExpression() {\n        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n      }\n      return JSXEmptyExpression;\n    }();\n    exports.JSXEmptyExpression = JSXEmptyExpression;\n    var JSXExpressionContainer = function () {\n      function JSXExpressionContainer(expression) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n        this.expression = expression;\n      }\n      return JSXExpressionContainer;\n    }();\n    exports.JSXExpressionContainer = JSXExpressionContainer;\n    var JSXIdentifier = function () {\n      function JSXIdentifier(name) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n        this.name = name;\n      }\n      return JSXIdentifier;\n    }();\n    exports.JSXIdentifier = JSXIdentifier;\n    var JSXMemberExpression = function () {\n      function JSXMemberExpression(object, property) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n        this.object = object;\n        this.property = property;\n      }\n      return JSXMemberExpression;\n    }();\n    exports.JSXMemberExpression = JSXMemberExpression;\n    var JSXAttribute = function () {\n      function JSXAttribute(name, value) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n        this.name = name;\n        this.value = value;\n      }\n      return JSXAttribute;\n    }();\n    exports.JSXAttribute = JSXAttribute;\n    var JSXNamespacedName = function () {\n      function JSXNamespacedName(namespace, name) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n        this.namespace = namespace;\n        this.name = name;\n      }\n      return JSXNamespacedName;\n    }();\n    exports.JSXNamespacedName = JSXNamespacedName;\n    var JSXOpeningElement = function () {\n      function JSXOpeningElement(name, selfClosing, attributes) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n        this.name = name;\n        this.selfClosing = selfClosing;\n        this.attributes = attributes;\n      }\n      return JSXOpeningElement;\n    }();\n    exports.JSXOpeningElement = JSXOpeningElement;\n    var JSXSpreadAttribute = function () {\n      function JSXSpreadAttribute(argument) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n        this.argument = argument;\n      }\n      return JSXSpreadAttribute;\n    }();\n    exports.JSXSpreadAttribute = JSXSpreadAttribute;\n    var JSXText = function () {\n      function JSXText(value, raw) {\n        this.type = jsx_syntax_1.JSXSyntax.JSXText;\n        this.value = value;\n        this.raw = raw;\n      }\n      return JSXText;\n    }();\n    exports.JSXText = JSXText;\n\n    /***/\n  }, /* 15 */\n  /***/function (module, exports, __webpack_require__) {\n    \"use strict\";\n\n    var scanner_1 = __webpack_require__(8);\n    var error_handler_1 = __webpack_require__(6);\n    var token_1 = __webpack_require__(7);\n    var Reader = function () {\n      function Reader() {\n        this.values = [];\n        this.curly = this.paren = -1;\n      }\n      ;\n      // A function following one of those tokens is an expression.\n      Reader.prototype.beforeFunctionExpression = function (t) {\n        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void',\n        // assignment operators\n        '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',',\n        // binary/unary operators\n        '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n      };\n      ;\n      // Determine if forward slash (/) is an operator or part of a regular expression\n      // https://github.com/mozilla/sweet.js/wiki/design\n      Reader.prototype.isRegexStart = function () {\n        var previous = this.values[this.values.length - 1];\n        var regex = previous !== null;\n        switch (previous) {\n          case 'this':\n          case ']':\n            regex = false;\n            break;\n          case ')':\n            var check = this.values[this.paren - 1];\n            regex = check === 'if' || check === 'while' || check === 'for' || check === 'with';\n            break;\n          case '}':\n            // Dividing a function by anything makes little sense,\n            // but we have to check for that.\n            regex = false;\n            if (this.values[this.curly - 3] === 'function') {\n              // Anonymous function, e.g. function(){} /42\n              var check_1 = this.values[this.curly - 4];\n              regex = check_1 ? !this.beforeFunctionExpression(check_1) : false;\n            } else if (this.values[this.curly - 4] === 'function') {\n              // Named function, e.g. function f(){} /42/\n              var check_2 = this.values[this.curly - 5];\n              regex = check_2 ? !this.beforeFunctionExpression(check_2) : true;\n            }\n        }\n        return regex;\n      };\n      ;\n      Reader.prototype.push = function (token) {\n        if (token.type === token_1.Token.Punctuator || token.type === token_1.Token.Keyword) {\n          if (token.value === '{') {\n            this.curly = this.values.length;\n          } else if (token.value === '(') {\n            this.paren = this.values.length;\n          }\n          this.values.push(token.value);\n        } else {\n          this.values.push(null);\n        }\n      };\n      ;\n      return Reader;\n    }();\n    var Tokenizer = function () {\n      function Tokenizer(code, config) {\n        this.errorHandler = new error_handler_1.ErrorHandler();\n        this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;\n        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n        this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;\n        this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;\n        this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;\n        this.buffer = [];\n        this.reader = new Reader();\n      }\n      ;\n      Tokenizer.prototype.errors = function () {\n        return this.errorHandler.errors;\n      };\n      ;\n      Tokenizer.prototype.getNextToken = function () {\n        if (this.buffer.length === 0) {\n          var comments = this.scanner.scanComments();\n          if (this.scanner.trackComment) {\n            for (var i = 0; i < comments.length; ++i) {\n              var e = comments[i];\n              var comment = void 0;\n              var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n              comment = {\n                type: e.multiLine ? 'BlockComment' : 'LineComment',\n                value: value\n              };\n              if (this.trackRange) {\n                comment.range = e.range;\n              }\n              if (this.trackLoc) {\n                comment.loc = e.loc;\n              }\n              this.buffer.push(comment);\n            }\n          }\n          if (!this.scanner.eof()) {\n            var loc = void 0;\n            if (this.trackLoc) {\n              loc = {\n                start: {\n                  line: this.scanner.lineNumber,\n                  column: this.scanner.index - this.scanner.lineStart\n                },\n                end: {}\n              };\n            }\n            var token = void 0;\n            if (this.scanner.source[this.scanner.index] === '/') {\n              token = this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.scanPunctuator();\n            } else {\n              token = this.scanner.lex();\n            }\n            this.reader.push(token);\n            var entry = void 0;\n            entry = {\n              type: token_1.TokenName[token.type],\n              value: this.scanner.source.slice(token.start, token.end)\n            };\n            if (this.trackRange) {\n              entry.range = [token.start, token.end];\n            }\n            if (this.trackLoc) {\n              loc.end = {\n                line: this.scanner.lineNumber,\n                column: this.scanner.index - this.scanner.lineStart\n              };\n              entry.loc = loc;\n            }\n            if (token.regex) {\n              entry.regex = token.regex;\n            }\n            this.buffer.push(entry);\n          }\n        }\n        return this.buffer.shift();\n      };\n      ;\n      return Tokenizer;\n    }();\n    exports.Tokenizer = Tokenizer;\n\n    /***/\n  }\n  /******/]);\n});\n;","map":{"version":3,"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","comment_handler_1","parser_1","jsx_parser_1","tokenizer_1","parse","code","options","delegate","commentHandler","proxyDelegate","node","metadata","visit","parserDelegate","collectComment","comment","attachComment","CommentHandler","attach","parser","jsx","JSXParser","Parser","ast","parseProgram","comments","config","tokens","tolerant","errors","errorHandler","tokenize","tokenizer","Tokenizer","token","getNextToken","push","e","tolerate","syntax_1","Syntax","version","stack","leading","trailing","prototype","insertInnerComments","type","BlockStatement","body","length","innerComments","i","entry","end","offset","start","unshift","splice","findTrailingComments","trailingComments","entry_1","firstComment","range","findLeadingComments","leadingComments","target","pop","count","visitNode","Program","visitComment","value","loc","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForStatement","ForOfStatement","ForInStatement","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","NewExpression","ObjectExpression","ObjectPattern","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","assert_1","messages_1","error_handler_1","token_1","scanner_1","Node","ArrowParameterPlaceHolder","source","String","ErrorHandler","scanner","Scanner","trackComment","operatorPrecedence","sourceType","lookahead","hasLineTerminator","context","allowIn","allowYield","firstCoverInitializedNameError","isAssignmentTarget","isBindingElement","inFunctionBody","inIteration","inSwitch","labelSet","strict","startMarker","index","lineNumber","lineStart","lastMarker","nextToken","throwError","messageFormat","values","_i","arguments","args","Array","slice","msg","replace","whole","idx","assert","line","column","createError","tolerateError","unexpectedTokenError","message","Messages","UnexpectedToken","Token","EOF","UnexpectedEOS","UnexpectedIdentifier","NumericLiteral","UnexpectedNumber","StringLiteral","UnexpectedString","Template","UnexpectedTemplate","Keyword","isFutureReservedWord","UnexpectedReserved","isStrictModeReservedWord","StrictReservedWord","raw","throwUnexpectedToken","tolerateUnexpectedToken","collectComments","scanComments","multiLine","getTokenRaw","convertToken","t","TokenName","regex","next","lex","nextRegexToken","scanRegExp","createNode","startNode","finalize","meta","expect","Punctuator","expectCommaSeparator","expectKeyword","keyword","match","matchKeyword","matchContextualKeyword","matchAssign","op","isolateCoverGrammar","parseFunction","previousIsBindingElement","previousIsAssignmentTarget","previousFirstCoverInitializedNameError","result","inheritCoverGrammar","consumeSemicolon","parsePrimaryExpression","expr","octal","StrictOctalLiteral","BooleanLiteral","NullLiteral","parseTemplateLiteral","parseGroupExpression","parseArrayInitializer","parseObjectInitializer","RegexLiteral","parseIdentifierName","parseFunctionExpression","parseClassExpression","parseSpreadElement","arg","parseAssignmentExpression","elements","element","parsePropertyMethod","params","previousStrict","parseFunctionSourceElements","firstRestricted","stricted","parsePropertyMethodFunction","isGenerator","previousAllowYield","parseFormalParameters","method","parseObjectPropertyKey","key","isPropertyKey","name","parseObjectProperty","hasProto","kind","computed","shorthand","lookaheadPropertyKey","qualifiedPropertyName","parseGetterMethod","parseSetterMethod","parseGeneratorMethod","DuplicateProtoProperty","init","properties","parseTemplateHead","head","cooked","tail","parseTemplateElement","expressions","quasis","quasi","parseExpression","reinterpretExpressionAsPattern","argument","operator","left","startToken","parseRestElement","arrow","params_1","parseArguments","isIdentifierName","parseNewExpression","property","callee","parseLeftHandSideExpression","parseLeftHandSideExpressionAllowCall","previousAllowIn","StaticMemberExpression","ComputedMemberExpression","parseSuper","parseUpdateExpression","parseUnaryExpression","isRestrictedWord","StrictLHSPrefix","InvalidLHSInAssignment","prefix","StrictLHSPostfix","StrictDelete","parseExponentiationExpression","right","binaryPrecedence","precedence","parseBinaryExpression","prec","markers","parseConditionalExpression","consequent","alternate","checkPatternParam","param","validateParam","reinterpretAsCoverFormalsList","paramSet","StrictParamDupe","parseYieldExpression","list","expression","StrictLHSAssignment","parseStatementListItem","statement","IllegalExportDeclaration","parseExportDeclaration","IllegalImportDeclaration","parseImportDeclaration","parseLexicalDeclaration","inFor","parseFunctionDeclaration","parseClassDeclaration","isLexicalDeclaration","parseStatement","parseBlock","block","parseLexicalBinding","parsePattern","StrictVarName","parseBindingList","previousIndex","previousLineNumber","previousLineStart","declarations","parseBindingRestElement","parseArrayPattern","parsePatternWithDefault","parsePropertyPattern","keyToken","parseVariableIdentifier","parseObjectPattern","pattern","parseVariableDeclaration","parseVariableDeclarationList","opt","parseVariableStatement","parseEmptyStatement","parseExpressionStatement","parseIfStatement","test","parseDoWhileStatement","previousInIteration","parseWhileStatement","parseForStatement","update","forIn","decl","ForInOfLoopInitializer","initStartToken","InvalidLHSInForIn","InvalidLHSInForLoop","initSeq","parseContinueStatement","label","Object","hasOwnProperty","UnknownLabel","IllegalContinue","parseBreakStatement","IllegalBreak","parseReturnStatement","IllegalReturn","hasArgument","parseWithStatement","StrictModeWith","object","parseSwitchCase","parseSwitchStatement","discriminant","previousInSwitch","cases","defaultFound","clause","MultipleDefaultsInSwitch","parseLabelledStatement","Redeclaration","labeledBody","parseThrowStatement","NewlineAfterThrow","parseCatchClause","paramMap","DuplicateBinding","StrictCatchVariable","parseFinallyClause","parseTryStatement","handler","finalizer","NoCatchOrFinally","parseDebuggerStatement","RegularExpression","parseDirectivePrologues","previousLabelSet","previousInFunctionBody","StrictParamName","defineProperty","enumerable","writable","configurable","DefaultRestParameter","ParameterAfterRestParameter","parseFormalParameter","identifierIsOptional","StrictFunctionName","formalParameters","parseDirective","directive","Directive","isStartOfExpression","parseClassElement","hasConstructor","isStatic","StaticPrototype","generator","ConstructorSpecialMethod","DuplicateConstructor","parseClassElementList","parseClassBody","elementList","superClass","classBody","parseModuleSpecifier","InvalidModuleSpecifier","parseImportSpecifier","imported","local","parseNamedImports","specifiers","parseImportDefaultSpecifier","parseImportNamespaceSpecifier","NoAsAfterImportNamespace","src","concat","MissingFromClause","parseExportSpecifier","exported","exportDeclaration","declaration","isExportFromIdentifier","condition","Error","UnexpectedTokenIllegal","InvalidRegExp","UnterminatedRegExp","TemplateOctalLiteral","recordError","error","constructError","base","create","col","description","character_1","hexValue","ch","indexOf","toLowerCase","octalValue","curlyStack","eof","skipSingleLineComment","charCodeAt","Character","isLineTerminator","skipMultiLineComment","isWhiteSpace","isKeyword","codePointAt","cp","second","first","scanHexEscape","len","isHexDigit","fromCharCode","scanUnicodeCodePointEscape","fromCodePoint","getIdentifier","getComplexIdentifier","isIdentifierPart","isIdentifierStart","substr","octalToDecimal","isOctalDigit","scanIdentifier","scanPunctuator","str","scanHexLiteral","number","parseInt","scanBinaryLiteral","isDecimalDigit","scanOctalLiteral","isImplicitOctalLiteral","scanNumericLiteral","parseFloat","scanStringLiteral","quote","unescaped","octToDec","scanTemplate","terminated","rawOffset","restore","testRegExp","flags","astralSubstitute","tmp","self","$0","$1","$2","codePoint","RegExp","exception","scanRegExpBody","classMarker","literal","scanRegExpFlags","Regex","NonAsciiIdentifierStart","NonAsciiIdentifierPart","logical","each","static","tag","__extends","d","b","__","constructor","xhtml_entities_1","jsx_syntax_1","JSXNode","JSXToken","Text","getQualifiedElementName","elementName","qualifiedName","JSXSyntax","JSXIdentifier","JSXNamespacedName","ns","namespace","JSXMemberExpression","_super","parseJSXRoot","startJSX","finishJSX","reenterJSX","expectJSX","createJSXNode","createJSXChildNode","scanXHTMLEntity","valid","numeric","hex","XHTMLEntities","lexJSX","n1","n2","nextJSXToken","nextJSXText","text","peekJSXToken","matchJSX","parseJSXIdentifier","parseJSXElementName","name_1","parseJSXAttributeName","attributeName","identifier","name_2","parseJSXStringLiteralAttribute","parseJSXExpressionAttribute","JSXExpressionContainer","parseJSXAttributeValue","parseJSXElement","parseJSXNameValueAttribute","JSXAttribute","parseJSXSpreadAttribute","JSXSpreadAttribute","parseJSXAttributes","attributes","attribute","parseJSXOpeningElement","selfClosing","JSXOpeningElement","parseJSXBoundaryElement","name_3","JSXClosingElement","parseJSXEmptyExpression","JSXEmptyExpression","parseJSXExpressionContainer","parseJSXChildren","children","child","JSXText","container","parseComplexJSXElement","el","opening","JSXElement","closing","open_1","close_1","quot","amp","apos","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","loz","spades","clubs","hearts","diams","lang","rang","openingElement","closingElement","Reader","curly","paren","beforeFunctionExpression","isRegexStart","previous","check","check_1","check_2","trackRange","trackLoc","buffer","reader","shift"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/degenerator/node_modules/esprima/dist/esprima.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n/* istanbul ignore next */\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n/* istanbul ignore next */\n\telse if(typeof exports === 'object')\n\t\texports[\"esprima\"] = factory();\n\telse\n\t\troot[\"esprima\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/* istanbul ignore if */\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t  Copyright JS Foundation and other contributors, https://js.foundation/\n\n\t  Redistribution and use in source and binary forms, with or without\n\t  modification, are permitted provided that the following conditions are met:\n\n\t    * Redistributions of source code must retain the above copyright\n\t      notice, this list of conditions and the following disclaimer.\n\t    * Redistributions in binary form must reproduce the above copyright\n\t      notice, this list of conditions and the following disclaimer in the\n\t      documentation and/or other materials provided with the distribution.\n\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\t  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\t  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n\t  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\t  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\t  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\t  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\t  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\t\"use strict\";\n\tvar comment_handler_1 = __webpack_require__(1);\n\tvar parser_1 = __webpack_require__(3);\n\tvar jsx_parser_1 = __webpack_require__(11);\n\tvar tokenizer_1 = __webpack_require__(15);\n\tfunction parse(code, options, delegate) {\n\t    var commentHandler = null;\n\t    var proxyDelegate = function (node, metadata) {\n\t        if (delegate) {\n\t            delegate(node, metadata);\n\t        }\n\t        if (commentHandler) {\n\t            commentHandler.visit(node, metadata);\n\t        }\n\t    };\n\t    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\n\t    var collectComment = false;\n\t    if (options) {\n\t        collectComment = (typeof options.comment === 'boolean' && options.comment);\n\t        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\n\t        if (collectComment || attachComment) {\n\t            commentHandler = new comment_handler_1.CommentHandler();\n\t            commentHandler.attach = attachComment;\n\t            options.comment = true;\n\t            parserDelegate = proxyDelegate;\n\t        }\n\t    }\n\t    var parser;\n\t    if (options && typeof options.jsx === 'boolean' && options.jsx) {\n\t        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n\t    }\n\t    else {\n\t        parser = new parser_1.Parser(code, options, parserDelegate);\n\t    }\n\t    var ast = (parser.parseProgram());\n\t    if (collectComment) {\n\t        ast.comments = commentHandler.comments;\n\t    }\n\t    if (parser.config.tokens) {\n\t        ast.tokens = parser.tokens;\n\t    }\n\t    if (parser.config.tolerant) {\n\t        ast.errors = parser.errorHandler.errors;\n\t    }\n\t    return ast;\n\t}\n\texports.parse = parse;\n\tfunction tokenize(code, options, delegate) {\n\t    var tokenizer = new tokenizer_1.Tokenizer(code, options);\n\t    var tokens;\n\t    tokens = [];\n\t    try {\n\t        while (true) {\n\t            var token = tokenizer.getNextToken();\n\t            if (!token) {\n\t                break;\n\t            }\n\t            if (delegate) {\n\t                token = delegate(token);\n\t            }\n\t            tokens.push(token);\n\t        }\n\t    }\n\t    catch (e) {\n\t        tokenizer.errorHandler.tolerate(e);\n\t    }\n\t    if (tokenizer.errorHandler.tolerant) {\n\t        tokens.errors = tokenizer.errors();\n\t    }\n\t    return tokens;\n\t}\n\texports.tokenize = tokenize;\n\tvar syntax_1 = __webpack_require__(2);\n\texports.Syntax = syntax_1.Syntax;\n\t// Sync with *.json manifests.\n\texports.version = '3.1.3';\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar syntax_1 = __webpack_require__(2);\n\tvar CommentHandler = (function () {\n\t    function CommentHandler() {\n\t        this.attach = false;\n\t        this.comments = [];\n\t        this.stack = [];\n\t        this.leading = [];\n\t        this.trailing = [];\n\t    }\n\t    CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n\t        //  innnerComments for properties empty block\n\t        //  `function a() {/** comments **\\/}`\n\t        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n\t            var innerComments = [];\n\t            for (var i = this.leading.length - 1; i >= 0; --i) {\n\t                var entry = this.leading[i];\n\t                if (metadata.end.offset >= entry.start) {\n\t                    innerComments.unshift(entry.comment);\n\t                    this.leading.splice(i, 1);\n\t                    this.trailing.splice(i, 1);\n\t                }\n\t            }\n\t            if (innerComments.length) {\n\t                node.innerComments = innerComments;\n\t            }\n\t        }\n\t    };\n\t    CommentHandler.prototype.findTrailingComments = function (node, metadata) {\n\t        var trailingComments = [];\n\t        if (this.trailing.length > 0) {\n\t            for (var i = this.trailing.length - 1; i >= 0; --i) {\n\t                var entry_1 = this.trailing[i];\n\t                if (entry_1.start >= metadata.end.offset) {\n\t                    trailingComments.unshift(entry_1.comment);\n\t                }\n\t            }\n\t            this.trailing.length = 0;\n\t            return trailingComments;\n\t        }\n\t        var entry = this.stack[this.stack.length - 1];\n\t        if (entry && entry.node.trailingComments) {\n\t            var firstComment = entry.node.trailingComments[0];\n\t            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n\t                trailingComments = entry.node.trailingComments;\n\t                delete entry.node.trailingComments;\n\t            }\n\t        }\n\t        return trailingComments;\n\t    };\n\t    CommentHandler.prototype.findLeadingComments = function (node, metadata) {\n\t        var leadingComments = [];\n\t        var target;\n\t        while (this.stack.length > 0) {\n\t            var entry = this.stack[this.stack.length - 1];\n\t            if (entry && entry.start >= metadata.start.offset) {\n\t                target = this.stack.pop().node;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        if (target) {\n\t            var count = target.leadingComments ? target.leadingComments.length : 0;\n\t            for (var i = count - 1; i >= 0; --i) {\n\t                var comment = target.leadingComments[i];\n\t                if (comment.range[1] <= metadata.start.offset) {\n\t                    leadingComments.unshift(comment);\n\t                    target.leadingComments.splice(i, 1);\n\t                }\n\t            }\n\t            if (target.leadingComments && target.leadingComments.length === 0) {\n\t                delete target.leadingComments;\n\t            }\n\t            return leadingComments;\n\t        }\n\t        for (var i = this.leading.length - 1; i >= 0; --i) {\n\t            var entry = this.leading[i];\n\t            if (entry.start <= metadata.start.offset) {\n\t                leadingComments.unshift(entry.comment);\n\t                this.leading.splice(i, 1);\n\t            }\n\t        }\n\t        return leadingComments;\n\t    };\n\t    CommentHandler.prototype.visitNode = function (node, metadata) {\n\t        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n\t            return;\n\t        }\n\t        this.insertInnerComments(node, metadata);\n\t        var trailingComments = this.findTrailingComments(node, metadata);\n\t        var leadingComments = this.findLeadingComments(node, metadata);\n\t        if (leadingComments.length > 0) {\n\t            node.leadingComments = leadingComments;\n\t        }\n\t        if (trailingComments.length > 0) {\n\t            node.trailingComments = trailingComments;\n\t        }\n\t        this.stack.push({\n\t            node: node,\n\t            start: metadata.start.offset\n\t        });\n\t    };\n\t    CommentHandler.prototype.visitComment = function (node, metadata) {\n\t        var type = (node.type[0] === 'L') ? 'Line' : 'Block';\n\t        var comment = {\n\t            type: type,\n\t            value: node.value\n\t        };\n\t        if (node.range) {\n\t            comment.range = node.range;\n\t        }\n\t        if (node.loc) {\n\t            comment.loc = node.loc;\n\t        }\n\t        this.comments.push(comment);\n\t        if (this.attach) {\n\t            var entry = {\n\t                comment: {\n\t                    type: type,\n\t                    value: node.value,\n\t                    range: [metadata.start.offset, metadata.end.offset]\n\t                },\n\t                start: metadata.start.offset\n\t            };\n\t            if (node.loc) {\n\t                entry.comment.loc = node.loc;\n\t            }\n\t            node.type = type;\n\t            this.leading.push(entry);\n\t            this.trailing.push(entry);\n\t        }\n\t    };\n\t    CommentHandler.prototype.visit = function (node, metadata) {\n\t        if (node.type === 'LineComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (node.type === 'BlockComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (this.attach) {\n\t            this.visitNode(node, metadata);\n\t        }\n\t    };\n\t    return CommentHandler;\n\t}());\n\texports.CommentHandler = CommentHandler;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.Syntax = {\n\t    AssignmentExpression: 'AssignmentExpression',\n\t    AssignmentPattern: 'AssignmentPattern',\n\t    ArrayExpression: 'ArrayExpression',\n\t    ArrayPattern: 'ArrayPattern',\n\t    ArrowFunctionExpression: 'ArrowFunctionExpression',\n\t    BlockStatement: 'BlockStatement',\n\t    BinaryExpression: 'BinaryExpression',\n\t    BreakStatement: 'BreakStatement',\n\t    CallExpression: 'CallExpression',\n\t    CatchClause: 'CatchClause',\n\t    ClassBody: 'ClassBody',\n\t    ClassDeclaration: 'ClassDeclaration',\n\t    ClassExpression: 'ClassExpression',\n\t    ConditionalExpression: 'ConditionalExpression',\n\t    ContinueStatement: 'ContinueStatement',\n\t    DoWhileStatement: 'DoWhileStatement',\n\t    DebuggerStatement: 'DebuggerStatement',\n\t    EmptyStatement: 'EmptyStatement',\n\t    ExportAllDeclaration: 'ExportAllDeclaration',\n\t    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n\t    ExportNamedDeclaration: 'ExportNamedDeclaration',\n\t    ExportSpecifier: 'ExportSpecifier',\n\t    ExpressionStatement: 'ExpressionStatement',\n\t    ForStatement: 'ForStatement',\n\t    ForOfStatement: 'ForOfStatement',\n\t    ForInStatement: 'ForInStatement',\n\t    FunctionDeclaration: 'FunctionDeclaration',\n\t    FunctionExpression: 'FunctionExpression',\n\t    Identifier: 'Identifier',\n\t    IfStatement: 'IfStatement',\n\t    ImportDeclaration: 'ImportDeclaration',\n\t    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n\t    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n\t    ImportSpecifier: 'ImportSpecifier',\n\t    Literal: 'Literal',\n\t    LabeledStatement: 'LabeledStatement',\n\t    LogicalExpression: 'LogicalExpression',\n\t    MemberExpression: 'MemberExpression',\n\t    MetaProperty: 'MetaProperty',\n\t    MethodDefinition: 'MethodDefinition',\n\t    NewExpression: 'NewExpression',\n\t    ObjectExpression: 'ObjectExpression',\n\t    ObjectPattern: 'ObjectPattern',\n\t    Program: 'Program',\n\t    Property: 'Property',\n\t    RestElement: 'RestElement',\n\t    ReturnStatement: 'ReturnStatement',\n\t    SequenceExpression: 'SequenceExpression',\n\t    SpreadElement: 'SpreadElement',\n\t    Super: 'Super',\n\t    SwitchCase: 'SwitchCase',\n\t    SwitchStatement: 'SwitchStatement',\n\t    TaggedTemplateExpression: 'TaggedTemplateExpression',\n\t    TemplateElement: 'TemplateElement',\n\t    TemplateLiteral: 'TemplateLiteral',\n\t    ThisExpression: 'ThisExpression',\n\t    ThrowStatement: 'ThrowStatement',\n\t    TryStatement: 'TryStatement',\n\t    UnaryExpression: 'UnaryExpression',\n\t    UpdateExpression: 'UpdateExpression',\n\t    VariableDeclaration: 'VariableDeclaration',\n\t    VariableDeclarator: 'VariableDeclarator',\n\t    WhileStatement: 'WhileStatement',\n\t    WithStatement: 'WithStatement',\n\t    YieldExpression: 'YieldExpression'\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar assert_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(5);\n\tvar error_handler_1 = __webpack_require__(6);\n\tvar token_1 = __webpack_require__(7);\n\tvar scanner_1 = __webpack_require__(8);\n\tvar syntax_1 = __webpack_require__(2);\n\tvar Node = __webpack_require__(10);\n\tvar ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\tvar Parser = (function () {\n\t    function Parser(code, options, delegate) {\n\t        if (options === void 0) { options = {}; }\n\t        this.config = {\n\t            range: (typeof options.range === 'boolean') && options.range,\n\t            loc: (typeof options.loc === 'boolean') && options.loc,\n\t            source: null,\n\t            tokens: (typeof options.tokens === 'boolean') && options.tokens,\n\t            comment: (typeof options.comment === 'boolean') && options.comment,\n\t            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\n\t        };\n\t        if (this.config.loc && options.source && options.source !== null) {\n\t            this.config.source = String(options.source);\n\t        }\n\t        this.delegate = delegate;\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = this.config.tolerant;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = this.config.comment;\n\t        this.operatorPrecedence = {\n\t            ')': 0,\n\t            ';': 0,\n\t            ',': 0,\n\t            '=': 0,\n\t            ']': 0,\n\t            '||': 1,\n\t            '&&': 2,\n\t            '|': 3,\n\t            '^': 4,\n\t            '&': 5,\n\t            '==': 6,\n\t            '!=': 6,\n\t            '===': 6,\n\t            '!==': 6,\n\t            '<': 7,\n\t            '>': 7,\n\t            '<=': 7,\n\t            '>=': 7,\n\t            '<<': 8,\n\t            '>>': 8,\n\t            '>>>': 8,\n\t            '+': 9,\n\t            '-': 9,\n\t            '*': 11,\n\t            '/': 11,\n\t            '%': 11\n\t        };\n\t        this.sourceType = (options && options.sourceType === 'module') ? 'module' : 'script';\n\t        this.lookahead = null;\n\t        this.hasLineTerminator = false;\n\t        this.context = {\n\t            allowIn: true,\n\t            allowYield: true,\n\t            firstCoverInitializedNameError: null,\n\t            isAssignmentTarget: false,\n\t            isBindingElement: false,\n\t            inFunctionBody: false,\n\t            inIteration: false,\n\t            inSwitch: false,\n\t            labelSet: {},\n\t            strict: (this.sourceType === 'module')\n\t        };\n\t        this.tokens = [];\n\t        this.startMarker = {\n\t            index: 0,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0\n\t        };\n\t        this.lastMarker = {\n\t            index: 0,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0\n\t        };\n\t        this.nextToken();\n\t        this.lastMarker = {\n\t            index: this.scanner.index,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart\n\t        };\n\t    }\n\t    Parser.prototype.throwError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.lastMarker.lineNumber;\n\t        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n\t        throw this.errorHandler.createError(index, line, column, msg);\n\t    };\n\t    Parser.prototype.tolerateError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.scanner.lineNumber;\n\t        var column = this.lastMarker.index - this.lastMarker.lineStart + 1;\n\t        this.errorHandler.tolerateError(index, line, column, msg);\n\t    };\n\t    // Throw an exception because of the token.\n\t    Parser.prototype.unexpectedTokenError = function (token, message) {\n\t        var msg = message || messages_1.Messages.UnexpectedToken;\n\t        var value;\n\t        if (token) {\n\t            if (!message) {\n\t                msg = (token.type === token_1.Token.EOF) ? messages_1.Messages.UnexpectedEOS :\n\t                    (token.type === token_1.Token.Identifier) ? messages_1.Messages.UnexpectedIdentifier :\n\t                        (token.type === token_1.Token.NumericLiteral) ? messages_1.Messages.UnexpectedNumber :\n\t                            (token.type === token_1.Token.StringLiteral) ? messages_1.Messages.UnexpectedString :\n\t                                (token.type === token_1.Token.Template) ? messages_1.Messages.UnexpectedTemplate :\n\t                                    messages_1.Messages.UnexpectedToken;\n\t                if (token.type === token_1.Token.Keyword) {\n\t                    if (this.scanner.isFutureReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.UnexpectedReserved;\n\t                    }\n\t                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.StrictReservedWord;\n\t                    }\n\t                }\n\t            }\n\t            value = (token.type === token_1.Token.Template) ? token.value.raw : token.value;\n\t        }\n\t        else {\n\t            value = 'ILLEGAL';\n\t        }\n\t        msg = msg.replace('%0', value);\n\t        if (token && typeof token.lineNumber === 'number') {\n\t            var index = token.start;\n\t            var line = token.lineNumber;\n\t            var column = token.start - this.lastMarker.lineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t        else {\n\t            var index = this.lastMarker.index;\n\t            var line = this.lastMarker.lineNumber;\n\t            var column = index - this.lastMarker.lineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t    };\n\t    Parser.prototype.throwUnexpectedToken = function (token, message) {\n\t        throw this.unexpectedTokenError(token, message);\n\t    };\n\t    Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n\t        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n\t    };\n\t    Parser.prototype.collectComments = function () {\n\t        if (!this.config.comment) {\n\t            this.scanner.scanComments();\n\t        }\n\t        else {\n\t            var comments = this.scanner.scanComments();\n\t            if (comments.length > 0 && this.delegate) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var node = void 0;\n\t                    node = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\n\t                    };\n\t                    if (this.config.range) {\n\t                        node.range = e.range;\n\t                    }\n\t                    if (this.config.loc) {\n\t                        node.loc = e.loc;\n\t                    }\n\t                    var metadata = {\n\t                        start: {\n\t                            line: e.loc.start.line,\n\t                            column: e.loc.start.column,\n\t                            offset: e.range[0]\n\t                        },\n\t                        end: {\n\t                            line: e.loc.end.line,\n\t                            column: e.loc.end.column,\n\t                            offset: e.range[1]\n\t                        }\n\t                    };\n\t                    this.delegate(node, metadata);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    // From internal representation to an external structure\n\t    Parser.prototype.getTokenRaw = function (token) {\n\t        return this.scanner.source.slice(token.start, token.end);\n\t    };\n\t    Parser.prototype.convertToken = function (token) {\n\t        var t;\n\t        t = {\n\t            type: token_1.TokenName[token.type],\n\t            value: this.getTokenRaw(token)\n\t        };\n\t        if (this.config.range) {\n\t            t.range = [token.start, token.end];\n\t        }\n\t        if (this.config.loc) {\n\t            t.loc = {\n\t                start: {\n\t                    line: this.startMarker.lineNumber,\n\t                    column: this.startMarker.index - this.startMarker.lineStart\n\t                },\n\t                end: {\n\t                    line: this.scanner.lineNumber,\n\t                    column: this.scanner.index - this.scanner.lineStart\n\t                }\n\t            };\n\t        }\n\t        if (token.regex) {\n\t            t.regex = token.regex;\n\t        }\n\t        return t;\n\t    };\n\t    Parser.prototype.nextToken = function () {\n\t        var token = this.lookahead;\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var next;\n\t        next = this.scanner.lex();\n\t        this.hasLineTerminator = (token && next) ? (token.lineNumber !== next.lineNumber) : false;\n\t        if (next && this.context.strict && next.type === token_1.Token.Identifier) {\n\t            if (this.scanner.isStrictModeReservedWord(next.value)) {\n\t                next.type = token_1.Token.Keyword;\n\t            }\n\t        }\n\t        this.lookahead = next;\n\t        if (this.config.tokens && next.type !== token_1.Token.EOF) {\n\t            this.tokens.push(this.convertToken(next));\n\t        }\n\t        return token;\n\t    };\n\t    Parser.prototype.nextRegexToken = function () {\n\t        this.collectComments();\n\t        var token = this.scanner.scanRegExp();\n\t        if (this.config.tokens) {\n\t            // Pop the previous token, '/' or '/='\n\t            // This is added from the lookahead token.\n\t            this.tokens.pop();\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        // Prime the next lookahead.\n\t        this.lookahead = token;\n\t        this.nextToken();\n\t        return token;\n\t    };\n\t    Parser.prototype.createNode = function () {\n\t        return {\n\t            index: this.startMarker.index,\n\t            line: this.startMarker.lineNumber,\n\t            column: this.startMarker.index - this.startMarker.lineStart\n\t        };\n\t    };\n\t    Parser.prototype.startNode = function (token) {\n\t        return {\n\t            index: token.start,\n\t            line: token.lineNumber,\n\t            column: token.start - token.lineStart\n\t        };\n\t    };\n\t    Parser.prototype.finalize = function (meta, node) {\n\t        if (this.config.range) {\n\t            node.range = [meta.index, this.lastMarker.index];\n\t        }\n\t        if (this.config.loc) {\n\t            node.loc = {\n\t                start: {\n\t                    line: meta.line,\n\t                    column: meta.column\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.lineNumber,\n\t                    column: this.lastMarker.index - this.lastMarker.lineStart\n\t                }\n\t            };\n\t            if (this.config.source) {\n\t                node.loc.source = this.config.source;\n\t            }\n\t        }\n\t        if (this.delegate) {\n\t            var metadata = {\n\t                start: {\n\t                    line: meta.line,\n\t                    column: meta.column,\n\t                    offset: meta.index\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.lineNumber,\n\t                    column: this.lastMarker.index - this.lastMarker.lineStart,\n\t                    offset: this.lastMarker.index\n\t                }\n\t            };\n\t            this.delegate(node, metadata);\n\t        }\n\t        return node;\n\t    };\n\t    // Expect the next token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expect = function (value) {\n\t        var token = this.nextToken();\n\t        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\t    Parser.prototype.expectCommaSeparator = function () {\n\t        if (this.config.tolerant) {\n\t            var token = this.lookahead;\n\t            if (token.type === token_1.Token.Punctuator && token.value === ',') {\n\t                this.nextToken();\n\t            }\n\t            else if (token.type === token_1.Token.Punctuator && token.value === ';') {\n\t                this.nextToken();\n\t                this.tolerateUnexpectedToken(token);\n\t            }\n\t            else {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n\t            }\n\t        }\n\t        else {\n\t            this.expect(',');\n\t        }\n\t    };\n\t    // Expect the next token to match the specified keyword.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expectKeyword = function (keyword) {\n\t        var token = this.nextToken();\n\t        if (token.type !== token_1.Token.Keyword || token.value !== keyword) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next token matches the specified punctuator.\n\t    Parser.prototype.match = function (value) {\n\t        return this.lookahead.type === token_1.Token.Punctuator && this.lookahead.value === value;\n\t    };\n\t    // Return true if the next token matches the specified keyword\n\t    Parser.prototype.matchKeyword = function (keyword) {\n\t        return this.lookahead.type === token_1.Token.Keyword && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token matches the specified contextual keyword\n\t    // (where an identifier is sometimes a keyword depending on the context)\n\t    Parser.prototype.matchContextualKeyword = function (keyword) {\n\t        return this.lookahead.type === token_1.Token.Identifier && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token is an assignment operator\n\t    Parser.prototype.matchAssign = function () {\n\t        if (this.lookahead.type !== token_1.Token.Punctuator) {\n\t            return false;\n\t        }\n\t        var op = this.lookahead.value;\n\t        return op === '=' ||\n\t            op === '*=' ||\n\t            op === '**=' ||\n\t            op === '/=' ||\n\t            op === '%=' ||\n\t            op === '+=' ||\n\t            op === '-=' ||\n\t            op === '<<=' ||\n\t            op === '>>=' ||\n\t            op === '>>>=' ||\n\t            op === '&=' ||\n\t            op === '^=' ||\n\t            op === '|=';\n\t    };\n\t    // Cover grammar support.\n\t    //\n\t    // When an assignment expression position starts with an left parenthesis, the determination of the type\n\t    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n\t    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n\t    //\n\t    // There are three productions that can be parsed in a parentheses pair that needs to be determined\n\t    // after the outermost pair is closed. They are:\n\t    //\n\t    //   1. AssignmentExpression\n\t    //   2. BindingElements\n\t    //   3. AssignmentTargets\n\t    //\n\t    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n\t    // binding element or assignment target.\n\t    //\n\t    // The three productions have the relationship:\n\t    //\n\t    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n\t    //\n\t    // with a single exception that CoverInitializedName when used directly in an Expression, generates\n\t    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n\t    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n\t    //\n\t    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n\t    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n\t    // the CoverInitializedName check is conducted.\n\t    //\n\t    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n\t    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n\t    // pattern. The CoverInitializedName check is deferred.\n\t    Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        if (this.context.firstCoverInitializedNameError !== null) {\n\t            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n\t        }\n\t        this.context.isBindingElement = previousIsBindingElement;\n\t        this.context.isAssignmentTarget = previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n\t        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.consumeSemicolon = function () {\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else if (!this.hasLineTerminator) {\n\t            if (this.lookahead.type !== token_1.Token.EOF && !this.match('}')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.lastMarker.index = this.startMarker.index;\n\t            this.lastMarker.lineNumber = this.startMarker.lineNumber;\n\t            this.lastMarker.lineStart = this.startMarker.lineStart;\n\t        }\n\t    };\n\t    // ECMA-262 12.2 Primary Expressions\n\t    Parser.prototype.parsePrimaryExpression = function () {\n\t        var node = this.createNode();\n\t        var expr;\n\t        var value, token, raw;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.Identifier:\n\t                if (this.sourceType === 'module' && this.lookahead.value === 'await') {\n\t                    this.tolerateUnexpectedToken(this.lookahead);\n\t                }\n\t                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                break;\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.StringLiteral:\n\t                if (this.context.strict && this.lookahead.octal) {\n\t                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.BooleanLiteral:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                token.value = (token.value === 'true');\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.NullLiteral:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                token.value = null;\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.Template:\n\t                expr = this.parseTemplateLiteral();\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                value = this.lookahead.value;\n\t                switch (value) {\n\t                    case '(':\n\t                        this.context.isBindingElement = false;\n\t                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\n\t                        break;\n\t                    case '[':\n\t                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n\t                        break;\n\t                    case '{':\n\t                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n\t                        break;\n\t                    case '/':\n\t                    case '/=':\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                        this.scanner.index = this.startMarker.index;\n\t                        token = this.nextRegexToken();\n\t                        raw = this.getTokenRaw(token);\n\t                        expr = this.finalize(node, new Node.RegexLiteral(token.value, raw, token.regex));\n\t                        break;\n\t                    default:\n\t                        this.throwUnexpectedToken(this.nextToken());\n\t                }\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n\t                    expr = this.parseIdentifierName();\n\t                }\n\t                else if (!this.context.strict && this.matchKeyword('let')) {\n\t                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                }\n\t                else {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    if (this.matchKeyword('function')) {\n\t                        expr = this.parseFunctionExpression();\n\t                    }\n\t                    else if (this.matchKeyword('this')) {\n\t                        this.nextToken();\n\t                        expr = this.finalize(node, new Node.ThisExpression());\n\t                    }\n\t                    else if (this.matchKeyword('class')) {\n\t                        expr = this.parseClassExpression();\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.nextToken());\n\t                    }\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(this.nextToken());\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.2.5 Array Initializer\n\t    Parser.prototype.parseSpreadElement = function () {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t        return this.finalize(node, new Node.SpreadElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayInitializer = function () {\n\t        var node = this.createNode();\n\t        var elements = [];\n\t        this.expect('[');\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else if (this.match('...')) {\n\t                var element = this.parseSpreadElement();\n\t                if (!this.match(']')) {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    this.expect(',');\n\t                }\n\t                elements.push(element);\n\t            }\n\t            else {\n\t                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayExpression(elements));\n\t    };\n\t    // ECMA-262 12.2.6 Object Initializer\n\t    Parser.prototype.parsePropertyMethod = function (params) {\n\t        this.context.isAssignmentTarget = false;\n\t        this.context.isBindingElement = false;\n\t        var previousStrict = this.context.strict;\n\t        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\t        if (this.context.strict && params.firstRestricted) {\n\t            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n\t        }\n\t        if (this.context.strict && params.stricted) {\n\t            this.tolerateUnexpectedToken(params.stricted, params.message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        return body;\n\t    };\n\t    Parser.prototype.parsePropertyMethodFunction = function () {\n\t        var isGenerator = false;\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseObjectPropertyKey = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var key = null;\n\t        switch (token.type) {\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t                if (this.context.strict && token.octal) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                var raw = this.getTokenRaw(token);\n\t                key = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case token_1.Token.Identifier:\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.Keyword:\n\t                key = this.finalize(node, new Node.Identifier(token.value));\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                if (token.value === '[') {\n\t                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    this.expect(']');\n\t                }\n\t                else {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(token);\n\t        }\n\t        return key;\n\t    };\n\t    Parser.prototype.isPropertyKey = function (key, value) {\n\t        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||\n\t            (key.type === syntax_1.Syntax.Literal && key.value === value);\n\t    };\n\t    Parser.prototype.parseObjectProperty = function (hasProto) {\n\t        var node = this.createNode();\n\t        var token = this.lookahead;\n\t        var kind;\n\t        var key;\n\t        var value;\n\t        var computed = false;\n\t        var method = false;\n\t        var shorthand = false;\n\t        if (token.type === token_1.Token.Identifier) {\n\t            this.nextToken();\n\t            key = this.finalize(node, new Node.Identifier(token.value));\n\t        }\n\t        else if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === token_1.Token.Identifier && token.value === 'get' && lookaheadPropertyKey) {\n\t            kind = 'get';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.context.allowYield = false;\n\t            value = this.parseGetterMethod();\n\t        }\n\t        else if (token.type === token_1.Token.Identifier && token.value === 'set' && lookaheadPropertyKey) {\n\t            kind = 'set';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseSetterMethod();\n\t        }\n\t        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        else {\n\t            if (!key) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            kind = 'init';\n\t            if (this.match(':')) {\n\t                if (!computed && this.isPropertyKey(key, '__proto__')) {\n\t                    if (hasProto.value) {\n\t                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n\t                    }\n\t                    hasProto.value = true;\n\t                }\n\t                this.nextToken();\n\t                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t            else if (this.match('(')) {\n\t                value = this.parsePropertyMethodFunction();\n\t                method = true;\n\t            }\n\t            else if (token.type === token_1.Token.Identifier) {\n\t                var id = this.finalize(node, new Node.Identifier(token.value));\n\t                if (this.match('=')) {\n\t                    this.context.firstCoverInitializedNameError = this.lookahead;\n\t                    this.nextToken();\n\t                    shorthand = true;\n\t                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\n\t                }\n\t                else {\n\t                    shorthand = true;\n\t                    value = id;\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectInitializer = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var properties = [];\n\t        var hasProto = { value: false };\n\t        while (!this.match('}')) {\n\t            properties.push(this.parseObjectProperty(hasProto));\n\t            if (!this.match('}')) {\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectExpression(properties));\n\t    };\n\t    // ECMA-262 12.2.9 Template Literals\n\t    Parser.prototype.parseTemplateHead = function () {\n\t        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var value = {\n\t            raw: token.value.raw,\n\t            cooked: token.value.cooked\n\t        };\n\t        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateElement = function () {\n\t        if (this.lookahead.type !== token_1.Token.Template) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var value = {\n\t            raw: token.value.raw,\n\t            cooked: token.value.cooked\n\t        };\n\t        return this.finalize(node, new Node.TemplateElement(value, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateLiteral = function () {\n\t        var node = this.createNode();\n\t        var expressions = [];\n\t        var quasis = [];\n\t        var quasi = this.parseTemplateHead();\n\t        quasis.push(quasi);\n\t        while (!quasi.tail) {\n\t            expressions.push(this.parseExpression());\n\t            quasi = this.parseTemplateElement();\n\t            quasis.push(quasi);\n\t        }\n\t        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n\t    };\n\t    // ECMA-262 12.2.10 The Grouping Operator\n\t    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t            case syntax_1.Syntax.MemberExpression:\n\t            case syntax_1.Syntax.RestElement:\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                break;\n\t            case syntax_1.Syntax.SpreadElement:\n\t                expr.type = syntax_1.Syntax.RestElement;\n\t                this.reinterpretExpressionAsPattern(expr.argument);\n\t                break;\n\t            case syntax_1.Syntax.ArrayExpression:\n\t                expr.type = syntax_1.Syntax.ArrayPattern;\n\t                for (var i = 0; i < expr.elements.length; i++) {\n\t                    if (expr.elements[i] !== null) {\n\t                        this.reinterpretExpressionAsPattern(expr.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectExpression:\n\t                expr.type = syntax_1.Syntax.ObjectPattern;\n\t                for (var i = 0; i < expr.properties.length; i++) {\n\t                    this.reinterpretExpressionAsPattern(expr.properties[i].value);\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.AssignmentExpression:\n\t                expr.type = syntax_1.Syntax.AssignmentPattern;\n\t                delete expr.operator;\n\t                this.reinterpretExpressionAsPattern(expr.left);\n\t                break;\n\t            default:\n\t                // Allow other node type for tolerant parsing.\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.parseGroupExpression = function () {\n\t        var expr;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.nextToken();\n\t            if (!this.match('=>')) {\n\t                this.expect('=>');\n\t            }\n\t            expr = {\n\t                type: ArrowParameterPlaceHolder,\n\t                params: []\n\t            };\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var params = [];\n\t            if (this.match('...')) {\n\t                expr = this.parseRestElement(params);\n\t                this.expect(')');\n\t                if (!this.match('=>')) {\n\t                    this.expect('=>');\n\t                }\n\t                expr = {\n\t                    type: ArrowParameterPlaceHolder,\n\t                    params: [expr]\n\t                };\n\t            }\n\t            else {\n\t                var arrow = false;\n\t                this.context.isBindingElement = true;\n\t                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                if (this.match(',')) {\n\t                    var expressions = [];\n\t                    this.context.isAssignmentTarget = false;\n\t                    expressions.push(expr);\n\t                    while (this.startMarker.index < this.scanner.length) {\n\t                        if (!this.match(',')) {\n\t                            break;\n\t                        }\n\t                        this.nextToken();\n\t                        if (this.match('...')) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            expressions.push(this.parseRestElement(params));\n\t                            this.expect(')');\n\t                            if (!this.match('=>')) {\n\t                                this.expect('=>');\n\t                            }\n\t                            this.context.isBindingElement = false;\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions\n\t                            };\n\t                        }\n\t                        else {\n\t                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        if (arrow) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!arrow) {\n\t                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t                    }\n\t                }\n\t                if (!arrow) {\n\t                    this.expect(')');\n\t                    if (this.match('=>')) {\n\t                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: [expr]\n\t                            };\n\t                        }\n\t                        if (!arrow) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            if (expr.type === syntax_1.Syntax.SequenceExpression) {\n\t                                for (var i = 0; i < expr.expressions.length; i++) {\n\t                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\n\t                                }\n\t                            }\n\t                            else {\n\t                                this.reinterpretExpressionAsPattern(expr);\n\t                            }\n\t                            var params_1 = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: params_1\n\t                            };\n\t                        }\n\t                    }\n\t                    this.context.isBindingElement = false;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.3 Left-Hand-Side Expressions\n\t    Parser.prototype.parseArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.isIdentifierName = function (token) {\n\t        return token.type === token_1.Token.Identifier ||\n\t            token.type === token_1.Token.Keyword ||\n\t            token.type === token_1.Token.BooleanLiteral ||\n\t            token.type === token_1.Token.NullLiteral;\n\t    };\n\t    Parser.prototype.parseIdentifierName = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (!this.isIdentifierName(token)) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseNewExpression = function () {\n\t        var node = this.createNode();\n\t        var id = this.parseIdentifierName();\n\t        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n\t        var expr;\n\t        if (this.match('.')) {\n\t            this.nextToken();\n\t            if (this.lookahead.type === token_1.Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {\n\t                var property = this.parseIdentifierName();\n\t                expr = new Node.MetaProperty(id, property);\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n\t            var args = this.match('(') ? this.parseArguments() : [];\n\t            expr = new Node.NewExpression(callee, args);\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return this.finalize(node, expr);\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n\t        var startToken = this.lookahead;\n\t        var previousAllowIn = this.context.allowIn;\n\t        this.context.allowIn = true;\n\t        var expr;\n\t        if (this.matchKeyword('super') && this.context.inFunctionBody) {\n\t            expr = this.createNode();\n\t            this.nextToken();\n\t            expr = this.finalize(expr, new Node.Super());\n\t            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        }\n\t        while (true) {\n\t            if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('(')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = false;\n\t                var args = this.parseArguments();\n\t                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\t            }\n\t            else if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        this.context.allowIn = previousAllowIn;\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseSuper = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('super');\n\t        if (!this.match('[') && !this.match('.')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return this.finalize(node, new Node.Super());\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpression = function () {\n\t        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n\t        var node = this.startNode(this.lookahead);\n\t        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\n\t            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        while (true) {\n\t            if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === token_1.Token.Template && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.4 Update Expressions\n\t    Parser.prototype.parseUpdateExpression = function () {\n\t        var expr;\n\t        var startToken = this.lookahead;\n\t        if (this.match('++') || this.match('--')) {\n\t            var node = this.startNode(startToken);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n\t            }\n\t            if (!this.context.isAssignmentTarget) {\n\t                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t            }\n\t            var prefix = true;\n\t            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t            if (!this.hasLineTerminator && this.lookahead.type === token_1.Token.Punctuator) {\n\t                if (this.match('++') || this.match('--')) {\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n\t                    }\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    var operator = this.nextToken().value;\n\t                    var prefix = false;\n\t                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.5 Unary Operators\n\t    Parser.prototype.parseUnaryExpression = function () {\n\t        var expr;\n\t        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\n\t            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n\t            var node = this.startNode(this.lookahead);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\t            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n\t                this.tolerateError(messages_1.Messages.StrictDelete);\n\t            }\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.parseUpdateExpression();\n\t        }\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseExponentiationExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.6 Exponentiation Operators\n\t    // ECMA-262 12.7 Multiplicative Operators\n\t    // ECMA-262 12.8 Additive Operators\n\t    // ECMA-262 12.9 Bitwise Shift Operators\n\t    // ECMA-262 12.10 Relational Operators\n\t    // ECMA-262 12.11 Equality Operators\n\t    // ECMA-262 12.12 Binary Bitwise Operators\n\t    // ECMA-262 12.13 Binary Logical Operators\n\t    Parser.prototype.binaryPrecedence = function (token) {\n\t        var op = token.value;\n\t        var precedence;\n\t        if (token.type === token_1.Token.Punctuator) {\n\t            precedence = this.operatorPrecedence[op] || 0;\n\t        }\n\t        else if (token.type === token_1.Token.Keyword) {\n\t            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\n\t        }\n\t        else {\n\t            precedence = 0;\n\t        }\n\t        return precedence;\n\t    };\n\t    Parser.prototype.parseBinaryExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n\t        var token = this.lookahead;\n\t        var prec = this.binaryPrecedence(token);\n\t        if (prec > 0) {\n\t            this.nextToken();\n\t            token.prec = prec;\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var markers = [startToken, this.lookahead];\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            var stack = [left, token, right];\n\t            while (true) {\n\t                prec = this.binaryPrecedence(this.lookahead);\n\t                if (prec <= 0) {\n\t                    break;\n\t                }\n\t                // Reduce: make a binary expression from the three topmost entries.\n\t                while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n\t                    right = stack.pop();\n\t                    var operator = stack.pop().value;\n\t                    left = stack.pop();\n\t                    markers.pop();\n\t                    var node = this.startNode(markers[markers.length - 1]);\n\t                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n\t                }\n\t                // Shift.\n\t                token = this.nextToken();\n\t                token.prec = prec;\n\t                stack.push(token);\n\t                markers.push(this.lookahead);\n\t                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n\t            }\n\t            // Final reduce to clean-up the stack.\n\t            var i = stack.length - 1;\n\t            expr = stack[i];\n\t            markers.pop();\n\t            while (i > 1) {\n\t                var node = this.startNode(markers.pop());\n\t                expr = this.finalize(node, new Node.BinaryExpression(stack[i - 1].value, stack[i - 2], expr));\n\t                i -= 2;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.14 Conditional Operator\n\t    Parser.prototype.parseConditionalExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\t        if (this.match('?')) {\n\t            this.nextToken();\n\t            var previousAllowIn = this.context.allowIn;\n\t            this.context.allowIn = true;\n\t            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowIn = previousAllowIn;\n\t            this.expect(':');\n\t            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.15 Assignment Operators\n\t    Parser.prototype.checkPatternParam = function (options, param) {\n\t        switch (param.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                this.validateParam(options, param, param.name);\n\t                break;\n\t            case syntax_1.Syntax.RestElement:\n\t                this.checkPatternParam(options, param.argument);\n\t                break;\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                this.checkPatternParam(options, param.left);\n\t                break;\n\t            case syntax_1.Syntax.ArrayPattern:\n\t                for (var i = 0; i < param.elements.length; i++) {\n\t                    if (param.elements[i] !== null) {\n\t                        this.checkPatternParam(options, param.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.YieldExpression:\n\t                break;\n\t            default:\n\t                assert_1.assert(param.type === syntax_1.Syntax.ObjectPattern, 'Invalid type');\n\t                for (var i = 0; i < param.properties.length; i++) {\n\t                    this.checkPatternParam(options, param.properties[i].value);\n\t                }\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n\t        var params = [expr];\n\t        var options;\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                break;\n\t            case ArrowParameterPlaceHolder:\n\t                params = expr.params;\n\t                break;\n\t            default:\n\t                return null;\n\t        }\n\t        options = {\n\t            paramSet: {}\n\t        };\n\t        for (var i = 0; i < params.length; ++i) {\n\t            var param = params[i];\n\t            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n\t                if (param.right.type === syntax_1.Syntax.YieldExpression) {\n\t                    if (param.right.argument) {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                    param.right.type = syntax_1.Syntax.Identifier;\n\t                    param.right.name = 'yield';\n\t                    delete param.right.argument;\n\t                    delete param.right.delegate;\n\t                }\n\t            }\n\t            this.checkPatternParam(options, param);\n\t            params[i] = param;\n\t        }\n\t        if (this.context.strict || !this.context.allowYield) {\n\t            for (var i = 0; i < params.length; ++i) {\n\t                var param = params[i];\n\t                if (param.type === syntax_1.Syntax.YieldExpression) {\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t                }\n\t            }\n\t        }\n\t        if (options.message === messages_1.Messages.StrictParamDupe) {\n\t            var token = this.context.strict ? options.stricted : options.firstRestricted;\n\t            this.throwUnexpectedToken(token, options.message);\n\t        }\n\t        return {\n\t            params: params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseAssignmentExpression = function () {\n\t        var expr;\n\t        if (!this.context.allowYield && this.matchKeyword('yield')) {\n\t            expr = this.parseYieldExpression();\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var token = startToken;\n\t            expr = this.parseConditionalExpression();\n\t            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n\t                // ECMA-262 14.2 Arrow Function Definitions\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                var list = this.reinterpretAsCoverFormalsList(expr);\n\t                if (list) {\n\t                    if (this.hasLineTerminator) {\n\t                        this.tolerateUnexpectedToken(this.lookahead);\n\t                    }\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                    var previousStrict = this.context.strict;\n\t                    var previousAllowYield = this.context.allowYield;\n\t                    this.context.allowYield = true;\n\t                    var node = this.startNode(startToken);\n\t                    this.expect('=>');\n\t                    var body = this.match('{') ? this.parseFunctionSourceElements() :\n\t                        this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\t                    if (this.context.strict && list.firstRestricted) {\n\t                        this.throwUnexpectedToken(list.firstRestricted, list.message);\n\t                    }\n\t                    if (this.context.strict && list.stricted) {\n\t                        this.tolerateUnexpectedToken(list.stricted, list.message);\n\t                    }\n\t                    expr = this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n\t                    this.context.strict = previousStrict;\n\t                    this.context.allowYield = previousAllowYield;\n\t                }\n\t            }\n\t            else {\n\t                if (this.matchAssign()) {\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n\t                        var id = (expr);\n\t                        if (this.scanner.isRestrictedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n\t                        }\n\t                        if (this.scanner.isStrictModeReservedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t                        }\n\t                    }\n\t                    if (!this.match('=')) {\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                    }\n\t                    else {\n\t                        this.reinterpretExpressionAsPattern(expr);\n\t                    }\n\t                    token = this.nextToken();\n\t                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(token.value, expr, right));\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 12.16 Comma Operator\n\t    Parser.prototype.parseExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        if (this.match(',')) {\n\t            var expressions = [];\n\t            expressions.push(expr);\n\t            while (this.startMarker.index < this.scanner.length) {\n\t                if (!this.match(',')) {\n\t                    break;\n\t                }\n\t                this.nextToken();\n\t                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t            }\n\t            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t        }\n\t        return expr;\n\t    };\n\t    // ECMA-262 13.2 Block\n\t    Parser.prototype.parseStatementListItem = function () {\n\t        var statement = null;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.isBindingElement = true;\n\t        if (this.lookahead.type === token_1.Token.Keyword) {\n\t            switch (this.lookahead.value) {\n\t                case 'export':\n\t                    if (this.sourceType !== 'module') {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n\t                    }\n\t                    statement = this.parseExportDeclaration();\n\t                    break;\n\t                case 'import':\n\t                    if (this.sourceType !== 'module') {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n\t                    }\n\t                    statement = this.parseImportDeclaration();\n\t                    break;\n\t                case 'const':\n\t                    statement = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'function':\n\t                    statement = this.parseFunctionDeclaration();\n\t                    break;\n\t                case 'class':\n\t                    statement = this.parseClassDeclaration();\n\t                    break;\n\t                case 'let':\n\t                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\n\t                    break;\n\t                default:\n\t                    statement = this.parseStatement();\n\t                    break;\n\t            }\n\t        }\n\t        else {\n\t            statement = this.parseStatement();\n\t        }\n\t        return statement;\n\t    };\n\t    Parser.prototype.parseBlock = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var block = [];\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            block.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.BlockStatement(block));\n\t    };\n\t    // ECMA-262 13.3.1 Let and Const Declarations\n\t    Parser.prototype.parseLexicalBinding = function (kind, options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, kind);\n\t        // ECMA-262 12.2.1\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((id).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (kind === 'const') {\n\t            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n\t                this.expect('=');\n\t                init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t        }\n\t        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {\n\t            this.expect('=');\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseBindingList = function (kind, options) {\n\t        var list = [this.parseLexicalBinding(kind, options)];\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseLexicalBinding(kind, options));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.isLexicalDeclaration = function () {\n\t        var previousIndex = this.scanner.index;\n\t        var previousLineNumber = this.scanner.lineNumber;\n\t        var previousLineStart = this.scanner.lineStart;\n\t        this.collectComments();\n\t        var next = this.scanner.lex();\n\t        this.scanner.index = previousIndex;\n\t        this.scanner.lineNumber = previousLineNumber;\n\t        this.scanner.lineStart = previousLineStart;\n\t        return (next.type === token_1.Token.Identifier) ||\n\t            (next.type === token_1.Token.Punctuator && next.value === '[') ||\n\t            (next.type === token_1.Token.Punctuator && next.value === '{') ||\n\t            (next.type === token_1.Token.Keyword && next.value === 'let') ||\n\t            (next.type === token_1.Token.Keyword && next.value === 'yield');\n\t    };\n\t    Parser.prototype.parseLexicalDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var kind = this.nextToken().value;\n\t        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n\t        var declarations = this.parseBindingList(kind, options);\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n\t    };\n\t    // ECMA-262 13.3.3 Destructuring Binding Patterns\n\t    Parser.prototype.parseBindingRestElement = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params, kind);\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('[');\n\t        var elements = [];\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else {\n\t                if (this.match('...')) {\n\t                    elements.push(this.parseBindingRestElement(params, kind));\n\t                    break;\n\t                }\n\t                else {\n\t                    elements.push(this.parsePatternWithDefault(params, kind));\n\t                }\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayPattern(elements));\n\t    };\n\t    Parser.prototype.parsePropertyPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var computed = false;\n\t        var shorthand = false;\n\t        var method = false;\n\t        var key;\n\t        var value;\n\t        if (this.lookahead.type === token_1.Token.Identifier) {\n\t            var keyToken = this.lookahead;\n\t            key = this.parseVariableIdentifier();\n\t            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\t            if (this.match('=')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                this.nextToken();\n\t                var expr = this.parseAssignmentExpression();\n\t                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n\t            }\n\t            else if (!this.match(':')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                value = init;\n\t            }\n\t            else {\n\t                this.expect(':');\n\t                value = this.parsePatternWithDefault(params, kind);\n\t            }\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.expect(':');\n\t            value = this.parsePatternWithDefault(params, kind);\n\t        }\n\t        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var properties = [];\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            properties.push(this.parsePropertyPattern(params, kind));\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectPattern(properties));\n\t    };\n\t    Parser.prototype.parsePattern = function (params, kind) {\n\t        var pattern;\n\t        if (this.match('[')) {\n\t            pattern = this.parseArrayPattern(params, kind);\n\t        }\n\t        else if (this.match('{')) {\n\t            pattern = this.parseObjectPattern(params, kind);\n\t        }\n\t        else {\n\t            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n\t                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.UnexpectedToken);\n\t            }\n\t            params.push(this.lookahead);\n\t            pattern = this.parseVariableIdentifier(kind);\n\t        }\n\t        return pattern;\n\t    };\n\t    Parser.prototype.parsePatternWithDefault = function (params, kind) {\n\t        var startToken = this.lookahead;\n\t        var pattern = this.parsePattern(params, kind);\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = true;\n\t            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowYield = previousAllowYield;\n\t            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n\t        }\n\t        return pattern;\n\t    };\n\t    // ECMA-262 13.3.2 Variable Statement\n\t    Parser.prototype.parseVariableIdentifier = function (kind) {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (token.type === token_1.Token.Keyword && token.value === 'yield') {\n\t            if (this.context.strict) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            if (!this.context.allowYield) {\n\t                this.throwUnexpectedToken(token);\n\t            }\n\t        }\n\t        else if (token.type !== token_1.Token.Identifier) {\n\t            if (this.context.strict && token.type === token_1.Token.Keyword && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else {\n\t                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t            }\n\t        }\n\t        else if (this.sourceType === 'module' && token.type === token_1.Token.Identifier && token.value === 'await') {\n\t            this.tolerateUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseVariableDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, 'var');\n\t        // ECMA-262 12.2.1\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((id).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n\t            this.expect('=');\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseVariableDeclarationList = function (options) {\n\t        var opt = { inFor: options.inFor };\n\t        var list = [];\n\t        list.push(this.parseVariableDeclaration(opt));\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseVariableDeclaration(opt));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.parseVariableStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('var');\n\t        var declarations = this.parseVariableDeclarationList({ inFor: false });\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n\t    };\n\t    // ECMA-262 13.4 Empty Statement\n\t    Parser.prototype.parseEmptyStatement = function () {\n\t        var node = this.createNode();\n\t        this.expect(';');\n\t        return this.finalize(node, new Node.EmptyStatement());\n\t    };\n\t    // ECMA-262 13.5 Expression Statement\n\t    Parser.prototype.parseExpressionStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ExpressionStatement(expr));\n\t    };\n\t    // ECMA-262 13.6 If statement\n\t    Parser.prototype.parseIfStatement = function () {\n\t        var node = this.createNode();\n\t        var consequent;\n\t        var alternate = null;\n\t        this.expectKeyword('if');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            consequent = this.parseStatement();\n\t            if (this.matchKeyword('else')) {\n\t                this.nextToken();\n\t                alternate = this.parseStatement();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n\t    };\n\t    // ECMA-262 13.7.2 The do-while Statement\n\t    Parser.prototype.parseDoWhileStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('do');\n\t        var previousInIteration = this.context.inIteration;\n\t        this.context.inIteration = true;\n\t        var body = this.parseStatement();\n\t        this.context.inIteration = previousInIteration;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        this.expect(')');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        return this.finalize(node, new Node.DoWhileStatement(body, test));\n\t    };\n\t    // ECMA-262 13.7.3 The while Statement\n\t    Parser.prototype.parseWhileStatement = function () {\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.parseStatement();\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return this.finalize(node, new Node.WhileStatement(test, body));\n\t    };\n\t    // ECMA-262 13.7.4 The for Statement\n\t    // ECMA-262 13.7.5 The for-in and for-of Statements\n\t    Parser.prototype.parseForStatement = function () {\n\t        var init = null;\n\t        var test = null;\n\t        var update = null;\n\t        var forIn = true;\n\t        var left, right;\n\t        var node = this.createNode();\n\t        this.expectKeyword('for');\n\t        this.expect('(');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            if (this.matchKeyword('var')) {\n\t                init = this.createNode();\n\t                this.nextToken();\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                var declarations = this.parseVariableDeclarationList({ inFor: true });\n\t                this.context.allowIn = previousAllowIn;\n\t                if (declarations.length === 1 && this.matchKeyword('in')) {\n\t                    var decl = declarations[0];\n\t                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n\t                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n\t                    }\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.expect(';');\n\t                }\n\t            }\n\t            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n\t                init = this.createNode();\n\t                var kind = this.nextToken().value;\n\t                if (!this.context.strict && this.lookahead.value === 'in') {\n\t                    init = this.finalize(init, new Node.Identifier(kind));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else {\n\t                    var previousAllowIn = this.context.allowIn;\n\t                    this.context.allowIn = false;\n\t                    var declarations = this.parseBindingList(kind, { inFor: true });\n\t                    this.context.allowIn = previousAllowIn;\n\t                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseExpression();\n\t                        init = null;\n\t                    }\n\t                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseAssignmentExpression();\n\t                        init = null;\n\t                        forIn = false;\n\t                    }\n\t                    else {\n\t                        this.consumeSemicolon();\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                var initStartToken = this.lookahead;\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                this.context.allowIn = previousAllowIn;\n\t                if (this.matchKeyword('in')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (this.matchContextualKeyword('of')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    if (this.match(',')) {\n\t                        var initSeq = [init];\n\t                        while (this.match(',')) {\n\t                            this.nextToken();\n\t                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n\t                    }\n\t                    this.expect(';');\n\t                }\n\t            }\n\t        }\n\t        if (typeof left === 'undefined') {\n\t            if (!this.match(';')) {\n\t                test = this.parseExpression();\n\t            }\n\t            this.expect(';');\n\t            if (!this.match(')')) {\n\t                update = this.parseExpression();\n\t            }\n\t        }\n\t        var body;\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.isolateCoverGrammar(this.parseStatement);\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return (typeof left === 'undefined') ?\n\t            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\n\t            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\n\t                this.finalize(node, new Node.ForOfStatement(left, right, body));\n\t    };\n\t    // ECMA-262 13.8 The continue statement\n\t    Parser.prototype.parseContinueStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('continue');\n\t        var label = null;\n\t        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n\t            label = this.parseVariableIdentifier();\n\t            var key = '$' + label.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, label.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration) {\n\t            this.throwError(messages_1.Messages.IllegalContinue);\n\t        }\n\t        return this.finalize(node, new Node.ContinueStatement(label));\n\t    };\n\t    // ECMA-262 13.9 The break statement\n\t    Parser.prototype.parseBreakStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('break');\n\t        var label = null;\n\t        if (this.lookahead.type === token_1.Token.Identifier && !this.hasLineTerminator) {\n\t            label = this.parseVariableIdentifier();\n\t            var key = '$' + label.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, label.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n\t            this.throwError(messages_1.Messages.IllegalBreak);\n\t        }\n\t        return this.finalize(node, new Node.BreakStatement(label));\n\t    };\n\t    // ECMA-262 13.10 The return statement\n\t    Parser.prototype.parseReturnStatement = function () {\n\t        if (!this.context.inFunctionBody) {\n\t            this.tolerateError(messages_1.Messages.IllegalReturn);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('return');\n\t        var hasArgument = !this.match(';') && !this.match('}') &&\n\t            !this.hasLineTerminator && this.lookahead.type !== token_1.Token.EOF;\n\t        var argument = hasArgument ? this.parseExpression() : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ReturnStatement(argument));\n\t    };\n\t    // ECMA-262 13.11 The with statement\n\t    Parser.prototype.parseWithStatement = function () {\n\t        if (this.context.strict) {\n\t            this.tolerateError(messages_1.Messages.StrictModeWith);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('with');\n\t        this.expect('(');\n\t        var object = this.parseExpression();\n\t        this.expect(')');\n\t        var body = this.parseStatement();\n\t        return this.finalize(node, new Node.WithStatement(object, body));\n\t    };\n\t    // ECMA-262 13.12 The switch statement\n\t    Parser.prototype.parseSwitchCase = function () {\n\t        var node = this.createNode();\n\t        var test;\n\t        if (this.matchKeyword('default')) {\n\t            this.nextToken();\n\t            test = null;\n\t        }\n\t        else {\n\t            this.expectKeyword('case');\n\t            test = this.parseExpression();\n\t        }\n\t        this.expect(':');\n\t        var consequent = [];\n\t        while (true) {\n\t            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n\t                break;\n\t            }\n\t            consequent.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.SwitchCase(test, consequent));\n\t    };\n\t    Parser.prototype.parseSwitchStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('switch');\n\t        this.expect('(');\n\t        var discriminant = this.parseExpression();\n\t        this.expect(')');\n\t        var previousInSwitch = this.context.inSwitch;\n\t        this.context.inSwitch = true;\n\t        var cases = [];\n\t        var defaultFound = false;\n\t        this.expect('{');\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            var clause = this.parseSwitchCase();\n\t            if (clause.test === null) {\n\t                if (defaultFound) {\n\t                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n\t                }\n\t                defaultFound = true;\n\t            }\n\t            cases.push(clause);\n\t        }\n\t        this.expect('}');\n\t        this.context.inSwitch = previousInSwitch;\n\t        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n\t    };\n\t    // ECMA-262 13.13 Labelled Statements\n\t    Parser.prototype.parseLabelledStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var statement;\n\t        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {\n\t            this.nextToken();\n\t            var id = (expr);\n\t            var key = '$' + id.name;\n\t            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n\t            }\n\t            this.context.labelSet[key] = true;\n\t            var labeledBody = this.parseStatement();\n\t            delete this.context.labelSet[key];\n\t            statement = new Node.LabeledStatement(id, labeledBody);\n\t        }\n\t        else {\n\t            this.consumeSemicolon();\n\t            statement = new Node.ExpressionStatement(expr);\n\t        }\n\t        return this.finalize(node, statement);\n\t    };\n\t    // ECMA-262 13.14 The throw statement\n\t    Parser.prototype.parseThrowStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('throw');\n\t        if (this.hasLineTerminator) {\n\t            this.throwError(messages_1.Messages.NewlineAfterThrow);\n\t        }\n\t        var argument = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ThrowStatement(argument));\n\t    };\n\t    // ECMA-262 13.15 The try statement\n\t    Parser.prototype.parseCatchClause = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('catch');\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        var params = [];\n\t        var param = this.parsePattern(params);\n\t        var paramMap = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var key = '$' + params[i].value;\n\t            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n\t                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n\t            }\n\t            paramMap[key] = true;\n\t        }\n\t        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord((param).name)) {\n\t                this.tolerateError(messages_1.Messages.StrictCatchVariable);\n\t            }\n\t        }\n\t        this.expect(')');\n\t        var body = this.parseBlock();\n\t        return this.finalize(node, new Node.CatchClause(param, body));\n\t    };\n\t    Parser.prototype.parseFinallyClause = function () {\n\t        this.expectKeyword('finally');\n\t        return this.parseBlock();\n\t    };\n\t    Parser.prototype.parseTryStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('try');\n\t        var block = this.parseBlock();\n\t        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n\t        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\t        if (!handler && !finalizer) {\n\t            this.throwError(messages_1.Messages.NoCatchOrFinally);\n\t        }\n\t        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n\t    };\n\t    // ECMA-262 13.16 The debugger statement\n\t    Parser.prototype.parseDebuggerStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('debugger');\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.DebuggerStatement());\n\t    };\n\t    // ECMA-262 13 Statements\n\t    Parser.prototype.parseStatement = function () {\n\t        var statement = null;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.Template:\n\t            case token_1.Token.RegularExpression:\n\t                statement = this.parseExpressionStatement();\n\t                break;\n\t            case token_1.Token.Punctuator:\n\t                var value = this.lookahead.value;\n\t                if (value === '{') {\n\t                    statement = this.parseBlock();\n\t                }\n\t                else if (value === '(') {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                else if (value === ';') {\n\t                    statement = this.parseEmptyStatement();\n\t                }\n\t                else {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                break;\n\t            case token_1.Token.Identifier:\n\t                statement = this.parseLabelledStatement();\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                switch (this.lookahead.value) {\n\t                    case 'break':\n\t                        statement = this.parseBreakStatement();\n\t                        break;\n\t                    case 'continue':\n\t                        statement = this.parseContinueStatement();\n\t                        break;\n\t                    case 'debugger':\n\t                        statement = this.parseDebuggerStatement();\n\t                        break;\n\t                    case 'do':\n\t                        statement = this.parseDoWhileStatement();\n\t                        break;\n\t                    case 'for':\n\t                        statement = this.parseForStatement();\n\t                        break;\n\t                    case 'function':\n\t                        statement = this.parseFunctionDeclaration();\n\t                        break;\n\t                    case 'if':\n\t                        statement = this.parseIfStatement();\n\t                        break;\n\t                    case 'return':\n\t                        statement = this.parseReturnStatement();\n\t                        break;\n\t                    case 'switch':\n\t                        statement = this.parseSwitchStatement();\n\t                        break;\n\t                    case 'throw':\n\t                        statement = this.parseThrowStatement();\n\t                        break;\n\t                    case 'try':\n\t                        statement = this.parseTryStatement();\n\t                        break;\n\t                    case 'var':\n\t                        statement = this.parseVariableStatement();\n\t                        break;\n\t                    case 'while':\n\t                        statement = this.parseWhileStatement();\n\t                        break;\n\t                    case 'with':\n\t                        statement = this.parseWithStatement();\n\t                        break;\n\t                    default:\n\t                        statement = this.parseExpressionStatement();\n\t                        break;\n\t                }\n\t                break;\n\t            default:\n\t                this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return statement;\n\t    };\n\t    // ECMA-262 14.1 Function Definition\n\t    Parser.prototype.parseFunctionSourceElements = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var body = this.parseDirectivePrologues();\n\t        var previousLabelSet = this.context.labelSet;\n\t        var previousInIteration = this.context.inIteration;\n\t        var previousInSwitch = this.context.inSwitch;\n\t        var previousInFunctionBody = this.context.inFunctionBody;\n\t        this.context.labelSet = {};\n\t        this.context.inIteration = false;\n\t        this.context.inSwitch = false;\n\t        this.context.inFunctionBody = true;\n\t        while (this.startMarker.index < this.scanner.length) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        this.context.labelSet = previousLabelSet;\n\t        this.context.inIteration = previousInIteration;\n\t        this.context.inSwitch = previousInSwitch;\n\t        this.context.inFunctionBody = previousInFunctionBody;\n\t        return this.finalize(node, new Node.BlockStatement(body));\n\t    };\n\t    Parser.prototype.validateParam = function (options, param, name) {\n\t        var key = '$' + name;\n\t        if (this.context.strict) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        else if (!options.firstRestricted) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            else if (this.scanner.isStrictModeReservedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictReservedWord;\n\t            }\n\t            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        if (typeof Object.defineProperty === 'function') {\n\t            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\n\t        }\n\t        else {\n\t            options.paramSet[key] = true;\n\t        }\n\t    };\n\t    Parser.prototype.parseRestElement = function (params) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params);\n\t        if (this.match('=')) {\n\t            this.throwError(messages_1.Messages.DefaultRestParameter);\n\t        }\n\t        if (!this.match(')')) {\n\t            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n\t        }\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseFormalParameter = function (options) {\n\t        var params = [];\n\t        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\t        for (var i = 0; i < params.length; i++) {\n\t            this.validateParam(options, params[i], params[i].value);\n\t        }\n\t        options.params.push(param);\n\t        return !this.match(')');\n\t    };\n\t    Parser.prototype.parseFormalParameters = function (firstRestricted) {\n\t        var options;\n\t        options = {\n\t            params: [],\n\t            firstRestricted: firstRestricted\n\t        };\n\t        this.expect('(');\n\t        if (!this.match(')')) {\n\t            options.paramSet = {};\n\t            while (this.startMarker.index < this.scanner.length) {\n\t                if (!this.parseFormalParameter(options)) {\n\t                    break;\n\t                }\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return {\n\t            params: options.params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        this.expectKeyword('function');\n\t        var isGenerator = this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted = null;\n\t        if (!identifierIsOptional || !this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n\t    };\n\t    Parser.prototype.parseFunctionExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('function');\n\t        var isGenerator = this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        if (!this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n\t    };\n\t    // ECMA-262 14.1.1 Directive Prologues\n\t    Parser.prototype.parseDirective = function () {\n\t        var token = this.lookahead;\n\t        var directive = null;\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        if (expr.type === syntax_1.Syntax.Literal) {\n\t            directive = this.getTokenRaw(token).slice(1, -1);\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, directive ? new Node.Directive(expr, directive) :\n\t            new Node.ExpressionStatement(expr));\n\t    };\n\t    Parser.prototype.parseDirectivePrologues = function () {\n\t        var firstRestricted = null;\n\t        var body = [];\n\t        while (true) {\n\t            var token = this.lookahead;\n\t            if (token.type !== token_1.Token.StringLiteral) {\n\t                break;\n\t            }\n\t            var statement = this.parseDirective();\n\t            body.push(statement);\n\t            var directive = statement.directive;\n\t            if (typeof directive !== 'string') {\n\t                break;\n\t            }\n\t            if (directive === 'use strict') {\n\t                this.context.strict = true;\n\t                if (firstRestricted) {\n\t                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t            }\n\t            else {\n\t                if (!firstRestricted && token.octal) {\n\t                    firstRestricted = token;\n\t                }\n\t            }\n\t        }\n\t        return body;\n\t    };\n\t    // ECMA-262 14.3 Method Definitions\n\t    Parser.prototype.qualifiedPropertyName = function (token) {\n\t        switch (token.type) {\n\t            case token_1.Token.Identifier:\n\t            case token_1.Token.StringLiteral:\n\t            case token_1.Token.BooleanLiteral:\n\t            case token_1.Token.NullLiteral:\n\t            case token_1.Token.NumericLiteral:\n\t            case token_1.Token.Keyword:\n\t                return true;\n\t            case token_1.Token.Punctuator:\n\t                return token.value === '[';\n\t        }\n\t        return false;\n\t    };\n\t    Parser.prototype.parseGetterMethod = function () {\n\t        var node = this.createNode();\n\t        this.expect('(');\n\t        this.expect(')');\n\t        var isGenerator = false;\n\t        var params = {\n\t            params: [],\n\t            stricted: null,\n\t            firstRestricted: null,\n\t            message: null\n\t        };\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseSetterMethod = function () {\n\t        var node = this.createNode();\n\t        var options = {\n\t            params: [],\n\t            firstRestricted: null,\n\t            paramSet: {}\n\t        };\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = false;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.tolerateUnexpectedToken(this.lookahead);\n\t        }\n\t        else {\n\t            this.parseFormalParameter(options);\n\t        }\n\t        this.expect(')');\n\t        var method = this.parsePropertyMethod(options);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, options.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseGeneratorMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = true;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    // ECMA-262 14.4 Generator Function Definitions\n\t    Parser.prototype.isStartOfExpression = function () {\n\t        var start = true;\n\t        var value = this.lookahead.value;\n\t        switch (this.lookahead.type) {\n\t            case token_1.Token.Punctuator:\n\t                start = (value === '[') || (value === '(') || (value === '{') ||\n\t                    (value === '+') || (value === '-') ||\n\t                    (value === '!') || (value === '~') ||\n\t                    (value === '++') || (value === '--') ||\n\t                    (value === '/') || (value === '/='); // regular expression literal\n\t                break;\n\t            case token_1.Token.Keyword:\n\t                start = (value === 'class') || (value === 'delete') ||\n\t                    (value === 'function') || (value === 'let') || (value === 'new') ||\n\t                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\n\t                    (value === 'void') || (value === 'yield');\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return start;\n\t    };\n\t    Parser.prototype.parseYieldExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('yield');\n\t        var argument = null;\n\t        var delegate = false;\n\t        if (!this.hasLineTerminator) {\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = false;\n\t            delegate = this.match('*');\n\t            if (delegate) {\n\t                this.nextToken();\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            else if (this.isStartOfExpression()) {\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            this.context.allowYield = previousAllowYield;\n\t        }\n\t        return this.finalize(node, new Node.YieldExpression(argument, delegate));\n\t    };\n\t    // ECMA-262 14.5 Class Definitions\n\t    Parser.prototype.parseClassElement = function (hasConstructor) {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var kind;\n\t        var key;\n\t        var value;\n\t        var computed = false;\n\t        var method = false;\n\t        var isStatic = false;\n\t        if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            var id = key;\n\t            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n\t                token = this.lookahead;\n\t                isStatic = true;\n\t                computed = this.match('[');\n\t                if (this.match('*')) {\n\t                    this.nextToken();\n\t                }\n\t                else {\n\t                    key = this.parseObjectPropertyKey();\n\t                }\n\t            }\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === token_1.Token.Identifier) {\n\t            if (token.value === 'get' && lookaheadPropertyKey) {\n\t                kind = 'get';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                this.context.allowYield = false;\n\t                value = this.parseGetterMethod();\n\t            }\n\t            else if (token.value === 'set' && lookaheadPropertyKey) {\n\t                kind = 'set';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                value = this.parseSetterMethod();\n\t            }\n\t        }\n\t        else if (token.type === token_1.Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        if (!kind && key && this.match('(')) {\n\t            kind = 'init';\n\t            value = this.parsePropertyMethodFunction();\n\t            method = true;\n\t        }\n\t        if (!kind) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        if (kind === 'init') {\n\t            kind = 'method';\n\t        }\n\t        if (!computed) {\n\t            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n\t                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n\t            }\n\t            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n\t                if (kind !== 'method' || !method || value.generator) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n\t                }\n\t                if (hasConstructor.value) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n\t                }\n\t                else {\n\t                    hasConstructor.value = true;\n\t                }\n\t                kind = 'constructor';\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n\t    };\n\t    Parser.prototype.parseClassElementList = function () {\n\t        var body = [];\n\t        var hasConstructor = { value: false };\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t            else {\n\t                body.push(this.parseClassElement(hasConstructor));\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return body;\n\t    };\n\t    Parser.prototype.parseClassBody = function () {\n\t        var node = this.createNode();\n\t        var elementList = this.parseClassElementList();\n\t        return this.finalize(node, new Node.ClassBody(elementList));\n\t    };\n\t    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (identifierIsOptional && (this.lookahead.type !== token_1.Token.Identifier)) ? null : this.parseVariableIdentifier();\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n\t    };\n\t    Parser.prototype.parseClassExpression = function () {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (this.lookahead.type === token_1.Token.Identifier) ? this.parseVariableIdentifier() : null;\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n\t    };\n\t    // ECMA-262 15.1 Scripts\n\t    // ECMA-262 15.2 Modules\n\t    Parser.prototype.parseProgram = function () {\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.startMarker.index < this.scanner.length) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Program(body, this.sourceType));\n\t    };\n\t    // ECMA-262 15.2.2 Imports\n\t    Parser.prototype.parseModuleSpecifier = function () {\n\t        var node = this.createNode();\n\t        if (this.lookahead.type !== token_1.Token.StringLiteral) {\n\t            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n\t        }\n\t        var token = this.nextToken();\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    // import {<foo as bar>} ...;\n\t    Parser.prototype.parseImportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var imported;\n\t        var local;\n\t        if (this.lookahead.type === token_1.Token.Identifier) {\n\t            imported = this.parseVariableIdentifier();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t        }\n\t        else {\n\t            imported = this.parseIdentifierName();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.ImportSpecifier(local, imported));\n\t    };\n\t    // {foo, bar as bas}\n\t    Parser.prototype.parseNamedImports = function () {\n\t        this.expect('{');\n\t        var specifiers = [];\n\t        while (!this.match('}')) {\n\t            specifiers.push(this.parseImportSpecifier());\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return specifiers;\n\t    };\n\t    // import <foo> ...;\n\t    Parser.prototype.parseImportDefaultSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n\t    };\n\t    // import <* as foo> ...;\n\t    Parser.prototype.parseImportNamespaceSpecifier = function () {\n\t        var node = this.createNode();\n\t        this.expect('*');\n\t        if (!this.matchContextualKeyword('as')) {\n\t            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n\t        }\n\t        this.nextToken();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n\t    };\n\t    Parser.prototype.parseImportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('import');\n\t        var src;\n\t        var specifiers = [];\n\t        if (this.lookahead.type === token_1.Token.StringLiteral) {\n\t            // import 'foo';\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        else {\n\t            if (this.match('{')) {\n\t                // import {bar}\n\t                specifiers = specifiers.concat(this.parseNamedImports());\n\t            }\n\t            else if (this.match('*')) {\n\t                // import * as foo\n\t                specifiers.push(this.parseImportNamespaceSpecifier());\n\t            }\n\t            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n\t                // import foo\n\t                specifiers.push(this.parseImportDefaultSpecifier());\n\t                if (this.match(',')) {\n\t                    this.nextToken();\n\t                    if (this.match('*')) {\n\t                        // import foo, * as foo\n\t                        specifiers.push(this.parseImportNamespaceSpecifier());\n\t                    }\n\t                    else if (this.match('{')) {\n\t                        // import foo, {bar}\n\t                        specifiers = specifiers.concat(this.parseNamedImports());\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n\t    };\n\t    // ECMA-262 15.2.3 Exports\n\t    Parser.prototype.parseExportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        var exported = local;\n\t        if (this.matchContextualKeyword('as')) {\n\t            this.nextToken();\n\t            exported = this.parseIdentifierName();\n\t        }\n\t        return this.finalize(node, new Node.ExportSpecifier(local, exported));\n\t    };\n\t    Parser.prototype.parseExportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('export');\n\t        var exportDeclaration;\n\t        if (this.matchKeyword('default')) {\n\t            // export default ...\n\t            this.nextToken();\n\t            if (this.matchKeyword('function')) {\n\t                // export default function foo () {}\n\t                // export default function () {}\n\t                var declaration = this.parseFunctionDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchKeyword('class')) {\n\t                // export default class foo {}\n\t                var declaration = this.parseClassDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else {\n\t                if (this.matchContextualKeyword('from')) {\n\t                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n\t                }\n\t                // export default {};\n\t                // export default [];\n\t                // export default (1 + 2);\n\t                var declaration = this.match('{') ? this.parseObjectInitializer() :\n\t                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n\t                this.consumeSemicolon();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t        }\n\t        else if (this.match('*')) {\n\t            // export * from 'foo';\n\t            this.nextToken();\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            var src = this.parseModuleSpecifier();\n\t            this.consumeSemicolon();\n\t            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n\t        }\n\t        else if (this.lookahead.type === token_1.Token.Keyword) {\n\t            // export var f = 1;\n\t            var declaration = void 0;\n\t            switch (this.lookahead.value) {\n\t                case 'let':\n\t                case 'const':\n\t                    declaration = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'var':\n\t                case 'class':\n\t                case 'function':\n\t                    declaration = this.parseStatementListItem();\n\t                    break;\n\t                default:\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else {\n\t            var specifiers = [];\n\t            var source = null;\n\t            var isExportFromIdentifier = false;\n\t            this.expect('{');\n\t            while (!this.match('}')) {\n\t                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n\t                specifiers.push(this.parseExportSpecifier());\n\t                if (!this.match('}')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t            this.expect('}');\n\t            if (this.matchContextualKeyword('from')) {\n\t                // export {default} from 'foo';\n\t                // export {foo} from 'foo';\n\t                this.nextToken();\n\t                source = this.parseModuleSpecifier();\n\t                this.consumeSemicolon();\n\t            }\n\t            else if (isExportFromIdentifier) {\n\t                // export {default}; // missing fromClause\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            else {\n\t                // export {foo};\n\t                this.consumeSemicolon();\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n\t        }\n\t        return exportDeclaration;\n\t    };\n\t    return Parser;\n\t}());\n\texports.Parser = Parser;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t// Ensure the condition is true, otherwise throw an error.\n\t// This is only to have a better contract semantic, i.e. another safety net\n\t// to catch a logic error. The condition shall be fulfilled in normal case.\n\t// Do NOT use this to enforce a certain condition on any user input.\n\t\"use strict\";\n\tfunction assert(condition, message) {\n\t    /* istanbul ignore if */\n\t    if (!condition) {\n\t        throw new Error('ASSERT: ' + message);\n\t    }\n\t}\n\texports.assert = assert;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Error messages should be identical to V8.\n\texports.Messages = {\n\t    UnexpectedToken: 'Unexpected token %0',\n\t    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n\t    UnexpectedNumber: 'Unexpected number',\n\t    UnexpectedString: 'Unexpected string',\n\t    UnexpectedIdentifier: 'Unexpected identifier',\n\t    UnexpectedReserved: 'Unexpected reserved word',\n\t    UnexpectedTemplate: 'Unexpected quasi %0',\n\t    UnexpectedEOS: 'Unexpected end of input',\n\t    NewlineAfterThrow: 'Illegal newline after throw',\n\t    InvalidRegExp: 'Invalid regular expression',\n\t    UnterminatedRegExp: 'Invalid regular expression: missing /',\n\t    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n\t    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n\t    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n\t    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n\t    NoCatchOrFinally: 'Missing catch or finally after try',\n\t    UnknownLabel: 'Undefined label \\'%0\\'',\n\t    Redeclaration: '%0 \\'%1\\' has already been declared',\n\t    IllegalContinue: 'Illegal continue statement',\n\t    IllegalBreak: 'Illegal break statement',\n\t    IllegalReturn: 'Illegal return statement',\n\t    StrictModeWith: 'Strict mode code may not include a with statement',\n\t    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n\t    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n\t    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n\t    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n\t    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n\t    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n\t    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n\t    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n\t    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictReservedWord: 'Use of future reserved word in strict mode',\n\t    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n\t    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n\t    DefaultRestParameter: 'Unexpected token =',\n\t    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n\t    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n\t    DuplicateConstructor: 'A class may only have one constructor',\n\t    StaticPrototype: 'Classes may not have static property named prototype',\n\t    MissingFromClause: 'Unexpected token',\n\t    NoAsAfterImportNamespace: 'Unexpected token',\n\t    InvalidModuleSpecifier: 'Unexpected token',\n\t    IllegalImportDeclaration: 'Unexpected token',\n\t    IllegalExportDeclaration: 'Unexpected token',\n\t    DuplicateBinding: 'Duplicate binding %0',\n\t    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer'\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar ErrorHandler = (function () {\n\t    function ErrorHandler() {\n\t        this.errors = [];\n\t        this.tolerant = false;\n\t    }\n\t    ;\n\t    ErrorHandler.prototype.recordError = function (error) {\n\t        this.errors.push(error);\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.tolerate = function (error) {\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.constructError = function (msg, column) {\n\t        var error = new Error(msg);\n\t        try {\n\t            throw error;\n\t        }\n\t        catch (base) {\n\t            /* istanbul ignore else */\n\t            if (Object.create && Object.defineProperty) {\n\t                error = Object.create(base);\n\t                Object.defineProperty(error, 'column', { value: column });\n\t            }\n\t        }\n\t        finally {\n\t            return error;\n\t        }\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.createError = function (index, line, col, description) {\n\t        var msg = 'Line ' + line + ': ' + description;\n\t        var error = this.constructError(msg, col);\n\t        error.index = index;\n\t        error.lineNumber = line;\n\t        error.description = description;\n\t        return error;\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.throwError = function (index, line, col, description) {\n\t        throw this.createError(index, line, col, description);\n\t    };\n\t    ;\n\t    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n\t        var error = this.createError(index, line, col, description);\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ;\n\t    return ErrorHandler;\n\t}());\n\texports.ErrorHandler = ErrorHandler;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t(function (Token) {\n\t    Token[Token[\"BooleanLiteral\"] = 1] = \"BooleanLiteral\";\n\t    Token[Token[\"EOF\"] = 2] = \"EOF\";\n\t    Token[Token[\"Identifier\"] = 3] = \"Identifier\";\n\t    Token[Token[\"Keyword\"] = 4] = \"Keyword\";\n\t    Token[Token[\"NullLiteral\"] = 5] = \"NullLiteral\";\n\t    Token[Token[\"NumericLiteral\"] = 6] = \"NumericLiteral\";\n\t    Token[Token[\"Punctuator\"] = 7] = \"Punctuator\";\n\t    Token[Token[\"StringLiteral\"] = 8] = \"StringLiteral\";\n\t    Token[Token[\"RegularExpression\"] = 9] = \"RegularExpression\";\n\t    Token[Token[\"Template\"] = 10] = \"Template\";\n\t})(exports.Token || (exports.Token = {}));\n\tvar Token = exports.Token;\n\t;\n\texports.TokenName = {};\n\texports.TokenName[Token.BooleanLiteral] = 'Boolean';\n\texports.TokenName[Token.EOF] = '<end>';\n\texports.TokenName[Token.Identifier] = 'Identifier';\n\texports.TokenName[Token.Keyword] = 'Keyword';\n\texports.TokenName[Token.NullLiteral] = 'Null';\n\texports.TokenName[Token.NumericLiteral] = 'Numeric';\n\texports.TokenName[Token.Punctuator] = 'Punctuator';\n\texports.TokenName[Token.StringLiteral] = 'String';\n\texports.TokenName[Token.RegularExpression] = 'RegularExpression';\n\texports.TokenName[Token.Template] = 'Template';\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar assert_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(5);\n\tvar character_1 = __webpack_require__(9);\n\tvar token_1 = __webpack_require__(7);\n\tfunction hexValue(ch) {\n\t    return '0123456789abcdef'.indexOf(ch.toLowerCase());\n\t}\n\tfunction octalValue(ch) {\n\t    return '01234567'.indexOf(ch);\n\t}\n\tvar Scanner = (function () {\n\t    function Scanner(code, handler) {\n\t        this.source = code;\n\t        this.errorHandler = handler;\n\t        this.trackComment = false;\n\t        this.length = code.length;\n\t        this.index = 0;\n\t        this.lineNumber = (code.length > 0) ? 1 : 0;\n\t        this.lineStart = 0;\n\t        this.curlyStack = [];\n\t    }\n\t    ;\n\t    Scanner.prototype.eof = function () {\n\t        return this.index >= this.length;\n\t    };\n\t    ;\n\t    Scanner.prototype.throwUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    ;\n\t    Scanner.prototype.tolerateUnexpectedToken = function () {\n\t        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, messages_1.Messages.UnexpectedTokenIllegal);\n\t    };\n\t    ;\n\t    // ECMA-262 11.4 Comments\n\t    Scanner.prototype.skipSingleLineComment = function (offset) {\n\t        var comments;\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - offset;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - offset\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            ++this.index;\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (this.trackComment) {\n\t                    loc.end = {\n\t                        line: this.lineNumber,\n\t                        column: this.index - this.lineStart - 1\n\t                    };\n\t                    var entry = {\n\t                        multiLine: false,\n\t                        slice: [start + offset, this.index - 1],\n\t                        range: [start, this.index - 1],\n\t                        loc: loc\n\t                    };\n\t                    comments.push(entry);\n\t                }\n\t                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                return comments;\n\t            }\n\t        }\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: false,\n\t                slice: [start + offset, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        return comments;\n\t    };\n\t    ;\n\t    Scanner.prototype.skipMultiLineComment = function () {\n\t        var comments;\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - 2;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - 2\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                ++this.index;\n\t                this.lineStart = this.index;\n\t            }\n\t            else if (ch === 0x2A) {\n\t                // Block comment ends with '*/'.\n\t                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n\t                    this.index += 2;\n\t                    if (this.trackComment) {\n\t                        loc.end = {\n\t                            line: this.lineNumber,\n\t                            column: this.index - this.lineStart\n\t                        };\n\t                        var entry = {\n\t                            multiLine: true,\n\t                            slice: [start + 2, this.index - 2],\n\t                            range: [start, this.index],\n\t                            loc: loc\n\t                        };\n\t                        comments.push(entry);\n\t                    }\n\t                    return comments;\n\t                }\n\t                ++this.index;\n\t            }\n\t            else {\n\t                ++this.index;\n\t            }\n\t        }\n\t        // Ran off the end of the file - the whole thing is a comment\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: true,\n\t                slice: [start + 2, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        this.tolerateUnexpectedToken();\n\t        return comments;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanComments = function () {\n\t        var comments;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t        }\n\t        var start = (this.index === 0);\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isWhiteSpace(ch)) {\n\t                ++this.index;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch)) {\n\t                ++this.index;\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                start = true;\n\t            }\n\t            else if (ch === 0x2F) {\n\t                ch = this.source.charCodeAt(this.index + 1);\n\t                if (ch === 0x2F) {\n\t                    this.index += 2;\n\t                    var comment = this.skipSingleLineComment(2);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                    start = true;\n\t                }\n\t                else if (ch === 0x2A) {\n\t                    this.index += 2;\n\t                    var comment = this.skipMultiLineComment();\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (start && ch === 0x2D) {\n\t                // U+003E is '>'\n\t                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\n\t                    // '-->' is a single-line comment\n\t                    this.index += 3;\n\t                    var comment = this.skipSingleLineComment(3);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (ch === 0x3C) {\n\t                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n\t                    this.index += 4; // `<!--`\n\t                    var comment = this.skipSingleLineComment(4);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return comments;\n\t    };\n\t    ;\n\t    // ECMA-262 11.6.2.2 Future Reserved Words\n\t    Scanner.prototype.isFutureReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'enum':\n\t            case 'export':\n\t            case 'import':\n\t            case 'super':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.isStrictModeReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'implements':\n\t            case 'interface':\n\t            case 'package':\n\t            case 'private':\n\t            case 'protected':\n\t            case 'public':\n\t            case 'static':\n\t            case 'yield':\n\t            case 'let':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.isRestrictedWord = function (id) {\n\t        return id === 'eval' || id === 'arguments';\n\t    };\n\t    ;\n\t    // ECMA-262 11.6.2.1 Keywords\n\t    Scanner.prototype.isKeyword = function (id) {\n\t        switch (id.length) {\n\t            case 2:\n\t                return (id === 'if') || (id === 'in') || (id === 'do');\n\t            case 3:\n\t                return (id === 'var') || (id === 'for') || (id === 'new') ||\n\t                    (id === 'try') || (id === 'let');\n\t            case 4:\n\t                return (id === 'this') || (id === 'else') || (id === 'case') ||\n\t                    (id === 'void') || (id === 'with') || (id === 'enum');\n\t            case 5:\n\t                return (id === 'while') || (id === 'break') || (id === 'catch') ||\n\t                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\n\t                    (id === 'class') || (id === 'super');\n\t            case 6:\n\t                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n\t                    (id === 'switch') || (id === 'export') || (id === 'import');\n\t            case 7:\n\t                return (id === 'default') || (id === 'finally') || (id === 'extends');\n\t            case 8:\n\t                return (id === 'function') || (id === 'continue') || (id === 'debugger');\n\t            case 10:\n\t                return (id === 'instanceof');\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.codePointAt = function (i) {\n\t        var cp = this.source.charCodeAt(i);\n\t        if (cp >= 0xD800 && cp <= 0xDBFF) {\n\t            var second = this.source.charCodeAt(i + 1);\n\t            if (second >= 0xDC00 && second <= 0xDFFF) {\n\t                var first = cp;\n\t                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t            }\n\t        }\n\t        return cp;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanHexEscape = function (prefix) {\n\t        var len = (prefix === 'u') ? 4 : 2;\n\t        var code = 0;\n\t        for (var i = 0; i < len; ++i) {\n\t            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 16 + hexValue(this.source[this.index++]);\n\t            }\n\t            else {\n\t                return '';\n\t            }\n\t        }\n\t        return String.fromCharCode(code);\n\t    };\n\t    ;\n\t    Scanner.prototype.scanUnicodeCodePointEscape = function () {\n\t        var ch = this.source[this.index];\n\t        var code = 0;\n\t        // At least, one hex digit is required.\n\t        if (ch === '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            code = code * 16 + hexValue(ch);\n\t        }\n\t        if (code > 0x10FFFF || ch !== '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return character_1.Character.fromCodePoint(code);\n\t    };\n\t    ;\n\t    Scanner.prototype.getIdentifier = function () {\n\t        var start = this.index++;\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (ch === 0x5C) {\n\t                // Blackslash (U+005C) marks Unicode escape sequence.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            else if (ch >= 0xD800 && ch < 0xDFFF) {\n\t                // Need to handle surrogate pairs.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            if (character_1.Character.isIdentifierPart(ch)) {\n\t                ++this.index;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return this.source.slice(start, this.index);\n\t    };\n\t    ;\n\t    Scanner.prototype.getComplexIdentifier = function () {\n\t        var cp = this.codePointAt(this.index);\n\t        var id = character_1.Character.fromCodePoint(cp);\n\t        this.index += id.length;\n\t        // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t        var ch;\n\t        if (cp === 0x5C) {\n\t            if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t            ++this.index;\n\t            if (this.source[this.index] === '{') {\n\t                ++this.index;\n\t                ch = this.scanUnicodeCodePointEscape();\n\t            }\n\t            else {\n\t                ch = this.scanHexEscape('u');\n\t                cp = ch.charCodeAt(0);\n\t                if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierStart(cp)) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t            }\n\t            id = ch;\n\t        }\n\t        while (!this.eof()) {\n\t            cp = this.codePointAt(this.index);\n\t            if (!character_1.Character.isIdentifierPart(cp)) {\n\t                break;\n\t            }\n\t            ch = character_1.Character.fromCodePoint(cp);\n\t            id += ch;\n\t            this.index += ch.length;\n\t            // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t            if (cp === 0x5C) {\n\t                id = id.substr(0, id.length - 1);\n\t                if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t                ++this.index;\n\t                if (this.source[this.index] === '{') {\n\t                    ++this.index;\n\t                    ch = this.scanUnicodeCodePointEscape();\n\t                }\n\t                else {\n\t                    ch = this.scanHexEscape('u');\n\t                    cp = ch.charCodeAt(0);\n\t                    if (!ch || ch === '\\\\' || !character_1.Character.isIdentifierPart(cp)) {\n\t                        this.throwUnexpectedToken();\n\t                    }\n\t                }\n\t                id += ch;\n\t            }\n\t        }\n\t        return id;\n\t    };\n\t    ;\n\t    Scanner.prototype.octalToDecimal = function (ch) {\n\t        // \\0 is not octal escape sequence\n\t        var octal = (ch !== '0');\n\t        var code = octalValue(ch);\n\t        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t            octal = true;\n\t            code = code * 8 + octalValue(this.source[this.index++]);\n\t            // 3 digits are only allowed when string starts\n\t            // with 0, 1, 2, 3\n\t            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 8 + octalValue(this.source[this.index++]);\n\t            }\n\t        }\n\t        return {\n\t            code: code,\n\t            octal: octal\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.6 Names and Keywords\n\t    Scanner.prototype.scanIdentifier = function () {\n\t        var type;\n\t        var start = this.index;\n\t        // Backslash (U+005C) starts an escaped character.\n\t        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\n\t        // There is no keyword or literal with only one character.\n\t        // Thus, it must be an identifier.\n\t        if (id.length === 1) {\n\t            type = token_1.Token.Identifier;\n\t        }\n\t        else if (this.isKeyword(id)) {\n\t            type = token_1.Token.Keyword;\n\t        }\n\t        else if (id === 'null') {\n\t            type = token_1.Token.NullLiteral;\n\t        }\n\t        else if (id === 'true' || id === 'false') {\n\t            type = token_1.Token.BooleanLiteral;\n\t        }\n\t        else {\n\t            type = token_1.Token.Identifier;\n\t        }\n\t        return {\n\t            type: type,\n\t            value: id,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.7 Punctuators\n\t    Scanner.prototype.scanPunctuator = function () {\n\t        var token = {\n\t            type: token_1.Token.Punctuator,\n\t            value: '',\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: this.index,\n\t            end: this.index\n\t        };\n\t        // Check for most common single-character punctuators.\n\t        var str = this.source[this.index];\n\t        switch (str) {\n\t            case '(':\n\t            case '{':\n\t                if (str === '{') {\n\t                    this.curlyStack.push('{');\n\t                }\n\t                ++this.index;\n\t                break;\n\t            case '.':\n\t                ++this.index;\n\t                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n\t                    // Spread operator: ...\n\t                    this.index += 2;\n\t                    str = '...';\n\t                }\n\t                break;\n\t            case '}':\n\t                ++this.index;\n\t                this.curlyStack.pop();\n\t                break;\n\t            case ')':\n\t            case ';':\n\t            case ',':\n\t            case '[':\n\t            case ']':\n\t            case ':':\n\t            case '?':\n\t            case '~':\n\t                ++this.index;\n\t                break;\n\t            default:\n\t                // 4-character punctuator.\n\t                str = this.source.substr(this.index, 4);\n\t                if (str === '>>>=') {\n\t                    this.index += 4;\n\t                }\n\t                else {\n\t                    // 3-character punctuators.\n\t                    str = str.substr(0, 3);\n\t                    if (str === '===' || str === '!==' || str === '>>>' ||\n\t                        str === '<<=' || str === '>>=' || str === '**=') {\n\t                        this.index += 3;\n\t                    }\n\t                    else {\n\t                        // 2-character punctuators.\n\t                        str = str.substr(0, 2);\n\t                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\n\t                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\n\t                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\n\t                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\n\t                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\n\t                            this.index += 2;\n\t                        }\n\t                        else {\n\t                            // 1-character punctuators.\n\t                            str = this.source[this.index];\n\t                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n\t                                ++this.index;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t        }\n\t        if (this.index === token.start) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        token.end = this.index;\n\t        token.value = str;\n\t        return token;\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.3 Numeric Literals\n\t    Scanner.prototype.scanHexLiteral = function (start) {\n\t        var number = '';\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (number.length === 0) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt('0x' + number, 16),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanBinaryLiteral = function (start) {\n\t        var number = '';\n\t        var ch;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index];\n\t            if (ch !== '0' && ch !== '1') {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (number.length === 0) {\n\t            // only 0b or 0B\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!this.eof()) {\n\t            ch = this.source.charCodeAt(this.index);\n\t            /* istanbul ignore else */\n\t            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt(number, 2),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n\t        var number = '';\n\t        var octal = false;\n\t        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n\t            octal = true;\n\t            number = '0' + this.source[this.index++];\n\t        }\n\t        else {\n\t            ++this.index;\n\t        }\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            number += this.source[this.index++];\n\t        }\n\t        if (!octal && number.length === 0) {\n\t            // only 0o or 0O\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseInt(number, 8),\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.isImplicitOctalLiteral = function () {\n\t        // Implicit octal, unless there is a non-octal digit.\n\t        // (Annex B.1.1 on Numeric Literals)\n\t        for (var i = this.index + 1; i < this.length; ++i) {\n\t            var ch = this.source[i];\n\t            if (ch === '8' || ch === '9') {\n\t                return false;\n\t            }\n\t            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                return true;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    ;\n\t    Scanner.prototype.scanNumericLiteral = function () {\n\t        var start = this.index;\n\t        var ch = this.source[start];\n\t        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\n\t        var number = '';\n\t        if (ch !== '.') {\n\t            number = this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            // Hex number starts with '0x'.\n\t            // Octal number starts with '0'.\n\t            // Octal number in ES6 starts with '0o'.\n\t            // Binary number in ES6 starts with '0b'.\n\t            if (number === '0') {\n\t                if (ch === 'x' || ch === 'X') {\n\t                    ++this.index;\n\t                    return this.scanHexLiteral(start);\n\t                }\n\t                if (ch === 'b' || ch === 'B') {\n\t                    ++this.index;\n\t                    return this.scanBinaryLiteral(start);\n\t                }\n\t                if (ch === 'o' || ch === 'O') {\n\t                    return this.scanOctalLiteral(ch, start);\n\t                }\n\t                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                    if (this.isImplicitOctalLiteral()) {\n\t                        return this.scanOctalLiteral(ch, start);\n\t                    }\n\t                }\n\t            }\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                number += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === '.') {\n\t            number += this.source[this.index++];\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                number += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === 'e' || ch === 'E') {\n\t            number += this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            if (ch === '+' || ch === '-') {\n\t                number += this.source[this.index++];\n\t            }\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                    number += this.source[this.index++];\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.NumericLiteral,\n\t            value: parseFloat(number),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.4 String Literals\n\t    Scanner.prototype.scanStringLiteral = function () {\n\t        var start = this.index;\n\t        var quote = this.source[start];\n\t        assert_1.assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\n\t        ++this.index;\n\t        var octal = false;\n\t        var str = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === quote) {\n\t                quote = '';\n\t                break;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'u':\n\t                        case 'x':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                str += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var unescaped = this.scanHexEscape(ch);\n\t                                if (!unescaped) {\n\t                                    this.throwUnexpectedToken();\n\t                                }\n\t                                str += unescaped;\n\t                            }\n\t                            break;\n\t                        case 'n':\n\t                            str += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            str += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            str += '\\t';\n\t                            break;\n\t                        case 'b':\n\t                            str += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            str += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            str += '\\x0B';\n\t                            break;\n\t                        case '8':\n\t                        case '9':\n\t                            str += ch;\n\t                            this.tolerateUnexpectedToken();\n\t                            break;\n\t                        default:\n\t                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                var octToDec = this.octalToDecimal(ch);\n\t                                octal = octToDec.octal || octal;\n\t                                str += String.fromCharCode(octToDec.code);\n\t                            }\n\t                            else {\n\t                                str += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            else {\n\t                str += ch;\n\t            }\n\t        }\n\t        if (quote !== '') {\n\t            this.index = start;\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: token_1.Token.StringLiteral,\n\t            value: str,\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.6 Template Literal Lexical Components\n\t    Scanner.prototype.scanTemplate = function () {\n\t        var cooked = '';\n\t        var terminated = false;\n\t        var start = this.index;\n\t        var head = (this.source[start] === '`');\n\t        var tail = false;\n\t        var rawOffset = 2;\n\t        ++this.index;\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === '`') {\n\t                rawOffset = 1;\n\t                tail = true;\n\t                terminated = true;\n\t                break;\n\t            }\n\t            else if (ch === '$') {\n\t                if (this.source[this.index] === '{') {\n\t                    this.curlyStack.push('${');\n\t                    ++this.index;\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                cooked += ch;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'n':\n\t                            cooked += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            cooked += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            cooked += '\\t';\n\t                            break;\n\t                        case 'u':\n\t                        case 'x':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                cooked += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var restore = this.index;\n\t                                var unescaped = this.scanHexEscape(ch);\n\t                                if (unescaped) {\n\t                                    cooked += unescaped;\n\t                                }\n\t                                else {\n\t                                    this.index = restore;\n\t                                    cooked += ch;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case 'b':\n\t                            cooked += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            cooked += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            cooked += '\\v';\n\t                            break;\n\t                        default:\n\t                            if (ch === '0') {\n\t                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                                    // Illegal: \\01 \\02 and so on\n\t                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                                }\n\t                                cooked += '\\0';\n\t                            }\n\t                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                // Illegal: \\1 \\2\n\t                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                            }\n\t                            else {\n\t                                cooked += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.lineNumber;\n\t                if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                    ++this.index;\n\t                }\n\t                this.lineStart = this.index;\n\t                cooked += '\\n';\n\t            }\n\t            else {\n\t                cooked += ch;\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!head) {\n\t            this.curlyStack.pop();\n\t        }\n\t        return {\n\t            type: token_1.Token.Template,\n\t            value: {\n\t                cooked: cooked,\n\t                raw: this.source.slice(start + 1, this.index - rawOffset)\n\t            },\n\t            head: head,\n\t            tail: tail,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    // ECMA-262 11.8.5 Regular Expression Literals\n\t    Scanner.prototype.testRegExp = function (pattern, flags) {\n\t        // The BMP character to use as a replacement for astral symbols when\n\t        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n\t        // approximation.\n\t        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n\t        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n\t        // pattern that would not be detected by this substitution.\n\t        var astralSubstitute = '\\uFFFF';\n\t        var tmp = pattern;\n\t        var self = this;\n\t        if (flags.indexOf('u') >= 0) {\n\t            tmp = tmp\n\t                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n\t                var codePoint = parseInt($1 || $2, 16);\n\t                if (codePoint > 0x10FFFF) {\n\t                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t                }\n\t                if (codePoint <= 0xFFFF) {\n\t                    return String.fromCharCode(codePoint);\n\t                }\n\t                return astralSubstitute;\n\t            })\n\t                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n\t        }\n\t        // First, detect invalid regular expressions.\n\t        try {\n\t            RegExp(tmp);\n\t        }\n\t        catch (e) {\n\t            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t        }\n\t        // Return a regular expression object for this pattern-flag pair, or\n\t        // `null` in case the current environment doesn't support the flags it\n\t        // uses.\n\t        try {\n\t            return new RegExp(pattern, flags);\n\t        }\n\t        catch (exception) {\n\t            /* istanbul ignore next */\n\t            return null;\n\t        }\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExpBody = function () {\n\t        var ch = this.source[this.index];\n\t        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n\t        var str = this.source[this.index++];\n\t        var classMarker = false;\n\t        var terminated = false;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            str += ch;\n\t            if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                // ECMA-262 7.8.5\n\t                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t                }\n\t                str += ch;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t            }\n\t            else if (classMarker) {\n\t                if (ch === ']') {\n\t                    classMarker = false;\n\t                }\n\t            }\n\t            else {\n\t                if (ch === '/') {\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                else if (ch === '[') {\n\t                    classMarker = true;\n\t                }\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t        }\n\t        // Exclude leading and trailing slash.\n\t        var body = str.substr(1, str.length - 2);\n\t        return {\n\t            value: body,\n\t            literal: str\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExpFlags = function () {\n\t        var str = '';\n\t        var flags = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index];\n\t            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            ++this.index;\n\t            if (ch === '\\\\' && !this.eof()) {\n\t                ch = this.source[this.index];\n\t                if (ch === 'u') {\n\t                    ++this.index;\n\t                    var restore = this.index;\n\t                    ch = this.scanHexEscape('u');\n\t                    if (ch) {\n\t                        flags += ch;\n\t                        for (str += '\\\\u'; restore < this.index; ++restore) {\n\t                            str += this.source[restore];\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.index = restore;\n\t                        flags += 'u';\n\t                        str += '\\\\u';\n\t                    }\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t                else {\n\t                    str += '\\\\';\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t            }\n\t            else {\n\t                flags += ch;\n\t                str += ch;\n\t            }\n\t        }\n\t        return {\n\t            value: flags,\n\t            literal: str\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.scanRegExp = function () {\n\t        var start = this.index;\n\t        var body = this.scanRegExpBody();\n\t        var flags = this.scanRegExpFlags();\n\t        var value = this.testRegExp(body.value, flags.value);\n\t        return {\n\t            type: token_1.Token.RegularExpression,\n\t            value: value,\n\t            literal: body.literal + flags.literal,\n\t            regex: {\n\t                pattern: body.value,\n\t                flags: flags.value\n\t            },\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    ;\n\t    Scanner.prototype.lex = function () {\n\t        if (this.eof()) {\n\t            return {\n\t                type: token_1.Token.EOF,\n\t                lineNumber: this.lineNumber,\n\t                lineStart: this.lineStart,\n\t                start: this.index,\n\t                end: this.index\n\t            };\n\t        }\n\t        var cp = this.source.charCodeAt(this.index);\n\t        if (character_1.Character.isIdentifierStart(cp)) {\n\t            return this.scanIdentifier();\n\t        }\n\t        // Very common: ( and ) and ;\n\t        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n\t            return this.scanPunctuator();\n\t        }\n\t        // String literal starts with single quote (U+0027) or double quote (U+0022).\n\t        if (cp === 0x27 || cp === 0x22) {\n\t            return this.scanStringLiteral();\n\t        }\n\t        // Dot (.) U+002E can also start a floating-point number, hence the need\n\t        // to check the next character.\n\t        if (cp === 0x2E) {\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n\t                return this.scanNumericLiteral();\n\t            }\n\t            return this.scanPunctuator();\n\t        }\n\t        if (character_1.Character.isDecimalDigit(cp)) {\n\t            return this.scanNumericLiteral();\n\t        }\n\t        // Template literals start with ` (U+0060) for template head\n\t        // or } (U+007D) for template middle or template tail.\n\t        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\n\t            return this.scanTemplate();\n\t        }\n\t        // Possible identifier start in a surrogate pair.\n\t        if (cp >= 0xD800 && cp < 0xDFFF) {\n\t            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n\t                return this.scanIdentifier();\n\t            }\n\t        }\n\t        return this.scanPunctuator();\n\t    };\n\t    ;\n\t    return Scanner;\n\t}());\n\texports.Scanner = Scanner;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// See also tools/generate-unicode-regex.js.\n\tvar Regex = {\n\t    // Unicode v8.0.0 NonAsciiIdentifierStart:\n\t    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n\t    // Unicode v8.0.0 NonAsciiIdentifierPart:\n\t    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n\t};\n\texports.Character = {\n\t    fromCodePoint: function (cp) {\n\t        return (cp < 0x10000) ? String.fromCharCode(cp) :\n\t            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\n\t                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\n\t    },\n\t    // ECMA-262 11.2 White Space\n\t    isWhiteSpace: function (cp) {\n\t        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\n\t            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\n\t    },\n\t    // ECMA-262 11.3 Line Terminators\n\t    isLineTerminator: function (cp) {\n\t        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\n\t    },\n\t    // ECMA-262 11.6 Identifier Names and Identifiers\n\t    isIdentifierStart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    isIdentifierPart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    // ECMA-262 11.8.3 Numeric Literals\n\t    isDecimalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39); // 0..9\n\t    },\n\t    isHexDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp >= 0x41 && cp <= 0x46) ||\n\t            (cp >= 0x61 && cp <= 0x66); // a..f\n\t    },\n\t    isOctalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x37); // 0..7\n\t    }\n\t};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar syntax_1 = __webpack_require__(2);\n\tvar ArrayExpression = (function () {\n\t    function ArrayExpression(elements) {\n\t        this.type = syntax_1.Syntax.ArrayExpression;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayExpression;\n\t}());\n\texports.ArrayExpression = ArrayExpression;\n\tvar ArrayPattern = (function () {\n\t    function ArrayPattern(elements) {\n\t        this.type = syntax_1.Syntax.ArrayPattern;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayPattern;\n\t}());\n\texports.ArrayPattern = ArrayPattern;\n\tvar ArrowFunctionExpression = (function () {\n\t    function ArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t    }\n\t    return ArrowFunctionExpression;\n\t}());\n\texports.ArrowFunctionExpression = ArrowFunctionExpression;\n\tvar AssignmentExpression = (function () {\n\t    function AssignmentExpression(operator, left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentExpression;\n\t}());\n\texports.AssignmentExpression = AssignmentExpression;\n\tvar AssignmentPattern = (function () {\n\t    function AssignmentPattern(left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentPattern;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentPattern;\n\t}());\n\texports.AssignmentPattern = AssignmentPattern;\n\tvar BinaryExpression = (function () {\n\t    function BinaryExpression(operator, left, right) {\n\t        var logical = (operator === '||' || operator === '&&');\n\t        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return BinaryExpression;\n\t}());\n\texports.BinaryExpression = BinaryExpression;\n\tvar BlockStatement = (function () {\n\t    function BlockStatement(body) {\n\t        this.type = syntax_1.Syntax.BlockStatement;\n\t        this.body = body;\n\t    }\n\t    return BlockStatement;\n\t}());\n\texports.BlockStatement = BlockStatement;\n\tvar BreakStatement = (function () {\n\t    function BreakStatement(label) {\n\t        this.type = syntax_1.Syntax.BreakStatement;\n\t        this.label = label;\n\t    }\n\t    return BreakStatement;\n\t}());\n\texports.BreakStatement = BreakStatement;\n\tvar CallExpression = (function () {\n\t    function CallExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.CallExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return CallExpression;\n\t}());\n\texports.CallExpression = CallExpression;\n\tvar CatchClause = (function () {\n\t    function CatchClause(param, body) {\n\t        this.type = syntax_1.Syntax.CatchClause;\n\t        this.param = param;\n\t        this.body = body;\n\t    }\n\t    return CatchClause;\n\t}());\n\texports.CatchClause = CatchClause;\n\tvar ClassBody = (function () {\n\t    function ClassBody(body) {\n\t        this.type = syntax_1.Syntax.ClassBody;\n\t        this.body = body;\n\t    }\n\t    return ClassBody;\n\t}());\n\texports.ClassBody = ClassBody;\n\tvar ClassDeclaration = (function () {\n\t    function ClassDeclaration(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassDeclaration;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassDeclaration;\n\t}());\n\texports.ClassDeclaration = ClassDeclaration;\n\tvar ClassExpression = (function () {\n\t    function ClassExpression(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassExpression;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassExpression;\n\t}());\n\texports.ClassExpression = ClassExpression;\n\tvar ComputedMemberExpression = (function () {\n\t    function ComputedMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = true;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return ComputedMemberExpression;\n\t}());\n\texports.ComputedMemberExpression = ComputedMemberExpression;\n\tvar ConditionalExpression = (function () {\n\t    function ConditionalExpression(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.ConditionalExpression;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return ConditionalExpression;\n\t}());\n\texports.ConditionalExpression = ConditionalExpression;\n\tvar ContinueStatement = (function () {\n\t    function ContinueStatement(label) {\n\t        this.type = syntax_1.Syntax.ContinueStatement;\n\t        this.label = label;\n\t    }\n\t    return ContinueStatement;\n\t}());\n\texports.ContinueStatement = ContinueStatement;\n\tvar DebuggerStatement = (function () {\n\t    function DebuggerStatement() {\n\t        this.type = syntax_1.Syntax.DebuggerStatement;\n\t    }\n\t    return DebuggerStatement;\n\t}());\n\texports.DebuggerStatement = DebuggerStatement;\n\tvar Directive = (function () {\n\t    function Directive(expression, directive) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t        this.directive = directive;\n\t    }\n\t    return Directive;\n\t}());\n\texports.Directive = Directive;\n\tvar DoWhileStatement = (function () {\n\t    function DoWhileStatement(body, test) {\n\t        this.type = syntax_1.Syntax.DoWhileStatement;\n\t        this.body = body;\n\t        this.test = test;\n\t    }\n\t    return DoWhileStatement;\n\t}());\n\texports.DoWhileStatement = DoWhileStatement;\n\tvar EmptyStatement = (function () {\n\t    function EmptyStatement() {\n\t        this.type = syntax_1.Syntax.EmptyStatement;\n\t    }\n\t    return EmptyStatement;\n\t}());\n\texports.EmptyStatement = EmptyStatement;\n\tvar ExportAllDeclaration = (function () {\n\t    function ExportAllDeclaration(source) {\n\t        this.type = syntax_1.Syntax.ExportAllDeclaration;\n\t        this.source = source;\n\t    }\n\t    return ExportAllDeclaration;\n\t}());\n\texports.ExportAllDeclaration = ExportAllDeclaration;\n\tvar ExportDefaultDeclaration = (function () {\n\t    function ExportDefaultDeclaration(declaration) {\n\t        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n\t        this.declaration = declaration;\n\t    }\n\t    return ExportDefaultDeclaration;\n\t}());\n\texports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\tvar ExportNamedDeclaration = (function () {\n\t    function ExportNamedDeclaration(declaration, specifiers, source) {\n\t        this.type = syntax_1.Syntax.ExportNamedDeclaration;\n\t        this.declaration = declaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ExportNamedDeclaration;\n\t}());\n\texports.ExportNamedDeclaration = ExportNamedDeclaration;\n\tvar ExportSpecifier = (function () {\n\t    function ExportSpecifier(local, exported) {\n\t        this.type = syntax_1.Syntax.ExportSpecifier;\n\t        this.exported = exported;\n\t        this.local = local;\n\t    }\n\t    return ExportSpecifier;\n\t}());\n\texports.ExportSpecifier = ExportSpecifier;\n\tvar ExpressionStatement = (function () {\n\t    function ExpressionStatement(expression) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t    }\n\t    return ExpressionStatement;\n\t}());\n\texports.ExpressionStatement = ExpressionStatement;\n\tvar ForInStatement = (function () {\n\t    function ForInStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForInStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t        this.each = false;\n\t    }\n\t    return ForInStatement;\n\t}());\n\texports.ForInStatement = ForInStatement;\n\tvar ForOfStatement = (function () {\n\t    function ForOfStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForOfStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t    }\n\t    return ForOfStatement;\n\t}());\n\texports.ForOfStatement = ForOfStatement;\n\tvar ForStatement = (function () {\n\t    function ForStatement(init, test, update, body) {\n\t        this.type = syntax_1.Syntax.ForStatement;\n\t        this.init = init;\n\t        this.test = test;\n\t        this.update = update;\n\t        this.body = body;\n\t    }\n\t    return ForStatement;\n\t}());\n\texports.ForStatement = ForStatement;\n\tvar FunctionDeclaration = (function () {\n\t    function FunctionDeclaration(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t    }\n\t    return FunctionDeclaration;\n\t}());\n\texports.FunctionDeclaration = FunctionDeclaration;\n\tvar FunctionExpression = (function () {\n\t    function FunctionExpression(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t    }\n\t    return FunctionExpression;\n\t}());\n\texports.FunctionExpression = FunctionExpression;\n\tvar Identifier = (function () {\n\t    function Identifier(name) {\n\t        this.type = syntax_1.Syntax.Identifier;\n\t        this.name = name;\n\t    }\n\t    return Identifier;\n\t}());\n\texports.Identifier = Identifier;\n\tvar IfStatement = (function () {\n\t    function IfStatement(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.IfStatement;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return IfStatement;\n\t}());\n\texports.IfStatement = IfStatement;\n\tvar ImportDeclaration = (function () {\n\t    function ImportDeclaration(specifiers, source) {\n\t        this.type = syntax_1.Syntax.ImportDeclaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ImportDeclaration;\n\t}());\n\texports.ImportDeclaration = ImportDeclaration;\n\tvar ImportDefaultSpecifier = (function () {\n\t    function ImportDefaultSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportDefaultSpecifier;\n\t}());\n\texports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\tvar ImportNamespaceSpecifier = (function () {\n\t    function ImportNamespaceSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportNamespaceSpecifier;\n\t}());\n\texports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\tvar ImportSpecifier = (function () {\n\t    function ImportSpecifier(local, imported) {\n\t        this.type = syntax_1.Syntax.ImportSpecifier;\n\t        this.local = local;\n\t        this.imported = imported;\n\t    }\n\t    return ImportSpecifier;\n\t}());\n\texports.ImportSpecifier = ImportSpecifier;\n\tvar LabeledStatement = (function () {\n\t    function LabeledStatement(label, body) {\n\t        this.type = syntax_1.Syntax.LabeledStatement;\n\t        this.label = label;\n\t        this.body = body;\n\t    }\n\t    return LabeledStatement;\n\t}());\n\texports.LabeledStatement = LabeledStatement;\n\tvar Literal = (function () {\n\t    function Literal(value, raw) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return Literal;\n\t}());\n\texports.Literal = Literal;\n\tvar MetaProperty = (function () {\n\t    function MetaProperty(meta, property) {\n\t        this.type = syntax_1.Syntax.MetaProperty;\n\t        this.meta = meta;\n\t        this.property = property;\n\t    }\n\t    return MetaProperty;\n\t}());\n\texports.MetaProperty = MetaProperty;\n\tvar MethodDefinition = (function () {\n\t    function MethodDefinition(key, computed, value, kind, isStatic) {\n\t        this.type = syntax_1.Syntax.MethodDefinition;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.static = isStatic;\n\t    }\n\t    return MethodDefinition;\n\t}());\n\texports.MethodDefinition = MethodDefinition;\n\tvar NewExpression = (function () {\n\t    function NewExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.NewExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return NewExpression;\n\t}());\n\texports.NewExpression = NewExpression;\n\tvar ObjectExpression = (function () {\n\t    function ObjectExpression(properties) {\n\t        this.type = syntax_1.Syntax.ObjectExpression;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectExpression;\n\t}());\n\texports.ObjectExpression = ObjectExpression;\n\tvar ObjectPattern = (function () {\n\t    function ObjectPattern(properties) {\n\t        this.type = syntax_1.Syntax.ObjectPattern;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectPattern;\n\t}());\n\texports.ObjectPattern = ObjectPattern;\n\tvar Program = (function () {\n\t    function Program(body, sourceType) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = sourceType;\n\t    }\n\t    return Program;\n\t}());\n\texports.Program = Program;\n\tvar Property = (function () {\n\t    function Property(kind, key, computed, value, method, shorthand) {\n\t        this.type = syntax_1.Syntax.Property;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.method = method;\n\t        this.shorthand = shorthand;\n\t    }\n\t    return Property;\n\t}());\n\texports.Property = Property;\n\tvar RegexLiteral = (function () {\n\t    function RegexLiteral(value, raw, regex) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t        this.regex = regex;\n\t    }\n\t    return RegexLiteral;\n\t}());\n\texports.RegexLiteral = RegexLiteral;\n\tvar RestElement = (function () {\n\t    function RestElement(argument) {\n\t        this.type = syntax_1.Syntax.RestElement;\n\t        this.argument = argument;\n\t    }\n\t    return RestElement;\n\t}());\n\texports.RestElement = RestElement;\n\tvar ReturnStatement = (function () {\n\t    function ReturnStatement(argument) {\n\t        this.type = syntax_1.Syntax.ReturnStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ReturnStatement;\n\t}());\n\texports.ReturnStatement = ReturnStatement;\n\tvar SequenceExpression = (function () {\n\t    function SequenceExpression(expressions) {\n\t        this.type = syntax_1.Syntax.SequenceExpression;\n\t        this.expressions = expressions;\n\t    }\n\t    return SequenceExpression;\n\t}());\n\texports.SequenceExpression = SequenceExpression;\n\tvar SpreadElement = (function () {\n\t    function SpreadElement(argument) {\n\t        this.type = syntax_1.Syntax.SpreadElement;\n\t        this.argument = argument;\n\t    }\n\t    return SpreadElement;\n\t}());\n\texports.SpreadElement = SpreadElement;\n\tvar StaticMemberExpression = (function () {\n\t    function StaticMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = false;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return StaticMemberExpression;\n\t}());\n\texports.StaticMemberExpression = StaticMemberExpression;\n\tvar Super = (function () {\n\t    function Super() {\n\t        this.type = syntax_1.Syntax.Super;\n\t    }\n\t    return Super;\n\t}());\n\texports.Super = Super;\n\tvar SwitchCase = (function () {\n\t    function SwitchCase(test, consequent) {\n\t        this.type = syntax_1.Syntax.SwitchCase;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t    }\n\t    return SwitchCase;\n\t}());\n\texports.SwitchCase = SwitchCase;\n\tvar SwitchStatement = (function () {\n\t    function SwitchStatement(discriminant, cases) {\n\t        this.type = syntax_1.Syntax.SwitchStatement;\n\t        this.discriminant = discriminant;\n\t        this.cases = cases;\n\t    }\n\t    return SwitchStatement;\n\t}());\n\texports.SwitchStatement = SwitchStatement;\n\tvar TaggedTemplateExpression = (function () {\n\t    function TaggedTemplateExpression(tag, quasi) {\n\t        this.type = syntax_1.Syntax.TaggedTemplateExpression;\n\t        this.tag = tag;\n\t        this.quasi = quasi;\n\t    }\n\t    return TaggedTemplateExpression;\n\t}());\n\texports.TaggedTemplateExpression = TaggedTemplateExpression;\n\tvar TemplateElement = (function () {\n\t    function TemplateElement(value, tail) {\n\t        this.type = syntax_1.Syntax.TemplateElement;\n\t        this.value = value;\n\t        this.tail = tail;\n\t    }\n\t    return TemplateElement;\n\t}());\n\texports.TemplateElement = TemplateElement;\n\tvar TemplateLiteral = (function () {\n\t    function TemplateLiteral(quasis, expressions) {\n\t        this.type = syntax_1.Syntax.TemplateLiteral;\n\t        this.quasis = quasis;\n\t        this.expressions = expressions;\n\t    }\n\t    return TemplateLiteral;\n\t}());\n\texports.TemplateLiteral = TemplateLiteral;\n\tvar ThisExpression = (function () {\n\t    function ThisExpression() {\n\t        this.type = syntax_1.Syntax.ThisExpression;\n\t    }\n\t    return ThisExpression;\n\t}());\n\texports.ThisExpression = ThisExpression;\n\tvar ThrowStatement = (function () {\n\t    function ThrowStatement(argument) {\n\t        this.type = syntax_1.Syntax.ThrowStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ThrowStatement;\n\t}());\n\texports.ThrowStatement = ThrowStatement;\n\tvar TryStatement = (function () {\n\t    function TryStatement(block, handler, finalizer) {\n\t        this.type = syntax_1.Syntax.TryStatement;\n\t        this.block = block;\n\t        this.handler = handler;\n\t        this.finalizer = finalizer;\n\t    }\n\t    return TryStatement;\n\t}());\n\texports.TryStatement = TryStatement;\n\tvar UnaryExpression = (function () {\n\t    function UnaryExpression(operator, argument) {\n\t        this.type = syntax_1.Syntax.UnaryExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = true;\n\t    }\n\t    return UnaryExpression;\n\t}());\n\texports.UnaryExpression = UnaryExpression;\n\tvar UpdateExpression = (function () {\n\t    function UpdateExpression(operator, argument, prefix) {\n\t        this.type = syntax_1.Syntax.UpdateExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = prefix;\n\t    }\n\t    return UpdateExpression;\n\t}());\n\texports.UpdateExpression = UpdateExpression;\n\tvar VariableDeclaration = (function () {\n\t    function VariableDeclaration(declarations, kind) {\n\t        this.type = syntax_1.Syntax.VariableDeclaration;\n\t        this.declarations = declarations;\n\t        this.kind = kind;\n\t    }\n\t    return VariableDeclaration;\n\t}());\n\texports.VariableDeclaration = VariableDeclaration;\n\tvar VariableDeclarator = (function () {\n\t    function VariableDeclarator(id, init) {\n\t        this.type = syntax_1.Syntax.VariableDeclarator;\n\t        this.id = id;\n\t        this.init = init;\n\t    }\n\t    return VariableDeclarator;\n\t}());\n\texports.VariableDeclarator = VariableDeclarator;\n\tvar WhileStatement = (function () {\n\t    function WhileStatement(test, body) {\n\t        this.type = syntax_1.Syntax.WhileStatement;\n\t        this.test = test;\n\t        this.body = body;\n\t    }\n\t    return WhileStatement;\n\t}());\n\texports.WhileStatement = WhileStatement;\n\tvar WithStatement = (function () {\n\t    function WithStatement(object, body) {\n\t        this.type = syntax_1.Syntax.WithStatement;\n\t        this.object = object;\n\t        this.body = body;\n\t    }\n\t    return WithStatement;\n\t}());\n\texports.WithStatement = WithStatement;\n\tvar YieldExpression = (function () {\n\t    function YieldExpression(argument, delegate) {\n\t        this.type = syntax_1.Syntax.YieldExpression;\n\t        this.argument = argument;\n\t        this.delegate = delegate;\n\t    }\n\t    return YieldExpression;\n\t}());\n\texports.YieldExpression = YieldExpression;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n/* istanbul ignore next */\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar character_1 = __webpack_require__(9);\n\tvar token_1 = __webpack_require__(7);\n\tvar parser_1 = __webpack_require__(3);\n\tvar xhtml_entities_1 = __webpack_require__(12);\n\tvar jsx_syntax_1 = __webpack_require__(13);\n\tvar Node = __webpack_require__(10);\n\tvar JSXNode = __webpack_require__(14);\n\tvar JSXToken;\n\t(function (JSXToken) {\n\t    JSXToken[JSXToken[\"Identifier\"] = 100] = \"Identifier\";\n\t    JSXToken[JSXToken[\"Text\"] = 101] = \"Text\";\n\t})(JSXToken || (JSXToken = {}));\n\ttoken_1.TokenName[JSXToken.Identifier] = 'JSXIdentifier';\n\ttoken_1.TokenName[JSXToken.Text] = 'JSXText';\n\t// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\tfunction getQualifiedElementName(elementName) {\n\t    var qualifiedName;\n\t    switch (elementName.type) {\n\t        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n\t            var id = (elementName);\n\t            qualifiedName = id.name;\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n\t            var ns = (elementName);\n\t            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\n\t                getQualifiedElementName(ns.name);\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n\t            var expr = (elementName);\n\t            qualifiedName = getQualifiedElementName(expr.object) + '.' +\n\t                getQualifiedElementName(expr.property);\n\t            break;\n\t    }\n\t    return qualifiedName;\n\t}\n\tvar JSXParser = (function (_super) {\n\t    __extends(JSXParser, _super);\n\t    function JSXParser(code, options, delegate) {\n\t        _super.call(this, code, options, delegate);\n\t    }\n\t    JSXParser.prototype.parsePrimaryExpression = function () {\n\t        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n\t    };\n\t    JSXParser.prototype.startJSX = function () {\n\t        // Unwind the scanner before the lookahead token.\n\t        this.scanner.index = this.startMarker.index;\n\t        this.scanner.lineNumber = this.startMarker.lineNumber;\n\t        this.scanner.lineStart = this.startMarker.lineStart;\n\t    };\n\t    JSXParser.prototype.finishJSX = function () {\n\t        // Prime the next lookahead.\n\t        this.nextToken();\n\t    };\n\t    JSXParser.prototype.reenterJSX = function () {\n\t        this.startJSX();\n\t        this.expectJSX('}');\n\t        // Pop the closing '}' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t    };\n\t    JSXParser.prototype.createJSXNode = function () {\n\t        this.collectComments();\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.createJSXChildNode = function () {\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.scanXHTMLEntity = function (quote) {\n\t        var result = '&';\n\t        var valid = true;\n\t        var terminated = false;\n\t        var numeric = false;\n\t        var hex = false;\n\t        while (!this.scanner.eof() && valid && !terminated) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === quote) {\n\t                break;\n\t            }\n\t            terminated = (ch === ';');\n\t            result += ch;\n\t            ++this.scanner.index;\n\t            if (!terminated) {\n\t                switch (result.length) {\n\t                    case 2:\n\t                        // e.g. '&#123;'\n\t                        numeric = (ch === '#');\n\t                        break;\n\t                    case 3:\n\t                        if (numeric) {\n\t                            // e.g. '&#x41;'\n\t                            hex = (ch === 'x');\n\t                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n\t                            numeric = numeric && !hex;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n\t                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n\t                        break;\n\t                }\n\t            }\n\t        }\n\t        if (valid && terminated && result.length > 2) {\n\t            // e.g. '&#x41;' becomes just '#x41'\n\t            var str = result.substr(1, result.length - 2);\n\t            if (numeric && str.length > 1) {\n\t                result = String.fromCharCode(parseInt(str.substr(1), 10));\n\t            }\n\t            else if (hex && str.length > 2) {\n\t                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n\t            }\n\t            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n\t                result = xhtml_entities_1.XHTMLEntities[str];\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\t    JSXParser.prototype.lexJSX = function () {\n\t        var cp = this.scanner.source.charCodeAt(this.scanner.index);\n\t        // < > / : = { }\n\t        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n\t            var value = this.scanner.source[this.scanner.index++];\n\t            return {\n\t                type: token_1.Token.Punctuator,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index - 1,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // \" '\n\t        if (cp === 34 || cp === 39) {\n\t            var start = this.scanner.index;\n\t            var quote = this.scanner.source[this.scanner.index++];\n\t            var str = '';\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source[this.scanner.index++];\n\t                if (ch === quote) {\n\t                    break;\n\t                }\n\t                else if (ch === '&') {\n\t                    str += this.scanXHTMLEntity(quote);\n\t                }\n\t                else {\n\t                    str += ch;\n\t                }\n\t            }\n\t            return {\n\t                type: token_1.Token.StringLiteral,\n\t                value: str,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // ... or .\n\t        if (cp === 46) {\n\t            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n\t            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n\t            var value = (n1 === 46 && n2 === 46) ? '...' : '.';\n\t            var start = this.scanner.index;\n\t            this.scanner.index += value.length;\n\t            return {\n\t                type: token_1.Token.Punctuator,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // `\n\t        if (cp === 96) {\n\t            // Only placeholder, since it will be rescanned as a real assignment expression.\n\t            return {\n\t                type: token_1.Token.Template,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // Identifer can not contain backslash (char code 92).\n\t        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {\n\t            var start = this.scanner.index;\n\t            ++this.scanner.index;\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\t                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {\n\t                    ++this.scanner.index;\n\t                }\n\t                else if (ch === 45) {\n\t                    // Hyphen (char code 45) can be part of an identifier.\n\t                    ++this.scanner.index;\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            var id = this.scanner.source.slice(start, this.scanner.index);\n\t            return {\n\t                type: JSXToken.Identifier,\n\t                value: id,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        this.scanner.throwUnexpectedToken();\n\t    };\n\t    JSXParser.prototype.nextJSXToken = function () {\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var token = this.lexJSX();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        if (this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.nextJSXText = function () {\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.lineNumber = this.scanner.lineNumber;\n\t        this.startMarker.lineStart = this.scanner.lineStart;\n\t        var start = this.scanner.index;\n\t        var text = '';\n\t        while (!this.scanner.eof()) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === '{' || ch === '<') {\n\t                break;\n\t            }\n\t            ++this.scanner.index;\n\t            text += ch;\n\t            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.scanner.lineNumber;\n\t                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n\t                    ++this.scanner.index;\n\t                }\n\t                this.scanner.lineStart = this.scanner.index;\n\t            }\n\t        }\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        var token = {\n\t            type: JSXToken.Text,\n\t            value: text,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart,\n\t            start: start,\n\t            end: this.scanner.index\n\t        };\n\t        if ((text.length > 0) && this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.peekJSXToken = function () {\n\t        var previousIndex = this.scanner.index;\n\t        var previousLineNumber = this.scanner.lineNumber;\n\t        var previousLineStart = this.scanner.lineStart;\n\t        this.scanner.scanComments();\n\t        var next = this.lexJSX();\n\t        this.scanner.index = previousIndex;\n\t        this.scanner.lineNumber = previousLineNumber;\n\t        this.scanner.lineStart = previousLineStart;\n\t        return next;\n\t    };\n\t    // Expect the next JSX token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    JSXParser.prototype.expectJSX = function (value) {\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== token_1.Token.Punctuator || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next JSX token matches the specified punctuator.\n\t    JSXParser.prototype.matchJSX = function (value) {\n\t        var next = this.peekJSXToken();\n\t        return next.type === token_1.Token.Punctuator && next.value === value;\n\t    };\n\t    JSXParser.prototype.parseJSXIdentifier = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== JSXToken.Identifier) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n\t    };\n\t    JSXParser.prototype.parseJSXElementName = function () {\n\t        var node = this.createJSXNode();\n\t        var elementName = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = elementName;\n\t            this.expectJSX(':');\n\t            var name_1 = this.parseJSXIdentifier();\n\t            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n\t        }\n\t        else if (this.matchJSX('.')) {\n\t            while (this.matchJSX('.')) {\n\t                var object = elementName;\n\t                this.expectJSX('.');\n\t                var property = this.parseJSXIdentifier();\n\t                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n\t            }\n\t        }\n\t        return elementName;\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeName = function () {\n\t        var node = this.createJSXNode();\n\t        var attributeName;\n\t        var identifier = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = identifier;\n\t            this.expectJSX(':');\n\t            var name_2 = this.parseJSXIdentifier();\n\t            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n\t        }\n\t        else {\n\t            attributeName = identifier;\n\t        }\n\t        return attributeName;\n\t    };\n\t    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== token_1.Token.StringLiteral) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.finishJSX();\n\t        if (this.match('}')) {\n\t            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n\t        }\n\t        var expression = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeValue = function () {\n\t        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\n\t            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n\t    };\n\t    JSXParser.prototype.parseJSXNameValueAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var name = this.parseJSXAttributeName();\n\t        var value = null;\n\t        if (this.matchJSX('=')) {\n\t            this.expectJSX('=');\n\t            value = this.parseJSXAttributeValue();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n\t    };\n\t    JSXParser.prototype.parseJSXSpreadAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.expectJSX('...');\n\t        this.finishJSX();\n\t        var argument = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributes = function () {\n\t        var attributes = [];\n\t        while (!this.matchJSX('/') && !this.matchJSX('>')) {\n\t            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\n\t                this.parseJSXNameValueAttribute();\n\t            attributes.push(attribute);\n\t        }\n\t        return attributes;\n\t    };\n\t    JSXParser.prototype.parseJSXOpeningElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXBoundaryElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        if (this.matchJSX('/')) {\n\t            this.expectJSX('/');\n\t            var name_3 = this.parseJSXElementName();\n\t            this.expectJSX('>');\n\t            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n\t        }\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXEmptyExpression = function () {\n\t        var node = this.createJSXChildNode();\n\t        this.collectComments();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.lineNumber = this.scanner.lineNumber;\n\t        this.lastMarker.lineStart = this.scanner.lineStart;\n\t        return this.finalize(node, new JSXNode.JSXEmptyExpression());\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionContainer = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        var expression;\n\t        if (this.matchJSX('}')) {\n\t            expression = this.parseJSXEmptyExpression();\n\t            this.expectJSX('}');\n\t        }\n\t        else {\n\t            this.finishJSX();\n\t            expression = this.parseAssignmentExpression();\n\t            this.reenterJSX();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXChildren = function () {\n\t        var children = [];\n\t        while (!this.scanner.eof()) {\n\t            var node = this.createJSXChildNode();\n\t            var token = this.nextJSXText();\n\t            if (token.start < token.end) {\n\t                var raw = this.getTokenRaw(token);\n\t                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n\t                children.push(child);\n\t            }\n\t            if (this.scanner.source[this.scanner.index] === '{') {\n\t                var container = this.parseJSXExpressionContainer();\n\t                children.push(container);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return children;\n\t    };\n\t    JSXParser.prototype.parseComplexJSXElement = function (el) {\n\t        var stack = [];\n\t        while (!this.scanner.eof()) {\n\t            el.children = el.children.concat(this.parseJSXChildren());\n\t            var node = this.createJSXChildNode();\n\t            var element = this.parseJSXBoundaryElement();\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n\t                var opening = (element);\n\t                if (opening.selfClosing) {\n\t                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    stack.push(el);\n\t                    el = { node: node, opening: opening, closing: null, children: [] };\n\t                }\n\t            }\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n\t                el.closing = (element);\n\t                var open_1 = getQualifiedElementName(el.opening.name);\n\t                var close_1 = getQualifiedElementName(el.closing.name);\n\t                if (open_1 !== close_1) {\n\t                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n\t                }\n\t                if (stack.length > 0) {\n\t                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n\t                    el = stack.pop();\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t    JSXParser.prototype.parseJSXElement = function () {\n\t        var node = this.createJSXNode();\n\t        var opening = this.parseJSXOpeningElement();\n\t        var children = [];\n\t        var closing = null;\n\t        if (!opening.selfClosing) {\n\t            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });\n\t            children = el.children;\n\t            closing = el.closing;\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n\t    };\n\t    JSXParser.prototype.parseJSXRoot = function () {\n\t        // Pop the opening '<' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t        this.startJSX();\n\t        var element = this.parseJSXElement();\n\t        this.finishJSX();\n\t        return element;\n\t    };\n\t    return JSXParser;\n\t}(parser_1.Parser));\n\texports.JSXParser = JSXParser;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\t\"use strict\";\n\texports.XHTMLEntities = {\n\t    quot: '\\u0022',\n\t    amp: '\\u0026',\n\t    apos: '\\u0027',\n\t    gt: '\\u003E',\n\t    nbsp: '\\u00A0',\n\t    iexcl: '\\u00A1',\n\t    cent: '\\u00A2',\n\t    pound: '\\u00A3',\n\t    curren: '\\u00A4',\n\t    yen: '\\u00A5',\n\t    brvbar: '\\u00A6',\n\t    sect: '\\u00A7',\n\t    uml: '\\u00A8',\n\t    copy: '\\u00A9',\n\t    ordf: '\\u00AA',\n\t    laquo: '\\u00AB',\n\t    not: '\\u00AC',\n\t    shy: '\\u00AD',\n\t    reg: '\\u00AE',\n\t    macr: '\\u00AF',\n\t    deg: '\\u00B0',\n\t    plusmn: '\\u00B1',\n\t    sup2: '\\u00B2',\n\t    sup3: '\\u00B3',\n\t    acute: '\\u00B4',\n\t    micro: '\\u00B5',\n\t    para: '\\u00B6',\n\t    middot: '\\u00B7',\n\t    cedil: '\\u00B8',\n\t    sup1: '\\u00B9',\n\t    ordm: '\\u00BA',\n\t    raquo: '\\u00BB',\n\t    frac14: '\\u00BC',\n\t    frac12: '\\u00BD',\n\t    frac34: '\\u00BE',\n\t    iquest: '\\u00BF',\n\t    Agrave: '\\u00C0',\n\t    Aacute: '\\u00C1',\n\t    Acirc: '\\u00C2',\n\t    Atilde: '\\u00C3',\n\t    Auml: '\\u00C4',\n\t    Aring: '\\u00C5',\n\t    AElig: '\\u00C6',\n\t    Ccedil: '\\u00C7',\n\t    Egrave: '\\u00C8',\n\t    Eacute: '\\u00C9',\n\t    Ecirc: '\\u00CA',\n\t    Euml: '\\u00CB',\n\t    Igrave: '\\u00CC',\n\t    Iacute: '\\u00CD',\n\t    Icirc: '\\u00CE',\n\t    Iuml: '\\u00CF',\n\t    ETH: '\\u00D0',\n\t    Ntilde: '\\u00D1',\n\t    Ograve: '\\u00D2',\n\t    Oacute: '\\u00D3',\n\t    Ocirc: '\\u00D4',\n\t    Otilde: '\\u00D5',\n\t    Ouml: '\\u00D6',\n\t    times: '\\u00D7',\n\t    Oslash: '\\u00D8',\n\t    Ugrave: '\\u00D9',\n\t    Uacute: '\\u00DA',\n\t    Ucirc: '\\u00DB',\n\t    Uuml: '\\u00DC',\n\t    Yacute: '\\u00DD',\n\t    THORN: '\\u00DE',\n\t    szlig: '\\u00DF',\n\t    agrave: '\\u00E0',\n\t    aacute: '\\u00E1',\n\t    acirc: '\\u00E2',\n\t    atilde: '\\u00E3',\n\t    auml: '\\u00E4',\n\t    aring: '\\u00E5',\n\t    aelig: '\\u00E6',\n\t    ccedil: '\\u00E7',\n\t    egrave: '\\u00E8',\n\t    eacute: '\\u00E9',\n\t    ecirc: '\\u00EA',\n\t    euml: '\\u00EB',\n\t    igrave: '\\u00EC',\n\t    iacute: '\\u00ED',\n\t    icirc: '\\u00EE',\n\t    iuml: '\\u00EF',\n\t    eth: '\\u00F0',\n\t    ntilde: '\\u00F1',\n\t    ograve: '\\u00F2',\n\t    oacute: '\\u00F3',\n\t    ocirc: '\\u00F4',\n\t    otilde: '\\u00F5',\n\t    ouml: '\\u00F6',\n\t    divide: '\\u00F7',\n\t    oslash: '\\u00F8',\n\t    ugrave: '\\u00F9',\n\t    uacute: '\\u00FA',\n\t    ucirc: '\\u00FB',\n\t    uuml: '\\u00FC',\n\t    yacute: '\\u00FD',\n\t    thorn: '\\u00FE',\n\t    yuml: '\\u00FF',\n\t    OElig: '\\u0152',\n\t    oelig: '\\u0153',\n\t    Scaron: '\\u0160',\n\t    scaron: '\\u0161',\n\t    Yuml: '\\u0178',\n\t    fnof: '\\u0192',\n\t    circ: '\\u02C6',\n\t    tilde: '\\u02DC',\n\t    Alpha: '\\u0391',\n\t    Beta: '\\u0392',\n\t    Gamma: '\\u0393',\n\t    Delta: '\\u0394',\n\t    Epsilon: '\\u0395',\n\t    Zeta: '\\u0396',\n\t    Eta: '\\u0397',\n\t    Theta: '\\u0398',\n\t    Iota: '\\u0399',\n\t    Kappa: '\\u039A',\n\t    Lambda: '\\u039B',\n\t    Mu: '\\u039C',\n\t    Nu: '\\u039D',\n\t    Xi: '\\u039E',\n\t    Omicron: '\\u039F',\n\t    Pi: '\\u03A0',\n\t    Rho: '\\u03A1',\n\t    Sigma: '\\u03A3',\n\t    Tau: '\\u03A4',\n\t    Upsilon: '\\u03A5',\n\t    Phi: '\\u03A6',\n\t    Chi: '\\u03A7',\n\t    Psi: '\\u03A8',\n\t    Omega: '\\u03A9',\n\t    alpha: '\\u03B1',\n\t    beta: '\\u03B2',\n\t    gamma: '\\u03B3',\n\t    delta: '\\u03B4',\n\t    epsilon: '\\u03B5',\n\t    zeta: '\\u03B6',\n\t    eta: '\\u03B7',\n\t    theta: '\\u03B8',\n\t    iota: '\\u03B9',\n\t    kappa: '\\u03BA',\n\t    lambda: '\\u03BB',\n\t    mu: '\\u03BC',\n\t    nu: '\\u03BD',\n\t    xi: '\\u03BE',\n\t    omicron: '\\u03BF',\n\t    pi: '\\u03C0',\n\t    rho: '\\u03C1',\n\t    sigmaf: '\\u03C2',\n\t    sigma: '\\u03C3',\n\t    tau: '\\u03C4',\n\t    upsilon: '\\u03C5',\n\t    phi: '\\u03C6',\n\t    chi: '\\u03C7',\n\t    psi: '\\u03C8',\n\t    omega: '\\u03C9',\n\t    thetasym: '\\u03D1',\n\t    upsih: '\\u03D2',\n\t    piv: '\\u03D6',\n\t    ensp: '\\u2002',\n\t    emsp: '\\u2003',\n\t    thinsp: '\\u2009',\n\t    zwnj: '\\u200C',\n\t    zwj: '\\u200D',\n\t    lrm: '\\u200E',\n\t    rlm: '\\u200F',\n\t    ndash: '\\u2013',\n\t    mdash: '\\u2014',\n\t    lsquo: '\\u2018',\n\t    rsquo: '\\u2019',\n\t    sbquo: '\\u201A',\n\t    ldquo: '\\u201C',\n\t    rdquo: '\\u201D',\n\t    bdquo: '\\u201E',\n\t    dagger: '\\u2020',\n\t    Dagger: '\\u2021',\n\t    bull: '\\u2022',\n\t    hellip: '\\u2026',\n\t    permil: '\\u2030',\n\t    prime: '\\u2032',\n\t    Prime: '\\u2033',\n\t    lsaquo: '\\u2039',\n\t    rsaquo: '\\u203A',\n\t    oline: '\\u203E',\n\t    frasl: '\\u2044',\n\t    euro: '\\u20AC',\n\t    image: '\\u2111',\n\t    weierp: '\\u2118',\n\t    real: '\\u211C',\n\t    trade: '\\u2122',\n\t    alefsym: '\\u2135',\n\t    larr: '\\u2190',\n\t    uarr: '\\u2191',\n\t    rarr: '\\u2192',\n\t    darr: '\\u2193',\n\t    harr: '\\u2194',\n\t    crarr: '\\u21B5',\n\t    lArr: '\\u21D0',\n\t    uArr: '\\u21D1',\n\t    rArr: '\\u21D2',\n\t    dArr: '\\u21D3',\n\t    hArr: '\\u21D4',\n\t    forall: '\\u2200',\n\t    part: '\\u2202',\n\t    exist: '\\u2203',\n\t    empty: '\\u2205',\n\t    nabla: '\\u2207',\n\t    isin: '\\u2208',\n\t    notin: '\\u2209',\n\t    ni: '\\u220B',\n\t    prod: '\\u220F',\n\t    sum: '\\u2211',\n\t    minus: '\\u2212',\n\t    lowast: '\\u2217',\n\t    radic: '\\u221A',\n\t    prop: '\\u221D',\n\t    infin: '\\u221E',\n\t    ang: '\\u2220',\n\t    and: '\\u2227',\n\t    or: '\\u2228',\n\t    cap: '\\u2229',\n\t    cup: '\\u222A',\n\t    int: '\\u222B',\n\t    there4: '\\u2234',\n\t    sim: '\\u223C',\n\t    cong: '\\u2245',\n\t    asymp: '\\u2248',\n\t    ne: '\\u2260',\n\t    equiv: '\\u2261',\n\t    le: '\\u2264',\n\t    ge: '\\u2265',\n\t    sub: '\\u2282',\n\t    sup: '\\u2283',\n\t    nsub: '\\u2284',\n\t    sube: '\\u2286',\n\t    supe: '\\u2287',\n\t    oplus: '\\u2295',\n\t    otimes: '\\u2297',\n\t    perp: '\\u22A5',\n\t    sdot: '\\u22C5',\n\t    lceil: '\\u2308',\n\t    rceil: '\\u2309',\n\t    lfloor: '\\u230A',\n\t    rfloor: '\\u230B',\n\t    loz: '\\u25CA',\n\t    spades: '\\u2660',\n\t    clubs: '\\u2663',\n\t    hearts: '\\u2665',\n\t    diams: '\\u2666',\n\t    lang: '\\u27E8',\n\t    rang: '\\u27E9'\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\texports.JSXSyntax = {\n\t    JSXAttribute: 'JSXAttribute',\n\t    JSXClosingElement: 'JSXClosingElement',\n\t    JSXElement: 'JSXElement',\n\t    JSXEmptyExpression: 'JSXEmptyExpression',\n\t    JSXExpressionContainer: 'JSXExpressionContainer',\n\t    JSXIdentifier: 'JSXIdentifier',\n\t    JSXMemberExpression: 'JSXMemberExpression',\n\t    JSXNamespacedName: 'JSXNamespacedName',\n\t    JSXOpeningElement: 'JSXOpeningElement',\n\t    JSXSpreadAttribute: 'JSXSpreadAttribute',\n\t    JSXText: 'JSXText'\n\t};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar jsx_syntax_1 = __webpack_require__(13);\n\tvar JSXClosingElement = (function () {\n\t    function JSXClosingElement(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n\t        this.name = name;\n\t    }\n\t    return JSXClosingElement;\n\t}());\n\texports.JSXClosingElement = JSXClosingElement;\n\tvar JSXElement = (function () {\n\t    function JSXElement(openingElement, children, closingElement) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n\t        this.openingElement = openingElement;\n\t        this.children = children;\n\t        this.closingElement = closingElement;\n\t    }\n\t    return JSXElement;\n\t}());\n\texports.JSXElement = JSXElement;\n\tvar JSXEmptyExpression = (function () {\n\t    function JSXEmptyExpression() {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n\t    }\n\t    return JSXEmptyExpression;\n\t}());\n\texports.JSXEmptyExpression = JSXEmptyExpression;\n\tvar JSXExpressionContainer = (function () {\n\t    function JSXExpressionContainer(expression) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n\t        this.expression = expression;\n\t    }\n\t    return JSXExpressionContainer;\n\t}());\n\texports.JSXExpressionContainer = JSXExpressionContainer;\n\tvar JSXIdentifier = (function () {\n\t    function JSXIdentifier(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n\t        this.name = name;\n\t    }\n\t    return JSXIdentifier;\n\t}());\n\texports.JSXIdentifier = JSXIdentifier;\n\tvar JSXMemberExpression = (function () {\n\t    function JSXMemberExpression(object, property) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return JSXMemberExpression;\n\t}());\n\texports.JSXMemberExpression = JSXMemberExpression;\n\tvar JSXAttribute = (function () {\n\t    function JSXAttribute(name, value) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n\t        this.name = name;\n\t        this.value = value;\n\t    }\n\t    return JSXAttribute;\n\t}());\n\texports.JSXAttribute = JSXAttribute;\n\tvar JSXNamespacedName = (function () {\n\t    function JSXNamespacedName(namespace, name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n\t        this.namespace = namespace;\n\t        this.name = name;\n\t    }\n\t    return JSXNamespacedName;\n\t}());\n\texports.JSXNamespacedName = JSXNamespacedName;\n\tvar JSXOpeningElement = (function () {\n\t    function JSXOpeningElement(name, selfClosing, attributes) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n\t        this.name = name;\n\t        this.selfClosing = selfClosing;\n\t        this.attributes = attributes;\n\t    }\n\t    return JSXOpeningElement;\n\t}());\n\texports.JSXOpeningElement = JSXOpeningElement;\n\tvar JSXSpreadAttribute = (function () {\n\t    function JSXSpreadAttribute(argument) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n\t        this.argument = argument;\n\t    }\n\t    return JSXSpreadAttribute;\n\t}());\n\texports.JSXSpreadAttribute = JSXSpreadAttribute;\n\tvar JSXText = (function () {\n\t    function JSXText(value, raw) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXText;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return JSXText;\n\t}());\n\texports.JSXText = JSXText;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar scanner_1 = __webpack_require__(8);\n\tvar error_handler_1 = __webpack_require__(6);\n\tvar token_1 = __webpack_require__(7);\n\tvar Reader = (function () {\n\t    function Reader() {\n\t        this.values = [];\n\t        this.curly = this.paren = -1;\n\t    }\n\t    ;\n\t    // A function following one of those tokens is an expression.\n\t    Reader.prototype.beforeFunctionExpression = function (t) {\n\t        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n\t            'return', 'case', 'delete', 'throw', 'void',\n\t            // assignment operators\n\t            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\n\t            '&=', '|=', '^=', ',',\n\t            // binary/unary operators\n\t            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n\t            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n\t            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n\t    };\n\t    ;\n\t    // Determine if forward slash (/) is an operator or part of a regular expression\n\t    // https://github.com/mozilla/sweet.js/wiki/design\n\t    Reader.prototype.isRegexStart = function () {\n\t        var previous = this.values[this.values.length - 1];\n\t        var regex = (previous !== null);\n\t        switch (previous) {\n\t            case 'this':\n\t            case ']':\n\t                regex = false;\n\t                break;\n\t            case ')':\n\t                var check = this.values[this.paren - 1];\n\t                regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');\n\t                break;\n\t            case '}':\n\t                // Dividing a function by anything makes little sense,\n\t                // but we have to check for that.\n\t                regex = false;\n\t                if (this.values[this.curly - 3] === 'function') {\n\t                    // Anonymous function, e.g. function(){} /42\n\t                    var check_1 = this.values[this.curly - 4];\n\t                    regex = check_1 ? !this.beforeFunctionExpression(check_1) : false;\n\t                }\n\t                else if (this.values[this.curly - 4] === 'function') {\n\t                    // Named function, e.g. function f(){} /42/\n\t                    var check_2 = this.values[this.curly - 5];\n\t                    regex = check_2 ? !this.beforeFunctionExpression(check_2) : true;\n\t                }\n\t        }\n\t        return regex;\n\t    };\n\t    ;\n\t    Reader.prototype.push = function (token) {\n\t        if (token.type === token_1.Token.Punctuator || token.type === token_1.Token.Keyword) {\n\t            if (token.value === '{') {\n\t                this.curly = this.values.length;\n\t            }\n\t            else if (token.value === '(') {\n\t                this.paren = this.values.length;\n\t            }\n\t            this.values.push(token.value);\n\t        }\n\t        else {\n\t            this.values.push(null);\n\t        }\n\t    };\n\t    ;\n\t    return Reader;\n\t}());\n\tvar Tokenizer = (function () {\n\t    function Tokenizer(code, config) {\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\n\t        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\n\t        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\n\t        this.buffer = [];\n\t        this.reader = new Reader();\n\t    }\n\t    ;\n\t    Tokenizer.prototype.errors = function () {\n\t        return this.errorHandler.errors;\n\t    };\n\t    ;\n\t    Tokenizer.prototype.getNextToken = function () {\n\t        if (this.buffer.length === 0) {\n\t            var comments = this.scanner.scanComments();\n\t            if (this.scanner.trackComment) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var comment = void 0;\n\t                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n\t                    comment = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: value\n\t                    };\n\t                    if (this.trackRange) {\n\t                        comment.range = e.range;\n\t                    }\n\t                    if (this.trackLoc) {\n\t                        comment.loc = e.loc;\n\t                    }\n\t                    this.buffer.push(comment);\n\t                }\n\t            }\n\t            if (!this.scanner.eof()) {\n\t                var loc = void 0;\n\t                if (this.trackLoc) {\n\t                    loc = {\n\t                        start: {\n\t                            line: this.scanner.lineNumber,\n\t                            column: this.scanner.index - this.scanner.lineStart\n\t                        },\n\t                        end: {}\n\t                    };\n\t                }\n\t                var token = void 0;\n\t                if (this.scanner.source[this.scanner.index] === '/') {\n\t                    token = this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.scanPunctuator();\n\t                }\n\t                else {\n\t                    token = this.scanner.lex();\n\t                }\n\t                this.reader.push(token);\n\t                var entry = void 0;\n\t                entry = {\n\t                    type: token_1.TokenName[token.type],\n\t                    value: this.scanner.source.slice(token.start, token.end)\n\t                };\n\t                if (this.trackRange) {\n\t                    entry.range = [token.start, token.end];\n\t                }\n\t                if (this.trackLoc) {\n\t                    loc.end = {\n\t                        line: this.scanner.lineNumber,\n\t                        column: this.scanner.index - this.scanner.lineStart\n\t                    };\n\t                    entry.loc = loc;\n\t                }\n\t                if (token.regex) {\n\t                    entry.regex = token.regex;\n\t                }\n\t                this.buffer.push(entry);\n\t            }\n\t        }\n\t        return this.buffer.shift();\n\t    };\n\t    ;\n\t    return Tokenizer;\n\t}());\n\texports.Tokenizer = Tokenizer;\n\n\n/***/ }\n/******/ ])\n});\n;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}