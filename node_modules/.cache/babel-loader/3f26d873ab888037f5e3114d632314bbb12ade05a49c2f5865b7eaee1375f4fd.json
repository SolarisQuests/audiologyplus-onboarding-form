{"ast":null,"code":"const inflection = require('inflection');\nconst pathProxy = require('path-proxy');\nconst promisifyCall = require('promisify-call');\nclass Builder {\n  constructor(baseObj, resources) {\n    this.baseObj = baseObj;\n    this.resources = resources;\n  }\n  build() {\n    Object.keys(this.resources).forEach(key => {\n      // console.log('building ' + key);\n      this.buildResource(this.resources[key]);\n    });\n  }\n  buildResource(resource) {\n    resource.links.forEach(this.buildAction, this);\n  }\n  buildAction(action) {\n    const actionName = action.title;\n    const properties = action.properties;\n    const requiredProps = action.required;\n\n    // HACKY special case for members bulk add and send MIME endpoints\n    const path = action.href.replace(/\\.json/gi, '').replace(/\\.mime/gi, '');\n    const constructor = pathProxy.pathProxy(this.baseObj, path);\n    function impl(data, fn) {\n      let requestPath = action.href;\n      const pathParams = action.href.match(/{[^}]+}/g) || [];\n      if (typeof data === 'function') {\n        fn = data;\n        data = undefined;\n      }\n      let err;\n      if (this.params.length !== pathParams.length) {\n        err = new Error(`Invalid number of params in path (expected ${pathParams.length}, got ${this.params.length}).`);\n        return fn(err);\n      }\n      this.params.forEach(param => {\n        requestPath = requestPath.replace(/{[^}]+}/, param);\n      });\n\n      // check required payload properties\n      if (requiredProps && requiredProps.length > 0) {\n        if (!data) {\n          err = new Error('Missing parameters.');\n        } else {\n          for (let i = 0; i < requiredProps.length; i++) {\n            const prop = requiredProps[i];\n            if (typeof data[prop] === 'undefined') {\n              err = new Error(`Missing parameter '${prop}'`);\n              break;\n            }\n          }\n        }\n      }\n      if (err) {\n        return fn(err);\n      }\n\n      // check payload property types\n      for (const key in properties) {\n        if (data && data[key]) {\n          const type = properties[key].type;\n          let dataType = typeof data[key];\n          if (Array.isArray(data[key])) {\n            dataType = 'array';\n          }\n          if (Array.isArray(type)) {\n            if (type.indexOf(dataType) === -1) {\n              err = new Error(`Invalid parameter type. ${key} must be of type: ${type}.`);\n              break;\n            }\n          } else if (dataType !== type) {\n            err = new Error(`Invalid parameter type. ${key} must be of type: ${type}.`);\n            break;\n          }\n        }\n      }\n      if (err) {\n        return fn(err);\n      }\n      this.client = this.base;\n      return this.client.request(action.method, requestPath, data, fn);\n    }\n    function promisifed(data, fn) {\n      return promisifyCall(this, impl, data, fn);\n    }\n    constructor.prototype[getName(actionName)] = promisifed;\n  }\n}\nfunction getName(name) {\n  name = name.toLowerCase();\n  name = inflection.dasherize(name).replace(/-/g, '_');\n  name = inflection.camelize(name, true);\n  return name;\n}\nfunction build(baseObj, resources) {\n  const b = new Builder(baseObj, resources);\n  b.build();\n}\nexports.build = build;","map":{"version":3,"names":["inflection","require","pathProxy","promisifyCall","Builder","constructor","baseObj","resources","build","Object","keys","forEach","key","buildResource","resource","links","buildAction","action","actionName","title","properties","requiredProps","required","path","href","replace","impl","data","fn","requestPath","pathParams","match","undefined","err","params","length","Error","param","i","prop","type","dataType","Array","isArray","indexOf","client","base","request","method","promisifed","prototype","getName","name","toLowerCase","dasherize","camelize","b","exports"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/mailgun-js/lib/build.js"],"sourcesContent":["const inflection = require('inflection')\nconst pathProxy = require('path-proxy')\nconst promisifyCall = require('promisify-call')\n\nclass Builder {\n  constructor (baseObj, resources) {\n    this.baseObj = baseObj\n    this.resources = resources\n  }\n\n  build () {\n    Object.keys(this.resources).forEach((key) => {\n      // console.log('building ' + key);\n      this.buildResource(this.resources[key])\n    })\n  }\n\n  buildResource (resource) {\n    resource.links.forEach(this.buildAction, this)\n  }\n\n  buildAction (action) {\n    const actionName = action.title\n    const properties = action.properties\n    const requiredProps = action.required\n\n    // HACKY special case for members bulk add and send MIME endpoints\n    const path = action.href.replace(/\\.json/gi, '').replace(/\\.mime/gi, '')\n    const constructor = pathProxy.pathProxy(this.baseObj, path)\n\n    function impl (data, fn) {\n      let requestPath = action.href\n      const pathParams = action.href.match(/{[^}]+}/g) || []\n\n      if (typeof data === 'function') {\n        fn = data\n        data = undefined\n      }\n\n      let err\n\n      if (this.params.length !== pathParams.length) {\n        err = new Error(`Invalid number of params in path (expected ${pathParams.length}, got ${this.params.length}).`)\n\n        return fn(err)\n      }\n\n      this.params.forEach((param) => {\n        requestPath = requestPath.replace(/{[^}]+}/, param)\n      })\n\n      // check required payload properties\n      if (requiredProps && requiredProps.length > 0) {\n        if (!data) {\n          err = new Error('Missing parameters.')\n        } else {\n          for (let i = 0; i < requiredProps.length; i++) {\n            const prop = requiredProps[i]\n\n            if (typeof data[prop] === 'undefined') {\n              err = new Error(`Missing parameter '${prop}'`)\n              break\n            }\n          }\n        }\n      }\n\n      if (err) {\n        return fn(err)\n      }\n\n      // check payload property types\n      for (const key in properties) {\n        if (data && data[key]) {\n          const type = properties[key].type\n\n          let dataType = typeof data[key]\n\n          if (Array.isArray(data[key])) {\n            dataType = 'array'\n          }\n\n          if (Array.isArray(type)) {\n            if (type.indexOf(dataType) === -1) {\n              err = new Error(`Invalid parameter type. ${key} must be of type: ${type}.`)\n              break\n            }\n          } else if (dataType !== type) {\n            err = new Error(`Invalid parameter type. ${key} must be of type: ${type}.`)\n            break\n          }\n        }\n      }\n\n      if (err) {\n        return fn(err)\n      }\n\n      this.client = this.base\n\n      return this.client.request(action.method, requestPath, data, fn)\n    }\n\n    function promisifed (data, fn) {\n      return promisifyCall(this, impl, data, fn)\n    }\n\n    constructor.prototype[getName(actionName)] = promisifed\n  }\n}\n\nfunction getName (name) {\n  name = name.toLowerCase()\n  name = inflection.dasherize(name).replace(/-/g, '_')\n  name = inflection.camelize(name, true)\n\n  return name\n}\n\nfunction build (baseObj, resources) {\n  const b = new Builder(baseObj, resources)\n\n  b.build()\n}\n\nexports.build = build\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}