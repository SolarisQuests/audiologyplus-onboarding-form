{"ast":null,"code":"const isStream = require('is-stream');\n\n/**\n * Creates an Attachment object.\n * @param {Object} options Buffer representing attachment data\n *                data  - one of:\n *                      - string representing the full file path\n *                      - buffer of the data\n *                      - readable interface (stream)\n *                filename - optionally the filename to be used for the attachment, should be used if passing\n *                           buffer or stream in the data param\n *                contentType - the content type for header info. Should be passed in if using stream for data\n *                knownLength - the known length of the data. Should be passed in if using stream for data\n * @constructor\n */\nclass Attachment {\n  constructor(options) {\n    const data = options.data;\n    if (data) {\n      if (typeof data === 'string' || Buffer.isBuffer(data) || isStream(data)) {\n        this.data = data;\n      }\n    }\n    this.filename = options.filename;\n    this.contentType = options.contentType;\n    this.knownLength = options.knownLength;\n  }\n  getType() {\n    if (this.data) {\n      if (typeof this.data === 'string') {\n        return 'path';\n      } else if (Buffer.isBuffer(this.data)) {\n        return 'buffer';\n      } else if (isStream(this.data)) {\n        return 'stream';\n      }\n    }\n    return 'unknown';\n  }\n}\nmodule.exports = Attachment;","map":{"version":3,"names":["isStream","require","Attachment","constructor","options","data","Buffer","isBuffer","filename","contentType","knownLength","getType","module","exports"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/mailgun-js/lib/attachment.js"],"sourcesContent":["const isStream = require('is-stream')\n\n/**\n * Creates an Attachment object.\n * @param {Object} options Buffer representing attachment data\n *                data  - one of:\n *                      - string representing the full file path\n *                      - buffer of the data\n *                      - readable interface (stream)\n *                filename - optionally the filename to be used for the attachment, should be used if passing\n *                           buffer or stream in the data param\n *                contentType - the content type for header info. Should be passed in if using stream for data\n *                knownLength - the known length of the data. Should be passed in if using stream for data\n * @constructor\n */\nclass Attachment {\n  constructor (options) {\n    const data = options.data\n\n    if (data) {\n      if (typeof data === 'string' || Buffer.isBuffer(data) || isStream(data)) {\n        this.data = data\n      }\n    }\n\n    this.filename = options.filename\n    this.contentType = options.contentType\n    this.knownLength = options.knownLength\n  }\n\n  getType () {\n    if (this.data) {\n      if (typeof this.data === 'string') {\n        return 'path'\n      } else if (Buffer.isBuffer(this.data)) {\n        return 'buffer'\n      } else if (isStream(this.data)) {\n        return 'stream'\n      }\n    }\n\n    return 'unknown'\n  }\n}\n\nmodule.exports = Attachment\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAEC,OAAO,EAAE;IACpB,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAI;IAEzB,IAAIA,IAAI,EAAE;MACR,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIC,MAAM,CAACC,QAAQ,CAACF,IAAI,CAAC,IAAIL,QAAQ,CAACK,IAAI,CAAC,EAAE;QACvE,IAAI,CAACA,IAAI,GAAGA,IAAI;MAClB;IACF;IAEA,IAAI,CAACG,QAAQ,GAAGJ,OAAO,CAACI,QAAQ;IAChC,IAAI,CAACC,WAAW,GAAGL,OAAO,CAACK,WAAW;IACtC,IAAI,CAACC,WAAW,GAAGN,OAAO,CAACM,WAAW;EACxC;EAEAC,OAAOA,CAAA,EAAI;IACT,IAAI,IAAI,CAACN,IAAI,EAAE;MACb,IAAI,OAAO,IAAI,CAACA,IAAI,KAAK,QAAQ,EAAE;QACjC,OAAO,MAAM;MACf,CAAC,MAAM,IAAIC,MAAM,CAACC,QAAQ,CAAC,IAAI,CAACF,IAAI,CAAC,EAAE;QACrC,OAAO,QAAQ;MACjB,CAAC,MAAM,IAAIL,QAAQ,CAAC,IAAI,CAACK,IAAI,CAAC,EAAE;QAC9B,OAAO,QAAQ;MACjB;IACF;IAEA,OAAO,SAAS;EAClB;AACF;AAEAO,MAAM,CAACC,OAAO,GAAGX,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}