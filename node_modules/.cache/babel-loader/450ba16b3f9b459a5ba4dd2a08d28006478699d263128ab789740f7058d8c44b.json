{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\n(function () {\n  var Netmask, ip2long, long2ip;\n  long2ip = function (long) {\n    var a, b, c, d;\n    a = (long & 0xff << 24) >>> 24;\n    b = (long & 0xff << 16) >>> 16;\n    c = (long & 0xff << 8) >>> 8;\n    d = long & 0xff;\n    return [a, b, c, d].join('.');\n  };\n  ip2long = function (ip) {\n    var b, byte, i, j, len;\n    b = (ip + '').split('.');\n    if (b.length === 0 || b.length > 4) {\n      throw new Error('Invalid IP');\n    }\n    for (i = j = 0, len = b.length; j < len; i = ++j) {\n      byte = b[i];\n      if (isNaN(parseInt(byte, 10))) {\n        throw new Error(\"Invalid byte: \" + byte);\n      }\n      if (byte < 0 || byte > 255) {\n        throw new Error(\"Invalid byte: \" + byte);\n      }\n    }\n    return ((b[0] || 0) << 24 | (b[1] || 0) << 16 | (b[2] || 0) << 8 | (b[3] || 0)) >>> 0;\n  };\n  Netmask = function () {\n    function Netmask(net, mask) {\n      var error, error1, error2, i, j, ref;\n      if (typeof net !== 'string') {\n        throw new Error(\"Missing `net' parameter\");\n      }\n      if (!mask) {\n        ref = net.split('/', 2), net = ref[0], mask = ref[1];\n      }\n      if (!mask) {\n        switch (net.split('.').length) {\n          case 1:\n            mask = 8;\n            break;\n          case 2:\n            mask = 16;\n            break;\n          case 3:\n            mask = 24;\n            break;\n          case 4:\n            mask = 32;\n            break;\n          default:\n            throw new Error(\"Invalid net address: \" + net);\n        }\n      }\n      if (typeof mask === 'string' && mask.indexOf('.') > -1) {\n        try {\n          this.maskLong = ip2long(mask);\n        } catch (error1) {\n          error = error1;\n          throw new Error(\"Invalid mask: \" + mask);\n        }\n        for (i = j = 32; j >= 0; i = --j) {\n          if (this.maskLong === 0xffffffff << 32 - i >>> 0) {\n            this.bitmask = i;\n            break;\n          }\n        }\n      } else if (mask) {\n        this.bitmask = parseInt(mask, 10);\n        this.maskLong = 0;\n        if (this.bitmask > 0) {\n          this.maskLong = 0xffffffff << 32 - this.bitmask >>> 0;\n        }\n      } else {\n        throw new Error(\"Invalid mask: empty\");\n      }\n      try {\n        this.netLong = (ip2long(net) & this.maskLong) >>> 0;\n      } catch (error2) {\n        error = error2;\n        throw new Error(\"Invalid net address: \" + net);\n      }\n      if (!(this.bitmask <= 32)) {\n        throw new Error(\"Invalid mask for ip4: \" + mask);\n      }\n      this.size = Math.pow(2, 32 - this.bitmask);\n      this.base = long2ip(this.netLong);\n      this.mask = long2ip(this.maskLong);\n      this.hostmask = long2ip(~this.maskLong);\n      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;\n      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);\n      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;\n    }\n    Netmask.prototype.contains = function (ip) {\n      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {\n        ip = new Netmask(ip);\n      }\n      if (ip instanceof Netmask) {\n        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);\n      } else {\n        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;\n      }\n    };\n    Netmask.prototype.next = function (count) {\n      if (count == null) {\n        count = 1;\n      }\n      return new Netmask(long2ip(this.netLong + this.size * count), this.mask);\n    };\n    Netmask.prototype.forEach = function (fn) {\n      var index, j, k, len, long, range, ref, ref1, results, results1;\n      range = function () {\n        results = [];\n        for (var j = ref = ip2long(this.first), ref1 = ip2long(this.last); ref <= ref1 ? j <= ref1 : j >= ref1; ref <= ref1 ? j++ : j--) {\n          results.push(j);\n        }\n        return results;\n      }.apply(this);\n      results1 = [];\n      for (index = k = 0, len = range.length; k < len; index = ++k) {\n        long = range[index];\n        results1.push(fn(long2ip(long), long, index));\n      }\n      return results1;\n    };\n    Netmask.prototype.toString = function () {\n      return this.base + \"/\" + this.bitmask;\n    };\n    return Netmask;\n  }();\n  exports.ip2long = ip2long;\n  exports.long2ip = long2ip;\n  exports.Netmask = Netmask;\n}).call(this);","map":{"version":3,"names":["Netmask","ip2long","long2ip","long","a","b","c","d","join","ip","byte","i","j","len","split","length","Error","isNaN","parseInt","net","mask","error","error1","error2","ref","indexOf","maskLong","bitmask","netLong","size","Math","pow","base","hostmask","first","last","broadcast","prototype","contains","next","count","forEach","fn","index","k","range","ref1","results","results1","push","apply","toString","exports","call"],"sources":["/Users/sathyamurthyt/Documents/Ai-forms/form-wizard/node_modules/netmask/lib/netmask.js"],"sourcesContent":["// Generated by CoffeeScript 1.10.0\n(function() {\n  var Netmask, ip2long, long2ip;\n\n  long2ip = function(long) {\n    var a, b, c, d;\n    a = (long & (0xff << 24)) >>> 24;\n    b = (long & (0xff << 16)) >>> 16;\n    c = (long & (0xff << 8)) >>> 8;\n    d = long & 0xff;\n    return [a, b, c, d].join('.');\n  };\n\n  ip2long = function(ip) {\n    var b, byte, i, j, len;\n    b = (ip + '').split('.');\n    if (b.length === 0 || b.length > 4) {\n      throw new Error('Invalid IP');\n    }\n    for (i = j = 0, len = b.length; j < len; i = ++j) {\n      byte = b[i];\n      if (isNaN(parseInt(byte, 10))) {\n        throw new Error(\"Invalid byte: \" + byte);\n      }\n      if (byte < 0 || byte > 255) {\n        throw new Error(\"Invalid byte: \" + byte);\n      }\n    }\n    return ((b[0] || 0) << 24 | (b[1] || 0) << 16 | (b[2] || 0) << 8 | (b[3] || 0)) >>> 0;\n  };\n\n  Netmask = (function() {\n    function Netmask(net, mask) {\n      var error, error1, error2, i, j, ref;\n      if (typeof net !== 'string') {\n        throw new Error(\"Missing `net' parameter\");\n      }\n      if (!mask) {\n        ref = net.split('/', 2), net = ref[0], mask = ref[1];\n      }\n      if (!mask) {\n        switch (net.split('.').length) {\n          case 1:\n            mask = 8;\n            break;\n          case 2:\n            mask = 16;\n            break;\n          case 3:\n            mask = 24;\n            break;\n          case 4:\n            mask = 32;\n            break;\n          default:\n            throw new Error(\"Invalid net address: \" + net);\n        }\n      }\n      if (typeof mask === 'string' && mask.indexOf('.') > -1) {\n        try {\n          this.maskLong = ip2long(mask);\n        } catch (error1) {\n          error = error1;\n          throw new Error(\"Invalid mask: \" + mask);\n        }\n        for (i = j = 32; j >= 0; i = --j) {\n          if (this.maskLong === (0xffffffff << (32 - i)) >>> 0) {\n            this.bitmask = i;\n            break;\n          }\n        }\n      } else if (mask) {\n        this.bitmask = parseInt(mask, 10);\n        this.maskLong = 0;\n        if (this.bitmask > 0) {\n          this.maskLong = (0xffffffff << (32 - this.bitmask)) >>> 0;\n        }\n      } else {\n        throw new Error(\"Invalid mask: empty\");\n      }\n      try {\n        this.netLong = (ip2long(net) & this.maskLong) >>> 0;\n      } catch (error2) {\n        error = error2;\n        throw new Error(\"Invalid net address: \" + net);\n      }\n      if (!(this.bitmask <= 32)) {\n        throw new Error(\"Invalid mask for ip4: \" + mask);\n      }\n      this.size = Math.pow(2, 32 - this.bitmask);\n      this.base = long2ip(this.netLong);\n      this.mask = long2ip(this.maskLong);\n      this.hostmask = long2ip(~this.maskLong);\n      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;\n      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);\n      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;\n    }\n\n    Netmask.prototype.contains = function(ip) {\n      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {\n        ip = new Netmask(ip);\n      }\n      if (ip instanceof Netmask) {\n        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);\n      } else {\n        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;\n      }\n    };\n\n    Netmask.prototype.next = function(count) {\n      if (count == null) {\n        count = 1;\n      }\n      return new Netmask(long2ip(this.netLong + (this.size * count)), this.mask);\n    };\n\n    Netmask.prototype.forEach = function(fn) {\n      var index, j, k, len, long, range, ref, ref1, results, results1;\n      range = (function() {\n        results = [];\n        for (var j = ref = ip2long(this.first), ref1 = ip2long(this.last); ref <= ref1 ? j <= ref1 : j >= ref1; ref <= ref1 ? j++ : j--){ results.push(j); }\n        return results;\n      }).apply(this);\n      results1 = [];\n      for (index = k = 0, len = range.length; k < len; index = ++k) {\n        long = range[index];\n        results1.push(fn(long2ip(long), long, index));\n      }\n      return results1;\n    };\n\n    Netmask.prototype.toString = function() {\n      return this.base + \"/\" + this.bitmask;\n    };\n\n    return Netmask;\n\n  })();\n\n  exports.ip2long = ip2long;\n\n  exports.long2ip = long2ip;\n\n  exports.Netmask = Netmask;\n\n}).call(this);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}